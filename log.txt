commit 7f1dff7d05ae503475d023dfd9b9fa54a9f29400
Author: fisher <yyuu51888@163.com>
Date:   Sat Jun 13 17:27:09 2015 -0700

    minor
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index 3cc7cfa..dc75688 100644
--- a/index.html
+++ b/index.html
@@ -17,7 +17,7 @@
     <TD rowSpan=3 width=200 align=right><IMG src="res/yuyue.jpg" width=160 height="153" pagespeed_url_hash="972285866"></TD>
   </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
   <TR>
-    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
+    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software engineering, spanning from mining software repositories and analysing social coding networks.</P>
 	<P>
 	Our new research: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
 	</P>

commit 38dd0d896c6ff55d28f7e053a67c216c9f70f6dd
Author: fisher <yyuu51888@163.com>
Date:   Mon Jun 8 19:56:49 2015 -0700

    apsec best
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index 48679d7..3cc7cfa 100644
--- a/index.html
+++ b/index.html
@@ -115,7 +115,7 @@
 
 		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
 		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
-		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. (Nominated for best paper) 
 		[<A href="res/paper/apsec2014.pdf">pdf</A>]
 		
 		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.

commit 092a1ac79b46bcc4ee576fb6c84939dddeb785cb
Author: fisher <yyuu51888@163.com>
Date:   Tue Apr 28 15:44:44 2015 -0700

    IEEE version of young
---
 ... exploratory study of mention in GitHub PR-IEEE.pdf | Bin 0 -> 321031 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/paper/An exploratory study of mention in GitHub PR-IEEE.pdf b/res/paper/An exploratory study of mention in GitHub PR-IEEE.pdf
new file mode 100644
index 0000000..867bad1
--- /dev/null
+++ b/res/paper/An exploratory study of mention in GitHub PR-IEEE.pdf	
@@ -0,0 +1,599 @@
+                                      2014 21st Asia-Pacific Software Engineering Conference
+
+
+
+
+        A Exploratory Study of @-mention in GitHub’s Pull-requests
+                                         Yang Zhang, Gang Yin, Yue Yu, Huaimin Wang
+                 National laboratory for Parallel and Distributed Processing, National University of Defense Technology
+                                                        Changsha, 410073, China
+                   zhangyanggfkd@gmail.com, jack_nudt@163.com, yuyue_whu@foxmail.com, whm_w@163.com
+
+
+     Abstract—Pull-request mechanism is an outstanding social               beginning. There are many concerns reserved, for instance,
+ development method in GitHub. @-mention is a social media tool             how popular is @-mention in the pull-requests? what kind of
+ that deeply integrated with pull-request mechanism. Recently,              differences in the complexity between the pull-requests with
+ many research results show that social media tools can promote             @-mention and the pull-requests without @-mention? to what
+ the collaborative software development, but few work focuses on            extent does @-mention support developers’ collaboration in
+ the impacts of @-mention. In this paper, we conduct an                     the pull-requests?
+ exploratory study of @-mention in pull-request based software
+ development, including its current situation and benefits. We                  In this paper, we conduct an exploratory study of @-
+ obtain some interesting findings which indicate that @-mention             mention in GitHub’s pull-requests. By using the qualitative and
+ is beneficial to the processing of pull-request. Our work also             quantitative approaches, we obtain some insights of @-mention
+ proposes some possible research directions and problems of the             in the pull-request based software development. Our results
+ @-mention. It helps the developers and researchers notice the              indicate that, @-mention plays an important role in facilitating
+ significance of @-mention in the pull-request based software               the developers’ collaboration by reducing the delay time in the
+ development.                                                               processing of pull-request. However, we find that @-mention
+      Keywords—pull-request; social media; @-mention                        is not widely used in the pull-requests, and the current
+                                                                            mechanisms in @-mention do not visibly improve the
+                          I. INTRODUCTION                                   productivity of the collaborative development. For instance, we
+                                                                            find that developers could not @ the suitable developers
+    Pull-request as implemented by GitHub1 in particular, is a              effectively and easily when they are unfamiliar with each other.
+ new model for collaborating on distributed software                        Based on the study, we propose some possible research
+ development [1]. It attracts more and more external developers             directions of @-mention which might be worth being invested
+ to contribute their code and suggestions to core developers.               to improve the pull-request based software development.
+ GitHub is a social collaborative software development
+ community. The platform integrates many social media tools                    In summary, our main contributions in this paper include:
+ involving follow [2], watch [2], comment action [3] and @-
+ mention. It upgrades the pull-request to a socialized                         1) To the best of our knowledge, we are the first to give a
+ development model.                                                         quantitative and qualitative study on @-mention in pull-
+                                                                            requests. This study gives some important implications for the
+     @-mention allows developers to reference a specific user in            developers to make better use of @-mention in GitHub.
+ the pull-requests by simply placing a “@” symbol in front of
+                                                                               2) We analyze the correlation between the specific location
+ the username they wish to reference [4]. Compared to follow,
+                                                                            of @-mention and the cost time in the processing of pull-
+ watch and other general social media like wikis [5], blogs [6]
+                                                                            request. Our observation can be used to guide the software
+ and microblogs [7], @-mention usually comes from the pull-
+                                                                            developers to use the @-mention in the right location.
+ request’s description body or the pull-request’s comments,
+ which makes it more deeply involved in the processing of pull-                3) We propose some promising research directions and
+ request.                                                                   problems, which would guide future software engineering tool
+                                                                            innovations as well as practices.
+     Previous work has identified the impact of social media on
+ software development. They found that social media plays an                    The remainder of this paper is structured as follows.
+ increasingly important role in software engineering research               Section II describes related work. In Section III, we introduce
+ and practice [8]. It has changed the way that people collaborate           the related concepts and our research questions. Section IV
+ and share information [9]. In addition, social media could                 presents our empirical study methodology, and Section V
+ enable better communication through the process of the                     presents results of the study. We discuss findings based on the
+ software system development [10]. Basically, these researches              study in Section VI. Threats to validity are discussed in Section
+ mainly focused on the correlation between the general social               VII. We conclude the article in Section VIII.
+ media and the overall software development. @-mention has
+ been proved as a significant factor in enlarging the visibility of                               II. RELATED WORK
+ a post and helping initiate responses and conversations [11].                  In earlier studies, there are many socially related
+ However, for the current situation and benefits of @-mention               technologies used in the software development context. Social
+ in GitHub’s pull-requests, we still lack a comprehensive                   technologies make it possible to leverage articulated social
+ understanding, which makes the work still at the very                      networks and observed code-related activity simultaneously,
+  1
+   Https://github.com/                                                      which supports the type of awareness that only available to
+
+1530-1362/14 $31.00 © 2014 IEEE                                       366
+                                                                      343
+DOI 10.1109/APSEC.2014.58
+core developers in previous. In order to enhance the
+collaboration in software development, some research
+proposed the tagging [12], searchable graphs of heuristically
+linked artifacts [13], and workspace awareness [14] to support
+the coordination. What’s more, Louridas P [5] find that wikis
+are used to support defect tracking, documentation,
+requirements tracking, test case management and for the
+creation of project portals. Park S et al. [6] proved that blogs
+are frequently used by developers to document “how-to”
+information, to discuss the release of new features and to
+support requirements engineering. Riemer K and Richter A [7]
+argued that decision makers should vest trust in their
+employees in putting microblogging to productive use in their                               (a) pull-request review comments
+group work environments. Ahmadi et al. [15] find that today’s
+generation of developers frequently makes use of social media,
+to augment tools in their development environments. As
+mentioned from O'reilly T [16], social media tools can be
+characterized by an underlying “architecture of participation”
+                                                                                                 (b) commit comments
+that supports crowdsourcing as well as a many-to-many
+broadcast mechanism. Storey M A et al. [8] investigated the
+benefits, risks and limitations of using social media in
+software development at the team, project and community
+levels. Julia Kotlarsky et al. [17] find that social ties and
+knowledge contribute to successful collaboration in globally
+distributed information system development teams. In their                                         (c) issue comments
+study, they made the point that human-related issues involving                     Fig. 1. Three type of comments in the pull-requests
+rapport and transactive memory were important for
+collaborative work in the software development. Black S et al.           profile. In addition to the link function, after @-mentioning
+[10] described the preliminary results of a pilot survey                 somebody, the @-mentioned person could receive a reminder
+conducted to collect information on social media use in global           to help himself respond immediately. In the pull-requests of
+software systems development and find that social media can              GitHub, there are three locations of @-mention: pull-request’
+enable better communication through the software system                  title, pull-request’s description body (pull-request’s body) and
+development process. In particular, their research results               pull-request’s comments. It should be mentioned that @-
+showed that 91% of respondents said that the social media has            mention in the pull-request’s title does not have the link
+improve their working life.                                              function because it is just a text, not like the others. So in our
+                                                                         study, we only discuss the @-mention that used in the body
+    These previous researches basically focused on the                   and in the comments.
+correlation between the general social media and the overall
+software development. Although Yang et al. [18] have a                       In fact, there are three type of comments in the pull-
+primary investigation of @-mention in the Ruby on Rails, we              requests: pull-request review comments, commit comments
+are not aware of any in-depth empirical study dedicated in               and issue comments. Pull-request review comments are
+such claim. It inspires us to put forward a comprehensive                comments on a portion of the diff patch like Fig.1(a). They are
+analysis of @-mention in the pull-requests of GitHub.                    applied directly to the detailed modification. Commit
+                                                                         comments are comments on a commit like Fig.1(b). They are
+           III. PRELIMINARIES & PROBLEM DEFINITION                       out of the pull-request review comments. Issue comments are
+                                                                         comments on a pull-request itself like Fig.1(c). They are out of
+   In this section, we briefly introduce the @-mention and               the commit comments.
+propose our research questions.
+                                                                         B. Research Questions
+A. @-mention
+                                                                             In order to have a detailed research, we formulate research
+    @2, normally read as “at”, is the meaning of “located at”            questions within three categories: quantity related questions,
+or “directed at”, especially in email addresses such as                  quality related questions and effect related questions.
+tom@example.com (the tom located at site the example.com).
+In recent year, more and more online social media, without                  RQ1: To what extent is @-mention used in the pull-
+threaded discussions, use @ to denote a reference or a reply,            request paradigm?
+such as Facebook3, Twitter4. The feature of @-mention
+                                                                             In answer to this research question, we investigate the
+enables users to directly reference others by putting a “@”
+                                                                         distribution of @-mention in different locations and different
+symbol before their username such as “@Tom”. Then @-
+                                                                         scenarios. Then we statistic the utilization of @-mention in
+mention can automatically interpret these as links to the user’s
+                                                                         different type of pull-requests.
+2
+ Http://en.wikipedia.org/wiki/@
+3
+ Https://www.facebook.com/                                                  RQ2: What kind of differences are there between the pull-
+4
+ Https://www.twitter.com/                                                requests with and without @-mention?
+
+
+
+
+                                                                   344
+                                                                   367
+   In this question, we mainly focus on the following                                                      merged                reopened
+characteristics of pull-requests: the number of commits, the
+number of comments, and the number of participants (pull-                                         opened       syncrhonized       closed
+requests’ submitters and comments’ submitters), as well as the
+handling time.
+    RQ3: How well do @-mention in the pull-requests support                              Fig. 3. Different states in a pull-request’s lifecycle
+the developers for communication? Does the specific location                  formation of pull-requests and comments from GHTorrent to
+of @-mention impact the processing of pull-request?                           build the basic PR dataset. Then, we extract the missing body
+    For answering the questions, we give a detailed                           information from GitHub Archive to build the additional Body
+investigation about the impact of @-mention, as well as its                   dataset. Finally, we combine the two datasets with the unique
+specific location on different cost time in the processing of                 pull-request ID to build our final Research dataset. In this
+pull-request.                                                                 dataset, the missing information of pull-requests is complete.
+                                                                              This is a tough and tedious process, which might be one
+                         IV. METHODOLOGY                                      reason for there are few researches that investigated the @-
+                                                                              mention in the pull-requests.
+    In this section, we give our datasets, the preprocessing and
+the statistical measurements.                                                     For avoiding disturbances, we mainly analyze the data of
+                                                                              3587 projects (not deleted). These projects contain at least 100
+A. Datasets
+                                                                              pull-requests. They cover 53 different program languages. As
+   Our empirical study is based on the combination of two                     shown in Table I, Top-5 program languages contain 67% of
+famous datasets: GitHub Archive and GHTorrent.                                projects. Where the symbol # indicates counting.
+   GitHub Archive5, githubarchive.org, records the public                                TABLE I.           THE TOP-5 PROGRAM LANGUAGES
+developing activities on the Git repositories stored on GitHub.                       Language      JavaScript      Ruby      Python   Java   PHP
+The activities are aggregated in hourly archives, providing 18                        #Project         678          475        460     424    362
+events types involving new commits, fork, commenting,
+adding members etc. The Archive encodes these events into a                       As shown in Fig.3, in a pull-request’s lifecycle, there are
+Json file. The contents of the file consist of Json objects                   five states: opened, synchronized, merged, closed and
+appended one after the each. During our work, we download                     reopened. When a pull-request’s processing is finished, it
+and parse the Archive data from January 2013 to March 2014.                   must be closed but not necessarily be merged. Besides, in our
+The full volume of these Archive data is approximately                        study, we consider that reopening a closed pull-request should
+160GB representing over 100 million events.                                   not be considered, since it is not a common practice and it is
+                                                                              not easily detectable. So we only focus on the processing of a
+    GHTorrent6, ghtorrent.org, is a scalable, offline mirror of               pull-request from its opened state to its first closed state.
+the data offered through the GitHub Rest API [19]. The                        Because of the above reasons, in our dataset, we select the
+GHTorrent already offer data dumps of both its raw data that                  744684 closed pull-requests out of the total 1038117 pull-
+stored in MongoDB (currently more than 2TB), and metadata                     requests. After removing the invalid data such as comment-
+that stored in MySQL (currently more than 20GB) [20]. After                   timestamp earlier than open-timestamp or open-timestamp
+downloading and parsing the database dump, we can get                         later than closed-timestamp, we obtain 724623 pull-requests.
+almost all of the development information of the repositories                 Because there are some projects, all of their pull-requests are
+in the GitHub like commits, issues, pull-requests, projects and               submitted by one type of developers: core developers or
+users. This process is very time consuming.                                   external developers. We filter out these unbalanced projects.
+B. Preprocessing                                                              Finally, we collect 566538 closed pull-requests from 2006
+                                                                              projects for the later analysis and research.
+    In order to extract the information of @-mention from the
+comments (pull-request review comments, commit comments                       C. Statistical Measurements
+and issue comments), we need to preprocess our datasets. In                       In our study, the statistical measurements include:
+the GHTorrent, issue comments’ description bodies and pull-
+requests’ bodies are missing. However, in the GitHub Archive,                 1) Cost time in pull-requests
+the body information is not lost. Fig.2 shows our approaches                     During a typical pull-request’s processing, we divide the
+for solving the missing problem. First, we extract the basic in-              cost time into 3 parts:
+
+     GitHub
+                    pull-requests   bodies                                        a)Time To Handle (TTH): The time interval between a
+     Archive        & comments      bodies   Body dataset                     pull-request is opened and closed. The follows is defined for a
+                                                                              generic pull-requests p.
+                       pull-request ID                       Research
+                                                              dataset                ܶܶ‫݌݉ܽݐݏ݁݉݅ݐ = )݌(ܪ‬௖ (‫݌݉ܽݐݏ݁݉݅ݐ − )݌‬௢ (‫)݌‬                       (1)
+                       pull-requests &
+    GHTorrent            comments                                                b)Delay Before Comment (DBC): The time interval
+                                              PR dataset
+                                                                              between a pull-request is opened and it receives the first
+          Fig. 2. Overview of our final dataset forming approach              comment.
+5
+6
+ Http://www.githubarchive.org/                                                    ‫݌݉ܽݐݏ݁݉݅ݐ = )݌(ܥܤܦ‬௙௜௥௦௧ି௖ (‫݌݉ܽݐݏ݁݉݅ݐ − )݌‬௢ (‫)݌‬                    (2)
+ Http://ghtorrent.org/
+
+
+
+
+                                                                        345
+                                                                        368
+   c)Delay In Comments (DIC): The time interval between a
+comment x and its next comment y.
+      ‫݌݉ܽݐݏ݁݉݅ݐ = )݌(ܥܫܦ‬௖ି௬ (‫݌݉ܽݐݏ݁݉݅ݐ − )݌‬௖ି௫ (‫)݌‬            (3)
+2) Statistics tests
+    In the analysis of statistical significance between the
+distributions of pull-requests with @-mention and without @-
+mention, we use Mann-Whiney-Wilcoxon test, Z test and
+Cliff’s δ. Those statistics tests are non-parametric statistical
+                                                                                               (a) Specific location of @-mention
+hypothesis tests. They do not assume any specific distribution,
+which is a suitable property for our experimental analysis.
+    a)Mann-Whiney-Wilcoxon (MWW) test: In the MWW test,
+there are two independent samples X and Y, of size ܰଵ and ܰଶ                                   (b) Specific scenario of @-mention
+respectively. First, the two samples are combined into an                             Fig. 4. Distribution of @-mention in the pull-requests
+ascending order list where data points with identical values are          26% @-mention come from the pull-requests’ bodies. 74% @-
+assigned the same rank. Then, the test sums the ranks of data             mention come from the pull-requests’ comments: issue
+points in the first sample X. We denote this sum as T. By using           comments (89.2%), pull-requests review comments (10.3%),
+the MWW test, we can evaluate whether these samples are                   and commit comments (0.5%). We divide the scenarios of @-
+drawn from the same distribution. The following is the                    mention into two kinds: “review @” (the pull-requests’
+formula for computing Mann-Whitney U for X:                               submitters @ other developers for review) and “question @”
+                                     ேభ (ேభ ାଵ)                           (the comments’ submitters @ the pull-requests’ submitters for
+                      ܷ = ܰଵ ܰଶ +                 −ܶ          (4)         question). Fig.4(b) shows that 78% @-mention are used for
+                                            ଶ
+                                                                          review. This indicates that most @-mention are used by the
+    Where U is computed to determine the p-value. If the
+                                                                          pull-requests’ submitters for review. They are mainly used in
+significance level α is 0.001, p-value less than α means the test
+                                                                          the pull-request’s body and the issue comments.
+rejects the null hypothesis, which verifies that the two samples
+have different distributions at the significance level of 0.001.              Then, we discuss the utilization of @-mention by
+                                                                          considering two type of pull-request contributions: internal
+    b)Z test: Z test is generally used for comparing the mean
+                                                                          contributions and external contributions. Internal contributions
+difference of large samples (size > 30). Considering the two
+                                                                          are pull-requests submitted by core developers (project
+samples X and Y described above, their mean values are
+              ത       ത                                                   members). External contributions are pull-requests submitted
+denoted as ܺ and ܻ , their standard deviation values are
+                                                                          by external developers (not project members). It should be
+denoted as ܵଵ and ܵଶ . Z is calculated by the following formula:          noted that in our study, we consider that @-mention is used in
+                                     ത ത
+                                     ௑ ି௒                                 a pull-request, as long as the pull-request has one or more
+                         ܼ=                                   (5)
+                              ටௌభ మ /ேభ ାௌమ మ /ேమ                         valid @-mention operation. Similarly, we discuss the
+                                                                          percentage of @-mention used in the comments, as long as
+    Where |ܼ| ≥ 2.58 means the difference is “very                        one of the three type of comments has @-mention.
+significant”, |ܼ| ≥ 1.96 means “significant”, |ܼ| < 1.96                  TABLE II.        UTILIZATION OF @-MENTION IN DIFFERENT CONTRIBUTIONS
+means “not significant”.
+                                                                                                   Total              Internal           External
+   c)Cliff’s δ: Cliff’s δ is a non-parametric effect size                                       #PR     Ratio       #PR     Ratio      #PR     Ratio
+                                                                           have comments      245989 43.4%        106296 39.0%       139693 47.6%
+measure that quantifies the amount of difference between two               @ in comments       53950   21.9%       24438    23.0%     29512    21.1%
+samples. The following is the formula for computing δ for X                  have body        395384 69.8%        177317 65.0%       218067 74.3%
+and Y described above:                                                       @ in body         19713     5.0%      12779     7.2%     6934      3.2%
+                                                                             @ in total        68625   12.1%       33971    12.5%     34654    11.8%
+                              #(௑வ௒)ି#(௑ழ௒)
+                         ߜ=                                   (6)
+                                    ேభ ேమ                                     Based on our statistics, there are 272847 internal
+    Where |ߜ| < 0.147 means the difference is “negligible”,               contributions and 293691 external contributions. Table II
+|ߜ| < 0.33 means “small”, |ߜ| < 0.474 means “medium”,                     shows the utilization of @-mention in different contributions.
+otherwise means “large”.                                                  In total, only 12.1% pull-requests have @-mention. This
+                                                                          indicates that @-mention is not widely used in the pull-
+                      V. EMPIRICAL EVALUATION                             requests.
+    In this section, we present the results of our empirical                  In our opinion, the description body is better reflecting the
+study. These results are reported as responses to the research            purpose of a pull-request. But from our results, we find that
+questions that were provided in Section III-B.                            the percentage of @-mention used in the body is 5.0%, less
+                                                                          than the value of @-mention used in the comments (nearly
+A. RQ1: Current situation of @-mention                                    22.0%). The current @-mention is manually used by
+    As mentioned in Section III-A, @-mention is usually used              developers. So we assume that if the pull-request’s submitter
+in the pull-request’s body, pull-request review comments,                 is unfamiliar with the suitable reviewers, it is difficult to
+commit comments or issue comments. As shown in Fig.4(a),                  decide to @ whom at the time of the pull-request be submitted.
+
+
+
+
+                                                                    346
+                                                                    369
+While, along with the discussion, the other participants may
+help solve this “@ whom” problem. In our study, we find that
+60.2% @-mentioned developers come from the internal group.
+In particular, this effect is more remarkable among the
+external contributions (nearly 79.0%). It proves that @-
+mention is generally used to @ the internal developers. So it is
+easier for the internal developers to @ the suitable reviewers
+than the external developers because these internal developers
+are familiar with each other. This indicates that the current
+mechanisms in @-mention bring some usage problems to the                                  Fig. 5. Number of commits and @-mention
+developers, especially in the external contributions.
+    RQ1: @-mention is not widely used in the pull-
+ requests. The utilization of @-mention indicates that
+ there may be some weakness of the current mechanisms
+ in @-mention, especially in the external contributions.
+B. RQ2: The characteristics of pull-requests with @-mention
+    In this investigation, we mainly focus on the following
+characteristics of pull-requests: the number of commits, the
+number of comments, the number of participants and the                                    Fig. 6. Number of comments and @-mention
+handling time (TTH). In order to give a clear description of
+our results, we use the R statistical analysis boxplots tool in
+our study. In the boxplot, there are 5 main horizontal lines.
+From top to bottom, the top line indicates the max value. The
+second line indicates the upper quartile (25% of data points
+are above this line). The third line indicates the median value
+of the dataset. The fourth line indicates the low quartile (25%
+of data points are below this line). The bottom line indicates
+the min value. All data points above the top line or below the
+bottom line are outliers (determined by the tool).                                       Fig. 7. Number of participants and @-mention
+1) The number of commits
+    Fig.5 shows the distribution of the number of commits in
+pull-requests with @-mention and without @-mention. The
+average number of commits is 4.1 (median: 1.0) for pull-
+requests without @-mention, while the number is raised to 5.4
+(median: 2.0) for pull-requests with @-mention. Using the
+statistical test, we verify that the difference between the two
+groups is statistically significant (p<0.001, z=17.8, δ=0.17).
+This indicates that pull-requests with @-mention is more
+                                                                                          Fig. 8. TTH of pull-requests and @-mention
+likely to have more commits.
+                                                                             tically different (p<0.001, z=202.2, δ=0.64). This indicates
+2) The number of comments                                                    that pull-requests with @-mention is more likely to have
+    Fig.6 shows the distribution of the number of comments in                more participants.
+pull-requests with @-mention and without @-mention. The
+average number of comments is 1.0 (median: 0) for pull-                      4) TTH
+requests without @-mention, while the number is raised to 7.2                    Fig.8 shows the distribution of TTH in pull-requests with
+(median: 4.0) for pull-requests with @-mention. We test and                  @-mention and without @-mention. The average TTH is
+confirm that the two distributions are significantly different               101.5 hours (median: 2.2 hours) for pull-requests without @-
+using the statistical test (p<0.001, z=131.9, δ=0.71). This                  mention, while the time is raised to 350.8 hours (median: 26.7
+indicates that pull-requests with @-mention is more likely to                hours) for pull-requests with @-mention. The result of
+have more comments.                                                          statistical tests reveals that the difference is statistically
+                                                                             significant (p<0.001, z=57.2, δ=0.43). This indicates that pull-
+3) The number of participants                                                requests with @-mention is more likely to need more time to
+    Fig.7 show the distribution of the number of participants in             deal with.
+pull-requests with @-mention and without @-mention. The
+average number of participants is 1.4 (median: 1.0) for pull-                    In order to further investigate the impact of @-mention on
+requests without @-mention, while the number is raised to 2.8                the TTH, we statistic the percentage of pull-requests with @-
+(median: 2.0) for pull-requests with @-mention. In our                       mention and without @-mention in different TTH. As shown
+statistical test, we test and confirm that the difference is statis-         in Fig.9, we find that with the growing of TTH, the percentage
+
+
+
+
+                                                                       347
+                                                                       370
+of pull-requests with @-mention is increasing. The gap of
+TTH between the pull-requests with @-mention and without
+@-mention is gradually reduced. If we consider the TTH as a
+measurement of the pull-request’s complexity, it further
+indicates that @-mention is more likely to be used in the
+complex pull-requests.
+                                           100
+                                                                                                      with @-mention
+                                           90                                                         without @-mention
+
+                                           80
+                                                                                                                                                Fig. 10. DBC of pull-requests and @-mention
+         Percentage of Pull-requests (%)
+
+
+
+
+                                           70
+
+
+                                           60
+
+
+                                           50
+
+
+                                           40
+
+
+                                           30
+
+
+                                           20
+
+
+                                           10
+
+
+                                            0
+                                             <1   1-5   6-10   11-20 21-30 31-40 41-50 51-60 61-70 71-80 81-90 91-100 >100
+
+                                                                       TTH of Pull-requests(day)
+                                                                                                                                                Fig. 11. DIC of pull-requests and @-mention
+
+                                     Fig. 9. Percentage of pull-requests with different TTH                                            We collect 141484 pull-requests which have two or more
+                                                                                                                                   comments. Based on this dataset, we find that the average DIC
+    RQ2: @-mention is more likely to be used in those                                                                              of pull-requests with @-mention in their comments is 57.2
+ complex pull-requests which have more commits, more                                                                               hours (median: 1.8 hours). While the average DIC of pull-
+ comments, more participants and longer TTH.                                                                                       requests without @-mention in their comments is raised to
+C. RQ3: The impact of @-mention on the processing of pull-                                                                         77.5 hours (median: 2.4 hours). Fig.11 shows the DIC of pull-
+request                                                                                                                            requests. It shows that the pull-requests without @-mention in
+                                                                                                                                   their comments need a little more DIC than those pull-requests
+    To utilize @-mention in the pull-requests effectively, we                                                                      with @-mention. This indicates that @-mention used in the
+need to find out what effect of @-mention to the cost time in                                                                      comments is useful for reminding the developers to reply. It
+the processing of pull-request. We consider this issue from                                                                        is a convenient tool in the developers’ conversation.
+three aspects: DBC, DIC and TTH. Furthermore, we discuss
+the correlation between the location of @-mention and the                                                                          3) TTH
+TTH of pull-requests.                                                                                                                  As mentioned above, there are 78% @-mention which are
+1) DBC                                                                                                                             used for review in the pull-requests. So the number of
+                                                                                                                                   reviewers (participants except the pull-request’s submitter) is
+    In this study, we only discuss @-mention which is used in                                                                      an important factor to illustrate the characteristic of pull-
+the pull-request’s body. We investigate whether @-mention is                                                                       request’s processing. In this investigation, we compare the
+useful for reducing the delay-before-comment (DBC) in the                                                                          difference of TTH between the pull-requests with @-mention
+processing of pull-request. We consider the first comment as                                                                       and without @-mention when they have the same number of
+the beginning of developers’ collaboration. So it is better to                                                                     reviewers.
+have a DBC as shorter as possible.
+                                                                                                                                       In fact, there are many pull-requests with a minimal TTH.
+    As shown in Fig.10, the average DBC of pull-requests                                                                           Since they are closed quickly, the impact of @-mention on the
+with @-mention in their bodies is 37.2 hours (median: 0.8                                                                          TTH is hard to analyze. In addition, the percentage of @-
+hours). While the average DBC of pull-requests without @-                                                                          mention usage is bigger in those complex pull-requests as
+mention in their bodies is raised to 78.0 hours (median: 1.4                                                                       outlined in RQ2. In order to reduce the interference of easier
+hours). We can find that @-mention used in the pull-request’s                                                                      pull-requests, we only discuss the 69096 pull-requests whose
+body can reduce the delay time before the first comment. This                                                                      TTH are more than 5 days (this percentage of pull-requests
+indicates that @-mention used in the pull-request’s body can                                                                       with @-mention is more than 20% as shown in Fig.9).
+enlarge the visibility of the pull-request. It helps the @-
+mentioned developers find and respond the pull-request                                                                                 Based on our statistics, as shown in Table III, we find that
+quickly.                                                                                                                           the average TTH of pull-requests with @-mention is basically
+2) DIC                                                                                                                             less than the value of pull-requests without @-mention. This
+                                                                                                                                   indicates that considering these pull-requests reviewed by the
+    In this study, we only discuss @-mention which is used in                                                                      same number of reviewers, the pull-requests with @-mention
+the pull-request’s comments. We investigate whether @-                                                                             need shorter handling time. Furthermore, with the increasing
+mention is useful for reducing the delay-in-comment (DIC) in                                                                       of reviewer’s quantity, the gap of TTH is widening (maximum:
+the processing of pull-request. A conceivable hypothesis is                                                                        1398.3 hours, nearly 2 month). In particular, in the external
+that @-mention used in the comments can remind the @-                                                                              contributions, the max gap is 2180.4 hours (nearly 3 month).
+mentioned developers to respond immediately.
+
+
+
+                                                                                                                             348
+                                                                                                                             371
+This saving time is very valuable in the current software                                             VI. FINDINGS
+development.                                                                   Based on the study, we draw some findings with the
+ TABLE III.   DIFFERENCE BETWEEN PULL-REQUESTS WITH @-MENTION               expectation of supporting related researches in the future:
+     AND WITHOUT @-MENTION IN DIFFERENT NUMBER OF REVIEWERS
+                                                                            A. @-mention is a very useful social media tool in the pull-
+  #Reviewers        With @-mention              Without @-mention
+               #PR    Ratio     Avg.         #PR    Ratio     Avg.          requests.
+                             TTH(hrs)                      TTH(hrs)             As the results indicate, @-mention used in a pull-request’s
+      0        354     0.12     592.2       2609     0.88     771.6
+      1        4681    0.18     833.0       20838    0.82     912.9
+                                                                            body can enlarge the visibility of the pull-request and reduce
+      2        6117    0.46    1018.2       7240     0.54    1237.1         the delay time before the first comment. @-mention used in a
+      3        3916    0.65    1172.3       2082     0.35    1486.6         pull-request’s comments can facilitate the developers’
+      4        1991    0.76    1510.1        632     0.24    1665.1         discussion by reducing the delay time in the comments.
+      5        1046    0.82    1879.4        223     0.18    2068.1
+      6        470     0.88    2215.1         67     0.12    1726.4
+                                                                            Furthermore, if two pull-requests reviewed by the same
+      7        221     0.91    2486.1         21     0.09    3757.4         number of developers, the pull-request with @-mention need
+      8        140     0.92    2396.1         12     0.08    3784.4         shorter handling time than the pull-requests without @-
+4) The correlation between the location of @-mention and the                mention. Therefore, in GitHub, @-mention plays an
+TTH                                                                         important role in the pull-request based software
+                                                                            development.
+   Furthermore, we analyze whether the specific location of
+@-mention affect the TTH of pull-requests. From our statistics,             B. Mechanisms need be provided to support developers use
+we find that the average TTH of pull-requests with @-mention                @-mention.
+only used in their bodies is 77.6 hours TTH (median: 3.3                       Our study find that @-mention is an efficient tool but not
+hours). While the value is raised to 171.4 hours (median: 29.8              widely used in the pull-requests, especially in the external
+hours) for pull-requests with @-mention only used in the pull-              contributions. An important reason is that the current @-
+request review comments. The average TTH is 450.4 hours                     mention are manually used by the developers. It is difficult for
+(median: 43.6 hours) for pull-requests with @-mention only                  the developers to @ the suitable developers when they are
+used in the issue comments. For the pull-requests with @-                   unfamiliar with each other. In addition, our results show that
+mention only used in the commits comments, the average                      complex pull-requests are more likely to have @-mention, but
+TTH is 719.8 hours (median: 124.7 hours). Fig.12 shows the                  the current mechanisms in @-mention do not support the
+TTH of pull-requests with @-mention used in different places.               development collaboration well. Therefore, mechanisms for
+                                                                            helping developers use @-mention in the pull-requests easily
+    We find that pull-requests with @-mention used in their
+                                                                            and effectively are needed. For instance, when a developer
+bodies have fewer TTH, because @-mention can accelerate
+                                                                            puts an “@” in a pull-request’s comment, the platform should
+the beginning of developers’ collaboration as described in the
+                                                                            automatically list some suitable developers for @-mentioning.
+discussion of DBC. And @-mention used in the pull-request
+review comments have more excellence to reduce the TTH                      C. @-mentin has many possible research directions.
+compared to other comments. One explanation is that the pull-                  Through our study, we find that @-mention has following
+request review comments are more direct to the specific                     meaningful research directions:
+content of the pull-requests than other comments as described
+in Section II-B. This indicates that the location of @-mention                  1)Knowing the development activities of developers. For
+has an apparent influence to the TTH of pull-requests. More                 instance, our investigation shows that the locations of @-
+direct to the specific content of pull-requests, more beneficial            mention have different effect to the pull-request’s processing.
+to the processing of pull-request. This also guides the                     The more direct to the pull-request’s content, the more useful
+developers where to use the @-mention to reduce more delay                  for reducing delay time. This indicates that the developers’
+time in the processing of pull-request.                                     development activities need focus on the pull-request’s inside,
+                                                                            such as a specific diff patch in a commit file.
+                                                                                2)Mining developers’ relationship and characteristics in
+                                                                            GitHub. @-mention builds a social network among the
+                                                                            developers, which contain rich information for mining. By
+                                                                            analyzing this “@ network”, we can find out the developers’
+                                                                            relationship and characteristics. For instance, the frequently
+                                                                            @-mentioned developer may be the expert in the domain.
+                                                                                3)Assigning more suitable reviewers. In fact, the process
+          Fig. 12. Prevalence of TTH for location of @-mention              of assigning pull-requests to developers is done manually by
+    RQ3: @-mention can better support the pull-                             the manager. It is a time consuming process. Also the manager
+ request processing by reducing the delay time in                           can only assign one developer to review the pull-request.
+ developers’ collaboration. The locations of @-mention                      According to our statistics, the percentage of assigned pull-
+ have different effect to the processing of pull-request.                   requests in our datasets is just 0.89%. This indicates that it is a
+                                                                            tedious and tough job for manager to assign the suitable
+                                                                            reviewers. If we consider @-mention as recommending highly
+                                                                            relevant reviewers to review the pull-requests, it is largely
+
+
+
+
+                                                                      349
+                                                                      372
+cutting down the workload of the project managers because                         [2] Tsay J, Dabbish L, and Herbsleb J D, “Social media in transparent work
+more developers can help do this assigning work. Furthermore,                          environments,” in Proc. of the 6th International Workshop on
+                                                                                       Cooperative and Human Aspects of Software Engineering (CHASE),
+compared to the traditional assigning method, @-mention                                2013, pp. 65-72.
+takes more reviewers into account. It makes the reviewing                         [3] Dabbish L, Stuart C, Tsay J, and Herbsleb J, “Social coding in GitHub:
+work of pull-requests more efficient and time-saving.                                  transparency and collaboration in an open software repository,” in Proc.
+                                                                                       of the ACM 2012 conference on Computer Supported Cooperative Work,
+                    VII. THREATS TO VALIDITY                                           2012, pp. 1277-1286.
+                                                                                  [4] Meeder B, Tam J, Kelley P G, and Cranor L F, “RT@ IWantPrivacy:
+A. Internal validity                                                                   Widespread violation of privacy settings in the Twitter social network,”
+    Our statistical analysis uses the number of commits etc. as                        in Proc. of the Web, vol. 2, 2010.
+                                                                                  [5] Louridas P, “Using wikis in software development,” Software, vol. 23,
+measurements to verify the characteristics of pull-requests                            no. 2, pp. 88-91, 2006.
+with @-mention. Future work is needed on analyzing the                            [6] Park S and Maurer F, “The role of blogging in generating a software
+number of files changed and the code churn of a pull-request.                          product vision,” in Proc. of the ICSE’09 Workshop on Cooperative and
+                                                                                       Human Aspects on Software Engineering, 2009, pp. 74-77.
+B. External validity                                                              [7] Riemer K and Richter A, “Tweet inside: Microblogging in a corporate
+    The abnormal pull-requests are the pull-requests that                              context,” in Proc. of the 23rd Bled eConference, 2010, pp. 1-17.
+                                                                                  [8] Storey M A, Treude C, van Deursen A, and Cheng L T, “The impact of
+contain a few simple modifications but have a long handling                            social media on software engineering practices and tools,” in Proc. of the
+time. Although we have filtered out the unbalanced projects in                         FSE/SDP workshop on Future of software engineering research, 2010,
+our datasets, the datasets still contain some projects that have                       pp. 359-364.
+some abnormal pull-requests. This may lead to bias in our                         [9] Begel A, DeLine R, and Zimmermann T, “Social media for software
+survey.                                                                                engineering,” in Proc. of the FSE/SDP workshop on Future of software
+                                                                                       engineering research, 2010, pp. 33-38.
+                         VIII. CONCLUSIONS                                        [10] Black S, Harrison R, and Baldwin M, “A survey of social media use in
+                                                                                       software systems development,” in Proc. of the 1st Workshop on Web 2.0
+    The goal of this study is to obtain a deep understanding of                        for Software Engineering, 2010, pp. 1-5.
+@-mention in the GitHub’s pull-requests, including its current                    [11] Vega, Edgardo, Ramanujam Parthasarathy, and Josette Torres. “Where
+situation and benefits. The study indicates that @-mention is a                        are my tweeps?: Twitter usage at conferences,” Paper, Personal
+                                                                                       Information, pp. 1-6, 2010.
+useful social media tool for developers’ collaboration in the                     [12] Storey M, Ryall J, Singer J, Myers D, Cheng L T, and Muller M, “How
+pull-request based software development. However, by                                   software developers use tagging to support reminding and refinding,”
+statistical analysis, we find that the current mechanisms in @-                        IEEE Transactions on Software Engineering, vol. 35, no. 4, pp. 470-483,
+mention do not visibly improve the productivity of the                                 2009.
+collaborative development in GitHub. More researches should                       [13] Froehlich J and Dourish P, “Unifying artifacts and activities in a visual
+                                                                                       tool for distributed software development teams,” in Proc. of the 26th
+be conducted to leverage the power of @-mention in the pull-                           International Conference on Software Engineering (ICSE), 2004, pp.
+request based software development. From the perspective of                            387-396.
+pull-requests’      submitters     (especially   the    external                  [14] Omoronyia I, Ferguson J, Roper M, and Wood M, “Using developer
+contribution’s submitters), how to help them effectively find                          activity data to enhance awareness during collaborative software
+suitable reviewers by using @-mention should be investigated.                          development,” Computer Supported Cooperative Work (CSCW), vol. 18,
+According to the study results, we draw some findings with                             no. 5, pp. 509-558, 2009.
+                                                                                  [15] Ahmadi N, Jazayeri M, Lelli F, and Nesic S, “A survey of social
+the expectation that more practices and researches being                               software engineering,” in Proc. of the Automated Software Engineering
+focused on this @-mention. We look forward to helping the                              Workshops, 2008, pp. 1-12.
+researchers and developers understand the significance of @-                      [16] O'reilly T, “What is Web 2.0: Design patterns and business models for
+mention in the pull-requests.                                                          the next generation of software,” Communications and Strategies, vol.
+                                                                                       65, no. 1, pp. 17-37, 2007.
+                        ACKNOWLEDGMENT                                            [17] Kotlarsky J and Oshri I, “Social ties, knowledge sharing and successful
+                                                                                       collaboration in globally distributed system development projects,”
+    We thank Minghui Zhou, Charles X. Ling, and the APSEC                              European Journal of Information Systems, vol. 14, no. 1, pp. 37-48, 2005.
+reviewers for their valuable feedback on earlier revisions of                     [18] Yang Zhang, Gang Yin, Yue Yu and Huaimin Wang, “Investigating
+this paper. The research is supported by the National High                             Social Media in GitHub’s Pull-requests: A Case Study on Ruby on Rails,”
+Technology Research and Development Program of China                                   in Proc. of the 1th FSE’14 Workshop on Crowd Soft(CrowdSoft), 2014,
+                                                                                       Accepted.
+(Grant No. 2012AA011201) and the National Natural Science                         [19] Gousios G and Spinellis D, “GHTorrent: Github's data from a firehose,”
+Foundation of China (Grant No. 61432020 and 61472430).                                 in Proc. of the 9th Working Conference on Mining Software Repositories
+                                                                                       (MSR), 2012, pp. 12-21.
+                             REFERENCES                                           [20] Gousios G, Vasilescu B, Serebrenik A, and Zaidman A, “Lean
+[1] Gousios G, Pinzger M, and van Deursen A, “An exploration of the pull-              GHTorrent: GitHub data on demand,” in Proc. of the 11th Working
+    based software development model,” in Proc. of the 36th International              Conference on Mining Software Repositories (MSR), 2014, pp. 384-38.
+    Conference on Software Engineering (ICSE), 2014.
+
+
+
+
+                                                                            350
+                                                                            373
+
\ No newline at end of file

commit e43a18c0ba1ba5f54a3aa48f579f8027c80a5a1f
Author: fisher <yyuu51888@163.com>
Date:   Tue Apr 28 15:41:51 2015 -0700

    IEEE version
---
 ...mendation to Expedite Crowd Collaboration-IEEE.pdf | Bin 0 -> 2196695 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/paper/Who Should Review This Pull-Request_ Reviewer Recommendation to Expedite Crowd Collaboration-IEEE.pdf b/res/paper/Who Should Review This Pull-Request_ Reviewer Recommendation to Expedite Crowd Collaboration-IEEE.pdf
new file mode 100644
index 0000000..33755d2
--- /dev/null
+++ b/res/paper/Who Should Review This Pull-Request_ Reviewer Recommendation to Expedite Crowd Collaboration-IEEE.pdf	
@@ -0,0 +1,609 @@
+                                      2014 21st Asia-Pacific Software Engineering Conference
+
+
+
+    Who Should Review This Pull-Request: Reviewer
+    Recommendation to Expedite Crowd Collaboration
+                                    Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling‡
+                                     ∗ National
+                                           Laboratory for Parallel and Distributed Processing,
+                   College of Computer, National University of Defense Technology, Changsha, 410073, China
+           ‡ Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                                 {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+     Abstract—Github facilitates the pull-request mechanism as an          As a mushrooming number of developers use the pull-
+  outstanding social coding paradigm by integrating with social me-     request mechanism to contribute their ideas and suggestions in
+  dia. The review process of pull-requests is a typical crowdsourcing   GitHub, the efﬁciency of software evolution and maintenance
+  job which needs to solicit opinions of the community. Recom-
+  mending appropriate reviewers can reduce the time between the         is highly related to the crowd-based review process. However,
+  submission of a pull-request and the actual review of it. In this     the discussion among reviewers is time-consuming. Some
+  paper, we ﬁrstly extend the traditional Machine Learning (ML)         relevant reviewers may not notice the new pull-request in
+  based approach of bug triaging to reviewer recommendation.            time. Recommending reviewer will make the review process
+  Furthermore, we analyze social relations between contributors         more effective, because it can reduce the time between the
+  and reviewers, and propose a novel approach to recommend
+  highly relevant reviewers by mining comment networks (CN) of          submission of a pull-request and the actual review of it.
+  given projects. Finally, we demonstrate the effectiveness of these       A pull-request contains a title and description summarized
+  two approaches with quantitative evaluations. The results show        its contributions of bug ﬁxes or feature enhancements, so it
+  that CN-based approach achieves a signiﬁcant improvement over         is similar to a bug report in bug tracking systems. To the
+  the ML-based approach, and on average it reaches a precision of       best of our knowledge, there is very few studies of reviewer
+  78% and 67% for top-1 and top-2 recommendation respectively,
+  and a recall of 77% for top-10 recommendation.                        recommendation for pull-requests. The most similar researches
+     Keywords—Pull-request, Reviewer Recommendation, Com-               [7]–[12] are the approaches for recommending developers with
+  ment Network, Social Coding                                           the right implementation expertise to ﬁx incoming bugs. For
+                                                                        a newly received bug report, these approaches ﬁrstly ﬁnd
+                         I. I NTRODUCTION                               out some similar historical reports or source code ﬁles by
+     The pull-based software development model [1], compared            measuring text similarity. Then, the expertise of a developer
+  to traditional methods such as email-based patching [2] [3],          can be learned based on the bug-ﬁxing history, source revision
+  makes developers contribute to software projects more ﬂexibly         commits or code authorship. If we only focus on the text
+  and efﬁciently. In GitHub, the pull-request mechanism is              of pull-requests, these approaches can be extended to assign
+  upgraded to a unique social coding paradigm [4] by integrating        pull-requests to appropriate developers. However, the social
+  multiple social media involving follow, watch, fork and issue         relations between pull-request contributors and reviewers are
+  tracker. The socialized pull-request model is pushing software        neglected. Compared to bug ﬁxing, the review process of pull-
+  evolution and maintenance into crowd-based development [5].           request is a social activity depending on the discussions among
+     A typical contribution process [6] in GitHub involves fol-         reviewers in GitHub. Thus, social relation is one of key factors
+  lowing steps. First of all, a contributor could ﬁnd an attractive     of reviewer recommendation.
+  project by following some well-known developers and watch-               In this paper, we ﬁrstly implement the Machine Learning
+  ing their projects. Secondly, by forking an interesting one,          (ML) based approach of Anvik et al. [7], which is one of
+  the contributor implements a new feature or ﬁxes some bugs            the most representative work of bug triaging. Furthermore,
+  based on his cloned repository. When his work is ﬁnished,             we analyze social relations among reviewers and contributors,
+  the contributor sends the patches from the forked repository          and propose a novel approach of reviewer recommendation.
+  to its source by a pull-request. Then, all developers in the          Central to our approach is the use of a novel type of social
+  community have the chance to review that pull-request in the          network called Comment Network (CN), which can directly
+  issue tracker. They can freely discuss whether the project needs      reﬂect common interests among developers. Finally, we con-
+  that feature, whether the code style meets the standard or            duct an empirical study on 10 projects which have received
+  how to further improve the code quality. Next, in the light           over 1000 pull-requests in GitHub. As there is no previous
+  of reviewers’ suggestions, the contributor would update his           work of reviewer recommendation for pull-requests, we design
+  pull-request by attaching new commits, and then reviewers             a simple and effective method as a comparison baseline in
+  discuss that pull-request again. Finally, a responsible manager       experiments. The quantitative evaluations show that our CN-
+  of the core team takes all the opinions of reviewers into             based approach achieves signiﬁcant improvements over the
+  consideration, and then merges or rejects that pull-request.          baseline and ML-based method.
+
+
+1530-1362/14 $31.00 © 2014 IEEE                                     335
+                                                                    358
+DOI 10.1109/APSEC.2014.57
+                                     Figure 1. An example of discussion among reviewers in a pull-request
+   The remainder of this paper is structured as follows. Section        can see that a growing number of developers contribute to
+II conducts an empirical study of pull-request and depicts a            open source using the pull-request mechanism.
+motivating example for recommending reviewers to incoming                                                80000
+pull-requests. Section III present how to assign a pull-request
+                                                                                                         70000
+to reviewers using ML technique, and Section IV propose
+our CN-based recommendation approach. Experiments and                                                    60000
+                                                                               number of pull-requests
+
+
+
+
+analysis can be found in Section V. Finally, we present related                                          50000
+work in Section VI and draw our conclusions in Section VII.
+                                                                                                         40000
+           II. E MPIRICAL S TUDY OF P ULL - REQUEST                                                      30000
+  In this section, we ﬁrstly investigate the popularity of pull-                                         20000
+request model in GitHub. Then, a typical process of discussion
+among reviewers is introduced with an example.                                                           10000
+
+                                                                                                             0
+                                                                                                                2             1   2              1  2             1    2
+A. Popularity of Pull-request                                                                                1-0 1-05 1-08 1-1 2-0 2-05 2-08 2-1 3-0 3-05 3-08 3-1 4-0
+                                                                                                          201 201 201 201 201 201 201 201 201 201 201 201 201
+   Gousios et al. [1] has illustrated the popularity of pull-                                                                         time (month)
+
+based development model based on the comparison of usage                                                         Figure 2. The growth of Pull-request quantity
+between pull-request and shared repository in GitHub. They              B. Discussion among Reviewers
+draw a conclusion that pull-request is a signiﬁcant mechanism
+for distribute software development, even though only 14% of               When a new pull-request arrives, the decision-making is
+repositories are using it in GitHub until February 2013.                a crowdsourcing process which depends on the discussion
+   In the current, many competitive projects are growing fast           among reviewers. Taking a real pull-request of Ruby on Rails
+supported by pull-request such as Ruby on Rails1 which has              as an example, as shown in Figure 1, a core developer called
+received more than 10000 pull-requests. Therefore, we further           rafaelfranca is the ﬁrst reviewer to discuss this pull-request.
+investigate the usage of pull-request model among projects              As he thought that javan’s work would be relevant to this pull-
+which receive at least 100 pull-requests. There are 3587                request, he mentioned (@) javan to join the discussion. At the
+projects (exclude forked repositories) are extracted from the           second post, we see that javan indeed presented his opinion.
+latest database of GHTorrent [13]. These projects cover 53              Meanwhile, other users participated in the discussion and
+different program languages, but the distribution of the number         made some important suggestions as well. Later, the author
+of projects is highly skewed. Top-5 program languages contain           updated the pull-request by appending a new commit taking
+67% of projects (JavaScript 678, Ruby 475, Python 460, Java             into account the above suggestions, and then he mentioned
+424 and PHP 362). From June 2011 to March 2014, the                     the two key reviewers for acknowledgement. Finally, the pull-
+absolute number of new pull-requests increased dramatically             request was merged into the Ruby on Rails’ master branch.
+reaching the peak of 76673 per month (Figure 2). Thus, we                  As the example depicted above, apart from javan who
+                                                                        is informed by rafaelfranca, other three reviewers join the
+  1 https://github.com/rails/rails                                      discussion spontaneously. Because all the comments affect
+
+
+                                                                     336
+                                                                     359
+the decision-making of that pull-request, if they do not catch       generated from top-1 to top-k according to the probability
+that pull-request timely, the time of review process would be        distribution that the ML classiﬁers predicted on the labels
+longer. Beside, except for @mentioning, project managers can         using the one-against-all strategy. When the probability values
+use a label to assign a pull-request to someone. However, only       are equal, we rank the developers in terms of the number
+0.89% of pull-requests have been set that label in our dataset.      of pull-requests’ comments that they had submitted to the
+   Thus, if appropriate reviewers are automatically recom-           given project. In this paper, we choose SVM as our basis
+mended when a new pull-request is submitted, its review              classiﬁer because it has been proved to be a superior classiﬁer
+process would be greatly accelerated. It is worth mentioning         in developers recommendation [7], [12].
+that this novel application can be seamlessly integrated with
+                                                                         IV. S OCIAL N ETWORK BASED R ECOMMENDATION
+the @mention tool to take its full advantage by @mentioning
+the potential reviewers automatically.                                  ML-based recommendation focuses on the text of pull-
+                                                                     requests. However, the preprocessed text of a pull-request
+   III. M ACHINE L EARNING BASED R ECOMMENDATION                     mainly consists of the names or identiﬁers of code ﬁles,
+   We aim to recommend highly relevant reviewers for pull-           functions and variables, so the corpus of a project is not very
+requests to improve the efﬁciency of social coding. The              large. When a reviewer has commented plenty of pull-requests,
+representative existing work of automated bug triaging are           his label covers most of terms in the corpus. The ML classiﬁers
+the approaches of mining bug repositories based on Machine           would biasedly assign almost all incoming pull-requests to
+Learning (ML) [7]–[9]. All these approaches start from the           him. Thus, the workload of this reviewer continues to increase.
+bug-text, such as title, description and source code. In the            By contrast, the basic intuition of social network based
+context of ML, the bug triaging problem can be represented as        recommendation is that the developers who share common
+text categorization (i.e., classiﬁcation of text documents into a    interests with a contributor are the appropriate reviewers of
+set of categories). The text documents are the bug-text and the      his incoming pull-requests. For reviewer recommendation, the
+categories into which bug reports are classiﬁed are the names        common interests among developers can be directly reﬂected
+of developers suitable to resolve the report. In this paper, we      by comment relations between contributors and reviewers
+treat pull-requests as text documents, and then utilize the ML-      in historical pull-requests. We propose a novel approach to
+based approach to predict top-k relevant reviewers.                  construct comment networks by mining historical comment
+                                                                     traces. Then, we predict highly relevant reviewers to incoming
+A. Vector Space Model of Pull-Request
+                                                                     pull-requests based on comment network analysis.
+   Each pull-request is characterized by its title and descrip-
+tion, and labeled with a set of names about developers who           A. Comment Network Construction
+had submitted at least one comment to it. Then, all stop words          For each project, the corresponding comment network is
+and non-alphabetic tokens are removed, and remaining words           constructed individually. In a given project, the structure of
+are stemmed. We use vector space model to represent each             comment relations between contributors and reviewers is a
+pull-request as a weighted vector. Each element in the vector        many-to-many model. As shown in Figure 3, there are many
+is a term, and the value stands for its importance for the           contributors have submitted pull-requests to Project P. A
+pull-request. For a given word, the more times it appear in          developer can be a contributor submitting several pull-requests,
+a pull-request, the more important it is for that pull-request.      and he could also be a reviewer in other contributors’ pull-
+On the contrary, the more pull-requests it appears in, the less      requests. A pull-request would be commented by several
+important it is for distinguishing these pull-requests. Term         reviewers more than once. For example, reviewer R1 had
+frequency-inverse document frequency (tf-idf) is utilized to         presented 5 comments in the pull-request P R2 . In addition,
+indicate the value of a term, which can be calculated as             a reviewer would inspect multiple pull-requests, such as re-
+Equation 1.                                                          viewer R1 has commented P R1 and P R2 .
+                              nt                 NPR                                     Contributor C1    Pull-request PR1     2
+                                                                                                                                          Reviewer R1
+  tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                              Np r         |pr ∈ PR : t ∈ pr |                                                                  5
+
+                                                                                                           Pull-request PR2         1
+                                                                                         Contributor C2                                   Reviewer R2
+where t is a term, pr is a pull-request, PR is the corpus
+                                                                                                                  …                 m        …
+of all pull-requests in a given project, nt is the count of             Project P
+                                                                                         Contributor C3    Pull-request PRk               Reviewer Rt
+appearance for term t in pull-request pr , and Npr and NPR
+are the total number of terms in pr and pull-requests in the                                  …                                     m+1
+                                                                                                           Pull-request PRk+1
+corpus respectively.                                                                     Contributor Cn
+
+
+B. Training ML Classiﬁers                                                 Figure 3. Comment relations between contributors & reviewers
+
+   In general, a pull-request would be reviewed by several             The comment network is deﬁned as a weighted directed
+developers, so ML classiﬁers should provide more than one            graph Gcn = V, E, W , where the set of developers is
+label for a pull-request testing instance. It means that they        indicated as vertices V and the set of relations between nodes
+should be able to deal with the multi-label classiﬁcation            as edges E. If node vj has reviewed at least one of vi ’s pull-
+problem [14]. A ranked list of recommended candidates is             requests, there is a edge eij from vi to vj . The set of weights
+
+
+                                                                 337
+                                                                 360
+W reﬂects the importance degree of edges, and the weight wij                     impact of one user in the same pull-request, so w(12,1) can
+of eij can be evaluated by Equation 2.                                           be calculated as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24.
+                k                              k   m                             Similarly, the weight w12 = w(12,1) + w(12,2) = 2.19, and
+       wij =         w(ij,r) = Pc ×                     λn−1 × t(ij,r,n)   (2)   w13 = 0.95. Thus, we can predict that reviewer v2 share more
+               r=1                          r=1 n=1                              common interests with contributor v1 compared to v3 , which
+where k is the total number of pull-request submitted by vi ,                    has been quantiﬁed by the corresponding weights of edges.
+and w(ij,r) is a component weight related to an individual pull-                   The comment network has several desirable qualities.
+request r. Pc is an empirical default value2 (set to 1.0), which                   •   Firstly, the global collaboration structure is revealed
+is reserved to estimate the inﬂuence of each comment on the                            between contributors and reviewers in a given project,
+pull-request, and m is the sum of comments submitted by vj in                          which can be used for mining reviewer candidates of
+the same pull-request r. When reviewer vj published multiple                           incoming pull-requests.
+comments (m = 1) in the same pull-request, his inﬂuence                            •   Secondly, the time-sensitive factor t is introduced to
+is controlled by a decay factor λ (set to 0.8). The element                            guarantee that the recent comments are more valuable
+t(ij,r,n) is a time-sensitive factor of corresponding comment                          for the weights of edges than the old comments.
+which can be calculated as below:                                                  •   Thirdly, the decay factor λ is introduced to guarantee
+                    timestamp(ij,r,n) − baseline                                       the difference values between the comments submitted to
+        t(ij,r,n) =                                 ∈ (0, 1] (3)                       multiple pull-requests or single pull-request. For example,
+                       deadline − baseline
+                                                                                       if reviewer vj commented 5 different pull-requests of vi
+where timestamp(ij,r,n) is the date that reviewer vj presented
+                                                                                       and meanwhile vq commented one of vi ’s pull-requests
+the comment n in pull-request r which is reported by contrib-
+                                                                                       5 times, the weight of wij is larger than wiq .
+utor vi . The baseline and deadline are highly related to the
+selection of training set. If we use the data of the last one and a
+                                                                                 B. Reviewers Recommendation
+half years from 2012-01-01 to 2013-05-31 to learn the weights
+of comment network, the parameters baseline and deadline                            Based on the comment networks, new pull-requests are
+are set to 2011-12-31 and 2013-05-31 respectively.                               divided into two parts according to their submitters. The ﬁrst
+                                          v3                   v4                part are the Pull-requests from Acquaintance Contributors
+                                                                                 denoted as PAC. For a PAC, starting from the node of its
+                                                                                 submitter, we can ﬁnd at least one neighbor in the directed
+                                                                                 graph. For example, in Figure 4, when v1 submits a new
+                                            =?                                   pull-request, this pull-request is a PAC because we ﬁnd two
+                              95
+
+
+
+
+                                        w 41
+                           0.
+
+
+
+
+                                                            w42=?                neighbors starting from v1 . The other part are Pull-Requests
+                         13
+                            =
+                     w
+
+
+
+
+                                                                                 from New Contributors denoted as PNC. For a PNC, the
+                                                                                 submitter used to be a reviewer but has not submitted any pull-
+                                w12=2.19
+                                                                                 request, or it is a newcomer excluded from the training set,
+                                                       v2                        so there is no neighbor starting from it in the corresponding
+                    v1
+                                   v2 commented v1's PR_1 on 2012-12-03
+                                                                                 comment network. Hence, we can further divide reviewer
+                                   v2 commented v1's PR_1 on 2013-01-12          recommendation into two different tasks.
+                                   v2 commented v1's PR_2 on 2013-05-07
+            Project:
+                                   v3 commented v1's PR_2 on 2013-05-06          Algorithm 1 Top-k recommendation for PAC
+          Ruby on Rails
+                                         v1 commented v4's PR……
+                                         v2 commented v4's PR……
+                                                                                 Require: Gcn is the comment network of a given project; vs
+                                         v4 commented v1's PR……                      is the contributor of a new pull-request; topk is the number
+                                                                                     of reviewers of requirement;
+             Figure 4. An example of the comment network
+                                                                                 Ensure: recSet is a set of sorted reviewers;
+   Figure 4 shows an example of a part of comment network                         1: Q.enqueue(vs ) and recSet ← ∅
+about Ruby on Rails. Two different pull-requests (PR_1 and                        2: repeat
+PR_2) reported by v1 have been commented by v2 and v3 , so                        3:    v ← Q.dequeue and Gcn .RankEdges(v)
+there are two edges from v1 to v2 and v1 to v3 . Evaluating                       4:    repeat
+the relation between v1 and v2 , k of Equation 2 equals 2,                        5:       if topk = 0 then
+because v2 reviewed both two pull-requests. For PR_1, v2                          6:          return recSet
+commented it twice, so we set m = 2. The ﬁrst time-sensitive                      7:       end if
+factor of the date 2013-12-03 can be computed by Equation 3                       8:       vnb ← Gcn .BestN eighbor(v)
+that t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12                    9:       Q.enqueue(vnb ) and Gcn .mark(vnb )
+(t12,1,2 ≈ 0.731), another review published by v2 in PR_1                        10:       recSet ∪ {vnb } and topk = topk − 1
+should be controlled by λ (set to 0.8) due to the diminishing                    11:    until Gcn .N eighors(v) all marked
+                                                                                 12: until Q is empty
+  2 User comments can be found in pull-requests, issue posts and commit
+                                                                                 13: return recSet
+ﬁles. Here, we just use the comments of pull-request.
+
+
+
+                                                                             338
+                                                                             361
+   Recommendation for PAC: For a PAC, it is natural to              multiple communities, instead of always recommending from
+recommend the user who has previously interacted with the           the biggest communities. In our implementation, we extract the
+contributor directly, i.e., the node that is a connected neighbor   community structure from the comment network using Gephi
+starting from the contributor node in the comment network. If       [16] which integrates and optimizes a famous algorithm of
+there are more than one neighbor, the node with the highest         community detection purposed by Blondel et al. [17]. The size
+weights get selected ﬁrst. Hence, reviewer recommendation           of the communities is depicted by the number of developers
+can be treated as a kind of directed graph traversal problem.       it has, and the activeness of a reviewer is measured by the
+In this paper, we improve the classical method of Breadth-First     number of pull-requests he has reviewed in history, in other
+Search to recommend top-k reviewers for new pull-requests as        words, the in-degree of a node in the comment network. The
+shown in Algorithm 1. First of all, we initialize a queue and       recommendation set is generated by following steps:
+put the source node vs onto this queue. Then, starting from            1) Rank the communities by their size (number of nodes);
+the unvisited edge with the highest weight (RankNeighors)              2) calculate the in-degree of nodes in top-k community;
+every time, we loop to select (BestNeighbor) and marked the            3) Select the top-k nodes based on their in-degree from top-
+nearest neighbor as a candidate. If the number of contributor’s     k communities one by one.
+neighbors is less than top-k, we further visit the child nodes
+until top-k nodes are selected out.                                                  V. E XPERIMENTS E VALUATION
+   Recommendation for PNC: For a PNC, since there is                A. Experiment Questions
+no prior knowledge of which developers used to review the              RQ1: How effective is the SVM-based approach applied to
+submitter’s pull-request, we want to predict the candidates who     pull-request assignment?
+share common interests with this contributor by analyzing the
+                                                                       RQ2: Does the CN-based approach have signiﬁcant im-
+overall structure of comment network.
+                                                                    provement compared to the SVM-based approach?
+   Firstly, for a contributor who is a node but without any
+                                                                       RQ3: Do SVM-based approach and CN-based approach
+connected neighbor in the comment network, we mine the
+                                                                    have consistent performance on projects of different charac-
+reviewers based on patterns of co-occurrence across pull-
+                                                                    teristics?
+requests. For example, if v2 and v3 have reviewed plenty of
+                                                                       For experiment question RQ1, we explore whether highly
+pull-requests together, we can assume that they would share
+                                                                    relevant reviewers can be identiﬁed using the machine learn-
+more common interests than others. Thus, when v3 submitted
+                                                                    ing approach described in section III. For experiment RQ2,
+a new pull-request (PNC), we recommend v2 to review his
+                                                                    we illustrate whether social relations are more effective for
+pull-request, and vice versa. We use Apriori algorithm of as-
+                                                                    reviewer recommendation. For RQ3, we aim to know are there
+sociation rule mining [15] to generate top-k frequent itemsets,
+                                                                    any distinct results of applying these approaches on different
+and then rank the candidates according to their supports.
+                                                                    projects and why.
+             C1
+                                                      C2
+                                                                                                   Table I
+                                                                                     P REPROCESSED EXPERIMENT DATASET
+                                                                                                  #Pull-requests      #Comments
+             B
+             B                                                            Project   Language                                        #Candidates
+                                                                                                 Training Test     Training  Test
+                                                     C
+                                                     C                     akka       Scala        1112       34    10640    467        16
+                                                                           scala      Scala        2028       64    13475    944        32
+                                                                          bitcoin   TypeScript     1067       63     5446    688        21
+             A
+             A                                                             node     JavaScript     1196       14     3497    220        73
+                                                                          jquery    JavaScript      512       14     2967    196        27
+                                   C3
+                                                                         symfony       PHP         2029       29     9601    419        79
+                                                                        phantomjs      C++          677       53     2866    728        20
+                                                                           xbmc         C          1629       81     8493   1094        73
+                                                                            rails     Ruby         3158       59    13060    583       168
+                                   D                                    homebrew      Ruby         4307       51    12255    842        22
+                                   D
+                                                                           Sum                    17715      462    82300   6181       479
+
+
+                                                                    B. Experiment Design
+          Figure 5. Community structure of comment network             Data Selection: Gousios et al. [18] [13] provide a compre-
+   In addition, for a newcomer who is a node excluded               hensive dataset to study the pull-request development model
+from the comment network, the most active reviewers in              of GitHub. Our approach is evaluated on 10 projects which
+different kinds of communities become the most probable             have received over 1000 pull-requests. We use the data of last
+candidates. We assume that developers with common interests         one and a half years from 2012-01-01 to 2013-05-31 as our
+will spontaneously form a community in the comment network.         training set and the data from 2013-06-01 to 2013-10-01 as
+However, the structure of the comment network shows that            our test set. The descriptions and titles are used to learn SVM
+developers are not always uniformly dispersed, as shown in          classiﬁers and comment relations are used to build comment
+ﬁgure 5. It is probable that these most active reviewers could      networks. In order to learn the valid classiﬁers, we ﬁrst do stop
+belong to the biggest community, such as the top-2 most             words removal and stemming over the descriptions and titles.
+active nodes A and B belong to the same community C1.               Then, we retain those pull-request with more than 10 words.
+Therefore, we would like our recommendation list to cover           The test set includes some simple pull-requests which need not
+
+
+                                                                339
+                                                                362
+be reviewed, so this kind of pull-requests which received less                                  Furthermore, we present the following null hypotheses to
+than 4 comments are omitted. After that, there are 17715 pull-                               evaluate the improvement of our CN-based approach compared
+requests in the training set and 462 in the test set, as shown                               with the baseline and the SVM-based approach:
+in Table I. For each project, we recommend top-1 to top-10                                      H0 1 : There is no statistically signiﬁcant difference between
+reviewers to a new pull-request from Candidates in Table I.                                  the precisions of the baseline and CN-based approach.
+   Evaluation Metrics: We evaluate the performances of our                                      H0 2 : There is no statistically signiﬁcant difference between
+approaches over each project by precision and recall which                                   the precisions of the SVM-based and CN-based approach.
+are widely used as standard metrics in previous work. The                                       H0 3 : There is no statistically signiﬁcant difference between
+formulae for our metrics are listed below:                                                   the recalls of the baseline and CN-based approach.
+               | Rec Reviewers ∩ Actual Reviewers |                                             H0 4 : There is no statistically signiﬁcant difference between
+  P recision =                                                                               the recalls of the SVM-based and CN-based approach.
+                         | Rec Reviewers |
+           | Rec Reviewers ∩ Actual Reviewers |                                                 The results of Student’s t-test are listed in Table II. For H0 1
+  Recall =                                                                                   and H0 2 of precision, one-sided p-value p < 0.05 and t-test
+                    | Actual Reviewers |
+                                                   (4)                                       value t < tcrit . Thus, we reject these hypotheses. It means
+                                                                                             that CN-based approach achieve a signiﬁcant improvement
+C. Experiment Results and Analysis                                                           in precision compared to the baseline and the SVM-based
+                                                                                             approach. Similarly, we reject H0 3 and H0 4 of recall, but
+   Baseline: Most Active Recommendation                                                      the t-test result of H0 4 is remarkably close to the critical
+   It is common for some projects that most of pull-requests are                             values. It means CN-based approach achieves nearly the same
+reviewed by a few core developers. Thus, to demonstrate the                                  performance in recall but greatly exceeds the baseline method.
+effectiveness of our approaches based on machine learning and                                   Especially, high precision of top-k recommendation is sig-
+social network analyzing, we design a baseline method that                                   niﬁcant for pull-request assignment. As the example of Figure
+every new pull-request is assigned to the top-k most active                                  1, if our approach assigns that pull-request to rafaelfranca, he
+developers ranked according to the number of pull-requests                                   would remind javan to join the discussion by the @mention
+they have reviewed in the past.                                                              tool, even if javan is left out by the algorithm.
+   RQ1 & RQ2: Recommendation Performances
+                                                                                                                                     Table II
+   We use a chart of precision vs. recall to show the perfor-                                                       R ESULTS OF T-T EST FOR OUR HYPOTHESES
+mances of different approaches in detail. In Figure 6, each                                       H         Var         Approach        µ       σ2         p         t      tcrit    Decision
+curve has a point for each recommendation from top-1 to                                          H0       Precision
+                                                                                                                       CN -based       0.53    0.031
+                                                                                                                                                        0.0002     3.67     1.66      Reject
+                                                                                                      1
+                                                                                                                        baseline       0.50    0.029
+top-10. There is a trade-off between precision and recall for                                                          CN -based       0.53    0.031
+                                                                                                 H0   2   Precision                                      0.016     2.18     1.66      Reject
+classiﬁcation. Hence, the precisions are gradual decreasing                                                            SVM-based       0.51    0.030
+                                                                                                                       CN -based       0.56    0.057
+with the increase of recalls.                                                                    H0   3    Recall
+                                                                                                                        baseline       0.54    0.063
+                                                                                                                                                        0.0003     3.60     1.66      Reject
+
+                      0.8                                                                                              CN -based       0.56    0.057
+                                                                                                 H0   4    Recall                                        0.040     1.77     1.66      Reject
+                                                                CN-based approach                                      SVM-based       0.55    0.063
+                                                                SVM-based approach                Means µ, Variance σ 2 , statistical signiﬁcance p-value p, t-test results t and critical value
+                      0.7                                       Baseline                          tcrit , signiﬁcance level α = 0.05. In this paper, we do not list alternative hypotheses,
+                                                                                                  because they are easy to derive from these null hypotheses respectively.
+
+                                                                                                RQ3: Discussion of different approaches
+                      0.6
+     Avg. Precision
+
+
+
+
+                                                                                                We run our approaches on each project to evaluate their
+                                                                                             detailed performances and discuss the results. As most of pull-
+                      0.5                                                                    request in GitHub received less than 4 comments [1], we only
+                                                                                             depict part of our results from top-1 recommendation to top-5.
+                      0.4                                                                       Firstly, running on bitcoin, akka and rails, our novel CN-
+                                                                                             based approach can achieve a signiﬁcant improvement over the
+                      0.3
+                                                                                             baseline and SVM-based method. As shown in Table III, the
+                        0.1    0.2     0.3     0.4        0.5    0.6      0.7        0.8     improvement of CN-based approach running on each project is
+                                                 Avg. Recall
+                        Figure 6. Precision vs. Recall of different approaches
+                                                                                             on average over 10% in precision and 6% in recall. In addition,
+                                                                                             CN-based approach can get remarkable performance for top-
+   Both SVM-based approach and CN-based approach are su-                                     1 recommendation. For example, the precision of CN-based
+perior to the baseline. Our novel approach based on Comment                                  approach can reach 92% running on bitcoin. Compared to the
+Network (CN-based approach) achieves obvious improvement                                     baseline and SVM-based method, our approach achieves great
+in precision from top-1 to top-4, especially at the point of                                 improvement of 51% and 31% respectively.
+top-1 (78%) and top-2 (67%). However, the curve of SVM-                                         In these three projects, the social activities and contributions
+based approach is in the middle from top-1 to top 4, and                                     between core and external developers are balanced and well-
+takes the leading position at the points of top-5 and top-8 in                               distributed. For example, for bitcoin, the number of core
+precision. When we recommend top-10 reviewers, the recall                                    developers and external developers are equal in the history of
+of each method can reach the level of 77%.                                                   top-10 active reviewers list. In addition, 64% of pull-requests
+
+
+                                                                                           340
+                                                                                           363
+                                                                                 Table III
+                                P RECISIONS /R ECALLS OF BASELINE (BL), CN- BASED AND SVM- BASED RECOMMENDATION FROM TOP -1 TO TOP -5
+                                       Number of                      bitcoin                                  akka                                rails
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.41/0.08       0.92/0.19   0.61/0.12      0.61/0.14   0.84/0.20   0.87/0.20   0.61/0.13   0.75/0.18   0.62/0.13
+                                         top-2       0.69/0.28       0.77/0.31   0.69/0.28      0.69/0.32   0.84/0.39   0.69/0.32   0.46/0.20   0.65/0.32   0.45/0.20
+                                         top-3       0.69/0.42       0.73/0.44   0.69/0.42      0.61/0.43   0.70/0.50   0.69/0.49   0.47/0.31   0.57/0.42   0.46/0.30
+                                         top-4       0.61/0.48       0.67/0.54   0.65/0.51      0.67/0.63   0.73/0.69   0.75/0.70   0.40/0.35   0.46/0.45   0.41/0.36
+                                         top-5       0.60/0.58       0.63/0.62   0.61/0.59      0.72/0.84   0.78/0.92   0.80/0.93   0.35/0.38   0.38/0.47   0.36/0.39
+                                         Avg.        0.60/0.36       0.74/0.42   0.65/0.38      0.66/0.47   0.78/0.54   0.76/0.53   0.46/0.27   0.56/0.36   0.46/0.28
+                                       Number of                      jquery                                phantomjs                           homebrew
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.82/0.17       0.82/0.17   0.82/0.17      0.92/0.20   0.92/0.19   0.94/0.20   0.91/0.21   0.88/0.20   0.88/0.21
+                                         top-2       0.66/0.27       0.70/0.29   0.68/0.28      0.86/0.37   0.74/0.31   0.88/0.37   0.76/0.35   0.77/0.35   0.77/0.35
+                                         top-3       0.53/0.33       0.56/0.35   0.55/0.34      0.73/0.46   0.75/0.48   0.75/0.48   0.81/0.56   0.80/0.55   0.80/0.56
+                                         top-4       0.45/0.37       0.55/0.46   0.48/0.39      0.75/0.64   0.74/0.62   0.75/0.64   0.79/0.72   0.75/0.68   0.79/0.73
+                                         top-5       0.46/0.48       0.50/0.53   0.48/0.51      0.65/0.68   0.65/0.68   0.66/0.69   0.74/0.84   0.62/0.71   0.73/0.84
+                                         Avg.        0.59/0.32       0.63/0.36   0.60/0.34      0.78/0.47    0.7/0.46   0.80/0.48   0.80/0.54   0.76/0.50   0.80/0.54
+
+submitted by external contributors and 60% of them have been                                                   •   For RQ1, the SVM-based recommendation is an effective
+merged. By contrast, 36% of pull-requests are originating from                                                     approach for pull-request assignment which achieves 73%
+core developers but 84% of them have been merged.                                                                  precision of top-1 recommendation and 77% recall of top-
+   The second group includes jquery, phantomjs and home-                                                           10 recommendation.
+brew, where both our approaches and the baseline method                                                        •   For RQ2, the CN-based approach achieve signiﬁcant
+can achieve high precision and recall. The the second part                                                         improvement compared to other methods. Analyzing the
+of Table III lists the results. For phantomjs and homebrew,                                                        social network is a novel and effective way for reviewer
+the precisions and recalls of all methods on average reach                                                         recommendation.
+approximately 80% and 50% respectively.                                                                        •   For RQ3, the CN-based recommendation show much
+   In these projects, a few developers seems to dominate the                                                       more improvement for the projects where the social
+pull-request review activity. As they have submitted comments                                                      activities are balanced between core developers and exter-
+too frequently, it is easy to assign pull-requests of test set to                                                  nal developers. If developers have reviewed pull-requests
+them. Thus, the improvement of CN-based approach is not                                                            actively, the performance of our approach is remarkable.
+obvious. Taking phantomjs as an example, the most active user
+                                                                                                            E. Threats to Validity
+(ID 136322) has reviewed 77% of pull-requests and interacted
+with 83% of contributors in training set. All algorithms tend                                                  In this section, we discuss some threats to validity which
+to assign the new pull-requests to him ﬁrst.                                                                may affect the experiment results of our approaches. Firstly,
+                      0.55                                                                                  there is a small part of the core developers who are in charge of
+                                                                      CN-based approach
+                                                                      SVM-based approach                    the ﬁnal decision of pull-requests. They joined so many pull-
+                      0.50                                            Baseline                              requests’ discussions in training set that all the approaches
+                                                                      PAC recommendation
+                                                                                                            tend to assign the new pull-request to these active developers
+                                                                                                            ﬁrst. Hence, the workload of these active reviewers may not
+                      0.45
+     Avg. Precision
+
+
+
+
+                                                                                                            be reduced. However, with more and more external contributor
+                                                                                                            presenting their suggestions to pull-requests, the social net-
+                      0.40
+                                                                                                            work based approach can refresh the weights of corresponding
+                                                                                                            edges, so new pull-requests would be assigned more balanced
+                      0.35                                                                                  than before. Besides, because some pull-requests have not been
+                                                                                                            closed when we dumped the test set, so a part of following
+                      0.30
+                         0.05   0.10     0.15      0.20       0.25      0.30     0.35        0.40
+                                                                                                            reviewers have not been taken into consider which may affect
+                                                      Avg. Recall                                           our recommendation results.
+            Figure 7. Precision vs. Recall of different methods for xbmc
+                                                                                                                                       VI. R ELATED W ORK
+   However, all approaches do not perform well for xbmc.
+Except that SVM-based approach gets 43% precision for top-                                                     Gousios et al. [1] show that the pull-request model offers
+1 recommendation, the precisions of all methods ranged from                                                 fast turnaround, increased opportunities for community en-
+39% to 32%. In the test set of xbmc, 65% of pull-requests                                                   gagement and decreased time to incorporate contributions. To
+are originating from newcomers, so CN-based approach do                                                     the best of our knowledge, this paper is the ﬁrst one to study
+much work of PNC recommendation (PAC and PNC have been                                                      pull-request assignment. We review previous work about bug
+deﬁned in section IV-B). As shown in Figure 7, if we only                                                   triaging and collaboration network analysis of social coding.
+consider to recommend reviewer for PAC, the performance of                                                     There are a number of researches based on Machine Learn-
+CN-based recommendation is greatly superior to others.                                                      ing (ML) [7]–[9] and Information Retrieval (IR) [10]–[12]
+                                                                                                            techniques to triage incoming bug reports or change requests.
+D. Conclusions of Experiments                                                                               Anvik et al. [7] apply a machine learning algorithm to learn
+  Based on the experiment’s results and analysis above, we                                                  the kinds of reports each developer resolves and recommend
+can draw our conclusions as follows:                                                                        developers for a new bug report. Jeong et al. [8] ﬁnd that
+
+
+                                                                                                        341
+                                                                                                        364
+many bugs have been reassigned to other developers, so they                                        R EFERENCES
+combined classiﬁers with tossing graphs to mine potential             [1] G. Gousios, M. Pinzger, and A. van Deursen, “An exploration of the
+ﬁxers. Based on that, Bhattacharya et al. [9] introduce an                pull-based software development model,” in Proceedings of the 36th
+approach adding ﬁne-grained incremental learning and multi-               International Conference on Software Engineering, Jun. 2014, to appear.
+                                                                      [2] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and A. Swaminathan, “Min-
+feature tossing graphs to reduce tossing path lengths and                 ing email social networks,” in Proceedings of the 2006 International
+improve prediction accuracy. Other researchers use IR for                 Workshop on Mining Software Repositories, 2006, pp. 137–143.
+automatic bug triaging. Canfora and Cerulo [10] use the textual       [3] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies of
+                                                                          open source software development: Apache and mozilla,” ACM Trans.
+descriptions to index developers and source ﬁles as documents             Softw. Eng. Methodol., vol. 11, no. 3, pp. 309–346, Jul. 2002.
+in an information retrieval system. Kagdi [11] and Linares-           [4] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in
+Vasquez [12] extract the comments and identiﬁers from the                 github: transparency and collaboration in an open software repository,”
+                                                                          in Proceedings of the ACM 2012 conference on Computer Supported
+source code and index these data by Latent Semantic Indexing.             Cooperative Work. New York, NY, USA: ACM, 2012, pp. 1277–1286.
+For a new bug report, such indexes can be useful to identify          [5] T. LaToza, W. Ben Towne, A. van der Hoek, and J. Herbsleb, “Crowd
+the most appropriate developers to resolve it.                            development,” in Cooperative and Human Aspects of Software Engi-
+                                                                          neering, 2013 6th International Workshop on, May 2013, pp. 85–88.
+   In this paper, we not only expand the ML-based methods             [6] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets software
+to recommend reviewers for incoming pull-request, but also                development: Perspectives from github, msdn, stack exchange, and
+propose a novel social network based approach focusing on                 topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+                                                                      [7] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+mining social relations betweens reviewer and contributors                ceedings of the 28th International Conference on Software Engineering,
+which achieves a signiﬁcant improvement.                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+   The social coding paradigm is reshaping the distributed            [8] G. Jeong, S. Kim, and T. Zimmermann, “Improving bug triage with
+                                                                          bug tossing graphs,” in Proceedings of the the 7th Joint Meeting of
+software development in recent years with a surprising speed              the European Software Engineering Conference and the ACM SIGSOFT
+and wide range. Dabbish et al. [4] explore the value of social            Symposium on The Foundations of Software Engineering, ser. ESEC/FSE
+mechanisms of GitHub. They ﬁnd that the transparency in                   ’09. New York, NY, USA: ACM, 2009, pp. 111–120.
+                                                                      [9] P. Bhattacharya, I. Neamtiu, and C. R. Shelton, “Automated, highly-
+collaboration is improved by social mechanisms which is                   accurate, bug assignment using machine learning and tossing graphs,”
+signiﬁcant for innovation, knowledge sharing and community                Journal of Systems and Software, vol. 85, no. 10, pp. 2275–2292, 2012.
+building. Zhou et al. [19] measure the behavior of a contributor     [10] G. Canfora and L. Cerulo, “Supporting change request assignment in
+                                                                          open source development,” in Proceedings of the 2006 ACM Symposium
+using workﬂow network. Zanetti et al. [20] categorize bugs                on Applied Computing, ser. SAC ’06. New York, NY, USA: ACM,
+based on nine measures to quantify the social embeddedness                2006, pp. 1767–1772.
+of bug reporters in the collaboration network. Thung et al.          [11] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                                                                          request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+[21] investigate the developer-developer and project-project              International Conference on, May 2009, pp. 273–277.
+networks of GitHub. They use PageRank to identify the most           [12] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+inﬂuential developers and projects in Github.                             D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                          history, or code authorship?” in Software Maintenance, 28th IEEE
+   These previous researches inspire us to mining the comment             International Conference on, Sept 2012, pp. 451–460.
+networks for pull-request automatic assignment.                      [13] G. Gousios, “The ghtorrent dataset and tool suite,” in Proceedings of the
+                                                                          10th Working Conference on Mining Software Repositories, ser. MSR
+          VII. C ONCLUSION AND F UTURE W ORK                              ’13. Piscataway, NJ, USA: IEEE Press, 2013, pp. 233–236.
+                                                                     [14] G. Tsoumakas and I. Katakis, “Multi-label classiﬁcation: An overview.”
+   The review process of pull-request is important for social             IJDWM, vol. 3, no. 3, pp. 1–13, 2007.
+coding. In this paper, we ﬁrstly extend the machine learning         [15] R. Agrawal and R. Srikant, “Fast algorithms for mining association rules
+                                                                          in large databases,” in Proceedings of the 20th International Conference
+based approach for bug triaging to assign reviewers to new                on Very Large Data Bases, ser. VLDB ’94. San Francisco, CA, USA:
+pull-requests. Furthermore, introducing social relations, we              Morgan Kaufmann Publishers Inc., 1994, pp. 487–499.
+propose a novel social network based approach for reviewer           [16] M. Bastian, S. Heymann, and M. Jacomy, “Gephi: an open source
+                                                                          software for exploring and manipulating networks.” in ICWSM, 2009.
+recommendation by mining a new type of social network                [17] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
+called comment network. Finally, we demonstrate the effective-            unfolding of communities in large networks,” Journal of Statistical
+ness of these two approaches with quantitative evaluations. In            Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
+                                                                     [18] G. Gousios and A. Zaidman, “A dataset for pull request research,”
+the future, we plan to use the information retrieval approaches           in MSR ’14: Proceedings of the 11th Working Conference on Mining
+to pull-request assignment, and then combine these traditional            Software Repositories, may 2014, to appear.
+methods with the social network based approach. Besides, we          [19] M. Zhou and A. Mockus, “What make long term contributors: Will-
+                                                                          ingness and opportunity in oss community,” in Proceedings of the
+will explore how to add other types of social relations into our          34th International Conference on Software Engineering, ser. ICSE ’12.
+framework.                                                                Piscataway, NJ, USA: IEEE Press, 2012, pp. 518–528.
+                                                                     [20] M. S. Zanetti, I. Scholtes, C. J. Tessone, and F. Schweitzer, “Cat-
+                VIII. ACKNOWLEDGEMENT                                     egorizing bugs with social networks: A case study on four open
+                                                                          source software communities,” in Proceedings of the 2013 International
+  This research is supported by the National High Technol-                Conference on Software Engineering, ser. ICSE ’13. Piscataway, NJ,
+ogy Research and Development Program of China (Grant                      USA: IEEE Press, 2013, pp. 1032–1041.
+                                                                     [21] F. Thung, T. F. Bissyande, D. Lo, and L. Jiang, “Network structure of
+No.2012AA011201), the National Science Foundation of                      social coding in github,” in Proceedings of the 2013 17th European
+China (Grant No.61432020 and No.61472430) and the Post-                   Conference on Software Maintenance and Reengineering, ser. CSMR
+graduate Innovation Fund of University of Defense Technol-                ’13. Washington, DC, USA: IEEE Press, 2013, pp. 323–326.
+ogy (Grant No.B130607).
+
+
+                                                                   342
+                                                                   365
+
\ No newline at end of file

commit 6983c1cf5e9f26d333713f58f5f89813a02bccb6
Author: fisher <yyuu51888@163.com>
Date:   Mon Apr 27 12:01:01 2015 -0700

    pdf cv
---
 res/yuyue_cv.pdf | Bin 68113 -> 247611 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/yuyue_cv.pdf b/res/yuyue_cv.pdf
index 671f585..db4a489 100644
--- a/res/yuyue_cv.pdf
+++ b/res/yuyue_cv.pdf
@@ -3,7 +3,7 @@ National Laboratory for Parallel and Distributed Processing
 Computer School, National University of Defense Technology
 Changsha, Hunan Province, 410073, P.R.C
 Phone: (86)13627319266
-Email: yuyue_whu@foxmail.com
+Email: yuyue@nudt.edu.cn
 
 
 EDUCATION
@@ -50,7 +50,7 @@ SKILLS
    Research Intern, Trustie Group, PDL, NUDT                             2011.9-present
      National High Technology Research and Development Program of China (Grant No.
         2012AA010101)
-     National Science Foundation of China (Grant No. 61432020, 61472430, 60903043)
+     National Science Foundation of China (Grant No. 61432020, 61472430, 60903043)
    Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
      Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
      Research on Feature Detection and Location of OSS Repository           2012.3-2013.3

commit 44bce06695d60d78ebabcfcdb83567862b9f205e
Author: fisher <yyuu51888@163.com>
Date:   Mon Apr 27 11:59:12 2015 -0700

    Email in CV
---
 res/yuCV_final.docx | Bin 37962 -> 37908 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/yuCV_final.docx b/res/yuCV_final.docx
index f186f72..70f00f7 100644
--- a/res/yuCV_final.docx
+++ b/res/yuCV_final.docx
@@ -3,7 +3,7 @@ National Laboratory for Parallel and Distributed Processing
 Computer School, National University of Defense Technology
 Changsha, Hunan Province, 410073, P.R.C
 Phone: (86)13627319266
-Email: yuyue_whu@foxmail.com
+Email: yuyue@nudt.edu.cn
 
 EDUCATION
 Computer Science Department, University of California, Davis, USA.

commit 8a1f0f13c60527911a62c3235d7bd758292d1c13
Author: fisher <yyuu51888@163.com>
Date:   Mon Apr 27 11:49:11 2015 -0700

    fix a wrong URL
---
 index.html                             |   2 +-
 res/paper/icsme2014.pdf                | Bin 0 -> 11153344 bytes
 res/paper/pr-assignment-demo-final.pdf | Bin 11153344 -> 0 bytes
 3 files changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index 3a75050..48679d7 100644
--- a/index.html
+++ b/index.html
@@ -111,7 +111,7 @@
         <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
 		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
 		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
-		[<A href="res/paper/msr2015.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+		[<A href="res/paper/icsme2014.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
 
 		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
 		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
diff --git a/res/paper/icsme2014.pdf b/res/paper/icsme2014.pdf
new file mode 100644
index 0000000..0626b15
--- /dev/null
+++ b/res/paper/icsme2014.pdf
@@ -0,0 +1,299 @@
+Reviewer Recommender of Pull-Requests in GitHub
+                                                             Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling†
+                                                             ∗ National
+                                                 Laboratory for Parallel and Distributed Processing,
+                         College of Computer, National University of Defense Technology, Changsha, 410073, China
+                 † Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                                       {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+   Abstract—Pull-Request (PR) is the primary method for code                                               traditional review process is transformed into a crowdsourcing
+contributions from thousands of developers in GitHub. To main-                                             job. Not only core developers but also external developers in
+tain the quality of software projects, PR review is an essential                                           the community can act as reviewers. The reviewers can freely
+part of distributed software development. Assigning new PRs
+to appropriate reviewers will make the review process more                                                 discuss the PR with the contributor and core developers in
+effective which can reduce the time between the submission of a                                            terms of their interests and expertise. Next, in the light of
+PR and the actual review of it. However, reviewer assignment                                               reviewers’ suggestions, the contributor would update his pull-
+is now organized manually in GitHub. To reduce this cost,                                                  request by attaching new commits, and then reviewers discuss
+we propose a reviewer recommender to predict highly relevant                                               that PR again. Finally, the responsible mangers of the core
+reviewers of incoming PRs. Combining information retrieval with
+social network analyzing, our approach takes full advantage                                                team take all the opinions of reviewers into consideration, and
+of the textual semantic of PRs and the social relations of                                                 then merges or rejects that PR. Thus, we can see PR review
+developers. We implement an online system to show how the                                                  is an important way to maintain the quality of the software.
+reviewer recommender helps project managers to ﬁnd potential                                                  Assigning incoming PRs to appropriate reviewers will make
+reviewers from crowds. Our approach can reach a precision of
+74% for top-1 recommendation, and a recall of 71% for top-10
+                                                                                                           PR review more effective, because it can reduce the time
+recommendation. http://rrp.trustie.net/                                                                    between the submission of a PR and the actual review of
+   Keywords—Pull-request, Reviewer Recommendation, Social                                                  it. We refer to the period between the time when a PR is
+Network Analysis, Distributed Software Development                                                         submitted into issue tracker and the time when it begins to
+                                                                                                           be discussed by reviewers as review latency. The PRs which
+                                      I. I NTRODUCTION                                                     have been assigned to reviewers have lower review latency
+                  1
+   GitHub , a popular social coding community [1], attracts a                                              than those without assignment. According to our analysis,
+large number of software projects hosted on it. Pull-Request                                               the time of the recommended reviewer submitting his ﬁrst
+(PR) is the primary method [2], [3] for code contributions                                                 comment on PR is on average 40.8 hours shorter than those
+from thousands of developers. Currently, it is not uncommon                                                without recommendation. However, reviewer assignment is
+in the popular projects to receive tens of PRs daily covering                                              now organized manually in GitHub. As each developer in
+nearly 60% of code commits from contributors.                                                              community has the chance to join the review discussions, the
+                                Issue Tracker                                                              project managers may not completely ﬁnd out all potential
+      Pull
+    Request
+                                                                        Core Team                          reviewers from crowds.
+                  Submits                                     Discuss
+                  Discuss                Discuss
+                                                                                                              To reduce this cost, we designed a reviewer recommender
+                               PR
+                                    PR
+                                              PR
+                                                   PR
+                                                                                                           to predict appropriate reviewers for incoming PRs in Github.
+                                         PR             PR
+              Update
+                                                                                                           The two key intuitions of our approach focus on the textual
+                                                                                      Merge    Project
+                                                                                                           semantic of PRs and the social relations of contributors.
+                                                                         Judge
+                                                                                              Repository
+   Contributor               Review Comments                                                                 •   The expertise of a reviewer can be learned from his
+                                                                             Reject
+                              Pull
+                            Request
+                                                                                                                 PR-commenting history. For a newly received PR, the
+      Clone                                                              Closed
+                                                                                                                 developers who have commented similar PR frequently
+    Repository
+                                                                                                                 in the past are the suitable candidates to review the new
+                                                                                                                 one.
+                   Figure 1. The overview of pull-request mechanism
+                                                                                                             •   The common interests among developers can be measured
+   The overview of PR mechanism is presented as Figure 1.                                                        by social relations between contributors and reviewers in
+Firstly, a contributor implements some new features or ﬁxes                                                      historical PRs. The developers who share more common
+bugs based on his personal repository cloned from the latest                                                     interests with the contributor are the appropriate review-
+version of project repository. When his work is ﬁnished, the                                                     ers of his incoming PRs.
+patches are packaged as a PR submitted to the issue tracker.
+The system open a new issue for this PR, and then add                                                         Thus, we propose a novel approach combining information
+the issue to an awaiting list to be reviewed. In GitHub, the                                               retrieval with social network analyzing to recommend highly
+                                                                                                           relevant reviewers. We demonstrated the efﬁciency of our
+  1 https://github.com/                                                                                    approach on 10 popular projects which have received over
+1000 PRs in GitHub. On average, our reviewer recommender                 integrated with the social media of peer-to-peer notiﬁcation,
+can reach a precision of 74% on the top-1 recommendation                 such as the @mention tool in GitHub that adds the @ tags
+and a recall of 71% on top-10 recommendation.                            to the potential reviewers automatically. Actually, we also
+                                                                         can provide an independent service for each OSS community,
+          II. E XITING T OOLS AND R ELATED WORK                          when the enough data has been shared and collected.
+A. Exiting Tools and Motivation
+                                                                         B. Related Work
+   Notiﬁcations in Github are based on the repositories you
+are watching. Each project watcher will mechanically receive                We review the similar researches of reviewer recommenda-
+notiﬁcations of all newly received PRs. In this way, the PRs             tion in bug triaging and code (patch) review in this section.
+which the developer really cares about would be drowned out                 The most representative researches are based on machine
+by a massive amount of noise.                                            learning and information retrieval techniques to triage incom-
+   To triage PRs, the project managers can use a label to assign         ing bug reports. For example, Anvik et al. [4] apply a machine
+a new PR to one of core developer. The assignee is in charge of          learning algorithm to learn the kinds of reports each developer
+the review process. However, only 0.89% of PRs have been set             resolves and recommend developers for a new bug report.
+that label in our dataset. Besides, the @mention tool is widely          Kagdi and Poshyvanyk [5], [6] extract the comments and
+used in the discussion of PR review. If a @ symbol placed in             identiﬁers from the source code and index these data by Latent
+front of a user’s ID, the corresponding developer will receive           Semantic Indexing (LSI). For a new bug report, such indexes
+a special notiﬁcation that he has been mentioned in the PR               can be useful to identify the most appropriate developers to
+and his ID would be highlighted.                                         resolve it. To support code review, Balachandran [7] designs
+                                                                         a tool called Review Bot to predict the developers who
+                                                                         have modiﬁed related code sections frequently as appropriate
+                                                                         reviewers. Compared to the Review Bot, Thongtanunam et al.
+                                                                         [8] recommends code reviewers from developers who have
+                                                                         examined ﬁles with similar directory paths.
+                                                                            All these approaches focus on mining the related text, such
+                                                                         as bug descriptions and code ﬁles, but the social relations
+                                                                         among developers are ignored. However, the process of PR
+                                                                         review is more likely to rely on the discussions among review-
+                                                                         ers to be resolved. These discussions occurred over artifacts
+                                                                         may imply reviewers common interests in social activities and
+                                                                         division of work in projects. Thus, we consider the relations
+                                                                         reﬂected by the artifact-mediated communication is a key
+                                                                         factor of recommendation. Begel et al. [9] present a framework
+                                                                         for connecting developers and their work artifacts together. In
+                                                                         this paper, we propose a novel and lightweight approach that
+                                                                         combines information retrieval with social network analyzing
+                                                                         to recommend appropriate reviewers for new PRs.
+
+                                                                                             III. M ETHODOLOGY
+                                                                            Firstly, the titles and descriptions of PRs are extracted and
+                                                                         indexed using the Vector Space Model. Then, we measure
+  Figure 2. An example of discussion among reviewers in a pull-request
+                                                                         semantic similarity between the new PR and each one of
+   Taking a real PR of Ruby on Rails as an example, as shown             historical PRs, and predict the expertise score of a developer
+in Figure 2, no one is assigned to this PR. A core developer             according to the number of comments he has submitted.
+called rafaelfranca is the ﬁrst reviewer to comment the PR. As           Furthermore, we construct a comment network for each project
+he considers that javan’s work would be relevant, he mentions            separately by analyzing the comment relations among devel-
+(@) javan to join the discussion. At the second post, we                 opers. In a speciﬁc project, we can predict the common interest
+can see that javan indeed presents his opinion. Apart from               of each reviewer shared with the PR contributor based on the
+javan who is informed by rafaelfranca, other three reviewers             comment network. Finally, we synthesize the expertise scores
+comment that PR spontaneously. Because all the comments                  and the common interests to rank all candidates.
+affect the decision-making of that PR, if they do not catch it
+timely, it is possible that some vital opinions would be lost.           A. Vector Space Model of Pull-Request
+   Thus, if appropriate reviewers are automatically recom-                  Each PR is characterized by its title and description, and
+mended when a new pull-request is submitted, the review                  labeled with a set of names about developers who had sub-
+process would be more efﬁcient. It is worth mentioning that the          mitted at least one comment to it. Then, all stop words and
+novel application of reviewer recommender can be seamlessly              non-alphabetic tokens are removed, and remaining words are
+stemmed. We use the vector space model to represent each PR                where timestamp(ij,r,n) is the date that reviewer vj presented
+as a weighted vector. Each element in the vector is a term, and            the comment n in the PR r which is reported by contributor vi .
+the value stands for its importance for the PR. Term frequency-            The baseline and deadline are highly related to the selection
+inverse document frequency (tf-idf) is utilized to indicate the            of training set. If we use the data from 2012-01-01 to 2013-05-
+value of a term, which can be calculated as Equation 1.                    31 to learn the weights, the parameters baseline and deadline
+                             nt                 NPR                        are set to 2011-12-31 and 2013-05-31 respectively.
+ tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                             Np r         |pr ∈ PR : t ∈ pr |                                                         v3                   v4
+where t is a term, pr is a pull-request, PR is the corpus of all
+pull-requests in a given project, nt is the count of appearance
+                                                                                                                        =?
+
+
+
+
+                                                                                                          95
+for term t in pr , and Npr and NPR are the total number of                                                          w 41
+
+
+
+
+                                                                                                       0.
+                                                                                                                                        w42=?
+
+
+
+
+                                                                                                      =
+terms in pr and pull-requests in corpus respectively.
+
+
+
+
+                                                                                                   13
+                                                                                                w
+B. Semantic Similarity and Expertise Score                                                                 w12=2.19
+   For a newly recieved PR, we ﬁrstly retrieve top-k relevant                                 v1                                 v2
+PRs from our corpus. We use cosine similarity to measure                                                       v2 commented v1's PR_1 on 2012-12-03
+the semantic similarity between a new PR and each of the re-                                                   v2 commented v1's PR_1 on 2013-01-12
+                                                                                                               v2 commented v1's PR_2 on 2013-05-07
+solved PRs. We consider that the more frequency the reviewer                             Project:
+                                                                                                               v3 commented v1's PR_2 on 2013-05-06
+                                                                                       Ruby on Rails
+has commented relevant PRs, the more knowledgeable that                                                              v1 commented v4's PR……
+                                                                                                                     v2 commented v4's PR……
+reviewer is in handling the new PR. Therefore, the expertise                                                         v4 commented v1's PR……
+score of a reviewer can be predicted based on the number of                            Figure 4. An example of the comment network
+comments which they has published in the top-k relevant PRs                   Figure 4 shows an example of a part of comment network
+(i.e., cosine similarity score times the number of comments).              about Ruby on Rails. Two different PRs (PR_1 and PR_2)
+C. Comment Network and Common Interest                                     reported by v1 have been commented by v2 and v3 , so there
+                                                                           are two edges from v1 to v2 and v1 to v3 . Evaluating the
+   We consider that common interests among developers are
+                                                                           relation between v1 and v2 , k of Equation 2 equals 2, because
+project-speciﬁc, so we build a comment network for each
+                                                                           v2 reviewed both two pull-requests. For PR_1, v2 commented
+project separately. In a given project, the structure of comment
+                                                                           it twice, so we set m = 2. The ﬁrst time-sensitive factor of
+relations is a many-to-many model. There are many contribu-
+                                                                           the date 2013-12-03 can be computed by Equation 3 that
+tors have submitted PRs to a project, and a contributor can be
+                                                                           t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12
+a reviewer to comment other contributors’ PRs. A PR would
+                                                                           (t12,1,2 ≈ 0.731), another review published by v2 in PR_1
+be commented by several reviewers more than once.
+                                                                           should be controlled by λ (set to 0.8) due to the diminishing
+   The comment network is deﬁned as a weighted directed                    impact of one user in the same PR, so w(12,1) can be calculated
+graph Gcn = V, E, W , where the set of developers is                       as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24. Similarly, the
+indicated as vertices V and the set of relations between nodes             weight w12 = w(12,1) + w(12,2) = 2.19, and w13 = 0.95.
+as edges E. If node vj has reviewed at least one of vi ’s PRs,             Thus, we can predict that reviewer v2 share more common
+there is a edge eij from vi to vj . The set of weights W reﬂects           interests with contributor v1 compared with v3 , which has been
+the importance degree of edges, and the weight wij of eij can              quantiﬁed by the corresponding weights of edges.
+be evaluated by Equation 2.                                                   The comment network has several desirable qualities.
+                   k                     k   m
+                                                                              • The global collaboration structure is revealed between
+       wij =           w(ij,r) = Pc ×             λn−1 × t(ij,r,n)   (2)
+                                                                                 contributors and reviewers in a given project.
+               r=1                      r=1 n=1
+                                                                              • The time-sensitive factor t is introduced to guarantee that
+where k is the total number of PR submitted by vi , and w(ij,r)                  the recent comments are more valuable for the weights
+is a component weight related to an individual PR r. Pc is                       of edges than the old comments.
+an empirical default value2 (set to 1.0), which is reserved to                • The decay factor λ is introduced to guarantee the differ-
+estimate the inﬂuence of each comment on the PR, and m                           ence values between the comments submitted to multiple
+is the sum of comments submitted by vj in the same PR r.                         PRs or single PR. For example, if reviewer vj commented
+When reviewer vj published multiple comments (m = 1) in                          5 different PRs of vi and meanwhile vq commented one
+the same PR, his inﬂuence is controlled by a decay factor λ                      of vi ’s PRs 5 times, the weight of wij is larger than wiq .
+(set to 0.8). The element t(ij,r,n) is a time-sensitive factor of
+corresponding comment which can be calculated as below:                    D. Reviewer Recommendation
+
+                     timestamp(ij,r,n) − baseline                             When a contributor submits a new PR, we use the PR text to
+       t(ij,r,n)   =                              ∈ (0, 1]           (3)   calculate expertise scores of candidates. Then, their common
+                        deadline − baseline                                interests can be calculated by starting from the contributor in
+  2 User comments can be found in pull-requests, issue posts and commit    the comment network. In this paper, we regard that the factor
+ﬁles. Here, we just use the comments of pull-request.                      of common interest is as important as the factor of expertise
+                            (a) Homepage of a project                                             (b) Summary of a PR                          (c) Recommendation Result
+                                                                         Figure 3. The online system of reviewer recommender
+
+in each project. Thus, we standardize the factors, and then                                                   top-10 recommendation. It means we can successfully hit
+add them together to recommend top-k reviewers to the new                                                     a majority of reviewer. Especially, high precision of top-1
+PR. In future, we plan to deeply analyze the inﬂuence of each                                                 recommendation is signiﬁcant. As the example of Figure 2,
+factor exerted on different projects.                                                                         if the ﬁrst reviewer can be predicted, he would remind other
+                                                                                                              reviewers to joint the discussion with @mentioning.
+    IV. R EVIEWER R ECOMMENDER AND E XPERIMENT
+   We implement an online system of reviewer recommender                                                                    V. C ONCLUSION AND F UTURE W ORK
+with B/S architecture. It consists of two parts: a backend server                                                For a new PR, recommending reviewers will make the
+that processes data and a web interface that interacts with the                                               review process more effective. In this paper, we propose a
+user. In practice, our application would be the most effectively                                              novel approach that combine information retrieval with social
+used as a plug-in for social coding communities.                                                              network analyzing. In the future, we plan to explore how to use
+   On the backend, the server can continuously collect and                                                    other types of social networks, such as the watcher network,
+analyze new PRs from GitHub. When a project receives a new                                                    to improve the performance of our method.
+PR, it will be listed in its homepage (Figure 3 (a)). We extract
+                                                                                                                                   VI. ACKNOWLEDGEMENT
+the key information of a PR such as the ID, description and
+submitter, as shown in Figure 3 (b). Project managers can pick                                                  This research is supported by the National High Technology
+an new PR from the awaiting list or submit a query for speciﬁc                                                Research and Development Program of China (Grant No.
+PR by typing in the issue ID. The number of recommendation                                                    2012AA011201).
+can be set as required. Then, in Figure 3 (c), the predicted                                                                                R EFERENCES
+result will be shown together with the measures. We evaluate
+                                                                                                              [1] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets soft-
+the performances of our approaches using precision and recall                                                     ware development: Perspectives from github, msdn, stack exchange, and
+which are widely used as standard metrics in previous work.                                                       topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+In that case, top-5 reviewers have been recommended, and 4                                                    [2] J. Tsay, L. Dabbish, and J. Herbsleb, “Inﬂuence of social and technical
+                                                                                                                  factors for evaluating contribution in github,” in Proceedings of the 36th
+of them have actually commented that PR in reality. Hence,                                                        International Conference on Software Engineering, ser. ICSE ’14, 2014,
+the precision is 80% and the recall is 100%.                                                                      pp. 356–366.
+                      0.8                                                                                     [3] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
+                                                                                                                  the pull-based software development model,” in Proceedings of the 36th
+                      0.7                                                                                         International Conference on Software Engineering, ser. ICSE ’14. New
+                                                                                                                  York, NY, USA: ACM, 2014, pp. 345–355.
+                      0.6                                                                                     [4] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+                                                                                                                  ceedings of the 28th International Conference on Software Engineering,
+                      0.5
+         Percentage
+
+
+
+
+                                                                                                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+                                                                                                              [5] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                      0.4
+                                                                                                                  request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+                      0.3
+                                                                                                                  International Conference on, May 2009, pp. 273–277.
+                                                                                                              [6] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+                      0.2                                                                                         D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                                 Precision                        history, or code authorship?” in Software Maintenance, 28th IEEE In-
+                                                                                 Recall
+                      0.1                                                                                         ternational Conference on, Sept 2012, pp. 451–460.
+                         1       2    3      4        5     6        7       8     9         10
+                                       The Number of Recommendation Reviewers                                 [7] V. Balachandran, “Reducing human effort and improving quality in peer
+                                                                                                                  code reviews using automatic static analysis and reviewer recommenda-
+        Figure 5. Precision vs. Recall of reviewer recommender                                                    tion,” in Proceedings of the 2013 International Conference on Software
+   In this paper, we demonstrate the performances of our                                                          Engineering, ser. ICSE ’13, 2013, pp. 931–940.
+approach on 10 popular projects which have received over                                                      [8] P. Thongtanunam, R. G. Kula, A. E. C. Cruz, N. Yoshida, and H. Iida,
+                                                                                                                  “Improving code review effectiveness through reviewer recommenda-
+1000 pull-requests. We use the data from 2012-01-01 to                                                            tions,” in Proceedings of the 7th International Workshop on Cooperative
+2013-05-31 as the training set and the data from 2013-06-                                                         and Human Aspects of Software Engineering, ser. CHASE ’14, 2014, pp.
+01 to 2013-10-01 as the test set. Figure 5 clearly exhibits the                                                   119–122.
+                                                                                                              [9] A. Begel, Y. P. Khoo, and T. Zimmermann, “Codebook: Discovering and
+overall performance of our approach. On average, the precision                                                    exploiting relationships in software repositories,” in Proceedings of the
+reaches the highest point of 0.74 for top-1 recommendation                                                        32Nd ACM/IEEE International Conference on Software Engineering -
+and the recall considerably ascends to 0.71 at the point of                                                       Volume 1, ser. ICSE ’10, 2010, pp. 125–134.
+
\ No newline at end of file
diff --git a/res/paper/pr-assignment-demo-final.pdf b/res/paper/pr-assignment-demo-final.pdf
deleted file mode 100644
index 0626b15..0000000
--- a/res/paper/pr-assignment-demo-final.pdf
+++ /dev/null
@@ -1,299 +0,0 @@
-Reviewer Recommender of Pull-Requests in GitHub
-                                                             Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling†
-                                                             ∗ National
-                                                 Laboratory for Parallel and Distributed Processing,
-                         College of Computer, National University of Defense Technology, Changsha, 410073, China
-                 † Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
-
-                                       {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
-
-
-   Abstract—Pull-Request (PR) is the primary method for code                                               traditional review process is transformed into a crowdsourcing
-contributions from thousands of developers in GitHub. To main-                                             job. Not only core developers but also external developers in
-tain the quality of software projects, PR review is an essential                                           the community can act as reviewers. The reviewers can freely
-part of distributed software development. Assigning new PRs
-to appropriate reviewers will make the review process more                                                 discuss the PR with the contributor and core developers in
-effective which can reduce the time between the submission of a                                            terms of their interests and expertise. Next, in the light of
-PR and the actual review of it. However, reviewer assignment                                               reviewers’ suggestions, the contributor would update his pull-
-is now organized manually in GitHub. To reduce this cost,                                                  request by attaching new commits, and then reviewers discuss
-we propose a reviewer recommender to predict highly relevant                                               that PR again. Finally, the responsible mangers of the core
-reviewers of incoming PRs. Combining information retrieval with
-social network analyzing, our approach takes full advantage                                                team take all the opinions of reviewers into consideration, and
-of the textual semantic of PRs and the social relations of                                                 then merges or rejects that PR. Thus, we can see PR review
-developers. We implement an online system to show how the                                                  is an important way to maintain the quality of the software.
-reviewer recommender helps project managers to ﬁnd potential                                                  Assigning incoming PRs to appropriate reviewers will make
-reviewers from crowds. Our approach can reach a precision of
-74% for top-1 recommendation, and a recall of 71% for top-10
-                                                                                                           PR review more effective, because it can reduce the time
-recommendation. http://rrp.trustie.net/                                                                    between the submission of a PR and the actual review of
-   Keywords—Pull-request, Reviewer Recommendation, Social                                                  it. We refer to the period between the time when a PR is
-Network Analysis, Distributed Software Development                                                         submitted into issue tracker and the time when it begins to
-                                                                                                           be discussed by reviewers as review latency. The PRs which
-                                      I. I NTRODUCTION                                                     have been assigned to reviewers have lower review latency
-                  1
-   GitHub , a popular social coding community [1], attracts a                                              than those without assignment. According to our analysis,
-large number of software projects hosted on it. Pull-Request                                               the time of the recommended reviewer submitting his ﬁrst
-(PR) is the primary method [2], [3] for code contributions                                                 comment on PR is on average 40.8 hours shorter than those
-from thousands of developers. Currently, it is not uncommon                                                without recommendation. However, reviewer assignment is
-in the popular projects to receive tens of PRs daily covering                                              now organized manually in GitHub. As each developer in
-nearly 60% of code commits from contributors.                                                              community has the chance to join the review discussions, the
-                                Issue Tracker                                                              project managers may not completely ﬁnd out all potential
-      Pull
-    Request
-                                                                        Core Team                          reviewers from crowds.
-                  Submits                                     Discuss
-                  Discuss                Discuss
-                                                                                                              To reduce this cost, we designed a reviewer recommender
-                               PR
-                                    PR
-                                              PR
-                                                   PR
-                                                                                                           to predict appropriate reviewers for incoming PRs in Github.
-                                         PR             PR
-              Update
-                                                                                                           The two key intuitions of our approach focus on the textual
-                                                                                      Merge    Project
-                                                                                                           semantic of PRs and the social relations of contributors.
-                                                                         Judge
-                                                                                              Repository
-   Contributor               Review Comments                                                                 •   The expertise of a reviewer can be learned from his
-                                                                             Reject
-                              Pull
-                            Request
-                                                                                                                 PR-commenting history. For a newly received PR, the
-      Clone                                                              Closed
-                                                                                                                 developers who have commented similar PR frequently
-    Repository
-                                                                                                                 in the past are the suitable candidates to review the new
-                                                                                                                 one.
-                   Figure 1. The overview of pull-request mechanism
-                                                                                                             •   The common interests among developers can be measured
-   The overview of PR mechanism is presented as Figure 1.                                                        by social relations between contributors and reviewers in
-Firstly, a contributor implements some new features or ﬁxes                                                      historical PRs. The developers who share more common
-bugs based on his personal repository cloned from the latest                                                     interests with the contributor are the appropriate review-
-version of project repository. When his work is ﬁnished, the                                                     ers of his incoming PRs.
-patches are packaged as a PR submitted to the issue tracker.
-The system open a new issue for this PR, and then add                                                         Thus, we propose a novel approach combining information
-the issue to an awaiting list to be reviewed. In GitHub, the                                               retrieval with social network analyzing to recommend highly
-                                                                                                           relevant reviewers. We demonstrated the efﬁciency of our
-  1 https://github.com/                                                                                    approach on 10 popular projects which have received over
-1000 PRs in GitHub. On average, our reviewer recommender                 integrated with the social media of peer-to-peer notiﬁcation,
-can reach a precision of 74% on the top-1 recommendation                 such as the @mention tool in GitHub that adds the @ tags
-and a recall of 71% on top-10 recommendation.                            to the potential reviewers automatically. Actually, we also
-                                                                         can provide an independent service for each OSS community,
-          II. E XITING T OOLS AND R ELATED WORK                          when the enough data has been shared and collected.
-A. Exiting Tools and Motivation
-                                                                         B. Related Work
-   Notiﬁcations in Github are based on the repositories you
-are watching. Each project watcher will mechanically receive                We review the similar researches of reviewer recommenda-
-notiﬁcations of all newly received PRs. In this way, the PRs             tion in bug triaging and code (patch) review in this section.
-which the developer really cares about would be drowned out                 The most representative researches are based on machine
-by a massive amount of noise.                                            learning and information retrieval techniques to triage incom-
-   To triage PRs, the project managers can use a label to assign         ing bug reports. For example, Anvik et al. [4] apply a machine
-a new PR to one of core developer. The assignee is in charge of          learning algorithm to learn the kinds of reports each developer
-the review process. However, only 0.89% of PRs have been set             resolves and recommend developers for a new bug report.
-that label in our dataset. Besides, the @mention tool is widely          Kagdi and Poshyvanyk [5], [6] extract the comments and
-used in the discussion of PR review. If a @ symbol placed in             identiﬁers from the source code and index these data by Latent
-front of a user’s ID, the corresponding developer will receive           Semantic Indexing (LSI). For a new bug report, such indexes
-a special notiﬁcation that he has been mentioned in the PR               can be useful to identify the most appropriate developers to
-and his ID would be highlighted.                                         resolve it. To support code review, Balachandran [7] designs
-                                                                         a tool called Review Bot to predict the developers who
-                                                                         have modiﬁed related code sections frequently as appropriate
-                                                                         reviewers. Compared to the Review Bot, Thongtanunam et al.
-                                                                         [8] recommends code reviewers from developers who have
-                                                                         examined ﬁles with similar directory paths.
-                                                                            All these approaches focus on mining the related text, such
-                                                                         as bug descriptions and code ﬁles, but the social relations
-                                                                         among developers are ignored. However, the process of PR
-                                                                         review is more likely to rely on the discussions among review-
-                                                                         ers to be resolved. These discussions occurred over artifacts
-                                                                         may imply reviewers common interests in social activities and
-                                                                         division of work in projects. Thus, we consider the relations
-                                                                         reﬂected by the artifact-mediated communication is a key
-                                                                         factor of recommendation. Begel et al. [9] present a framework
-                                                                         for connecting developers and their work artifacts together. In
-                                                                         this paper, we propose a novel and lightweight approach that
-                                                                         combines information retrieval with social network analyzing
-                                                                         to recommend appropriate reviewers for new PRs.
-
-                                                                                             III. M ETHODOLOGY
-                                                                            Firstly, the titles and descriptions of PRs are extracted and
-                                                                         indexed using the Vector Space Model. Then, we measure
-  Figure 2. An example of discussion among reviewers in a pull-request
-                                                                         semantic similarity between the new PR and each one of
-   Taking a real PR of Ruby on Rails as an example, as shown             historical PRs, and predict the expertise score of a developer
-in Figure 2, no one is assigned to this PR. A core developer             according to the number of comments he has submitted.
-called rafaelfranca is the ﬁrst reviewer to comment the PR. As           Furthermore, we construct a comment network for each project
-he considers that javan’s work would be relevant, he mentions            separately by analyzing the comment relations among devel-
-(@) javan to join the discussion. At the second post, we                 opers. In a speciﬁc project, we can predict the common interest
-can see that javan indeed presents his opinion. Apart from               of each reviewer shared with the PR contributor based on the
-javan who is informed by rafaelfranca, other three reviewers             comment network. Finally, we synthesize the expertise scores
-comment that PR spontaneously. Because all the comments                  and the common interests to rank all candidates.
-affect the decision-making of that PR, if they do not catch it
-timely, it is possible that some vital opinions would be lost.           A. Vector Space Model of Pull-Request
-   Thus, if appropriate reviewers are automatically recom-                  Each PR is characterized by its title and description, and
-mended when a new pull-request is submitted, the review                  labeled with a set of names about developers who had sub-
-process would be more efﬁcient. It is worth mentioning that the          mitted at least one comment to it. Then, all stop words and
-novel application of reviewer recommender can be seamlessly              non-alphabetic tokens are removed, and remaining words are
-stemmed. We use the vector space model to represent each PR                where timestamp(ij,r,n) is the date that reviewer vj presented
-as a weighted vector. Each element in the vector is a term, and            the comment n in the PR r which is reported by contributor vi .
-the value stands for its importance for the PR. Term frequency-            The baseline and deadline are highly related to the selection
-inverse document frequency (tf-idf) is utilized to indicate the            of training set. If we use the data from 2012-01-01 to 2013-05-
-value of a term, which can be calculated as Equation 1.                    31 to learn the weights, the parameters baseline and deadline
-                             nt                 NPR                        are set to 2011-12-31 and 2013-05-31 respectively.
- tf idf (t, pr , PR ) = log(      +1)×log                     (1)
-                             Np r         |pr ∈ PR : t ∈ pr |                                                         v3                   v4
-where t is a term, pr is a pull-request, PR is the corpus of all
-pull-requests in a given project, nt is the count of appearance
-                                                                                                                        =?
-
-
-
-
-                                                                                                          95
-for term t in pr , and Npr and NPR are the total number of                                                          w 41
-
-
-
-
-                                                                                                       0.
-                                                                                                                                        w42=?
-
-
-
-
-                                                                                                      =
-terms in pr and pull-requests in corpus respectively.
-
-
-
-
-                                                                                                   13
-                                                                                                w
-B. Semantic Similarity and Expertise Score                                                                 w12=2.19
-   For a newly recieved PR, we ﬁrstly retrieve top-k relevant                                 v1                                 v2
-PRs from our corpus. We use cosine similarity to measure                                                       v2 commented v1's PR_1 on 2012-12-03
-the semantic similarity between a new PR and each of the re-                                                   v2 commented v1's PR_1 on 2013-01-12
-                                                                                                               v2 commented v1's PR_2 on 2013-05-07
-solved PRs. We consider that the more frequency the reviewer                             Project:
-                                                                                                               v3 commented v1's PR_2 on 2013-05-06
-                                                                                       Ruby on Rails
-has commented relevant PRs, the more knowledgeable that                                                              v1 commented v4's PR……
-                                                                                                                     v2 commented v4's PR……
-reviewer is in handling the new PR. Therefore, the expertise                                                         v4 commented v1's PR……
-score of a reviewer can be predicted based on the number of                            Figure 4. An example of the comment network
-comments which they has published in the top-k relevant PRs                   Figure 4 shows an example of a part of comment network
-(i.e., cosine similarity score times the number of comments).              about Ruby on Rails. Two different PRs (PR_1 and PR_2)
-C. Comment Network and Common Interest                                     reported by v1 have been commented by v2 and v3 , so there
-                                                                           are two edges from v1 to v2 and v1 to v3 . Evaluating the
-   We consider that common interests among developers are
-                                                                           relation between v1 and v2 , k of Equation 2 equals 2, because
-project-speciﬁc, so we build a comment network for each
-                                                                           v2 reviewed both two pull-requests. For PR_1, v2 commented
-project separately. In a given project, the structure of comment
-                                                                           it twice, so we set m = 2. The ﬁrst time-sensitive factor of
-relations is a many-to-many model. There are many contribu-
-                                                                           the date 2013-12-03 can be computed by Equation 3 that
-tors have submitted PRs to a project, and a contributor can be
-                                                                           t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12
-a reviewer to comment other contributors’ PRs. A PR would
-                                                                           (t12,1,2 ≈ 0.731), another review published by v2 in PR_1
-be commented by several reviewers more than once.
-                                                                           should be controlled by λ (set to 0.8) due to the diminishing
-   The comment network is deﬁned as a weighted directed                    impact of one user in the same PR, so w(12,1) can be calculated
-graph Gcn = V, E, W , where the set of developers is                       as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24. Similarly, the
-indicated as vertices V and the set of relations between nodes             weight w12 = w(12,1) + w(12,2) = 2.19, and w13 = 0.95.
-as edges E. If node vj has reviewed at least one of vi ’s PRs,             Thus, we can predict that reviewer v2 share more common
-there is a edge eij from vi to vj . The set of weights W reﬂects           interests with contributor v1 compared with v3 , which has been
-the importance degree of edges, and the weight wij of eij can              quantiﬁed by the corresponding weights of edges.
-be evaluated by Equation 2.                                                   The comment network has several desirable qualities.
-                   k                     k   m
-                                                                              • The global collaboration structure is revealed between
-       wij =           w(ij,r) = Pc ×             λn−1 × t(ij,r,n)   (2)
-                                                                                 contributors and reviewers in a given project.
-               r=1                      r=1 n=1
-                                                                              • The time-sensitive factor t is introduced to guarantee that
-where k is the total number of PR submitted by vi , and w(ij,r)                  the recent comments are more valuable for the weights
-is a component weight related to an individual PR r. Pc is                       of edges than the old comments.
-an empirical default value2 (set to 1.0), which is reserved to                • The decay factor λ is introduced to guarantee the differ-
-estimate the inﬂuence of each comment on the PR, and m                           ence values between the comments submitted to multiple
-is the sum of comments submitted by vj in the same PR r.                         PRs or single PR. For example, if reviewer vj commented
-When reviewer vj published multiple comments (m = 1) in                          5 different PRs of vi and meanwhile vq commented one
-the same PR, his inﬂuence is controlled by a decay factor λ                      of vi ’s PRs 5 times, the weight of wij is larger than wiq .
-(set to 0.8). The element t(ij,r,n) is a time-sensitive factor of
-corresponding comment which can be calculated as below:                    D. Reviewer Recommendation
-
-                     timestamp(ij,r,n) − baseline                             When a contributor submits a new PR, we use the PR text to
-       t(ij,r,n)   =                              ∈ (0, 1]           (3)   calculate expertise scores of candidates. Then, their common
-                        deadline − baseline                                interests can be calculated by starting from the contributor in
-  2 User comments can be found in pull-requests, issue posts and commit    the comment network. In this paper, we regard that the factor
-ﬁles. Here, we just use the comments of pull-request.                      of common interest is as important as the factor of expertise
-                            (a) Homepage of a project                                             (b) Summary of a PR                          (c) Recommendation Result
-                                                                         Figure 3. The online system of reviewer recommender
-
-in each project. Thus, we standardize the factors, and then                                                   top-10 recommendation. It means we can successfully hit
-add them together to recommend top-k reviewers to the new                                                     a majority of reviewer. Especially, high precision of top-1
-PR. In future, we plan to deeply analyze the inﬂuence of each                                                 recommendation is signiﬁcant. As the example of Figure 2,
-factor exerted on different projects.                                                                         if the ﬁrst reviewer can be predicted, he would remind other
-                                                                                                              reviewers to joint the discussion with @mentioning.
-    IV. R EVIEWER R ECOMMENDER AND E XPERIMENT
-   We implement an online system of reviewer recommender                                                                    V. C ONCLUSION AND F UTURE W ORK
-with B/S architecture. It consists of two parts: a backend server                                                For a new PR, recommending reviewers will make the
-that processes data and a web interface that interacts with the                                               review process more effective. In this paper, we propose a
-user. In practice, our application would be the most effectively                                              novel approach that combine information retrieval with social
-used as a plug-in for social coding communities.                                                              network analyzing. In the future, we plan to explore how to use
-   On the backend, the server can continuously collect and                                                    other types of social networks, such as the watcher network,
-analyze new PRs from GitHub. When a project receives a new                                                    to improve the performance of our method.
-PR, it will be listed in its homepage (Figure 3 (a)). We extract
-                                                                                                                                   VI. ACKNOWLEDGEMENT
-the key information of a PR such as the ID, description and
-submitter, as shown in Figure 3 (b). Project managers can pick                                                  This research is supported by the National High Technology
-an new PR from the awaiting list or submit a query for speciﬁc                                                Research and Development Program of China (Grant No.
-PR by typing in the issue ID. The number of recommendation                                                    2012AA011201).
-can be set as required. Then, in Figure 3 (c), the predicted                                                                                R EFERENCES
-result will be shown together with the measures. We evaluate
-                                                                                                              [1] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets soft-
-the performances of our approaches using precision and recall                                                     ware development: Perspectives from github, msdn, stack exchange, and
-which are widely used as standard metrics in previous work.                                                       topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
-In that case, top-5 reviewers have been recommended, and 4                                                    [2] J. Tsay, L. Dabbish, and J. Herbsleb, “Inﬂuence of social and technical
-                                                                                                                  factors for evaluating contribution in github,” in Proceedings of the 36th
-of them have actually commented that PR in reality. Hence,                                                        International Conference on Software Engineering, ser. ICSE ’14, 2014,
-the precision is 80% and the recall is 100%.                                                                      pp. 356–366.
-                      0.8                                                                                     [3] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
-                                                                                                                  the pull-based software development model,” in Proceedings of the 36th
-                      0.7                                                                                         International Conference on Software Engineering, ser. ICSE ’14. New
-                                                                                                                  York, NY, USA: ACM, 2014, pp. 345–355.
-                      0.6                                                                                     [4] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
-                                                                                                                  ceedings of the 28th International Conference on Software Engineering,
-                      0.5
-         Percentage
-
-
-
-
-                                                                                                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
-                                                                                                              [5] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
-                      0.4
-                                                                                                                  request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
-                      0.3
-                                                                                                                  International Conference on, May 2009, pp. 273–277.
-                                                                                                              [6] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
-                      0.2                                                                                         D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
-                                                                                 Precision                        history, or code authorship?” in Software Maintenance, 28th IEEE In-
-                                                                                 Recall
-                      0.1                                                                                         ternational Conference on, Sept 2012, pp. 451–460.
-                         1       2    3      4        5     6        7       8     9         10
-                                       The Number of Recommendation Reviewers                                 [7] V. Balachandran, “Reducing human effort and improving quality in peer
-                                                                                                                  code reviews using automatic static analysis and reviewer recommenda-
-        Figure 5. Precision vs. Recall of reviewer recommender                                                    tion,” in Proceedings of the 2013 International Conference on Software
-   In this paper, we demonstrate the performances of our                                                          Engineering, ser. ICSE ’13, 2013, pp. 931–940.
-approach on 10 popular projects which have received over                                                      [8] P. Thongtanunam, R. G. Kula, A. E. C. Cruz, N. Yoshida, and H. Iida,
-                                                                                                                  “Improving code review effectiveness through reviewer recommenda-
-1000 pull-requests. We use the data from 2012-01-01 to                                                            tions,” in Proceedings of the 7th International Workshop on Cooperative
-2013-05-31 as the training set and the data from 2013-06-                                                         and Human Aspects of Software Engineering, ser. CHASE ’14, 2014, pp.
-01 to 2013-10-01 as the test set. Figure 5 clearly exhibits the                                                   119–122.
-                                                                                                              [9] A. Begel, Y. P. Khoo, and T. Zimmermann, “Codebook: Discovering and
-overall performance of our approach. On average, the precision                                                    exploiting relationships in software repositories,” in Proceedings of the
-reaches the highest point of 0.74 for top-1 recommendation                                                        32Nd ACM/IEEE International Conference on Software Engineering -
-and the recall considerably ascends to 0.71 at the point of                                                       Volume 1, ser. ICSE ’10, 2010, pp. 125–134.
-
\ No newline at end of file

commit 2a60dd4c8f78ee3cfa1a5dd0139109aeea003e3c
Author: fisher <yyuu51888@163.com>
Date:   Fri Apr 24 13:38:24 2015 -0700

    old URL
---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index b43c761..a2f812f 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
 # yueyu.github.io
-My new homepage hosted on GitHub.
+My new homepage hosted on GitHub migrated from http://fisher.trustie.net/.

commit 520454576c3b602c71fb3c861eb6a8b28a476736
Author: fisher <yyuu51888@163.com>
Date:   Fri Apr 24 13:36:18 2015 -0700

    minor
---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index a0fb5f0..b43c761 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
 # yueyu.github.io
-my new homepage hosted on GitHub.
+My new homepage hosted on GitHub.

commit 9d3b21562f3af06f462532f484ab25aeebdf00f3
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 17:31:47 2015 -0700

    minor
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index fb6cc85..3a75050 100644
--- a/index.html
+++ b/index.html
@@ -153,7 +153,7 @@
 	  <LI>
 	    Xiang Li, Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, <strong>Yue Yu</strong></a>, Dengqing Tang.
 		<strong>Inducing Taxonomy from Tags: An Agglomerative Hierarchical Clustering Framework</strong>. 
-		Advanced Data Mining and Applications (ADMA 2012),Springer Berlin Heidelberg, 2012.
+		Advanced Data Mining and Applications (ADMA 2012), Springer Berlin Heidelberg, 2012.
         [<A href="res/paper/ADMA12-camera-ready.pdf">pdf</A>]  
 		</UL>
 		

commit 0b2b248e9163746f3e2ae65a8f2af0631eb6d5c6
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 17:31:23 2015 -0700

    cv change in homepage
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index b524dcf..fb6cc85 100644
--- a/index.html
+++ b/index.html
@@ -35,7 +35,7 @@
 		   Phone: (86)13627319266<br>
 		   Email: yuyue &lt;at&gt; nudt &lt;dot&gt; edu &lt;dot&gt; cn<br>
         </p>
-		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
+		   <strong>Please find my <a href="res/yuyue_cv.pdf">Curriculum Vitae</a> here.</strong>
         <LI>
         </UL>
 		 <hr size="2" color="black" align="center">

commit 4174ffe40bd86c675dbb1dde3d72369d5cb1b300
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 17:30:23 2015 -0700

    add new cv
---
 res/CV_Yu.pdf       | Bin 105648 -> 0 bytes
 res/yuCV_final.docx | Bin 0 -> 37962 bytes
 res/yuyue_cv.pdf    | Bin 0 -> 68113 bytes
 3 files changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/CV_Yu.pdf b/res/CV_Yu.pdf
deleted file mode 100644
index 22fb33e..0000000
--- a/res/CV_Yu.pdf
+++ /dev/null
@@ -1,86 +0,0 @@
-Yue Yu（余跃）http://fisher.trustie.net/
-National Laboratory for Parallel and Distributed Processing
-Computer School, National University of Defense Technology
-Changsha, Hunan Province, 410073, P.R.C
-Phone: (86)13627319266
-Email: yuyue_whu@foxmail.com
-
-
-EDUCATION
-National Laboratory for Parallel and Distributed Processing (PDL), National University of
-Defense Technology (NUDT), China.
-2013.3--present Ph.D. in Software Engineering. Advisor: Huaimin Wang
-Computer School, National University of Defense Technology, China (Rank: top 5)
-2011.9--2013.3 M.S. in Computer Science. Advisor: Huaimin Wang
-Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
-2007.9--2011.6 B.E. in Information Security.
-School of Journalism and Communication, Wuhan University, China.
-2009.03-2010.06 Minor in Journalism and Communication.
-
-
-AWARDS AND HONORS
-2013 OW2 International Programming Contest                        Special Prize (Only One)
-2012 OW2 International Programming Contest                         First Prize (Top 1)
-2011 National Information Security Competition                     Third Prize (17%)
-2010 National Information Security Competition                     First Prize (2.3%)
-Awarded “Yungui Ci” Scholarship in NUDT                            2011-2012 (Top 2)
-Awarded First-class Scholarship in Wuhan University                2010-2011 (Top 5%)
-Awarded National Scholarship of China                              2009-2010 (Top 2)
-Honored as Outstanding Graduates of Wuhan University               2007-2011 (20%)
-Honored as Excellent Student Leader of Wuhan University (Twice)
-
-
-SKILLS
-   Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
-   System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene
-    OpenSSL, Geni, Weka.
-
-
-TEACHING & RESEARCH EXPERIENCE
-   Teaching Assistant, National University of Defense Technology          2012.8-2013.8
-     Network Program Design
-     Distributed Computing Environment
-   Research Intern, Trustie Group, PDL, NUDT                              2011.9-present
-       National High Technology Research and Development Program of China (Grant No.
-        2012AA010101)
-     National Science Foundation of China (Grant No.60903043)
-   Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
-     Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
-     Research on Feature Detection and Location of OSS Repository           2012.3-2013.3
-   Vice-Chairman of Student Union, Wuhan University                       2009.10-2010.10
-     Awarded Excellent Student Union
-
-
-PUBILCATIONS
-2013
-   Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of
-    Hierarchical Software Feature Repository. The 25th International Conference on Software
-    Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%
-    acceptance Rate)
-   Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software
-    Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on
-    Internetware, Changsha, China, 2013. (28.8% acceptance Rate)
-   Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on
-    Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy
-    in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
-2011
-   Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using
-    Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium
-    on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
-   Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted
-    Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5):
-    1436-1445, 2011.
-2010
-   Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted
-    Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3):
-    195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
-   Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform
-    Module. The International Conference on Computer Application and System Modeling,
-    Taiyuan, China, 2010.
-   Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted
-    Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20):
-    169-173, 2010. (in Chinese)
-
-
-ACTIVITES          Football, Table tennis, Swimming.
-
\ No newline at end of file
diff --git a/res/yuCV_final.docx b/res/yuCV_final.docx
new file mode 100644
index 0000000..f186f72
--- /dev/null
+++ b/res/yuCV_final.docx
@@ -0,0 +1,74 @@
+4117901127591Yue Yu（余跃）http://yuyue.github.io/
+National Laboratory for Parallel and Distributed Processing
+Computer School, National University of Defense Technology
+Changsha, Hunan Province, 410073, P.R.C
+Phone: (86)13627319266
+Email: yuyue_whu@foxmail.com
+
+EDUCATION
+Computer Science Department, University of California, Davis, USA.
+2014.10--present Visiting junior scholar.  Advisor: Prem Devanbu and Vladimir Filkov
+National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China. (Ahead of Master Graduation Time)
+2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang
+Computer School, National University of Defense Technology, China. (Rank: top 5)
+2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang
+Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
+2007.9--2011.6 B.E. in Information Security.
+School of Journalism and Communication, Wuhan University, China.
+2009.03-2010.06 Minor in Journalism and Communication.
+
+ACTIVITES 
+Football, Table tennis, Swimming
+
+AWARDS AND HONORS
+2013 OW2 International Programming Contest 					Special Prize (Only One)
+2012 OW2 International Programming Contest 					 First Prize (Top 1)
+2011 National Information Security Competition                  Third Prize (17%)
+2010 National Information Security Competition                  First Prize (2.3%)
+
+Awarded "Yungui Ci" Scholarship in NUDT        		         2011-2012 (Top 2)
+Awarded First-class Scholarship in Wuhan University  	         2010-2011 (Top 5%)
+Awarded National Scholarship of China                         2009-2010 (Top 2)
+Honored as Outstanding Graduates of Wuhan University   		 2007-2011 (20%)
+Honored as Excellent Student Leader of Wuhan University (Twice)
+
+SKILLS
+* Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
+* System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene OpenSSL, Geni, Weka.
+
+TEACHING & RESEARCH EXPERIENCE
+* Teaching Assistant, National University of Defense Technology       2012.8-2013.8
+* Network Program Design
+* Distributed Computing Environment
+* Vice-Chairman of Student Union, Wuhan University                2009.10-2010.10
+* Awarded Excellent Student Union
+* Research Intern, Trustie Group, PDL, NUDT  				    2011.9-present
+* National High Technology Research and Development Program of China (Grant No. 2012AA010101)
+* National Science Foundation of China (Grant No. 61432020, 61472430, 60903043)
+* Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
+* Mining Heterogeneous Information Network of Social Coding        2013.3-2015.3
+* Research on Feature Detection and Location of OSS Repository       2012.3-2013.3
+* Principal Investigator, Hunan Province, Postgraduate Research and Innovation Project
+* Mining Social Coding Repository and Network (CX2013B032)       2013.3-2015.3
+
+PUBILCATIONS
+2015
+* Yue Yu, Huaimin Wang, Valadimir Filkov, Prem Devanbu, Bogdan Vasilescu. Wait For It: Determinants of Pull Request Evaluation Latency on GitHub. The 12th Working Conference on Mining Software Repositories (MSR 2015), Florence, Italy, 2015.
+2014
+* Yue Yu, Huaimin Wang, Gang Yin, Charles X. Ling. Reviewer Recommender of Pull-Requests in GitHub. The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014.
+* Yue Yu, Huaimin Wang, Gang Yin, Charles X. Ling. Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration. The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. (Nominated for best paper)
+* Yue Yu, Huaimin Wang, Gang Yin, Tao Wang. Exploring the Patterns of Social Behavior in GitHub. International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft 2014), Hong Kong, 2014.
+* Yang Zhang, Gang Yin, Yue Yu, Huaimin Wang. Investigating social media in GitHub's pull-requests: a case study on Ruby on Rails. International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft 2014), Hong Kong, 2014.
+2013
+* Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of Hierarchical Software Feature Repository. The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013.
+* Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013.
+* Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+2012
+* Xiang Li, Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, Yue Yu, Dengqing Tang. Inducing Taxonomy from Tags: An Agglomerative Hierarchical Clustering Framework. Advanced Data Mining and Applications (ADMA 2012), Springer Berlin Heidelberg, 2012.
+2011
+* Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+* Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5): 1436-1445, 2011.
+2010
+* Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+* Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform Module. The International Conference on Computer Application and System Modeling, Taiyuan, China, 2010.
+* Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20): 169-173, 2010. (in Chinese) 
diff --git a/res/yuyue_cv.pdf b/res/yuyue_cv.pdf
new file mode 100644
index 0000000..671f585
--- /dev/null
+++ b/res/yuyue_cv.pdf
@@ -0,0 +1,112 @@
+Yue Yu（余跃）http://yuyue.github.io/
+National Laboratory for Parallel and Distributed Processing
+Computer School, National University of Defense Technology
+Changsha, Hunan Province, 410073, P.R.C
+Phone: (86)13627319266
+Email: yuyue_whu@foxmail.com
+
+
+EDUCATION
+Computer Science Department, University of California, Davis, USA.
+2014.10--present Visiting junior scholar. Advisor: Prem Devanbu and Vladimir Filkov
+National Laboratory for Parallel and Distributed Processing (PDL), National University of
+Defense Technology (NUDT), China. (Ahead of Master Graduation Time)
+2013.3--present Ph.D. in Software Engineering. Advisor: Huaimin Wang
+Computer School, National University of Defense Technology, China. (Rank: top 5)
+2011.9--2013.3 M.S. in Computer Science. Advisor: Huaimin Wang
+Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
+2007.9--2011.6 B.E. in Information Security.
+School of Journalism and Communication, Wuhan University, China.
+2009.03-2010.06 Minor in Journalism and Communication.
+
+
+ACTIVITES
+Football, Table tennis, Swimming
+
+
+AWARDS AND HONORS
+2013 OW2 International Programming Contest                        Special Prize (Only One)
+2012 OW2 International Programming Contest                         First Prize (Top 1)
+2011 National Information Security Competition                     Third Prize (17%)
+2010 National Information Security Competition                     First Prize (2.3%)
+
+Awarded “Yungui Ci” Scholarship in NUDT                            2011-2012 (Top 2)
+Awarded First-class Scholarship in Wuhan University                2010-2011 (Top 5%)
+Awarded National Scholarship of China                              2009-2010 (Top 2)
+Honored as Outstanding Graduates of Wuhan University               2007-2011 (20%)
+Honored as Excellent Student Leader of Wuhan University (Twice)
+
+
+SKILLS
+   Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
+   System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene
+    OpenSSL, Geni, Weka.
+TEACHING & RESEARCH EXPERIENCE
+   Teaching Assistant, National University of Defense Technology         2012.8-2013.8
+     Network Program Design
+     Distributed Computing Environment
+   Vice-Chairman of Student Union, Wuhan University                       2009.10-2010.10
+     Awarded Excellent Student Union
+   Research Intern, Trustie Group, PDL, NUDT                             2011.9-present
+     National High Technology Research and Development Program of China (Grant No.
+        2012AA010101)
+     National Science Foundation of China (Grant No. 61432020, 61472430, 60903043)
+   Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
+     Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
+     Research on Feature Detection and Location of OSS Repository           2012.3-2013.3
+   Principal Investigator, Hunan Province, Postgraduate Research and Innovation Project
+     Mining Social Coding Repository and Network (CX2013B032)              2013.3-2015.3
+
+
+PUBILCATIONS
+2015
+   Yue Yu, Huaimin Wang, Valadimir Filkov, Prem Devanbu, Bogdan Vasilescu. Wait For It:
+    Determinants of Pull Request Evaluation Latency on GitHub. The 12th Working
+    Conference on Mining Software Repositories (MSR 2015), Florence, Italy, 2015.
+2014
+   Yue Yu, Huaimin Wang, Gang Yin, Charles X. Ling. Reviewer Recommender of
+    Pull-Requests in GitHub. The 30th IEEE International Conference on Software
+    Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014.
+   Yue Yu, Huaimin Wang, Gang Yin, Charles X. Ling. Who Should Review This
+    Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration. The 21th
+    Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014.
+    (Nominated for best paper)
+   Yue Yu, Huaimin Wang, Gang Yin, Tao Wang. Exploring the Patterns of Social Behavior
+    in GitHub. International Workshop on Crowd-based Software Development Methods and
+    Technologies (CrowdSoft 2014), Hong Kong, 2014.
+   Yang Zhang, Gang Yin, Yue Yu, Huaimin Wang. Investigating social media in GitHub's
+    pull-requests: a case study on Ruby on Rails. International Workshop on Crowd-based
+    Software Development Methods and Technologies (CrowdSoft 2014), Hong Kong, 2014.
+2013
+   Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of
+    Hierarchical Software Feature Repository. The 25th International Conference on Software
+    Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013.
+   Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software
+    Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on
+    Internetware, Changsha, China, 2013.
+   Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on
+    Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy
+    in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+2012
+   Xiang Li, Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, Yue Yu, Dengqing
+    Tang. Inducing Taxonomy from Tags: An Agglomerative Hierarchical Clustering
+    Framework. Advanced Data Mining and Applications (ADMA 2012), Springer Berlin
+    Heidelberg, 2012.
+2011
+   Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using
+    Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium
+    on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+   Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted
+    Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5):
+    1436-1445, 2011.
+2010
+   Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted
+    Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3):
+    195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+   Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform
+    Module. The International Conference on Computer Application and System Modeling,
+    Taiyuan, China, 2010.
+   Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted
+    Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20):
+    169-173, 2010. (in Chinese)
+
\ No newline at end of file

commit bb860c196d19cafc5bede1e2a9695967023e0751
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 17:30:08 2015 -0700

    change README.md
---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 72f0a59..a0fb5f0 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
 # yueyu.github.io
-my homepage
+my new homepage hosted on GitHub.

commit 4d4b3de2578eb9c7637b19fe4ec9300b532a203c
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 16:46:05 2015 -0700

    add an old paper
---
 index.html | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/index.html b/index.html
index a14a410..b524dcf 100644
--- a/index.html
+++ b/index.html
@@ -148,6 +148,15 @@
         [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
 		</UL>
 		
+	  <H3>2012</H3>
+	  <UL style="LIST-STYLE-TYPE: none" class=pubs>
+	  <LI>
+	    Xiang Li, Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, <strong>Yue Yu</strong></a>, Dengqing Tang.
+		<strong>Inducing Taxonomy from Tags: An Agglomerative Hierarchical Clustering Framework</strong>. 
+		Advanced Data Mining and Applications (ADMA 2012),Springer Berlin Heidelberg, 2012.
+        [<A href="res/paper/ADMA12-camera-ready.pdf">pdf</A>]  
+		</UL>
+		
 	  <H3>2011</H3>
       <UL style="LIST-STYLE-TYPE: none" class=pubs>
         <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 

commit b88b26b901d5bc30f9b1cc63fb51ee9e1bdfdb40
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 16:29:22 2015 -0700

    clean work
---
 analyticstracking.php |  10 ---
 index2.html           | 171 --------------------------------------------------
 2 files changed, 181 deletions(-)

diff --git a/analyticstracking.php b/analyticstracking.php
deleted file mode 100644
index ecdb2f3..0000000
--- a/analyticstracking.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<script>
-  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
-  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
-  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
-  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
-
-  ga('create', 'UA-61564970-1', 'auto');
-  ga('send', 'pageview');
-
-</script>
\ No newline at end of file
diff --git a/index2.html b/index2.html
deleted file mode 100644
index e1694f0..0000000
--- a/index2.html
+++ /dev/null
@@ -1,171 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
-<!-- saved from url=http://forge.trustie.net/Fisher/ -->
-<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
-<TITLE>Yue Yu's Website</TITLE>
-<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<STYLE type=text/css>
-H1 {
-	MARGIN-BOTTOM: 0px
-}
-H2 {
-	COLOR: #004400
-}
-UL.pubs LI {
-	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
-}
-body {
-	background-color: #FFFFFF;
-}
-.STYLE1 {color: #3399FF}
-.STYLE4 {
-	color: #004400;
-	font-weight: bold;
-}
-.STYLE5 {color: #004400}
-</STYLE>
-
-<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
-<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
-link=#003300>
-<span class="STYLE1"></span>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD vAlign=middle align=left>
-      <H1>Yue Yu (余跃) </H1></TD>
-    <TD rowSpan=3 width=200 align=right><IMG 
-      src="res/Yy.jpg" width=160 height="153"></TD>
-  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
-  <TR>
-    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
-	<P>
-	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
-	</P>
-      </TD></TR></TBODY></TABLE>
-<HR align=center color=#006600 width=800 noShade>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-      <H2 class="STYLE4">Contact Information</H2>
-      <UL style="LIST-STYLE-TYPE: none"><LI>
-        <p>National  Laboratory for Parallel and Distributed Processing<br>
-          Computer  School, National University of Defense Technology<br>
-          Changsha,  Hunan Province, 410073, P.R.C<br>
-		   Phone: (86)13627319266<br>
-		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
-        </p>
-		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
-        <LI>
-        </UL>
-		 <hr size="2" color="black" align="center">
-      <H2>Education</H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
-			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
-			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
-			2007.9--2011.6 B.E. in Information Security<br>
-		</LI>
-		&nbsp;
-		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
-			2009.03-2010.06 Minor in Journalism and Communication.<br>
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE5">Research Experience </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>
-		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
-	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
-        <LI> National Science Foundation of China (Grant No.60903043)</LI>
-		<br>
-		<LI>
-		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
-		<LI>
-		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
-		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE4">Awards and Honors </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
-        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
-        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
-        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
-        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
-        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
-        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
-        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
-      </UL>
-	  <hr size="2" color="black" align="center">
-	  </TD></TR></TBODY></TABLE>
-	  
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-     <H2 class="STYLE5">Publications</H2>
-     
-	 <H3>2014</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
-		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
-		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
-
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
-		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
-		[<A href="res/paper/apsec2014.pdf">pdf</A>]
-		
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
-		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
-		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
-		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
-        
-      </UL> 	  
-	  
-      <H3>2013</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>
-		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
-		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
-		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
-        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
-		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
-		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
-		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
-        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
-		</UL>
-		
-	  <H3>2011</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
-		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
-		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
-		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
-		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
-		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
-		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
-		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
-      </UL>
-	  
-	  <H3>2010</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
-		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
-		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
-		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
-      </UL>
-		
-      </TD></TR></TBODY></TABLE>
-</BODY></HTML>

commit b6f422fc5e7c5cd25484f4d32ba0ce35d316e181
Author: fisher <yyuu51888@163.com>
Date:   Thu Apr 23 16:19:45 2015 -0700

    travis ci
---
 .travis.yml   |   9 +++++++++
 res/yuyue.png | Bin 0 -> 1647189 bytes
 2 files changed, 9 insertions(+)

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..a6d4aa7
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,9 @@
+language: node_js
+node_js:
+  - "0.12"
+  - "0.11"
+  - "0.10"
+  - "0.8"
+  - "0.6"
+  - "iojs"
+  - "iojs-v1.0.4"
\ No newline at end of file
diff --git a/res/yuyue.png b/res/yuyue.png
new file mode 100644
index 0000000..3566669
Binary files /dev/null and b/res/yuyue.png differ

commit dfd8691bd8163f0a655f79ae9e8d62942d1defe9
Author: fisher <yyuu51888@163.com>
Date:   Sun Apr 5 17:52:13 2015 -0700

    chinese paper/wuhan technology.pdf
---
 res/paper/wuhan technology.pdf | Bin 0 -> 1070386 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/paper/wuhan technology.pdf b/res/paper/wuhan technology.pdf
new file mode 100644
index 0000000..a64d853
--- /dev/null
+++ b/res/paper/wuhan technology.pdf	
@@ -0,0 +1 @@
+
\ No newline at end of file

commit ef97d2687652b86cff29e7a6505bd6cc4f4d3889
Author: fisher <yyuu51888@163.com>
Date:   Sun Apr 5 17:06:28 2015 -0700

    test
---
 analyticstracking.php | 10 ++++++++++
 index.html            | 14 ++------------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/analyticstracking.php b/analyticstracking.php
new file mode 100644
index 0000000..ecdb2f3
--- /dev/null
+++ b/analyticstracking.php
@@ -0,0 +1,10 @@
+<script>
+  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
+  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
+  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
+  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
+
+  ga('create', 'UA-61564970-1', 'auto');
+  ga('send', 'pageview');
+
+</script>
\ No newline at end of file
diff --git a/index.html b/index.html
index 28f0481..a14a410 100644
--- a/index.html
+++ b/index.html
@@ -7,6 +7,7 @@
 
 <META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
 <BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 link=#003300>
+<?php include_once("analyticstracking.php") ?>
 <span class="STYLE1"></span>
 <TABLE width=800 align=center>
   <TBODY>
@@ -167,15 +168,4 @@
 		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
       </UL>
 		
-      </TD></TR></TBODY></TABLE>
-
-<script>
-  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
-  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
-  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
-  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
-
-  ga('create', 'UA-61564970-1', 'auto');
-  ga('send', 'pageview');
-
-</script>
\ No newline at end of file
+      </TD></TR></TBODY></TABLE>
\ No newline at end of file

commit 22e0b22e1ed5194bea157543d11b03c2f88d7268
Author: fisher <yyuu51888@163.com>
Date:   Sun Apr 5 17:01:39 2015 -0700

    google analytics
---
 index.html | 19 ++-----------------
 1 file changed, 2 insertions(+), 17 deletions(-)

diff --git a/index.html b/index.html
index 4ce2d89..28f0481 100644
--- a/index.html
+++ b/index.html
@@ -168,29 +168,14 @@
       </UL>
 		
       </TD></TR></TBODY></TABLE>
-<DIV id=eXTReMe><!--<a href="http://extremetracking.com/open?login=mcmillco">
-<img src="http://t1.extreme-dm.com/i.gif" style="border: 0;"
-height="1" width="1" id="EXim" alt="" /></a>-->
-<!--记录单个用户登陆次数--!>
-<SCRIPT type=text/javascript><!--
-EXref="";top.document.referrer?EXref=top.document.referrer:EXref=document.referrer;//-->
-</SCRIPT>
 
-<NOSCRIPT></NOSCRIPT></DIV>
-<!--cnzz analysis--!>
-<script src="http://s22.cnzz.com/z_stat.php?id=1000243573&web_id=1000243573" language="JavaScript"></script>
-<!--google analysis--!>
 <script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
-  ga('create', 'UA-47071715-1', 'trustie.net');
+  ga('create', 'UA-61564970-1', 'auto');
   ga('send', 'pageview');
 
-</script>
-</BODY></HTML>
-<script type="text/javascript">//<![CDATA[
-(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://forge.trustie.net/projects/3/repository/fisherweb/revisions/master/raw/index.html','EWH6Fc22bt');
-//]]></script>
\ No newline at end of file
+</script>
\ No newline at end of file

commit e3e5ccaf457b56c7ae44af56e351204e7f72c560
Author: fisher <yyuu51888@163.com>
Date:   Sun Apr 5 16:46:10 2015 -0700

    whu journal
---
 ...usted computing dynamic verification-WUJNS-2010.pdf | Bin 0 -> 445982 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/res/paper/Static Analysis-based behavior model building for trusted computing dynamic verification-WUJNS-2010.pdf b/res/paper/Static Analysis-based behavior model building for trusted computing dynamic verification-WUJNS-2010.pdf
new file mode 100644
index 0000000..ce3ec6b
--- /dev/null
+++ b/res/paper/Static Analysis-based behavior model building for trusted computing dynamic verification-WUJNS-2010.pdf	
@@ -0,0 +1,316 @@
+                                                                                                       2010, Vol.15 No.3, 195-200
+
+
+       Article ID 1007-1202(2010)03-0195-06
+               DOI 10.1007/s11859-010-0303-9
+
+
+
+       Static Analysis-Based Behavior Model
+       Building for Trusted Computing
+       Dynamic Verification
+
+
+□ YU Fajiang1,2, YU Yue1                                                        0    Introduction
+     1. School of Computer, Wuhan University, Wuhan 430072,
+Hubei, China;                                                                         In recent years, great progress has been made in re-
+     2. Key Laboratory of Aerospace Information Security and                    search on trusted platform module (TPM), trusted com-
+Trusted Computing of Ministry of Education, Wuhan University,                   puting platform, trusted computing platform evaluation,
+Wuhan 430072, Hubei, China                                                      trusted software, trusted network connect, remote at-
+© Wuhan University and Springer-Verlag Berlin Heidelberg 2010
+                                                                                testation and trusted computing application[1-3]. Current
+                                                                                technologies can ensure that the characteristic codes and
+Abstract: Current trusted computing platform only verifies ap-
+                                                                                configure data integrity of trusted computing platform’s
+plication’s static Hash value, it could not prevent application from            component are same as the expected integrity[4] but can-
+being dynamic attacked. This paper gives one static analysis-based              not ensure the behavior is trusted[5]. Presently, there has
+behavior model building method for trusted computing dynamic                    been little research on theory and technology on trusted
+verification, including control flow graph (CFG) building, finite               computing dynamic verification, and the related work is
+state automata (FSA) constructing, ε run cycle removing, ε transi-
+                                                                                mainly in host-based intrusion detection about system call.
+tion removing, deterministic finite state (DFA) constructing, trivial
+FSA removing, and global push down automata (PDA) construct-                          Wagner et al[6] were the first to propose the use of
+ing. According to experiment, this model built is a reduced model               static analysis for intrusion detection. However, they
+for dynamic verification and covers all possible paths, because it is           analyzed the source code for construct application mode,
+based on binary file static analysis.                                           and this cannot be assumed that the availability of source
+Key words: trusted computing; dynamic verification; behavior                    code for analysis on commercial trusted computing plat-
+model; finite-state automata (FSA); push down automata (PDA)
+                                                                                form. Giffin et al[7,8] inserted one “null_call” before and
+CLC number: TP 391
+                                                                                after calling one subfunction and gave one unique call
+                                                                                name for building one context-sensitive model to remove
+                                                                                impossible path. Feng et al[9] built stack-deterministic
+                                                                                push down automata (PDA) to improve performance.
+                                                                                Gopalakrishna et al[10] directly embedded subfunction for
+Received date: 2009-12-10                                                       building global finite-state automata (FSA) to improve
+Foundation item: Supported by the National High Technology Research and
+                                                                                performance. LI Wen et al[11] connected every subfunc-
+Development Program of China (863 Program) (2006AA01Z442, 2007AA01Z411)
+the National Natural Science Foundation of China (60673071, 60970115), and      tion only when the application is running to reduce stack
+Open Foundation of State Key Laboratory of Aerospace Information Security       size. All forementioned research is about server- based
+and Trusted Computing, Ministry of Education in China (AISTC2008Q03)
+Biography: YU Fajiang, male, Ph.D., research direction: information security,
+                                                                                intrusion detection, which generally aimed at one given
+trusted computing. E-mail: qshxyu@126.com                                       network service application at Linux or Unix system. Our
+ 196                                                                  Wuhan University Journal of Natural Sciences 2010, Vol.15 No.3
+
+method mainly is for building Win32 API behavior model
+for trusted computing dynamic verification.
+      This paper makes the following main contributions:
+① proposing one method of trusted computing dynamic
+behaviors verification, ② implementation at Windows
+terminal, and ③ static analysis-based behavior model
+optimization in detail.
+      The rest of this paper is organized as follows: Sec-
+tion 1 gives a detail description of static analysis-based
+trusted computing dynamic behavior verification. Sec-
+tion 2 evaluates our method by experiment, and we con-
+clude in Section 3 with description of future work.
+
+1      Behavior Model Building
+
+     Construction of static analysis-based behavior
+model progresses in follow several stages: ① building
+up control flow graph (CFG) from program binary code,
+② constructing FSA from CFG, ③ finding and remov-
+ing ε run cycles in FSA, ④ removing ε transition in FSA,
+⑤ constructing deterministic FSA from nondeterministic
+                                                                               Fig. 1   CFG of sub_10048C8 in notepad.exe
+FSA, ⑥ removing trivial FSA, and ⑦ constructing
+global PDA.                                                          useless instructions in each vertex. Figure 2 shows the
+1.1 CFG Building from Binary Code                                    CFG of sub_10048C8 after being filtered.
+     Because we target commercial trusted computing
+platform, only program with binary code is available for
+us. We use an IDA (interactive disassembler) plug-in,
+named “wingraph32”, to generate CFG for every sub-
+function of PE file. Node of CFG contains linear se-
+quences of instructions; edge between nodes represents
+control flow. Figure 1 is the CFG of one subfunction
+“sub_10048C8” from dissembling notepad.exe.
+     CFG also can be represented by G =< V , E >, where
+                                                                      Fig. 2   CFG sub_10048C8 after filtered, exit node “2” has a
+V is a finite set, and element of V is vertex v ∈ V , which
+                                                                                           call instruction
+is a linear sequences of instructions. E is a subset
+of E (V ), E (V ) = {(u , v) u , v ∈ V } , E ⊆ E (V ) , element of         However, there is another special case. Some CFG
+E is an edge, each edge is a pair of vertices. CFG is a              exit nodes have some instructions like Win32 API or
+directed graph, each edge is an ordered pair, and it has a           other subfunction call after being filtered; such has ver-
+head vertex and a tail vertex. In CFG, (u , v ) ≠ (v, u ) ,          tex “2” in Fig. 2. In this case, for translating CFG into an
+which is drawn as an arrow in the diagraph.                          FSA, one new node must be added as an exit.
+1.2 FSA Constructing from CFG                                              After filtering (some CFG maybe need a new exit
+     Original vertex in CFG is a linear sequence of in-              node added), original CFG G =< V , E > is changed
+structions. Our trusted computing dynamic verification is            as G ′ =< V ′, E ′ >, E ′ = E , and every v′ ∈ V ′ may be one
+implemented at Windows terminal, and the behavior                    type of the following vertices:
+model is composed of Kernel32.dll’s Win32 API se-                          ① Vertex v′ does not have any instruction.
+quences. Here, we only care instructions like Win32 API                    ② Vertex v′ has only one instruction like Win32
+or other subfunction “call”, because it is possible that             API or other subfunction call.
+other subfunction also has Win32 API call instruction.                     ③ Vertex v′ has multiinstructions like Win32 API
+Therefore, after CFG building up, we should filter some              or other subfunction call.
+YU Fajiang et al : Static Analysis-Based Behavior Model Building …                                                                                        197
+
+     If we want to construct FSA from CFG, the vertex                                  which is of a sequence state
+of type ③ requires some pretreatment, because in every                                      q0 q1 qn (qi , qi +1 ∈ Q, δ (qi , ai ) = qi +1 , i = 0,1, , n − 1) ,
+FSA-state transition, there could not be multiinput sym-                               noted as R.
+bols. Figure 3 shows the result after a new exit node is                                     R is a ε run, if ai = ε , i = 0,1, , n − 1 ;
+added, and vertex “3” is pretreated.                                                         R is a ε run cycle, if ai = ε , i = 0,1, , n − 1 and
+                                                                                        qi ≠ q j for i ≠ j except that q0 = qn .
+                                                                                             Definition 2 If there is one state q ∈ Q, δ (q, ε )
+                                                                                        = q ∈ δ , then q is a self ε run cycle state.
+                                                                                             When using the FSA model to do dynamic verifica-
+                                                                                       tion for a given Win32 API sequence, if there is a ε run
+                                                                                       cycle, the FSA may never stop. Therefore, ε run cycle
+                                                                                       must be removed; first, we should judge whether there is
+                                                                                       a ε run cycle in a FSA and then find the ε run cycle.
+                                                                                             After making sure that there are ε run cycles in one
+                                                                                       FSA ε run, we only need to find one ε run cycle first
+                                                                                       and need not to find out all ε run cycles. Because if one
+                                                                                       ε run cycle was removed, many other related cycles
+                                                                                       would disappear. We use the improved Floyd algorithm
+         Fig. 3     CFG of sub_10048C8 after pretreatment                              (Algorithm 2) to compute the minimal ε run cycle state
+A new exit node has been added, original vertex “3” has been divided into two          number.
+vertices, new “3” and vertex “3_4.0”, each vertex has only one instruction like call         Algorithm 2 Improved Floyd algorithm for com-
+         After the pretreatment, we could translate the CFG                            puting minimal ε run cycle state number.
+ G ′′ into an FSA M = ( Q, Σ ,δ , S, F ) by using Algorithm 1.                               For i from 0 to ε run state number
+         Algorithm 1 FSA constructing algorithm from                                              For j from 0 to ε run state number
+CFG                                                                                                 If there has δ (qi , ε ) = q j ∈ δ then Dist(i, j ) = 1
+         a) Finite set of states Q = V ''                                                           Else Dist(i, j ) = ε run state number
+         b) Finite input alphabet                                                            MinCycleLen = ε run state number + 1
+          Σ = {sub Fun or APIName| v′′ has one instruction                                   For k from 0 to ε run state number {
+like “call”, v′′ ∈ V ′′} + {ε }                                                                   For i from 0 to k
+         c) Transition Function δ := Q × Σ → Q                                                      If MinCycleLen Dist(i, k ) + Dist(k , i ) {
+                                                                                                                       ∨
+
+
+
+
+          δ = { δ (u ′′ , sub fun name or APIname}= v′′ | (u ′′, v′′)                                    MinCycleLen = Dist(i, k ) + Dist(k , i);
+∈E     ′′, u ′′ is vertex of type 2}+{δ (u ′′, ε ) = v′′ | (u ′′, v′′) ∈ E ′′,                           Start = i ;
+ u ′′ is vertex of type 1}                                                                               End = k ;
+         d) Initial States S = {v′′ v′′ is CFG entry}                                               }
+         e) Final States F = {v′′ v′′ is CFG exit}                                                For i from 0 to ε run state Number
+         By using this algorithm, FSA constructed from CFG                                          For j from 0 to ε run state Number
+is shown in Fig. 4.                                                                                      If Dist(i, j ) Dist(i, k ) + Dist(k , j ) then
+                                                                                                                     ∨
+
+
+
+
+                                                                                                            Dist(i, j ) = Dist(i, k ) + Dist(k , j )
+                                                                                             }
+                                                                                             After Algorithm 2 has been used, the minimal ε run
+                                                                                       cycle is composed of ε run qStart qEnd and qEnd qStart .
+                                                                                       Then, we use width-first searching method to find out the
+                                                                                       two ε runs. In notepad.exe’s “sub_1003C5B”, we find
+                                                                                       one ε run cycle, “45674”, which is illustrated in Fig. 5.
+      Fig. 4    FSA constructed from CFG of “sub_10048C8”
+                                                                                       After removing ε run cycle “45674” in Fig. 5, the result
+1.3   ε Run Cycle Finding and Removing                                                 is shown in Fig. 6.
+    Definition 1 There is an FSA M = ( Q, Σ , δ , S , F ) .                            1.4 ε Transition Removing
+There is also a run of FSA M on                                                              After ε run cycle is removed removing, there are still
+            u = a0 a1 an −1 (ai ∈ Σ , i = 0,1, , n − 1) ,                              some ε transitions in one subfunction FSA. Then,
+ 198                                                               Wuhan University Journal of Natural Sciences 2010, Vol.15 No.3
+
+                                                                  when using the FSA model to do dynamic verification,
+                                                                  there would be some ε runs, which could waste verifica-
+                                                                  tion time. Therefore, we should remove the ε transitions.
+                                                                  The result of ε striations in Fig. 6 is shown in Fig. 7.
+                                                                  1.5 Constructing Deterministic FSA
+                                                                        If one FSA M = (Q, Σ , δ , S , F ) has multiinitial
+                                                                  states or there is more than one possible next state for
+       Fig. 5   FSA of “sub_1003C5B” in notepad.exe               one state and input symbol, then this FSA is a nondeter-
+                                                                  ministic FSA (NFA). Otherwise, it is a deterministic FSA
+                                                                  (DFA). In NFA, there may be multitransitions:
+                                                                           δ (qi , a) = q j ∈ δ , δ (qi , a) = qk ∈ δ , q j ≠ qk
+                                                                       FSA is one NFA, states “0”, “1”, “2”, “3”, “4”, “8”,
+                                                                  and “9”, all are initial states, and they also have two next
+                                                                  states “10”, and “11” for the same input symbol “Find-
+                                                                  FirstFileW” (Fig. 7).
+       Fig. 6   FSA of “sub_1003C5B” in notepad.exe                    If we directly use NFA to do dynamic verification,
+                after ε run cycle being removed                   for recognizing the same Win32 API sequence, NFA
+
+
+
+
+                        Fig. 7   FSA of “sub_1003C5B” in notepad.exe after ε transitions being removed
+
+needs to make more run attempt. For one NFA, there                set δ = ∅ ; then M is a trivial FSA.
+                                                   ′
+must be one equivalent DFA. M ′ = (Q′, Σ ′, δ ′, q0 , F ′).            In notepad.exe’s all original subfunctions FSA,
+By using a corresponding algorithm to construct DFA               there are 18 trivial FSAs. Because in one trivial FSA,
+from NFA in Fig. 7, the result is shown in Fig. 8.                there is not any transition, and dynamic verification is
+                                                                  useless in recognizing Win32 API sequences.
+                                                                  1.7 Constructing Global PDA
+                                                                       Our dynamic verification is for one application, we
+                                                                  must construct one global DFA from all local subfunc-
+                                                                  tion DFAs. Because one subfunction may be called in
+                                                                  multipositions, for the subfunction to return correctly, the
+       Fig. 8   DFA of “sub_1003C5B” in notepad.exe               global DFA must be a global PDA; otherwise, global
+                   constructed from NFA
+                                                                  DFA exists in an “impossible path”[6,7]. We use Algo-
+1.6    Trivial FSA Removing                                       rithm 3 to construct global PDA.
+      Definition 1. There is an FSA M = (Q, Σ , δ , S , F ) .          Algorithm 3 Algorithm for constructing global
+If ① it has only one vertex Q = {q} , which is an initial         PDA
+state, also is a final state, ② for the transition function       Global PDA M = {Q, Σ , Γ , δ , q0 , F , Z 0 }
+YU Fajiang et al : Static Analysis-Based Behavior Model Building …                                                                         199
+
+Q = {qstart0 }, Σ = Φ , Γ =Φ , δ = ϕ , q0 = qstart0 , F = Fstart , Z 0 =Φ ;   the minimum set of files, which are required to run note-
+For every local DFA M L = {QL , Σ L , δ L , qL 0 , FL }                       pad.exe, such as DLL file. Figure 10 shows the DLL files
+     For every δ L (qL , aL ) = qL ∈ δ L′                                     and Driver files needed by notepad.exe and their hierar-
+           If aL is a subfunction name, then {                                chy. In our current behavior model, we only care Win32
+                 The Corresponding DFA is M s = {Qs , Σ s ,                   API exported from Kernel32.dll, so we do not analysis
+                     δ s , qs 0 , F } ;                                       Kernel32.dll self.
+                 δ = δ + {δ (qL , ε , S ) = (qs 0 , aL S )} ;
+                 Q = Q + {qL , qs 0 } ; Γ = Γ + {aL }
+                 For every qsf ∈ Fs {
+                   δ = δ + {δ (qsf , ε , aL S ) = (qL ', S )} ;
+                                                       ′
+                   Q = Q + {qsf , qL     ′}
+                 }
+             }
+             else {
+                   δ = δ + {δ (qL , aL , S ) = (qL , S )} ;
+                                                     ′
+                   Q = Q + {qL , qL } ; Σ = Σ + {aL } ;
+                                        ′
+                                                                                  Fig. 10     Notepad.exe dependent DLL and driver files
+             }
+     Figure 9 shows us one “global” PDA constructed                                 First, we use IDA to generate a subfunction CFG
+from two local DFAs by using this algorithm.                                  file (*.gdl) for notepad.exe and its all dependent files,
+                                                                              every PE file’s size, and its subfunction number is shown
+                                                                              in Table 1. Second, we construct one FSA from every
+                                                                              subfunction CFG, remove ε run cycles, and remove ε
+                                                                              transitions for every FSA. Third, we construct one DFA
+                                                                              from every NFA and remove all trivial FSAs for every
+                                                                              PE file, and the trivial FSA number is shown in Table 1.
+                                                                              Finally, we construct one global PDA from all local
+                                                                              FSAs.
+                                                                                  Table 1     Behavior model information of notepad.exe
+                                                                                                   and its dependent files
+
+                                                                                                                Subfunction    Trivial FSA
+                                                                               PE file name      Size / byte
+                                                                                                                  number         number
+                                                                               notepad.exe          66 048           83              18
+                                                                              comdlge32.dll        250 880          707            173
+    Fig. 9   One global PDA constructed from two local DFAs
+                                                                               shlwapi.dll         400 896         1 931           944
+(a) Local DFA of “sub_1003D57” in notepad.exe; (b) Local DFA of “sub_
+1003CF2” in notepad.exe; (c) “Global” PDA constructed from “sub_1003D57”        shell32.dll      8 194 048       13 681           5 298
+and “1003CF2”                                                                  winspool.drv        131 584          758            351
+     The global constructed from static analysis-based                         comctl32.dll        557 056         1 909           457
+PE binary file is our behavior model for trusted comput-                        msvcrt.dll         323 072         1 568           649
+ing dynamic verification.                                                      advapi32.dll        615 424         1 897           949
+                                                                                rpcrt4.dll         530 432         3 466          1 777
+2      Experiment                                                               gdi32.dll          250 368         1 514           798
+                                                                                user32.dll         556 544         2 061          1 117
+      We evaluate our method for notepad.exe with Win-
+dows XP SP 1 and build its behavior model by binary file                            From the experiment, we can see the trivial FSA
+static analysis. At our Windows XP SP 1 terminal, note-                       number is about 50% of original sub function number. In
+pad.exe version is 5.1.2600.0 and for zh-CN. We use                           fact, the state and transition number of every remainder
+Microsoft Visual Studio Tool “DEPENDS.EXE” to show                            “untrivial” FSA also are much less than their original
+200                                                          Wuhan University Journal of Natural Sciences 2010, Vol.15 No.3
+
+CFG nodes and edge numbers. Therefore, the static
+analysis-based behavior model is a reduced model for        References
+trusted dynamic verification, and this can help us judge    [1] Shen Changxiang, Zhang Huanguo, Wang Huaimin, et al.
+easily whether the real application behavior is right.          Trusted computing research and development [J]. Science
+                                                                China: Information Sciences, 2010, 40(2): 139-166 (Ch).
+3     Conclusion and Future Work                            [2] Shen Changxiang, Zhang Huanguo, Feng Dengguo, et al.
+                                                                Survey of information security [J]. Science China: Informa-
+      This paper gives the method of building behavior          tion Sciences, 2007, 37(2): 1-22 (Ch).
+model for trusted computing dynamic verification based      [3] Zhang Huanguo, Luo Jie, Jin Gang, et al. Development of
+on binary file static analysis. We describe the building        trusted computing research [J]. Wuhan University Journal of
+stages in detail, including CFG building, FSA construct-        Natural Sciences, 2006, 11(6): 1407-1413.
+ing, ε run cycle removing, ε transition removing, DFA       [4] Trusted Computing Group. TCG Specification Architecture
+constructing, trivial FSA removing, and global PDA con-         Overview Specification Revision 1.4 [EB/OL]. [2010-03-10].
+structing. We give an improved Floyd algorithm to find          http://www.trustedcomputinggroup.org/files/resource_files/AC
+and remove ε run cycles in one subfunction local FSA,           652DE1-1D09-3519-ADA026A0C05CFAC2/TCG_1_4_Archit
+this can stop FSA ε run in dynamic verification for rec-        ecture_Overview.pdf
+ognizing Win32 API sequences. The original FSA model        [5] Trusted Computing Group. TCG Design, Implementation, and
+from binary source file is too large, according the ex-         Usage Principles Version 2.0 [EB/OL]. [2009-12-16]. http://
+periment; our static analysis-based behavior model is a         www. trustedcomputinggroup.org/files/resource_files/59C26E
+reduced model.                                                  CB-1D09-3519-AD469EA7AFBD2E91/Best_Practices_Princ
+      In the future, we still have much work to do. ① We        iples_Document_V2_0.pdf
+will build static-analysis based behavior model for more    [6] Wagner D, Dean D. Intrusion detection via static analy-
+Windows applications, such as internet explorer, office         sis[C]//Proceedings of 2001 IEEE Symposium on Security and
+tools, etc. ② We will use the built behavior model to           Privacy, Oakland: IEEE Computer Society, 2001: 156-168.
+recognize real application’s Win32 API sequence behav-      [7] Giffin J T, Jha S, Miller B P. Detecting manipulated remote call
+ior, of which the result is used to judge whether the ap-       streams [C]//Proceedings of the 11th USENIX Security Sympo-
+plication has been hacked. Because Windows is a com-            sium. San Francisco: USENIX Association, 2002: 61-79.
+mercial operating system, its kernel schemes are not        [8] Giffin J T, Dagon D, Jha S. Environment- sensitive intrusion
+open for us, it will be very hard to integrate building         detection [C]//Proceedings of 8th International Symposium on
+static behavior model and really monitoring dynamic             Recent Advances in Intrusion Detection (RAID 2005)
+behavior trace. ③ Current behavior model only consid-           LNCS3858. Seattle: Springer-Verlag, 2005: 185-206.
+ered Win32 API name sequence but did not consider API       [9] Feng H H, Giffin J, Huang Y, Jha S, et al. Formalizing sensitiv-
+parameters. However, one destroyed application may              ity in static analysis for intrusion detection [C]//Proceedings of
+have the same API sequence, and only some arguments             2004 IEEE Symposium on Security and Privacy. Oakland:
+are different. We will consider API arguments and add           IEEE Computer Society, 2004: 194-208.
+them into current model. ④ Web security is one re-          [10] Gopalakrishna R, Spafford E, Vitek J. Efficient intrusion de-
+search hotspot; we will use this paper’s method to do           tection using automaton inlining [C]//Proceedings of 2005
+some research about web security. ⑤ Current static              IEEE Symposium on Security and Privacy. Oakland: IEEE
+analysis-based behavior model is still too large; we will       Computer Society, 2005: 18-31.
+build one more Hash result. This is a great challenge for   [11] Li Wen, Dai Yingxia, Lian Yifeng, et al. Context sensitive
+us, reduced model, which may be similar to that of one          host-based IDS using hybrid automaton [J]. Journal of Soft-
+message.                                                        ware, 2009, 20(1): 138-151 (Ch).
+                                                                                                                              □
+
\ No newline at end of file

commit 2127ff297e98664e3aa96e73793fecf488b04fe1
Author: fisher <yyuu51888@163.com>
Date:   Fri Mar 27 20:09:16 2015 -0700

    msr 2015
---
 index.html            |  15 ++++++++++++---
 res/paper/msr2015.pdf | Bin 0 -> 192730 bytes
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/index.html b/index.html
index 9ca9ce0..4ce2d89 100644
--- a/index.html
+++ b/index.html
@@ -95,13 +95,22 @@
   <TR>
     <TD>
      <H2 class="STYLE5">Publications</H2>
+	 
+	 <H3>2015</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Valadimir Filkov, Prem Devanbu, Bogdan Vasilescu. 
+		<strong>Wait For It: Determinants of Pull Request Evaluation Latency on GitHub</strong>. 
+		The 12th Working Conference on Mining Software Repositories (MSR 2015), Florence, Italy, 2015.
+		[<A href="res/paper/msr2015.pdf">pdf</A>]
+		
+	  </UL> 
      
 	 <H3>2014</H3>
       <UL style="LIST-STYLE-TYPE: none" class=pubs>
         <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
 		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
 		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
-		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+		[<A href="res/paper/msr2015.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
 
 		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
 		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
@@ -128,11 +137,11 @@
         <LI>
 		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
 		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
-		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
+		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013.
         [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
         <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
 		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
-		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
+		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013.
 		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
         <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
         [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
diff --git a/res/paper/msr2015.pdf b/res/paper/msr2015.pdf
new file mode 100644
index 0000000..beb69ac
--- /dev/null
+++ b/res/paper/msr2015.pdf
@@ -0,0 +1,319 @@
+             Wait For It: Determinants of Pull Request
+                  Evaluation Latency on GitHub
+             Yue Yu∗† , Huaimin Wang∗ , Vladimir Filkov† , Premkumar Devanbu† , and Bogdan Vasilescu†
+                 ∗ College of Computer, National University of Defense Technology, Changsha, 410073, China
+                  † Department of Computer Science, University of California, Davis, Davis, CA 95616, USA
+                          {yuyue, hmwang}@nudt.edu.cn, {vﬁlkov, ptdevanbu, vasilescu}@ucdavis.edu
+
+
+   Abstract—The pull-based development model, enabled by git              While the pull-based model offers a much lower barrier to
+and popularised by collaborative coding platforms like BitBucket,      entry for potential contributors, it also increases the burden on
+Gitorius, and GitHub, is widely used in distributed software           core team members who decide whether to integrate them into
+teams. While this model lowers the barrier to entry for potential
+contributors (since anyone can submit pull requests to any repos-      the main development branch [14], [17]. In large projects, the
+itory), it also increases the burden on integrators (i.e., members     volume of incoming pull requests is quite a challenge [14],
+of a project’s core team, responsible for evaluating the proposed      [21], e.g., Ruby on Rails receives upwards of three hundred
+changes and integrating them into the main development line),          pull requests each month. Prioritizing pull requests is one of
+who struggle to keep up with the volume of incoming pull               the main concerns of integrators in their daily work [14].
+requests. In this paper we report on a quantitative study that tries
+to resolve which factors affect pull request evaluation latency           From a perspective of increasing numbers of pull requests,
+in GitHub. Using regression modeling on data extracted from            in this paper we report on a preliminary quantitative study
+a sample of GitHub projects using the Travis-CI continuous             that tries to resolve which factors affect pull request evalu-
+integration service, we ﬁnd that latency is a complex issue,           ation latency in GitHub. Using regression modeling on data
+requiring many independent variables to explain adequately.            extracted from a sample of GitHub projects using the Travis-
+                                                                       CI continuous integration service, we ﬁnd that:
+                       I. I NTRODUCTION
+                                                                          • latency is a complex issue, requiring many independent
+   The pull-based development model [1] is widely used in                   variables to explain adequately;
+distributed software teams to integrate incoming changes into             • the presence of CI is a strong positive predictor;
+a project’s codebase [14]. Enabled by git, the distributed                • the number of comments is the best single predictor of
+version control system, pull-based development implies that                 the latency;
+contributors to a software project need not share access to a             • as expected, the size of a pull request (lines added,
+central repository anymore. Instead, anyone can create forks                commits) is a positive, strong predictor.
+(i.e., local clones of the central repository), update them locally
+and, whenever ready, request to have their changes merged                    II. T HE P ULL R EQUEST E VALUATION P ROCESS
+back into the main branch by submitting a pull request.                Continuous Integration: The principal mechanism through
+Compared to patch submission and acceptance via mailing                which integrators ensure that pull requests can be handled
+lists and issue tracking systems, the traditional model of col-        efﬁciently without compromising quality is automatic testing,
+laboration in open source [3], [9], the pull-based model offers        as supported by continuous integration (CI) services [14],
+several advantages, including centralization of information and        [17]. Whenever a new contribution is received by a project
+process automation: the contributed code (the patch) resides           using CI, it is merged automatically into a testing branch, the
+in the same version control system, albeit in a different branch       existing test suites are run, and the submitter and integrators
+or fork, therefore authorship information is effortlessly main-        are notiﬁed of the outcomes. If tests fail, the pull request is
+tained; modern collaborative coding platforms (e.g., BitBucket,        typically rejected (closed and not merged in GitHub parlance)
+Gitorius, GitHub) provide integrated functionality for pull            by one of the integrators, who may also comment on why
+request generation, automatic testing, contextual discussion,          the contribution is inappropriate and how it can be improved.
+in-line code review, and merger.                                       If tests pass, core team members proceed to do a team-wide
+   Pull requests are used in many scenarios beyond basic patch         code review by commenting inline on (parts of) the code, and
+submission, e.g., conducting code reviews, discussing new              including requests for modiﬁcations to be carried out by the
+features [14]. On GitHub alone, currently the largest code host        submitter (who can then update the pull request with new
+in open source, almost half of the collaborative projects use          code), if necessary. After a cycle of comments and revisions,
+pull requests exclusively (i.e., all contributions, irrespective of    and if everyone is satisﬁed, the pull request is closed and
+whether they come from core developers with write access to            merged. In rare cases, pull requests are merged even if (some)
+the repository or from outside contributors, are submitted as          tests failed. Only core team members (integrators) and the
+pull requests, ensuring that only reviewed code gets merged)           submitter can close (to merge or reject—integrators, and to
+or complementarily to the shared repository model [14].                withdraw—submitter) and reopen pull requests.
+   CI is becoming widely used on GitHub: 75% of projects             H1. Previously-identiﬁed social and technical factors inﬂu-
+that use pull requests heavily also use CI, either in hosted         ence pull request latency in expected ways.
+services (e.g., Travis-CI [25]) or in standalone setups [14].           There is recurring support for the importance of process
+Pull Request Evaluation: As described above, evaluating              factors to team outcomes in the empirical software engineering
+pull requests is a complex iterative process involving many          literature, e.g., [2], [16]. Focusing on the integrator workﬂow,
+stakeholders. Recently, researchers have started investigating       we expect a multitude of process-related factors to inﬂuence
+the pull request workﬂow in GitHub [11], [14], [21], [22],           pull request latency, e.g., current workload and availability of
+trying to understand which factors inﬂuence pull request ac-         reviewers, pull request description quality (akin to the quality
+ceptance (i.e., decision to merge) and latency (i.e., evaluation     of issue reports said to impact the issues’ resolution time [7],
+time). However, (i) these effects are not yet well understood        [27]), and the integrators’ responsiveness (in recent work [23]
+(e.g., results from different studies often diverge, as discussed    we found that pull request submitters may become discour-
+below); and (ii) pull request evaluation has not been studied        aged by unresponsive integrators, leading to communication
+in the context of CI.                                                breakdown and conﬂict). We hypothesize:
+   Pull request acceptance has been studied by Gousios et            H2. Process-related factors have a signiﬁcant impact on pull
+al. [11], [14] and Tsay et al. [21], [22]. For example, using        request latency.
+machine learning techniques, Gousios et al. [11] found that
+                                                                        The general literature on CI suggests that the continuous
+pull requests touching actively developed (hot) parts of the
+                                                                     application of quality control checks speeds up overall de-
+system are preferentially accepted. In contrast, based on results
+                                                                     velopment, and ultimately improves software quality [8]. On
+from a regression modeling study, Tsay et al. [21] argue that
+                                                                     GitHub, the integration of CI in the pull request workﬂow
+the strength of the social connection between the submitter and
+                                                                     should enable project members to ﬁnd integration errors more
+integrators is the determining factor of pull request acceptance.
+                                                                     quickly, tightening the feedback loop. Based on reported
+In a follow-up qualitative study, Gousios et al. [14] found that
+                                                                     widespread use of CI and the importance of testing related
+target area hotness, existence of tests, and overall code quality
+                                                                     factors [14], [17], [21], we expect that CI will play a prominent
+are recognized as important determinants of pull request
+                                                                     role in the pull request evaluation process, enabling integrators
+acceptance by GitHub integrators taking part in their survey.
+                                                                     to better deal with general issues of scale. We posit:
+   In the same qualitative study [14], the authors also asked
+                                                                     H3. CI is a dominant factor of pull request latency.
+survey respondents to: (i) rate several predeﬁned factors by
+perceived importance to pull request latency; and (ii) list
+                                                                                               III. M ETHODS AND DATA
+additional determinants of latency, if any. The following
+ranking of predeﬁned factors emerged (in decreasing order):          Dataset and Preprocessing: We compose a sample of GitHub
+project area hotness, existence of tests in the project, presence    projects that make heavy use of pull requests and CI. In this
+of tests in the pull request, pull request churn (i.e., number       preliminary study we only consider projects using Travis-CI,1
+of changed lines), the submitter’s track record, number of           the most popular CI service on GitHub, integrated into the pull
+discussion comments, and number of commits. Among the                request workﬂow [25]. Using the 10/11/2014 GHTorrent [10],
+many other self-identiﬁed factors, only reviewer availability        [12] dump, we identify candidate non-forked projects that
+and pull request complexity are recognized by at least 5%            received at least 1000 pull requests in total, and were written
+of their respondents. These factors, perceived to be important,      in Ruby, Python, JavaScript, Java, and C++, the most popular
+differ signiﬁcantly from those data mined in an earlier machine      languages on GitHub.2 Then, we identify which of these
+learning experiment (three classes: merged within one hour;          projects use Travis-CI, with our previous techniques [25].
+one day; the rest) by the same authors [11], i.e., the submit-       Finally, in trying to assemble a relatively balanced data set, we
+ter’s track record, the project size and its test coverage, and      further select, from among these, the top ten projects (ranked
+the project’s openness to external contributors (in decreasing       by number of pull requests) for each programming language.3
+importance order).                                                   For each project, we further extract data about incoming pull
+Hypotheses: In this paper we focus on pull request latency, the      requests, received after 01/01/2010 and closed by the time of
+understudied and arguably more complex of the two facets of          data collection (January 2015; i.e., we ignore pull requests
+pull request evaluation. The literature reviewed above revealed      that are still open), from GHTorrent (metadata, e.g., number
+that maintaining software quality and handling a high volume         of comments) and the GitHub API (description title, body, and
+of incoming pull requests are the top priorities of integrators,     actual contents of the pull request, i.e., diffs). For each pull
+who subscribe to a complex evaluation process, involving code        request, we extract data about the automatic builds from the
+review and automatic testing. Even though prior work [11],           Travis-CI API [25]. Lastly, we identify the integrators as those
+[14], [21], [22] has identiﬁed several social and technical          project members that closed others’ issues or pull requests,
+factors that inﬂuence pull request evaluation, as discussed          using GHTorrent. We also perform identity merging [24].
+above, we believe the intricacies of this process are not yet          1 https://travis-ci.com
+accurately captured. Still, to establish a baseline (and replicate     2 http://githut.info/
+
+previous results), we hypothesize:                                     3 We   only select ﬁve projects for C++ and Java due to insufﬁcient samples.
+                              Table I
+BASIC STATISTICS FOR OUR DATA SET. W E ONLY MODEL THE EVALUATION
+     TIME OF PULL REQUESTS (PR S ) TESTED BY CI AND MERGED .
+                                                                             higher complexity (longer evaluation), or better documentation
+                                                                             (facilitating evaluation akin to issue reports [27]).
+ Attributes               Ruby    Python   JavaScript   Java/C++     Total
+                                                                             Workload: Total number of pull requests still open in each
+ #Integrators               220      177         190         103       690   project at current pull request creation time.
+ #PRs received           28,409   28,903      26,983      18,989   103,284
+ #PRs merged             20,755   24,039      17,920      13,456    76,170   Integrator availability: The minimum number of hours
+ #PRs merged&CI-tested   11,562   11,955      11,821       5,510    40,848   (0 . . . 23) until either of the top two integrators (by number
+                                                                             of pull requests handled the last three months) are active, on
+   Table I presents basic statistics about our dataset. In total,            average (based on activity in the last three months), during
+we collected 103,284 pull requests from 40 different projects.               24 hours. Two reviewers ﬁnd an optimal number of defects
+We found that 74% of pull requests have been merged (using                   during code review [18], [19], hence our choice for top two.
+heuristics similar to those in [13]), and that 59% have been                 Friday effect: True if the pull request arrives Friday [20].
+submitted after CI was adopted (measured, per project, as the                #Issue tag and @mention tag: Binary variables to encode the
+date of the earliest pull request tested by Travis-CI). In this              presence of “#” tags (links to issues) and “@” tags (to notify
+preliminary study we only model the evaluation time of pull                  integrators directly) in the pull request title or description.
+requests that have been tested by Travis-CI and eventually                   First human response: Time interval in minutes from pull
+merged. Rejected pull requests and pull requests that do                     request creation to ﬁrst response by reviewers, as a measure
+not undergo automatic testing may be subject to different                    of the project team’s responsiveness.
+processes; we will address these in future work.                             Total CI latency: Time interval in minutes from pull request
+Measures:                                                                    creation to the last commit tested by CI. The team-wide code
+   1) Outcome: The outcome measure is the pull request                       review typically starts after all commits have been tested.
+latency, i.e., the time interval between pull request creation and           CI result: Binary variables to encode the presence of errors
+closing date, in minutes (in case of “reopened” pull requests,               while running Travis-CI (most often, branch already deleted)
+we only consider the date when they are ﬁrst closed).                        and test failures across the different pull request commits.
+   2) Predictors: We compute project-level, pull-request level,              Analysis: We use multiple linear regression to model the
+and submitter-level measures, as discussed in Section II.                    latency of evaluating pull requests. We build three models,
+Project age: At time of pull request creation, in minutes. Older             the ﬁrst only with predictors previously used in the literature
+projects are likely to have different contribution dynamics.                 (H1), and the subsequent two by adding groups of variables
+Team size: Number of integrators active (i.e., closed at least               corresponding to H2 and H3. The age of the project, the team
+one issue/pull request, not their own) during the three months               size, and their interaction were added to all models as control
+prior to pull request creation. Larger teams may be better                   variables. All numeric variables were ﬁrst log transformed
+prepared to handle higher volumes of incoming pull requests.                 (plus 0.5) to stabilize variance and reduce heteroscedastic-
+                                                                             ity [5], then standardized (mean 0, standard deviation 1). To
+Project area hotness: Median number of commits to ﬁles
+                                                                             test for multicollinearity, we computed the variance inﬂation
+touched by the pull request relative to all project commits
+                                                                             factors (VIFs) for each predictor (all remained well below 3,
+during the last three months.
+                                                                             indicating absence of multicollinearity). We use the adjusted
+Commits: Total number of commits part of the pull request.
+                                                                             R2 statistic to evaluate the goodness-of-ﬁt of our models. For
+Travis-CI tests each commit separately.
+                                                                             each model variable, we report its coefﬁcients, standard error,
+Churn: Total number of lines added and deleted by the pull re-
+                                                                             and signiﬁcance level. We consider coefﬁcients important if
+quest. Bigger changes may require longer code reviews/testing.
+                                                                             they were statistically signiﬁcant (p < 0.05). We obtain effect
+Test inclusion: Binary variable measuring if the pull request                sizes from ANOVA analyses. The resulting multivariate linear
+touched at least one test ﬁle (based on ﬁle name/path regular                regression models are shown in Table II.
+expressions). Integrators prefer pull requests containing tests.
+Comments: Total number of overall and inline comments                                                 IV. R ESULTS
+part of a pull request discussion. Pull requests with lots of                   Model 1 has a relatively low goodness of ﬁt (R2 = 36.2%).
+comments tend to signal controversy [6].                                     As expected, the pull request churn, size, and length of discus-
+Submitter’s success rate: Fraction of previous pull requests                 sion play a dominant role in explaining the variance in the data.
+merged, relative to all previous pull requests by this submitter.            All three effects are highly signiﬁcant, and together account
+Integrator: True if the submitter is an integrator.                          for 85% of the variance explained. Pull requests with more
+Strength of social connection: The fraction of team members                  discussion, consisting of more commits, and adding more lines
+that interacted with the submitter in the last three months                  of code are associated with longer evaluation latencies. Effects
+(computed using comment networks [26]). Integrators may                      related to the submitter’s track record, reputation, and social
+favor contributors more strongly connected to them.                          connection to project members are also highly signiﬁcant, with
+Followers: Total number of GitHub developers following the                   smaller but still sizeable contributions to explaining the data
+submitter at pull request creation, as a measure of reputation.              variance. Pull requests by the core team members, contributors
+Description complexity: Total number of words in the pull                    with more followers, more ties to project integrators, and
+request title and description. Longer descriptions may indicate              higher previous pull request success rates are associated with
+                                                                             Table II
+                                                               P ULL R EQUEST L ATENCY M ODELS
+                                                                  Model 1                        Model 2                        Model 3
+                                                         Coeffs(Errors)      Sum Sq.    Coeffs(Errors)     Sum Sq.     Coeffs(Errors)      Sum Sq.
+                                                                        ∗∗∗
+   (Intercept)                                           0.072 (0.009)                  0.045 (0.009)∗∗∗               0.155 (0.008)∗∗∗
+                                                                        ∗∗∗       ∗∗∗                  ∗∗                             ∗∗∗
+   scale(log(proj age))                                  0.022 (0.004)      276.96    −0.014 (0.004)      276.96∗∗∗   −0.028 (0.004)      276.96∗∗∗
+   scale(log(team size))                                −0.055 (0.004)∗∗∗     7.92∗∗∗ −0.108 (0.004)∗∗∗     7.92∗∗∗   −0.108 (0.004)∗∗∗     7.92∗∗∗
+   scale(log(n additions + 0.5))                         0.064 (0.005)∗∗∗ 3354.64∗∗∗    0.065 (0.005)∗∗∗ 3354.64∗∗∗    0.035 (0.004)∗∗∗ 3354.64∗∗∗
+   scale(log(n deletions + 0.5))                        −0.016 (0.005)∗∗     54.92∗∗∗   0.001 (0.005)      54.92∗∗∗   −0.000 (0.004)       54.92∗∗∗
+   scale(log(n commits + 0.5))                           0.147 (0.005)∗∗∗ 3789.65∗∗∗    0.130 (0.005)∗∗∗ 3789.65∗∗∗    0.028 (0.004)∗∗∗ 3789.65∗∗∗
+   scale(log(hotness + 0.5))                             0.016 (0.004)∗∗∗ 74.31∗∗∗      0.001 (0.004)      74.31∗∗∗    0.016 (0.003)∗∗∗ 74.31∗∗∗
+   pr includes testsTRUE                                 0.108 (0.010)∗∗∗ 194.91∗∗∗     0.076 (0.009)∗∗∗ 194.91∗∗∗     0.009 (0.008)      194.91∗∗∗
+   scale(log(n comments + 0.5))                          0.409 (0.005)∗∗∗ 5482.16∗∗∗    0.189 (0.005)∗∗∗ 5482.16∗∗∗    0.037 (0.005)∗∗∗ 5482.16∗∗∗
+   scale(submitter success rate)                        −0.037 (0.005)∗∗∗ 432.86∗∗∗   −0.023 (0.004)∗∗∗ 432.86∗∗∗     −0.016 (0.004)∗∗∗ 432.86∗∗∗
+   scale(strength social connection)                    −0.072 (0.005)∗∗∗ 494.32∗∗∗   −0.037 (0.005)∗∗∗ 494.32∗∗∗     −0.052 (0.004)∗∗∗ 494.32∗∗∗
+   scale(log(n followers + 0.5))                        −0.090 (0.004)∗∗∗ 358.74∗∗∗   −0.108 (0.004)∗∗∗ 358.74∗∗∗     −0.064 (0.004)∗∗∗ 358.74∗∗∗
+   submitter is integratorTRUE                          −0.129 (0.011)∗∗∗ 56.10∗∗∗    −0.095 (0.010)∗∗∗ 56.10∗∗∗      −0.078 (0.009)∗∗∗ 56.10∗∗∗
+   scale(log(proj age)):scale(log(team size))           −0.074 (0.004)∗∗∗ 234.23∗∗∗   −0.012 (0.004)∗∗ 107.07∗∗∗      −0.016 (0.004)∗∗∗ 70.27∗∗∗
+   scale(log(description complexity))                                                   0.115 (0.004)∗∗∗ 960.00∗∗∗     0.087 (0.004)∗∗∗ 960.00∗∗∗
+   scale(log(availability + 0.5))                                                       0.037 (0.004)∗∗∗ 124.96∗∗∗     0.033 (0.003)∗∗∗ 124.96∗∗∗
+   scale(log(n open pr + 0.5))                                                          0.166 (0.005)∗∗∗ 908.33∗∗∗     0.151 (0.004)∗∗∗ 908.33∗∗∗
+   Friday effectTRUE                                                                    0.068 (0.010)∗∗∗ 34.68∗∗∗      0.062 (0.009)∗∗∗ 34.68∗∗∗
+   issue tagTRUE                                                                        0.096 (0.009)∗∗∗ 56.72∗∗∗      0.081 (0.008)∗∗∗ 56.72∗∗∗
+   mention tagTRUE                                                                    −0.060 (0.013)∗∗∗ 14.11∗∗∗      −0.020 (0.012)       14.11∗∗∗
+   scale(log(ﬁrst rsp + 0.5))                                                           0.274 (0.005)∗∗∗ 1892.64∗∗∗    0.243 (0.004)∗∗∗ 1892.64∗∗∗
+   scale(log(team size)):scale(log(workload+0.5))                                     −0.071 (0.004)∗∗∗ 163.80∗∗∗     −0.041 (0.004)∗∗∗ 60.39∗∗∗
+   scale(log(total ci time))                                                                                           0.481 (0.005)∗∗∗ 3855.79∗∗∗
+   ci errorTRUE                                                                                                       −0.401 (0.009)∗∗∗ 977.41∗∗∗
+   ci failTRUE                                                                                                        −0.016 (0.009)           0.27
+   scale(log(ﬁrst rsp+0.5)):scale(log(total ci time))                                                                 −0.102 (0.003)∗∗∗ 434.71∗∗∗
+   Adjusted R-squared                                           0.362                          0.461                          0.587
+   ∗∗∗                ∗∗
+         p < 0.001,        p < 0.01, ∗ p < 0.05
+
+
+shorter evaluation latencies. Perhaps more surprisingly, project                 length of discussion). The prominence of the total CI latency
+area hotness and test case inclusion have highly signiﬁcant                      effect (16%) supports the process description in Section II:
+positive effects, i.e., pull requests touching active parts of                   integrators wait for the automatic testing phase to end (median
+the system, and including tests, are associated with longer                      39min) before proceeding to do a team-wide code review and
+evaluation latencies. Since all predictors suggested by prior                    eventually close the pull request. The total CI latency effect
+work are highly signiﬁcant, we conﬁrm H1.                                        is moderated by ﬁrst human response. As discussed above,
+   Model 2 offers a signiﬁcantly better ﬁt (R2 = 46.1%).                         CI errors will occur when the pull request has already been
+Pull request churn, size, and length of discussion, all highly                   merged (then the branch has been deleted), hence the negative
+signiﬁcant, remain the most prominent predictors, together                       signiﬁcant effect on latency. Therefore, H3 is conﬁrmed.
+explaining 67% of the variance explained. However, the new                                  V. C ONCLUSIONS AND F UTURE W ORK
+process-related factors are all highly signiﬁcant, and have
+                                                                                    Allowing greater inclusivity in contributions can result in a
+sizeable effects. Pull requests with later initial reactions from
+                                                                                 deluge of pull requests, which, if unchecked, can signiﬁcantly
+integrators (10% of the variance explained) tend to also be
+                                                                                 increase the burden on integrators in distributed software
+closed later, suggesting that the initial priorities integrators
+                                                                                 development projects. Our preliminary models show that pull
+assign to pull requests very early in the evaluation process (the
+                                                                                 request review latency is complex, and depends on many
+median ﬁrst comment time is 16min) are already indicative of
+                                                                                 predictors. Naturally, the size of the pull request matters: the
+the (much later) closing time (median 11.2h). The description
+                                                                                 shorter it is the faster it will be reviewed. Other actionable
+length (5%) seems indicative of a pull request’s complexity
+                                                                                 strong predictors are the delay to the ﬁrst human response
+(impact) rather than its legibility, since the effect is positive
+                                                                                 and the availability of the CI pipeline. Improving on both may
+(longer closing time). The integrators’ workload is another
+                                                                                 hasten the review process.
+sizeable positive effect (5%), moderated by team size. Other                        This preliminary study suffers from at least the similar
+positive, albeit smaller, effects are integrator availability (pull              threats that other preliminary studies do [4], [15]: possible is-
+requests submitted outside “business hours” and on Fridays                       sues with data gathering, no validation, and unreﬁned models.
+tend to be closed later) and links to issue reports; @mention                    We are working on addressing all of these in a more mature
+tags have a small negative effect (pull requests assigned to                     study of this subject, that will also elaborate on the impact of
+reviewers early in the process, i.e., at creation, tend to be                    CI on the distributed software development process.
+processed quicker). Therefore, H2 is conﬁrmed.
+                                                                                                VI. ACKNOWLEDGEMENTS
+  Model 3 achieves the best ﬁt among our models (R2 =
+58.7%). The CI-related factors are highly signiﬁcant and cover                     YY and HW acknowledge support from NSFC (grants
+more than 20% of the variance explained, on par with the                         61432020, 61472430). VF, PD, and BV are partially supported
+main social and technical effects (pull request churn, size, and                 by NSF (grants 1247280, 1414172).
+                              R EFERENCES                                               perspective. In International Conference on Software Engineering,
+                                                                                        ICSE. IEEE, 2015. to appear.
+ [1] E. T. Barr, C. Bird, P. C. Rigby, A. Hindle, D. M. German, and              [15]   E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German,
+     P. Devanbu. Cohesive and isolated development with branches. In                    and D. Damian. The promises and perils of mining github. In Working
+     International Conference on Fundamental Approaches to Software En-                 Conference on Mining Software Repositories, MSR, pages 92–101.
+     gineering, FASE, pages 316–331. Springer, 2012.                                    ACM, 2014.
+ [2] N. Bettenburg and A. E. Hassan. Studying the impact of social               [16]   N. Nagappan, B. Murphy, and V. Basili. The inﬂuence of organizational
+     structures on software quality. In International Conference on Program             structure on software quality: An empirical case study. In International
+     Comprehension, ICPC, pages 124–133. IEEE, 2010.                                    Conference on Software Engineering, ICSE, pages 521–530. ACM,
+ [3] C. Bird et al. Open borders? immigration in open source projects.                  2008.
+     In International Working Conference on Mining Software Repositories,        [17]   R. Pham, L. Singer, O. Liskin, and K. Schneider. Creating a shared
+     MSR, page 6. IEEE, 2007.                                                           understanding of testing culture on a social coding site. In International
+ [4] C. Bird, P. Rigby, E. Barr, D. Hamilton, D. German, and P. Devanbu.                Conference on Software Engineering, ICSE, pages 112–121. IEEE,
+     The promises and perils of mining git. In Working Conference on Mining             2013.
+     Software Repositories, MSR, pages 1–10. IEEE, 2009.                         [18]   P. C. Rigby and C. Bird. Convergent contemporary software peer review
+ [5] J. Cohen, P. Cohen, S. G. West, and L. S. Aiken. Applied multiple                  practices. In SIGSOFT Foundations of Software Engineering, FSE, pages
+     regression/correlation analysis for the behavioral sciences. Routledge,            202–212. ACM, 2013.
+     2013.                                                                       [19]   C. Sauer, D. R. Jeffery, L. Land, and P. Yetton. The effectiveness
+ [6] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb. Social coding in GitHub:          of software development technical reviews: A behaviorally motivated
+     Transparency and collaboration in an open software repository. In ACM              program of research. IEEE Transactions on Software Engineering,
+     Conference on Computer Supported Cooperative Work, CSCW, pages                     26(1):1–14, 2000.
+     1277–1286. ACM, 2012.                                                       [20]      ´
+                                                                                        J. Sliwerski, T. Zimmermann, and A. Zeller. When do changes induce
+ [7] N. Duc Anh, D. S. Cruzes, R. Conradi, and C. Ayala. Empirical                      ﬁxes? ACM Sigsoft Software Engineering Notes, 30(4):1–5, 2005.
+     validation of human factors in predicting issue lead time in open source    [21]   J. Tsay, L. Dabbish, and J. Herbsleb. Inﬂuence of social and technical
+     projects. In International Conference on Predictive Models in Software             factors for evaluating contribution in GitHub. In International Confer-
+     Engineering, page 13. ACM, 2011.                                                   ence on Software Engineering, ICSE, pages 356–366. ACM, 2014.
+ [8] P. M. Duvall, S. Matyas, and A. Glover. Continuous integration:             [22]   J. Tsay, L. Dabbish, and J. Herbsleb. Let’s talk about it: Evaluating
+     improving software quality and reducing risk. Pearson Education, 2007.             contributions through discussion in GitHub. In ACM SIGSOFT Interna-
+ [9] M. Gharehyazie, D. Posnett, B. Vasilescu, and V. Filkov. Developer                 tional Symposium on Foundations of Software Engineering, FSE, pages
+     initiation and social interactions in OSS: A case study of the Apache              144–154. ACM, 2014.
+     Software Foundation. Empirical Software Engineering, pages 1–36,            [23]   B. Vasilescu, V. Filkov, and A. Serebrenik. Perceptions of diversity on
+     2014.                                                                              GitHub: A user survey. unpublished, 2015.
+[10] G. Gousios. The GHTorrent dataset and tool suite. In Working                [24]   B. Vasilescu, D. Posnett, B. Ray, M. G. J. van den Brand, A. Serebrenik,
+     Conference on Mining Software Repositories, MSR, pages 233–236.                    P. Devanbu, and V. Filkov. Gender and tenure diversity in GitHub teams.
+     IEEE, 2013.                                                                        In CHI Conference on Human Factors in Computing Systems, CHI.
+[11] G. Gousios, M. Pinzger, and A. v. Deursen. An exploratory study of the             ACM, 2015. to appear.
+     pull-based software development model. In International Conference on       [25]   B. Vasilescu, S. van Schuylenburg, J. Wulms, A. Serebrenik, and
+     Software Engineering, ICSE, pages 345–355. ACM, 2014.                              M. G. J. van den Brand. Continuous integration in a social-coding
+[12] G. Gousios, B. Vasilescu, A. Serebrenik, and A. Zaidman. Lean                      world: Empirical evidence from GitHub. In International Conference
+     GHTorrent: GitHub data on demand. In Working Conference on Mining                  on Software Maintenance and Evolution, ICSME, pages 401–405. IEEE,
+     Software Repositories, MSR, pages 384–387. ACM, 2014.                              2014.
+[13] G. Gousios and A. Zaidman. A dataset for pull-based development             [26]   Y. Yu, H. Wang, G. Yin, and C. Ling. Reviewer recommender of
+     research. In Working Conference on Mining Software Repositories,                   pull-requests in GitHub. In International Conference on Software
+     MSR, pages 368–371. ACM, 2014.                                                     Maintenance and Evolution, ICSME, pages 609–612. IEEE, 2014.
+[14] G. Gousios, A. Zaidman, M.-A. Storey, and A. Van Deursen. Work              [27]   T. Zimmermann, R. Premraj, N. Bettenburg, S. Just, A. Schroter, and
+     practices and challenges in pull-based development: The integrator’s               C. Weiss. What makes a good bug report? IEEE Transactions on
+                                                                                        Software Engineering, 36(5):618–643, 2010.
+
\ No newline at end of file

commit 7656c4437884eacdd22adc300a58431705c595e6
Author: fisher <yyuu51888@163.com>
Date:   Fri Mar 27 15:54:21 2015 -0700

    1
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index 4e8c907..9ca9ce0 100644
--- a/index.html
+++ b/index.html
@@ -118,7 +118,7 @@
 		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
         
 		<LI>Yang Zhang, Gang Yin, <strong>Yue Yu</strong>, Huaimin Wang. 
-		<strong>A Exploratory Study of @-mention in GitHub’s Pull-requests</strong>. 
+		<strong>An Exploratory Study of @-mention in GitHub’s Pull-requests</strong>. 
 		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
 		
       </UL> 	  

commit c1c91a49208f2a04675326ae55537889c8545c8c
Author: fisher <yyuu51888@163.com>
Date:   Wed Mar 11 10:38:02 2015 -0700

    email
    
    Signed-off-by: fisher <yyuu51888@163.com>
---
 index.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/index.html b/index.html
index cad2d54..4e8c907 100644
--- a/index.html
+++ b/index.html
@@ -29,10 +29,10 @@
       <H2 class="STYLE4">Contact Information</H2>
       <UL style="LIST-STYLE-TYPE: none"><LI>
         <p>National  Laboratory for Parallel and Distributed Processing<br>
-          Computer  School, National University of Defense Technology<br>
+          College of Computer, National University of Defense Technology<br>
           Changsha,  Hunan Province, 410073, P.R.C<br>
 		   Phone: (86)13627319266<br>
-		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
+		   Email: yuyue &lt;at&gt; nudt &lt;dot&gt; edu &lt;dot&gt; cn<br>
         </p>
 		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
         <LI>

commit d1fe636e9a8026752f9f70c049ac7eff73c2f3eb
Author: fisher <yyuu51888@163.com>
Date:   Tue Mar 10 13:49:11 2015 -0700

    1
---
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/index.html b/index.html
index f39fe63..cad2d54 100644
--- a/index.html
+++ b/index.html
@@ -82,7 +82,7 @@
         <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
         <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
         <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
-        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
+        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
         <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
         <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
         <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     

commit 7d9dccbd206b4a371fbe0ea567f98fd956bae7c9
Author: fisher <yyuu51888@163.com>
Date:   Tue Mar 10 13:46:13 2015 -0700

    yang zhang's publications
---
 index.html | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/index.html b/index.html
index e93a808..f39fe63 100644
--- a/index.html
+++ b/index.html
@@ -112,7 +112,15 @@
 		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
 		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
 		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
+			
+		<LI>Yang Zhang, Gang Yin, <strong>Yue Yu</strong>, Huaimin Wang.
+		<strong>Investigating social media in GitHub's pull-requests: a case study on Ruby on Rails</strong>. 
+		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
         
+		<LI>Yang Zhang, Gang Yin, <strong>Yue Yu</strong>, Huaimin Wang. 
+		<strong>A Exploratory Study of @-mention in GitHub’s Pull-requests</strong>. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		
       </UL> 	  
 	  
       <H3>2013</H3>

commit 544276473e6db959c4d140a135c0a4723e9a84a9
Author: fisher <yyuu51888@163.com>
Date:   Mon Feb 9 21:44:31 2015 -0800

    education vising ucdavis
---
 index.html | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/index.html b/index.html
index 24a69e3..e93a808 100644
--- a/index.html
+++ b/index.html
@@ -40,6 +40,10 @@
 		 <hr size="2" color="black" align="center">
       <H2>Education</H2>
       <UL style="LIST-STYLE-TYPE: none">
+	    <LI><strong>Computer Science Department, University of California, Davis, USA.</strong><br>
+			2014.10--present Visiting Ph.D student.  Advisor: Prem Devanbu and Vladimir Filkov <br>
+		</LI>
+		&nbsp;
         <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
 			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
 		</LI>

commit 1a0dd708a4c7befc0dca0e741ad69ebfb5b30ca2
Author: fisher <yyuu51888@163.com>
Date:   Sat Jan 24 13:58:17 2015 -0800

    new picture
---
 index.html    |   4 ++--
 res/yuyue.jpg | Bin 0 -> 79791 bytes
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/index.html b/index.html
index 5c1c8b0..24a69e3 100644
--- a/index.html
+++ b/index.html
@@ -13,12 +13,12 @@
   <TR>
     <TD vAlign=middle align=left>
       <H1>Yue Yu (余跃) </H1></TD>
-    <TD rowSpan=3 width=200 align=right><IMG src="res/Yy.jpg" width=160 height="153" pagespeed_url_hash="972285866"></TD>
+    <TD rowSpan=3 width=200 align=right><IMG src="res/yuyue.jpg" width=160 height="153" pagespeed_url_hash="972285866"></TD>
   </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
   <TR>
     <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
 	<P>
-	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
+	Our new research: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
 	</P>
       </TD></TR></TBODY></TABLE>
 <HR align=center color=#006600 width=800 noShade>
diff --git a/res/yuyue.jpg b/res/yuyue.jpg
new file mode 100644
index 0000000..256639c
Binary files /dev/null and b/res/yuyue.jpg differ

commit 6e8c4caf7aa39b22144c2f39b793d1fb83eacaf1
Author: fisher <yyuu51888@163.com>
Date:   Fri Jan 23 13:13:42 2015 -0800

    1
---
 index.html | 837 +++++++++++++------------------------------------------------
 1 file changed, 172 insertions(+), 665 deletions(-)

diff --git a/index.html b/index.html
index 9c56da9..5c1c8b0 100644
--- a/index.html
+++ b/index.html
@@ -1,668 +1,175 @@
-
-<!DOCTYPE html>
-<html lang="en">
-	<head>
-		<meta charset="utf-8"/>
-		<title>/index.html - 变更 - 开源软件数据挖掘与分析 - Trustie - 为大学生技术创新筑巢</title>
-		<meta name="description" content="Trustie"/>
-		<meta name="keywords" content="issue,bug,tracker"/>
-		<meta content="authenticity_token" name="csrf-param"/>
-<meta content="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U=" name="csrf-token"/>
-		<link rel='shortcut icon' href='http://forge.trustie.net/xfavicon.ico,q1402999474.pagespeed.ic.2wHlF4xYtA.png'/>
-		<link href="http://forge.trustie.net/stylesheets/jquery/A.jquery-ui-1.9.2.css,q1402999473.pagespeed.cf.97FmkTrJ-T.css" media="all" rel="stylesheet" type="text/css"/>
-<link href="http://forge.trustie.net/A.themes,,_redpenny-master,,_stylesheets,,_application.css,,q1421513702+stylesheets,,_nyan.css,,q1422005967,Mcc.Fo_9k7hi1W.css.pagespeed.cf.J10VbT8hwJ.css" media="all" rel="stylesheet" type="text/css"/>
-
+﻿<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<!-- saved from url=http://forge.trustie.net/Fisher/ -->
+<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
+<TITLE>Yue Yu's Website</TITLE>
+<META http-equiv="Content-Type" content="text/html; charset=utf-8"/>
+<STYLE type=text/css>H1{margin-bottom:0px}H2{color:#040}UL.pubs LI{padding-bottom:10px;padding-left:0px;padding-right:0px;padding-top:0px}body{background-color:#fff}.STYLE1{color:#39f}.STYLE4{color:#040;font-weight:bold}.STYLE5{color:#040}</STYLE>
+
+<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
+<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 link=#003300>
+<span class="STYLE1"></span>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD vAlign=middle align=left>
+      <H1>Yue Yu (余跃) </H1></TD>
+    <TD rowSpan=3 width=200 align=right><IMG src="res/Yy.jpg" width=160 height="153" pagespeed_url_hash="972285866"></TD>
+  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
+  <TR>
+    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
+	<P>
+	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
+	</P>
+      </TD></TR></TBODY></TABLE>
+<HR align=center color=#006600 width=800 noShade>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+      <H2 class="STYLE4">Contact Information</H2>
+      <UL style="LIST-STYLE-TYPE: none"><LI>
+        <p>National  Laboratory for Parallel and Distributed Processing<br>
+          Computer  School, National University of Defense Technology<br>
+          Changsha,  Hunan Province, 410073, P.R.C<br>
+		   Phone: (86)13627319266<br>
+		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
+        </p>
+		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
+        <LI>
+        </UL>
+		 <hr size="2" color="black" align="center">
+      <H2>Education</H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
+			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
+			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
+			2007.9--2011.6 B.E. in Information Security<br>
+		</LI>
+		&nbsp;
+		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
+			2009.03-2010.06 Minor in Journalism and Communication.<br>
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE5">Research Experience </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>
+		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
+	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
+        <LI> National Science Foundation of China (Grant No.60903043)</LI>
+		<br>
+		<LI>
+		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
+		<LI>
+		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
+		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE4">Awards and Honors </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
+        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
+        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
+        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
+        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
+        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
+        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
+        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
+      </UL>
+	  <hr size="2" color="black" align="center">
+	  </TD></TR></TBODY></TABLE>
+	  
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+     <H2 class="STYLE5">Publications</H2>
+     
+	 <H3>2014</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
+		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
+		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		[<A href="res/paper/apsec2014.pdf">pdf</A>]
 		
-		<script src="http://forge.trustie.net/javascripts/jquery-1.8.3-ui-1.9.2-ujs-2.0.3.js,q1416964772.pagespeed.jm.QKDsE6035i.js" type="text/javascript"></script>
-<script src="http://forge.trustie.net/javascripts/application.js,q1408787969.pagespeed.jm.vNffLRbOnZ.js" type="text/javascript"></script>
-<script src="http://forge.trustie.net/javascripts/jquery.colorbox-min.js,q1416964772.pagespeed.jm.Sn8ig1XkLd.js" type="text/javascript"></script>
-<script type="text/javascript">//<![CDATA[
-$(window).load(function(){warnLeavingUnsaved('若离开当前页面，则该页面内未保存的内容将丢失。');});
-//]]></script>
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
+		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
+		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
+		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
+        
+      </UL> 	  
+	  
+      <H3>2013</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>
+		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
+		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
+		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
+        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
+		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
+		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
+		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
+		</UL>
 		
-		<script src="http://forge.trustie.net/javascripts/hubspot/messenger.min.js,q1402999472.pagespeed.jm.JvIIVrDbxS.js" type="text/javascript"></script>
+	  <H3>2011</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
+		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
+		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
+		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
+		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
+		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
+		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
+      </UL>
+	  
+	  <H3>2010</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
+		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
+		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
+      </UL>
+		
+      </TD></TR></TBODY></TABLE>
+<DIV id=eXTReMe><!--<a href="http://extremetracking.com/open?login=mcmillco">
+<img src="http://t1.extreme-dm.com/i.gif" style="border: 0;"
+height="1" width="1" id="EXim" alt="" /></a>-->
+<!--记录单个用户登陆次数--!>
+<SCRIPT type=text/javascript><!--
+EXref="";top.document.referrer?EXref=top.document.referrer:EXref=document.referrer;//-->
+</SCRIPT>
+
+<NOSCRIPT></NOSCRIPT></DIV>
+<!--cnzz analysis--!>
+<script src="http://s22.cnzz.com/z_stat.php?id=1000243573&web_id=1000243573" language="JavaScript"></script>
+<!--google analysis--!>
+<script>
+  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
+  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
+  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
+  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
+
+  ga('create', 'UA-47071715-1', 'trustie.net');
+  ga('send', 'pageview');
+
+</script>
+</BODY></HTML>
 <script type="text/javascript">//<![CDATA[
-(function(){var $,FutureMessage,spinner_template,__hasProp={}.hasOwnProperty,__extends=function(child,parent){for(var key in parent){if(__hasProp.call(parent,key))child[key]=parent[key];}function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();child.__super__=parent.prototype;return child;};$=jQuery;spinner_template='<div class="messenger-spinner">\n    <span class="messenger-spinner-side messenger-spinner-side-left">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n    <span class="messenger-spinner-side messenger-spinner-side-right">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n</div>';FutureMessage=(function(_super){__extends(FutureMessage,_super);function FutureMessage(){return FutureMessage.__super__.constructor.apply(this,arguments);}
-FutureMessage.prototype.template=function(opts){var $message;$message=FutureMessage.__super__.template.apply(this,arguments);$message.append($(spinner_template));return $message;};return FutureMessage;})(window.Messenger.Message);window.Messenger.themes.future={Message:FutureMessage};}).call(this);
-//]]></script><link href="http://forge.trustie.net/A.stylesheets,,_hubspot,,_messenger.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-future.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-flat.css,,q1402999473+plugin_assets,,_redmine_code_review,,_stylesheets,,_code_review.css,,q1404306138+stylesheets,,_jstoolbar.css,,q1420898142+stylesheets,,_scm.css,,q1420898142,Mcc.rDvSH_MBW5.css.pagespeed.cf.s3vzCFDPiK.css" media="screen" rel="stylesheet" type="text/css"/>
-
-
-		  <script src="http://forge.trustie.net/plugin_assets/redmine_code_review/javascripts/code_review.js,q1404306138.pagespeed.jm.YjLLojRa_h.js" type="text/javascript"></script>
-  <script src="http://forge.trustie.net/javascripts/jstoolbar/jstoolbar.js,q1402999472.pagespeed.jm.ZLhUmB8F8z.js" type="text/javascript"></script>
-  <script src="http://forge.trustie.net/javascripts/jstoolbar/textile.js,q1402999472.pagespeed.jm.rZDbwDsRrk.js" type="text/javascript"></script>
-  <script type="text/javascript">//<![CDATA[
-jsToolBar.strings={};jsToolBar.strings['Strong']='粗体';jsToolBar.strings['Italic']='斜体';jsToolBar.strings['Underline']='下划线';jsToolBar.strings['Deleted']='删除线';jsToolBar.strings['Code']='程序代码';jsToolBar.strings['Heading 1']='标题 1';jsToolBar.strings['Heading 2']='标题 2';jsToolBar.strings['Heading 3']='标题 3';jsToolBar.strings['Unordered list']='无序列表';jsToolBar.strings['Ordered list']='排序列表';jsToolBar.strings['Quote']='引用';jsToolBar.strings['Unquote']='删除引用';jsToolBar.strings['Preformatted text']='格式化文本';jsToolBar.strings['Wiki link']='连接到 Wiki 页面';jsToolBar.strings['Image']='图片';
-//]]></script>
-  
-  
-
-		<!-- page specific tags -->
-		  <script type="text/javascript">//<![CDATA[
-$(document).ready(function(){var branch_selected=$('#branch').length>0&&$('#rev').val()==$('#branch').val();var tag_selected=$('#tag').length>0&&$('#rev').val()==$('#tag').val();if(branch_selected||tag_selected){$('#rev').val('');}
-$('#branch,#tag').change(function(){$('#rev').val($(this).val());$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');});$('#rev').keydown(function(e){if(e.keyCode==13){$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');}});})
-//]]></script>
-
-	</head>
-	<!--add by huang-->
-	<body class="theme-Redpenny-master controller-repositories action-changes">
-		<div id="wrapper">
-			<div id="wrapper2">
-				<div id="wrapper3">					
-					<style type="text/css">#scrollsidebar{font-size:12px;font-family:"微软雅黑","宋体";line-height:1.9;background:#fff;font-style:normal}#scrollsidebar div,html,img,ul,li,p,body,h1,h2,h3,h4,p,a,table,tr,td,fieldset,input,span,ol{}#scrollsidebar div,img,tr,td,table{border:0}#scrollsidebar ol,ul,li{list-style-type:none}#scrollsidebar .cl{clear:both;overflow:hidden}#scrollsidebar a{text-decoration:none}html{overflow-x:hidden}.custom_service p img{display:inline;margin-top:-5px;vertical-align:middle}.scrollsidebar{position:absolute;z-index:999;top:150px}.side_content{width:154px;height:auto;overflow:hidden;float:left}.side_content .side_list{width:154px;overflow:hidden}.show_btn{width:0;height:112px;overflow:hidden;margin-top:50px;float:left;cursor:pointer}.show_btn span{display:none}.close_btn{width:24px;height:24px;cursor:pointer}.side_title,.side_bottom,.close_btn,.show_btn{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat}.side_title{height:46px}.side_bottom{height:8px}.side_center{font-family:Verdana,Geneva,sans-serif;padding:5px 12px;font-size:12px}.close_btn{float:right;display:block;width:21px;height:16px;margin:16px 10px 0 0;_margin:16px 5px 0 0}.close_btn span{display:none}.side_center .custom_service p{text-align:center;padding:6px 0;margin:0;vertical-align:middle}.msgserver{margin:10px 0 4px 4px}.msgserver a{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat -119px -115px;padding-left:22px}.opnionText{width:120px;height:180px;border-color:#cecece;-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;color:#999;padding:3px}a.opnionButton{display:block;font-weight:bold;margin:-25px auto 0;text-align:center}a:hover.opnionButton{text-decoration:underline}.side_title{background-position:-195px 0}.side_center{background:url(http://forge.trustie.net/images/xblue_line.png.pagespeed.ic.wO8Ooe9t0O.png) repeat-y center}.side_bottom{background-position:-195px -50px}.close_btn{background-position:-44px 0}.close_btn:hover{background-position:-66px 0}.show_btn{background-position:-119px 0}.msgserver a{color:#15bccf}.msgserver a:hover{text-decoration:underline}</style>
-<script>(function($){$.fn.fix=function(options){var defaults={float:'left',minStatue:false,skin:'blue',durationTime:1000}
-var options=$.extend(defaults,options);this.each(function(){var thisBox=$(this),closeBtn=thisBox.find('.close_btn'),show_btn=thisBox.find('.show_btn'),sideContent=thisBox.find('.side_content'),sideList=thisBox.find('.side_list');var defaultTop=thisBox.offset().top;thisBox.css(options.float,0);if(options.minStatue){$(".show_btn").css("float",options.float);sideContent.css('width',0);show_btn.css('width',25);}
-if(options.skin)thisBox.addClass('side_'+options.skin);$(window).bind("scroll",function(){var offsetTop=defaultTop+$(window).scrollTop()+"px";thisBox.animate({top:offsetTop},{duration:options.durationTime,queue:false});});closeBtn.bind("click",function(){sideContent.animate({width:'0px'},"fast");show_btn.stop(true,true).delay(300).animate({width:'25px'},"fast");});show_btn.click(function(){$(this).animate({width:'0px'},"fast");sideContent.stop(true,true).delay(200).animate({width:'154px'},"fast");});});};})(jQuery);$(function(){$("#button1").click(function(){myTips("您的意见已经反馈到公共贴吧的新手讨论吧，我们会第一时间解决您的问题，谢谢支持！","success");});})
-function f_submit()
-{$("#new_memo").submit();}</script>
-
-
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<title>意见反馈</title>
-
-</head>
-<body style="height:auto">
-<!-- ?ú?? ???? -->
-<div class="scrollsidebar" id="scrollsidebar">
-    <div class="side_content">
-        <div class="side_list">
-            <div class="side_title"><a title="意见反馈" class="close_btn"><span>意见反馈</span></a></div>
-            <div class="side_center">
-                <div class="custom_service">
-				  <form accept-charset="UTF-8" action="/forums/1/create_feedback" class="new_memo" id="new_memo" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
-         		    <textarea class="opnionText" cols="40" id="memo_subject" name="memo[subject]" placeholder="有什么想说的，尽管来咆哮吧~~" rows="20">
-</textarea>
-          			<input id="memo_content" name="memo[content]" required="required" type="hidden" value="该贴来自用户反馈！"/>
-          			<a href="javascript:void(0);" class="opnionButton" style=" color:#fd6e2a;" id="" onclick="f_submit();">提&nbsp;&nbsp;交</a>          			
-</form>                </div>                               
-                <div class="msgserver">
-                    <p>
-                   	<a href="http://user.trustie.net/users/12/user_newfeedback" style="color: #15BCCF;">技术支持：黄井泉</a></br>
-                    <a href="http://user.trustie.net/users/34/user_newfeedback" style="color: #15BCCF;">技术支持：白&nbsp;&nbsp;&nbsp;羽</a>
-                    </p>
-                </div>
-            </div>
-            <div class="side_bottom"></div>
-        </div>
-    </div>
-    <div class="show_btn"><span>提交</span></div>
-</div>
-<!-- ?ú?? ?á?? -->
-<script type="text/javascript">$(function(){$("#scrollsidebar").fix({float:'right',skin:'green',durationTime:600});});</script>
-
-<script>//<![CDATA[
-(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://forge.trustie.net/projects/3/repository/fisherweb/changes/index.html?rev=master','EWH6Fc22bt');
-//]]></script></body>
-</html>
-<div id="top-menu" style="background-color: #15bccf;height:40px;margin-top: 10px;margin-bottom: 10px;">
-	<div class="welcome_logo">
-		<a href="/projects/3/repository/fisherweb/changes"><img alt="Logo" height="36px" src="http://forge.trustie.net/images/Nx36xlogo.png,q1417140338.pagespeed.ic.hWN-x5nWc4.png" weight="36px" pagespeed_url_hash="2662075879"/></a>
-	</div>
-	<div id="account">
-		<ul><li><a href="/logout" class="logout" data-method="post" rel="nofollow">退出</a></li></ul>	</div>
-	<div id="loggedas">
-	<ul style="padding:0 0; margin:0 0;display:inline;">
-		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;" class="loggedas_li">
-			<a href="http://user.trustie.net/users/10/user_activities" class="user active">yuyuenudt</a>
-			<ul class="sub_menu">
-                          <li id="course_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
-      <a href="/users/10/user_courses">我的课程</a>
-      <ul class="course_sub_menu">
-                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大牛软工核心知识开放课程" onmouseover="homeworkSlipMenuOver(40);" onmouseout="homeworkSlipMenuOut(40);">
-      <a href="/courses/40">大牛软工核心知识开放课程</a>
-      <ul class="homework_sub_menu" id="homework_loggedas_ul_40" style="top:0.0px;">
-      </ul>
-    </li>
-
-                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="研究生学术研究方法高级专题（凌晓峰主讲）" onmouseover="homeworkSlipMenuOver(76);" onmouseout="homeworkSlipMenuOut(76);">
-      <a href="/courses/76">研究生学术研究方法高级专题（凌晓峰主讲）</a>
-      <ul class="homework_sub_menu" id="homework_loggedas_ul_76" style="top:28.1px;">
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT">
-              <a href="/calls/181/show_course" target="_blank">请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="课程建议">
-              <a href="/calls/367/show_course" target="_blank">课程建议</a>
-            </li>
-      </ul>
-    </li>
-
-                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大学计算机基础(C3)" onmouseover="homeworkSlipMenuOver(132);" onmouseout="homeworkSlipMenuOut(132);">
-      <a href="/courses/132">大学计算机基础(C3)</a>
-      <ul class="homework_sub_menu" id="homework_loggedas_ul_132" style="top:56.2px;">
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业1（引言）">
-              <a href="/calls/297/show_course" target="_blank">作业1（引言）</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业2 XP系统使用">
-              <a href="/calls/344/show_course" target="_blank">作业2 XP系统使用</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业3：Word练习">
-              <a href="/calls/364/show_course" target="_blank">作业3：Word练习</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业4：PPT练习">
-              <a href="/calls/407/show_course" target="_blank">作业4：PPT练习</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业5：Excel练习">
-              <a href="/calls/430/show_course" target="_blank">作业5：Excel练习</a>
-            </li>
-      </ul>
-    </li>
-
-      </ul>
-    </li>
-
-                  <li id="project_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
-      <a href="http://forge.trustie.net/users/10/user_projects">我的项目</a>
-      <ul class="project_sub_menu" style="top:35px;">
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie-Forge">
-              <a href="http://forge.trustie.net/projects/2">Trustie-Forge</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="开源软件数据挖掘与分析">
-              <a href="http://forge.trustie.net/projects/3">开源软件数据挖掘与分析</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Influx开源搜索平台">
-              <a href="http://forge.trustie.net/projects/7">Influx开源搜索平台</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="企业员工MISS系统">
-              <a href="http://forge.trustie.net/projects/63">企业员工MISS系统</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Topcoder研讨空间">
-              <a href="http://forge.trustie.net/projects/83">Topcoder研讨空间</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie history">
-              <a href="http://forge.trustie.net/projects/108">Trustie history</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="王怀民教授每周研讨共享空间">
-              <a href="http://forge.trustie.net/projects/117">王怀民教授每周研讨共享空间</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="GetArchive">
-              <a href="http://forge.trustie.net/projects/129">GetArchive</a>
-            </li>
-            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="群体化软件开发方法">
-              <a href="http://forge.trustie.net/projects/368">群体化软件开发方法</a>
-            </li>
-      </ul>
-    </li>
-
-              <li style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
-                <a href="http://user.trustie.net/my/account">修改资料</a>
-              </li>
-			</ul>
-		</li>
-		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;">
-			<a href="http://user.trustie.net/users/10/user_newfeedback" class="my-message">留言(0)</a>
-		</li>
-	</ul>
-	</div>
-	<ul><li><a href="/">主页</a></li><li><a href="/forums">公共贴吧</a></li></ul></div>
-<div style="border-top:solid 1px #C6E9F1;width:940px;margin-left:auto;margin-right:auto;margin-bottom: 0px;margin-top: -10px;"></div>
-<div style="clear:left;"></div>
-
-<script type="text/javascript">function setMessageCount(){var mes=$('#loggedas .my-message');mes.html(mes.html()+'('+0+")");}
-function addSlipMenu(){var loggedas=$('#loggedas ul li:first');var sub_menu=$('.sub_menu');loggedas.mouseenter(function(event){sub_menu.show();});sub_menu.mouseleave(function(event){sub_menu.hide();});}
-function addProjectSlipMenu(){var loggedas=$('#project_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){course_sub_menu.hide();project_sub_menu.show();});project_sub_menu.mouseleave(function(event){project_sub_menu.hide();});}
-function addCourseSlipMenu(){var loggedas=$('#course_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){project_sub_menu.hide();course_sub_menu.show();});course_sub_menu.mouseleave(function(event){course_sub_menu.hide();});}
-function homeworkSlipMenuOver(id)
-{$('.project_sub_menu').hide();$('#course_loggedas_li').show();$("#homework_loggedas_ul_"+id).show();}
-function homeworkSlipMenuOut(id)
-{$("#homework_loggedas_ul_"+id).hide();}
-$(document).ready(function(){addSlipMenu();addProjectSlipMenu();addCourseSlipMenu();});jQuery(document).ready(function($){$('.sub_menu').find("a").attr('target','_blank');$('.project_sub_menu').find("a").attr('target','_blank');$('.course_sub_menu').find("a").attr('target','_blank');});</script>
-
-					<div id="main">
-						<div class="top-content">							
-							<table>
-								<tr>
-									<td class="info_font" style="width: 240px;" rowspan="2">
-                                      <a href="http://forge.trustie.net" style="color: #15bccf;">
-                                        软件项目托管社区
-                                      </a>
-									</td>
-									<td style="width: 430px; color: #15bccf">
-                                      <strong>当前位置 : </strong>
-                                    </td>
-									<td rowspan="2" width="250px">
-										<div class="top-content-search">
-                                            <script type="text/javascript">function regexName()
-{var name=$.trim($("#name").val());if(name.length==0)
-{$("#project_name_span").text("搜索条件不能为空");$("#project_name_span").css('color','#ff0000');$("#project_name_span").focus();return false;}
-else
-{$("#project_name_span").text("");return true;}}
-function submitSerch()
-{if(regexName()){$("#project_search_form").submit();}}</script>
-											<form accept-charset="UTF-8" action="/projects/search" id="project_search_form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
-                                                <input id="name" name="name" onkeyup="regexName();" size="20" style="float:left" type="text"/>
-                                                <input id="project_type" name="project_type" type="hidden"/>
-                                                <a href="#" onclick="submitSerch();" class="ButtonColor m3p10" style="float:left;padding-top: 3px; margin: 0px;padding-bottom:0px;">
-                                                    搜索
-                                                </a>
-                                                <br/>
-                                                <span id="project_name_span" style="float: left"></span>
-</form>										</div>
-									</td>
-								</tr>
-								<tr>
-									<td>
-                                      <p class="top-content-list">
-                                        <a href="/">主页</a> >
-                                        <a href="/projects/3">开源软件数据挖掘与分析</a>
-                                      </p>
-                                    </td>
-								</tr>
-							</table>							
-						</div>
-						<div id="sidebar">
-							<div class="spaceleft">
-								<div class="inf_user_image">
-									<table>
-										<tr>
-											<td>
-                                              <img alt="0?1417140979" class="avatar2" src="/images/avatars/Project/0?1417140979" pagespeed_url_hash="3661586667"/>
-                                            </td>
-											<td>
-												<div class="info-course">
-													<a href="/projects/3">开源软件数据挖掘与分析</a>
-												</div>
-												<div>
-													
-														项目得分 : 
-														<a href="/users/3/show_projects_score" data-remote="true" style="color: #EC6300;">116</a>
-												<!-- end -->
-												</div>
-                                              <div id="join_exit_project_div">
-                                                <div style="margin-left: 20px;">
-
-  </div>
-<!--添加项目申请-->
-<div style="margin-left: 20px;">
-</div>
-
-<!--添加退出项目-->
-<div style="margin-left: 20px;">
-</div>
-                                              </div>
-											</td>
-										</tr>
-									</table>												
-								</div>
-
-								<div class="user_fans">
-									<table width="240" border="0">
-										<tr align="center" width="80px">
-											<td class="font_index">
-                                              <a href="/projects/3/member">10</a>
-                                            </td>
-											<td class="font_index">
-                                              <a href="/projects/3/watcherlist">5</a>
-                                            </td>
-											<td class="font_index">
-                                              <a href="/projects/3/issues">15</a>
-                                            </td>
-										</tr>
-										<tr class="font_aram">
-											<td align="center" width="70px">
-                                              成员
-                                            </td>
-											<td align="center" width="100px">
-                                              关注
-                                            </td>
-											<td align="center" width="70px">
-                                              缺陷
-                                            </td>
-											<!-- <td align="center" width="58px"></td> -->
-										</tr>
-									</table>
-									<div class="user_underline"></div>
-								</div>
-								<div class="inf_user_context">
-									<div class="font_title_left">
-										概述
-									</div>
-									<div style="padding-bottom: 8px">
-										<div class="font_lighter_sidebar" style="word-break:break-all;word-wrap: break-word;">
-											<p>该项目旨在通过对开源软件开发、发布、部署、运行过程中产生的包括源代码、缺陷跟踪、版本控制、软件标签、用户评论等等数据进行挖掘和分析，研究分析软件开发规律，构建软件开发辅助工具，从而提高软件开发效率和质量</p>
-										</div>
-										<div class="created_on_project">
-                                          <strong style="color: #15bccf">
-                                            创建时间：
-                                          </strong>
-                                          2013-06-29 10:46
-										</div>
-									</div>
-									<div class="user_underline"></div>
-								</div>
-								<!--tags-->
-								<div class="user_fans">
-									<!-- added by william -for tag -->
-									<div class="user_tags">
-										<div id="tags">
-											<div id="tags">
-	<!--  3 代表的是issue 当是issue是 处理方式与前2个对象不同 -->
-		<span>
-          <img alt="Tags" src="http://forge.trustie.net/images/sidebar/xtags.png,q1402999474.pagespeed.ic.-eupVVpnO1.png" pagespeed_url_hash="3837732743"/>
-        </span>
-		<span class="font_title_tag">
-          标签:
-        </span>
-		<span>
-          <a href="#" onclick="$(&#x27;#put-tag-form&#x27;).slideToggle(); $(&#x27;#tags_name&#x27;).focus(); return false;"><img alt="Add" src="http://forge.trustie.net/images/sidebar/xadd.png,q1402999474.pagespeed.ic.6ecwRHMYvR.png" pagespeed_url_hash="2246518169"/></a>
-        </span>
-		<div id="tags_show">
-			<script type="text/javascript"></script>
-<!-- 1代表是user类型   2代表是project类型  3代表是issue类型   4代表需求 7代表竞赛 9代表课程-->
-    <!-- 用来显示三大对象的主页中的tag  故是全部显示  -->
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98">数据挖掘</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C">社交网络</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=SNS">SNS</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=MSR">MSR</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-            <div id="tag">
-                <span class="tag_show">
-                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90">文本分析</a>
-                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
-                </span>
-            </div>
-
-		</div>
-		<div id="put-tag-form" style="display: none">
-			<form accept-charset="UTF-8" action="/users/tag_save" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
-			<input id="tags_name" maxlength="14" minlength="1" name="tag_for_save[name]" require="true" size="28" type="text"/>
-			<input id="tag_for_save_object_id" name="tag_for_save[object_id]" size="30" style="display:none" type="text" value="3"/>
-			<input id="tag_for_save_object_flag" name="tag_for_save[object_flag]" size="30" style="display:none" type="text" value="2"/>
-             <!---->
-            <a href="#" onclick='$("#tags_name").parent().submit();' class="ButtonColor m3p10" style="padding: 3px 6px">
-              增加
-            </a>
-            <a class="ButtonColor m3p10" href="#" onclick="$(&quot;#put-tag-form&quot;).slideUp();; return false;" style="padding:3px 6px">取消</a>
-</form>		</div>
-</div>
-
-										</div>
-									</div>
-								</div>
-								<!--tool-->
-								<div class="user_underline"></div>
-								<div class="tool">
-									<div class="font_title_left">
-  项目工具集
-</div>
-
-<div class="tools ">
-  <ul><h3>项目交流</h3>
-    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/feedback">用户反馈</a></li>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/files">作品下载</a></li>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/wiki">Wiki</a></li>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/code_review/index">代码审查</a></li>
-  </ul>
-  <ul><h3>进度跟踪</h3>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/calendar">日历</a></li>
-
-    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/roadmap">里程碑</a></li>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/gantt">甘特图</a></li>
-
-  </ul>
-  <ul><h3>其他工具</h3>
-        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/project/3/share">DTS测试工具</a></li>
-      <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/documents">文档</a></li>
-    <li></li>
-  </ul>
-
-</div>
-
-								</div>
-								<div class="user_underline"></div>
-							</div>
-						</div>
-						<div id="content">
-							<div class="tabs_new">
-                              <ul><li><a href="/projects/3" class="overview">近期动态</a></li>
-<li><a href="/projects/3/issues" class="issues">缺陷</a></li>
-<li><a href="/projects/3/news" class="news">新闻</a></li>
-<li><a href="/projects/3/boards" class="boards">讨论区</a></li>
-<li><a href="/projects/3/repository" class="repository selected">版本库</a></li>
-
-<li><a href="/projects/3/settings" class="settings">配置</a></li></ul>
-							</div>
-							
-							
-
-<div class="contextual">
-  
-<a href="/projects/3/repository/fisherweb/statistics" class="icon icon-stats">统计</a>
-
-<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/changes/index.html" id="revision_selector" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>  <!-- Branches Dropdown -->
-    | 分支: 
-    <select id="branch" name="branch"><option value=""></option>
-<option value="master" selected="selected">master</option></select>
-
-
-    | 修订: 
-    <input id="rev" name="rev" size="8" type="text" value="master"/>
-</form>
-</div>
-
-<h3><a href="/projects/3/repository/fisherweb/revisions/master/show">fisherweb</a>
-    / <a href="/projects/3/repository/fisherweb/changes/index.html?rev=master">index.html</a>
-@ master
-
-</h3>
-
-
-<p>
-历史记录 |
-    <a href="/projects/3/repository/fisherweb/revisions/master/entry/index.html">查看</a> |
-    <a href="/projects/3/repository/fisherweb/revisions/master/annotate/index.html">追溯</a> |
-<a href="/projects/3/repository/fisherweb/revisions/master/raw/index.html">下载</a>
-(10.086 KB)
-</p>
-
-
-
-
-
-
-<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/diff/index.html" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
-<table class="list changesets">
-<thead><tr>
-<th>#</th>
-<th></th>
-<th></th>
-<th>日期</th>
-<th>作者</th>
-<th>注释</th>
-</tr></thead>
-<tbody>
-<tr class="changeset odd">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/d21f4f5d240465c6fdd40ba38cc2d31c9e0ee80a" title="修订 d21f4f5d">d21f4f5d</a>
-</td><td class="checkbox"><input checked="checked" id="cb-1" name="rev" onclick="$(&#x27;#cbto-2&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="d21f4f5d240465c6fdd40ba38cc2d31c9e0ee80a"/></td>
-<td class="checkbox"></td>
-<td class="committed_on">2014-10-06 04:25</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>1</p></td>
-</tr>
-<tr class="changeset even">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/43d1dc6fd1bdf13df254717609ab905bd72f2a40" title="修订 43d1dc6f">43d1dc6f</a>
-</td><td class="checkbox"><input id="cb-2" name="rev" onclick="$(&#x27;#cbto-3&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="43d1dc6fd1bdf13df254717609ab905bd72f2a40"/></td>
-<td class="checkbox"><input checked="checked" id="cbto-2" name="rev_to" onclick="if ($(&#x27;#cb-2&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-1&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="43d1dc6fd1bdf13df254717609ab905bd72f2a40"/></td>
-<td class="committed_on">2014-08-03 13:14</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>icsme paper</p>
-
-
-	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
-</tr>
-<tr class="changeset odd">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/a58eddc01de467eae345b69946b94713a62e7c8c" title="修订 a58eddc0">a58eddc0</a>
-</td><td class="checkbox"><input id="cb-3" name="rev" onclick="$(&#x27;#cbto-4&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="a58eddc01de467eae345b69946b94713a62e7c8c"/></td>
-<td class="checkbox"><input id="cbto-3" name="rev_to" onclick="if ($(&#x27;#cb-3&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-2&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="a58eddc01de467eae345b69946b94713a62e7c8c"/></td>
-<td class="committed_on">2014-06-10 21:05</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>recommender href</p>
-
-
-	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
-</tr>
-<tr class="changeset even">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/220cc52059007b13e1b14119125ec75c1fe1589a" title="修订 220cc520">220cc520</a>
-</td><td class="checkbox"><input id="cb-4" name="rev" onclick="$(&#x27;#cbto-5&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="220cc52059007b13e1b14119125ec75c1fe1589a"/></td>
-<td class="checkbox"><input id="cbto-4" name="rev_to" onclick="if ($(&#x27;#cb-4&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-3&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="220cc52059007b13e1b14119125ec75c1fe1589a"/></td>
-<td class="committed_on">2014-02-22 01:38</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>msr14</p>
-
-
-	<p>Signed-off-by: YuYue &lt;<a class="email" href="mailto:yyuu51888@163.com">yyuu51888@163.com</a>&gt;</p></td>
-</tr>
-<tr class="changeset odd">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/cfb36235774dadfa5f59b948d6fd6f112c17a8c5" title="修订 cfb36235">cfb36235</a>
-</td><td class="checkbox"><input id="cb-5" name="rev" onclick="$(&#x27;#cbto-6&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="cfb36235774dadfa5f59b948d6fd6f112c17a8c5"/></td>
-<td class="checkbox"><input id="cbto-5" name="rev_to" onclick="if ($(&#x27;#cb-5&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-4&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="cfb36235774dadfa5f59b948d6fd6f112c17a8c5"/></td>
-<td class="committed_on">2014-02-22 00:06</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>modify "ci yun"</p>
-
-
-	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
-</tr>
-<tr class="changeset even">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/3a0efc5279a1f234d7356ddbf20fd040494ea9c7" title="修订 3a0efc52">3a0efc52</a>
-</td><td class="checkbox"><input id="cb-6" name="rev" onclick="$(&#x27;#cbto-7&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="3a0efc5279a1f234d7356ddbf20fd040494ea9c7"/></td>
-<td class="checkbox"><input id="cbto-6" name="rev_to" onclick="if ($(&#x27;#cb-6&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-5&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="3a0efc5279a1f234d7356ddbf20fd040494ea9c7"/></td>
-<td class="committed_on">2014-01-15 20:37</td>
-<td class="author">xianbo</td>
-<td class="comments"><p>delete single caculate in browser</p></td>
-</tr>
-<tr class="changeset odd">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/b3a96703480243e59b7200860e9b6eb94b47cdd7" title="修订 b3a96703">b3a96703</a>
-</td><td class="checkbox"><input id="cb-7" name="rev" onclick="$(&#x27;#cbto-8&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="b3a96703480243e59b7200860e9b6eb94b47cdd7"/></td>
-<td class="checkbox"><input id="cbto-7" name="rev_to" onclick="if ($(&#x27;#cb-7&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-6&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="b3a96703480243e59b7200860e9b6eb94b47cdd7"/></td>
-<td class="committed_on">2014-01-12 17:32</td>
-<td class="author">xianbo</td>
-<td class="comments"><p>add cnzz amd google anylysis to caculate the web about visitors'<br/>informations</p></td>
-</tr>
-<tr class="changeset even">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/5f07d7af4209a19687ccb0e13145f31b2559f4b6" title="修订 5f07d7af">5f07d7af</a>
-</td><td class="checkbox"><input id="cb-8" name="rev" onclick="$(&#x27;#cbto-9&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="5f07d7af4209a19687ccb0e13145f31b2559f4b6"/></td>
-<td class="checkbox"><input id="cbto-8" name="rev_to" onclick="if ($(&#x27;#cb-8&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-7&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="5f07d7af4209a19687ccb0e13145f31b2559f4b6"/></td>
-<td class="committed_on">2014-01-10 23:24</td>
-<td class="author">xianbo</td>
-<td class="comments"><p>add caculate visitors</p></td>
-</tr>
-<tr class="changeset odd">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/bc99b26b845ceebe8242616446b9771e176f5723" title="修订 bc99b26b">bc99b26b</a>
-</td><td class="checkbox"><input id="cb-9" name="rev" onclick="$(&#x27;#cbto-10&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="bc99b26b845ceebe8242616446b9771e176f5723"/></td>
-<td class="checkbox"><input id="cbto-9" name="rev_to" onclick="if ($(&#x27;#cb-9&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-8&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="bc99b26b845ceebe8242616446b9771e176f5723"/></td>
-<td class="committed_on">2013-12-18 23:03</td>
-<td class="author">yuyuenudt</td>
-<td class="comments"><p>change B.S to B.E</p>
-
-
-	<p>Signed-off-by: YuYue &lt;<a class="email" href="mailto:yyuu51888@163.com">yyuu51888@163.com</a>&gt;</p></td>
-</tr>
-<tr class="changeset even">
-<td class="id">
-  <a href="/projects/3/repository/fisherweb/revisions/512be42c7d466a58c4abb567427cf495eb43fae8" title="修订 512be42c">512be42c</a>
-</td><td class="checkbox"></td>
-<td class="checkbox"><input id="cbto-10" name="rev_to" onclick="if ($(&#x27;#cb-10&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-9&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="512be42c7d466a58c4abb567427cf495eb43fae8"/></td>
-<td class="committed_on">2013-12-18 08:14</td>
-<td class="author">senluo</td>
-<td class="comments"><p>2013-12-18</p></td>
-</tr>
-</tbody>
-</table>
-<input type="submit" value="查看差别"/>
-</form>
-
-
-
-							
-							<div style="clear:both;"></div>
-						</div>
-						<!--add by huang-->
-<div class="clearfix"></div>
-<div id="footer" style="margin-left:-5px;padding-top: 20px;clear: both;font-size: 12px;">
-	<div style="border-top:solid 1px #C6E9F1;"></div>
- <div class="base_footer">
-  <div align="center">
-
-   <!--gcm-->
-   <p>
-      <p>
-    <span>主办单位</span>
-    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=47">国防科学技术大学并行与分布处理国家重点实验室</a></span>
-    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=41">计算机科学与技术系</a></span>
-    <span id="copyright">版权&copy;2007~2014</span>
-    <span class="footer_text_link" id="contact_us"><a target="_blank" href="http://forge.trustie.net/projects/2/member">联系我们</a></span>
-    <span class="footer_text_link" id="record"><a target="_blank" href="http://www.miibeian.gov.cn/">湘ICP备09019772</a></span>
-
-  </p>
-  </p>
-  <div id="logo_link">
-            <span class="footer_logo_link"><a href="http://www.nudt.edu.cn/special.asp?classid=12" target="_blank"><img alt="国防科学技术大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/1?1417140979" width="100" pagespeed_url_hash="2235555691"/></a></span>
-            <span class="footer_logo_link"><a href="http://eecs.pku.edu.cn" target="_blank"><img alt="北京大学信息科学技术学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/2?1417140979" width="100" pagespeed_url_hash="604533990"/></a></span>
-            <span class="footer_logo_link"><a href="http://scse.buaa.edu.cn" target="_blank"><img alt="北京航空航天大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/3?1417140979" width="100" pagespeed_url_hash="3268479585"/></a></span>
-            <span class="footer_logo_link"><a href="http://www.iscas.ac.cn" target="_blank"><img alt="中国科学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/4?1417140979" width="100" pagespeed_url_hash="1637457884"/></a></span>
-            <span class="footer_logo_link"><a href="http://www.inforbus.com" target="_blank"><img alt="山东中创软件商用中间件股份有限公司" height="30" src="/images/avatars/WebFooterCompany/5?1417140979" width="100" pagespeed_url_hash="6436183"/></a></span>
- </div>
- <!--gcm-->
-
-</div>
-</div>
-</div>
-<div class="debug">
-  
-  <div class="hidden">
-    <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-46523987-1','trustie.net');ga('send','pageview');</script>
-  </div>
-</div>
-
-
-					</div>
-
-					<div id="ajax-indicator" style="display:none;">
-						<span>载入中...</span>
-					</div>
-					<div id="ajax-modal" style="display:none;"></div>
-				</div>
-			</div>
-			
-
-
-
-
-		</div>
-	</body>
-</html>
-
+(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://forge.trustie.net/projects/3/repository/fisherweb/revisions/master/raw/index.html','EWH6Fc22bt');
+//]]></script>
\ No newline at end of file

commit 5fa3ab7dc45c929610272263145032a0754858f5
Author: fisher <yyuu51888@163.com>
Date:   Fri Jan 23 13:12:15 2015 -0800

    js
---
 index.html                  | 835 +++++++++++++++++++++++++++++++++++---------
 index2.html                 | 171 +++++++++
 js/Caculate_VisitNumber.htm | 573 ++++++++++++++++++++++++++++++
 3 files changed, 1410 insertions(+), 169 deletions(-)

diff --git a/index.html b/index.html
index e1694f0..9c56da9 100644
--- a/index.html
+++ b/index.html
@@ -1,171 +1,668 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
-<!-- saved from url=http://forge.trustie.net/Fisher/ -->
-<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
-<TITLE>Yue Yu's Website</TITLE>
-<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<STYLE type=text/css>
-H1 {
-	MARGIN-BOTTOM: 0px
-}
-H2 {
-	COLOR: #004400
-}
-UL.pubs LI {
-	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
-}
-body {
-	background-color: #FFFFFF;
-}
-.STYLE1 {color: #3399FF}
-.STYLE4 {
-	color: #004400;
-	font-weight: bold;
-}
-.STYLE5 {color: #004400}
-</STYLE>
-
-<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
-<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
-link=#003300>
-<span class="STYLE1"></span>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD vAlign=middle align=left>
-      <H1>Yue Yu (余跃) </H1></TD>
-    <TD rowSpan=3 width=200 align=right><IMG 
-      src="res/Yy.jpg" width=160 height="153"></TD>
-  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
-  <TR>
-    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
-	<P>
-	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
-	</P>
-      </TD></TR></TBODY></TABLE>
-<HR align=center color=#006600 width=800 noShade>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-      <H2 class="STYLE4">Contact Information</H2>
-      <UL style="LIST-STYLE-TYPE: none"><LI>
-        <p>National  Laboratory for Parallel and Distributed Processing<br>
-          Computer  School, National University of Defense Technology<br>
-          Changsha,  Hunan Province, 410073, P.R.C<br>
-		   Phone: (86)13627319266<br>
-		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
-        </p>
-		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
-        <LI>
-        </UL>
-		 <hr size="2" color="black" align="center">
-      <H2>Education</H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
-			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
-			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
-			2007.9--2011.6 B.E. in Information Security<br>
-		</LI>
-		&nbsp;
-		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
-			2009.03-2010.06 Minor in Journalism and Communication.<br>
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE5">Research Experience </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>
-		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
-	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
-        <LI> National Science Foundation of China (Grant No.60903043)</LI>
-		<br>
-		<LI>
-		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
-		<LI>
-		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
-		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE4">Awards and Honors </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
-        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
-        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
-        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
-        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
-        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
-        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
-        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
-      </UL>
-	  <hr size="2" color="black" align="center">
-	  </TD></TR></TBODY></TABLE>
-	  
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-     <H2 class="STYLE5">Publications</H2>
-     
-	 <H3>2014</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
-		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
-		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
-
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
-		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
-		[<A href="res/paper/apsec2014.pdf">pdf</A>]
-		
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
-		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
-		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
-		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
-        
-      </UL> 	  
-	  
-      <H3>2013</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>
-		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
-		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
-		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
-        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
-		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
-		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
-		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
-        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
-		</UL>
+
+<!DOCTYPE html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8"/>
+		<title>/index.html - 变更 - 开源软件数据挖掘与分析 - Trustie - 为大学生技术创新筑巢</title>
+		<meta name="description" content="Trustie"/>
+		<meta name="keywords" content="issue,bug,tracker"/>
+		<meta content="authenticity_token" name="csrf-param"/>
+<meta content="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U=" name="csrf-token"/>
+		<link rel='shortcut icon' href='http://forge.trustie.net/xfavicon.ico,q1402999474.pagespeed.ic.2wHlF4xYtA.png'/>
+		<link href="http://forge.trustie.net/stylesheets/jquery/A.jquery-ui-1.9.2.css,q1402999473.pagespeed.cf.97FmkTrJ-T.css" media="all" rel="stylesheet" type="text/css"/>
+<link href="http://forge.trustie.net/A.themes,,_redpenny-master,,_stylesheets,,_application.css,,q1421513702+stylesheets,,_nyan.css,,q1422005967,Mcc.Fo_9k7hi1W.css.pagespeed.cf.J10VbT8hwJ.css" media="all" rel="stylesheet" type="text/css"/>
+
 		
-	  <H3>2011</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
-		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
-		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
-		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
-		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
-		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
-		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
-		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
-      </UL>
-	  
-	  <H3>2010</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
-		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
-		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
-		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
-      </UL>
+		<script src="http://forge.trustie.net/javascripts/jquery-1.8.3-ui-1.9.2-ujs-2.0.3.js,q1416964772.pagespeed.jm.QKDsE6035i.js" type="text/javascript"></script>
+<script src="http://forge.trustie.net/javascripts/application.js,q1408787969.pagespeed.jm.vNffLRbOnZ.js" type="text/javascript"></script>
+<script src="http://forge.trustie.net/javascripts/jquery.colorbox-min.js,q1416964772.pagespeed.jm.Sn8ig1XkLd.js" type="text/javascript"></script>
+<script type="text/javascript">//<![CDATA[
+$(window).load(function(){warnLeavingUnsaved('若离开当前页面，则该页面内未保存的内容将丢失。');});
+//]]></script>
 		
-      </TD></TR></TBODY></TABLE>
-</BODY></HTML>
+		<script src="http://forge.trustie.net/javascripts/hubspot/messenger.min.js,q1402999472.pagespeed.jm.JvIIVrDbxS.js" type="text/javascript"></script>
+<script type="text/javascript">//<![CDATA[
+(function(){var $,FutureMessage,spinner_template,__hasProp={}.hasOwnProperty,__extends=function(child,parent){for(var key in parent){if(__hasProp.call(parent,key))child[key]=parent[key];}function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();child.__super__=parent.prototype;return child;};$=jQuery;spinner_template='<div class="messenger-spinner">\n    <span class="messenger-spinner-side messenger-spinner-side-left">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n    <span class="messenger-spinner-side messenger-spinner-side-right">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n</div>';FutureMessage=(function(_super){__extends(FutureMessage,_super);function FutureMessage(){return FutureMessage.__super__.constructor.apply(this,arguments);}
+FutureMessage.prototype.template=function(opts){var $message;$message=FutureMessage.__super__.template.apply(this,arguments);$message.append($(spinner_template));return $message;};return FutureMessage;})(window.Messenger.Message);window.Messenger.themes.future={Message:FutureMessage};}).call(this);
+//]]></script><link href="http://forge.trustie.net/A.stylesheets,,_hubspot,,_messenger.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-future.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-flat.css,,q1402999473+plugin_assets,,_redmine_code_review,,_stylesheets,,_code_review.css,,q1404306138+stylesheets,,_jstoolbar.css,,q1420898142+stylesheets,,_scm.css,,q1420898142,Mcc.rDvSH_MBW5.css.pagespeed.cf.s3vzCFDPiK.css" media="screen" rel="stylesheet" type="text/css"/>
+
+
+		  <script src="http://forge.trustie.net/plugin_assets/redmine_code_review/javascripts/code_review.js,q1404306138.pagespeed.jm.YjLLojRa_h.js" type="text/javascript"></script>
+  <script src="http://forge.trustie.net/javascripts/jstoolbar/jstoolbar.js,q1402999472.pagespeed.jm.ZLhUmB8F8z.js" type="text/javascript"></script>
+  <script src="http://forge.trustie.net/javascripts/jstoolbar/textile.js,q1402999472.pagespeed.jm.rZDbwDsRrk.js" type="text/javascript"></script>
+  <script type="text/javascript">//<![CDATA[
+jsToolBar.strings={};jsToolBar.strings['Strong']='粗体';jsToolBar.strings['Italic']='斜体';jsToolBar.strings['Underline']='下划线';jsToolBar.strings['Deleted']='删除线';jsToolBar.strings['Code']='程序代码';jsToolBar.strings['Heading 1']='标题 1';jsToolBar.strings['Heading 2']='标题 2';jsToolBar.strings['Heading 3']='标题 3';jsToolBar.strings['Unordered list']='无序列表';jsToolBar.strings['Ordered list']='排序列表';jsToolBar.strings['Quote']='引用';jsToolBar.strings['Unquote']='删除引用';jsToolBar.strings['Preformatted text']='格式化文本';jsToolBar.strings['Wiki link']='连接到 Wiki 页面';jsToolBar.strings['Image']='图片';
+//]]></script>
+  
+  
+
+		<!-- page specific tags -->
+		  <script type="text/javascript">//<![CDATA[
+$(document).ready(function(){var branch_selected=$('#branch').length>0&&$('#rev').val()==$('#branch').val();var tag_selected=$('#tag').length>0&&$('#rev').val()==$('#tag').val();if(branch_selected||tag_selected){$('#rev').val('');}
+$('#branch,#tag').change(function(){$('#rev').val($(this).val());$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');});$('#rev').keydown(function(e){if(e.keyCode==13){$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');}});})
+//]]></script>
+
+	</head>
+	<!--add by huang-->
+	<body class="theme-Redpenny-master controller-repositories action-changes">
+		<div id="wrapper">
+			<div id="wrapper2">
+				<div id="wrapper3">					
+					<style type="text/css">#scrollsidebar{font-size:12px;font-family:"微软雅黑","宋体";line-height:1.9;background:#fff;font-style:normal}#scrollsidebar div,html,img,ul,li,p,body,h1,h2,h3,h4,p,a,table,tr,td,fieldset,input,span,ol{}#scrollsidebar div,img,tr,td,table{border:0}#scrollsidebar ol,ul,li{list-style-type:none}#scrollsidebar .cl{clear:both;overflow:hidden}#scrollsidebar a{text-decoration:none}html{overflow-x:hidden}.custom_service p img{display:inline;margin-top:-5px;vertical-align:middle}.scrollsidebar{position:absolute;z-index:999;top:150px}.side_content{width:154px;height:auto;overflow:hidden;float:left}.side_content .side_list{width:154px;overflow:hidden}.show_btn{width:0;height:112px;overflow:hidden;margin-top:50px;float:left;cursor:pointer}.show_btn span{display:none}.close_btn{width:24px;height:24px;cursor:pointer}.side_title,.side_bottom,.close_btn,.show_btn{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat}.side_title{height:46px}.side_bottom{height:8px}.side_center{font-family:Verdana,Geneva,sans-serif;padding:5px 12px;font-size:12px}.close_btn{float:right;display:block;width:21px;height:16px;margin:16px 10px 0 0;_margin:16px 5px 0 0}.close_btn span{display:none}.side_center .custom_service p{text-align:center;padding:6px 0;margin:0;vertical-align:middle}.msgserver{margin:10px 0 4px 4px}.msgserver a{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat -119px -115px;padding-left:22px}.opnionText{width:120px;height:180px;border-color:#cecece;-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;color:#999;padding:3px}a.opnionButton{display:block;font-weight:bold;margin:-25px auto 0;text-align:center}a:hover.opnionButton{text-decoration:underline}.side_title{background-position:-195px 0}.side_center{background:url(http://forge.trustie.net/images/xblue_line.png.pagespeed.ic.wO8Ooe9t0O.png) repeat-y center}.side_bottom{background-position:-195px -50px}.close_btn{background-position:-44px 0}.close_btn:hover{background-position:-66px 0}.show_btn{background-position:-119px 0}.msgserver a{color:#15bccf}.msgserver a:hover{text-decoration:underline}</style>
+<script>(function($){$.fn.fix=function(options){var defaults={float:'left',minStatue:false,skin:'blue',durationTime:1000}
+var options=$.extend(defaults,options);this.each(function(){var thisBox=$(this),closeBtn=thisBox.find('.close_btn'),show_btn=thisBox.find('.show_btn'),sideContent=thisBox.find('.side_content'),sideList=thisBox.find('.side_list');var defaultTop=thisBox.offset().top;thisBox.css(options.float,0);if(options.minStatue){$(".show_btn").css("float",options.float);sideContent.css('width',0);show_btn.css('width',25);}
+if(options.skin)thisBox.addClass('side_'+options.skin);$(window).bind("scroll",function(){var offsetTop=defaultTop+$(window).scrollTop()+"px";thisBox.animate({top:offsetTop},{duration:options.durationTime,queue:false});});closeBtn.bind("click",function(){sideContent.animate({width:'0px'},"fast");show_btn.stop(true,true).delay(300).animate({width:'25px'},"fast");});show_btn.click(function(){$(this).animate({width:'0px'},"fast");sideContent.stop(true,true).delay(200).animate({width:'154px'},"fast");});});};})(jQuery);$(function(){$("#button1").click(function(){myTips("您的意见已经反馈到公共贴吧的新手讨论吧，我们会第一时间解决您的问题，谢谢支持！","success");});})
+function f_submit()
+{$("#new_memo").submit();}</script>
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>意见反馈</title>
+
+</head>
+<body style="height:auto">
+<!-- ?ú?? ???? -->
+<div class="scrollsidebar" id="scrollsidebar">
+    <div class="side_content">
+        <div class="side_list">
+            <div class="side_title"><a title="意见反馈" class="close_btn"><span>意见反馈</span></a></div>
+            <div class="side_center">
+                <div class="custom_service">
+				  <form accept-charset="UTF-8" action="/forums/1/create_feedback" class="new_memo" id="new_memo" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
+         		    <textarea class="opnionText" cols="40" id="memo_subject" name="memo[subject]" placeholder="有什么想说的，尽管来咆哮吧~~" rows="20">
+</textarea>
+          			<input id="memo_content" name="memo[content]" required="required" type="hidden" value="该贴来自用户反馈！"/>
+          			<a href="javascript:void(0);" class="opnionButton" style=" color:#fd6e2a;" id="" onclick="f_submit();">提&nbsp;&nbsp;交</a>          			
+</form>                </div>                               
+                <div class="msgserver">
+                    <p>
+                   	<a href="http://user.trustie.net/users/12/user_newfeedback" style="color: #15BCCF;">技术支持：黄井泉</a></br>
+                    <a href="http://user.trustie.net/users/34/user_newfeedback" style="color: #15BCCF;">技术支持：白&nbsp;&nbsp;&nbsp;羽</a>
+                    </p>
+                </div>
+            </div>
+            <div class="side_bottom"></div>
+        </div>
+    </div>
+    <div class="show_btn"><span>提交</span></div>
+</div>
+<!-- ?ú?? ?á?? -->
+<script type="text/javascript">$(function(){$("#scrollsidebar").fix({float:'right',skin:'green',durationTime:600});});</script>
+
+<script>//<![CDATA[
+(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://forge.trustie.net/projects/3/repository/fisherweb/changes/index.html?rev=master','EWH6Fc22bt');
+//]]></script></body>
+</html>
+<div id="top-menu" style="background-color: #15bccf;height:40px;margin-top: 10px;margin-bottom: 10px;">
+	<div class="welcome_logo">
+		<a href="/projects/3/repository/fisherweb/changes"><img alt="Logo" height="36px" src="http://forge.trustie.net/images/Nx36xlogo.png,q1417140338.pagespeed.ic.hWN-x5nWc4.png" weight="36px" pagespeed_url_hash="2662075879"/></a>
+	</div>
+	<div id="account">
+		<ul><li><a href="/logout" class="logout" data-method="post" rel="nofollow">退出</a></li></ul>	</div>
+	<div id="loggedas">
+	<ul style="padding:0 0; margin:0 0;display:inline;">
+		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;" class="loggedas_li">
+			<a href="http://user.trustie.net/users/10/user_activities" class="user active">yuyuenudt</a>
+			<ul class="sub_menu">
+                          <li id="course_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+      <a href="/users/10/user_courses">我的课程</a>
+      <ul class="course_sub_menu">
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大牛软工核心知识开放课程" onmouseover="homeworkSlipMenuOver(40);" onmouseout="homeworkSlipMenuOut(40);">
+      <a href="/courses/40">大牛软工核心知识开放课程</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_40" style="top:0.0px;">
+      </ul>
+    </li>
+
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="研究生学术研究方法高级专题（凌晓峰主讲）" onmouseover="homeworkSlipMenuOver(76);" onmouseout="homeworkSlipMenuOut(76);">
+      <a href="/courses/76">研究生学术研究方法高级专题（凌晓峰主讲）</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_76" style="top:28.1px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT">
+              <a href="/calls/181/show_course" target="_blank">请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="课程建议">
+              <a href="/calls/367/show_course" target="_blank">课程建议</a>
+            </li>
+      </ul>
+    </li>
+
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大学计算机基础(C3)" onmouseover="homeworkSlipMenuOver(132);" onmouseout="homeworkSlipMenuOut(132);">
+      <a href="/courses/132">大学计算机基础(C3)</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_132" style="top:56.2px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业1（引言）">
+              <a href="/calls/297/show_course" target="_blank">作业1（引言）</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业2 XP系统使用">
+              <a href="/calls/344/show_course" target="_blank">作业2 XP系统使用</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业3：Word练习">
+              <a href="/calls/364/show_course" target="_blank">作业3：Word练习</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业4：PPT练习">
+              <a href="/calls/407/show_course" target="_blank">作业4：PPT练习</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业5：Excel练习">
+              <a href="/calls/430/show_course" target="_blank">作业5：Excel练习</a>
+            </li>
+      </ul>
+    </li>
+
+      </ul>
+    </li>
+
+                  <li id="project_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+      <a href="http://forge.trustie.net/users/10/user_projects">我的项目</a>
+      <ul class="project_sub_menu" style="top:35px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie-Forge">
+              <a href="http://forge.trustie.net/projects/2">Trustie-Forge</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="开源软件数据挖掘与分析">
+              <a href="http://forge.trustie.net/projects/3">开源软件数据挖掘与分析</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Influx开源搜索平台">
+              <a href="http://forge.trustie.net/projects/7">Influx开源搜索平台</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="企业员工MISS系统">
+              <a href="http://forge.trustie.net/projects/63">企业员工MISS系统</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Topcoder研讨空间">
+              <a href="http://forge.trustie.net/projects/83">Topcoder研讨空间</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie history">
+              <a href="http://forge.trustie.net/projects/108">Trustie history</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="王怀民教授每周研讨共享空间">
+              <a href="http://forge.trustie.net/projects/117">王怀民教授每周研讨共享空间</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="GetArchive">
+              <a href="http://forge.trustie.net/projects/129">GetArchive</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="群体化软件开发方法">
+              <a href="http://forge.trustie.net/projects/368">群体化软件开发方法</a>
+            </li>
+      </ul>
+    </li>
+
+              <li style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+                <a href="http://user.trustie.net/my/account">修改资料</a>
+              </li>
+			</ul>
+		</li>
+		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;">
+			<a href="http://user.trustie.net/users/10/user_newfeedback" class="my-message">留言(0)</a>
+		</li>
+	</ul>
+	</div>
+	<ul><li><a href="/">主页</a></li><li><a href="/forums">公共贴吧</a></li></ul></div>
+<div style="border-top:solid 1px #C6E9F1;width:940px;margin-left:auto;margin-right:auto;margin-bottom: 0px;margin-top: -10px;"></div>
+<div style="clear:left;"></div>
+
+<script type="text/javascript">function setMessageCount(){var mes=$('#loggedas .my-message');mes.html(mes.html()+'('+0+")");}
+function addSlipMenu(){var loggedas=$('#loggedas ul li:first');var sub_menu=$('.sub_menu');loggedas.mouseenter(function(event){sub_menu.show();});sub_menu.mouseleave(function(event){sub_menu.hide();});}
+function addProjectSlipMenu(){var loggedas=$('#project_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){course_sub_menu.hide();project_sub_menu.show();});project_sub_menu.mouseleave(function(event){project_sub_menu.hide();});}
+function addCourseSlipMenu(){var loggedas=$('#course_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){project_sub_menu.hide();course_sub_menu.show();});course_sub_menu.mouseleave(function(event){course_sub_menu.hide();});}
+function homeworkSlipMenuOver(id)
+{$('.project_sub_menu').hide();$('#course_loggedas_li').show();$("#homework_loggedas_ul_"+id).show();}
+function homeworkSlipMenuOut(id)
+{$("#homework_loggedas_ul_"+id).hide();}
+$(document).ready(function(){addSlipMenu();addProjectSlipMenu();addCourseSlipMenu();});jQuery(document).ready(function($){$('.sub_menu').find("a").attr('target','_blank');$('.project_sub_menu').find("a").attr('target','_blank');$('.course_sub_menu').find("a").attr('target','_blank');});</script>
+
+					<div id="main">
+						<div class="top-content">							
+							<table>
+								<tr>
+									<td class="info_font" style="width: 240px;" rowspan="2">
+                                      <a href="http://forge.trustie.net" style="color: #15bccf;">
+                                        软件项目托管社区
+                                      </a>
+									</td>
+									<td style="width: 430px; color: #15bccf">
+                                      <strong>当前位置 : </strong>
+                                    </td>
+									<td rowspan="2" width="250px">
+										<div class="top-content-search">
+                                            <script type="text/javascript">function regexName()
+{var name=$.trim($("#name").val());if(name.length==0)
+{$("#project_name_span").text("搜索条件不能为空");$("#project_name_span").css('color','#ff0000');$("#project_name_span").focus();return false;}
+else
+{$("#project_name_span").text("");return true;}}
+function submitSerch()
+{if(regexName()){$("#project_search_form").submit();}}</script>
+											<form accept-charset="UTF-8" action="/projects/search" id="project_search_form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
+                                                <input id="name" name="name" onkeyup="regexName();" size="20" style="float:left" type="text"/>
+                                                <input id="project_type" name="project_type" type="hidden"/>
+                                                <a href="#" onclick="submitSerch();" class="ButtonColor m3p10" style="float:left;padding-top: 3px; margin: 0px;padding-bottom:0px;">
+                                                    搜索
+                                                </a>
+                                                <br/>
+                                                <span id="project_name_span" style="float: left"></span>
+</form>										</div>
+									</td>
+								</tr>
+								<tr>
+									<td>
+                                      <p class="top-content-list">
+                                        <a href="/">主页</a> >
+                                        <a href="/projects/3">开源软件数据挖掘与分析</a>
+                                      </p>
+                                    </td>
+								</tr>
+							</table>							
+						</div>
+						<div id="sidebar">
+							<div class="spaceleft">
+								<div class="inf_user_image">
+									<table>
+										<tr>
+											<td>
+                                              <img alt="0?1417140979" class="avatar2" src="/images/avatars/Project/0?1417140979" pagespeed_url_hash="3661586667"/>
+                                            </td>
+											<td>
+												<div class="info-course">
+													<a href="/projects/3">开源软件数据挖掘与分析</a>
+												</div>
+												<div>
+													
+														项目得分 : 
+														<a href="/users/3/show_projects_score" data-remote="true" style="color: #EC6300;">116</a>
+												<!-- end -->
+												</div>
+                                              <div id="join_exit_project_div">
+                                                <div style="margin-left: 20px;">
+
+  </div>
+<!--添加项目申请-->
+<div style="margin-left: 20px;">
+</div>
+
+<!--添加退出项目-->
+<div style="margin-left: 20px;">
+</div>
+                                              </div>
+											</td>
+										</tr>
+									</table>												
+								</div>
+
+								<div class="user_fans">
+									<table width="240" border="0">
+										<tr align="center" width="80px">
+											<td class="font_index">
+                                              <a href="/projects/3/member">10</a>
+                                            </td>
+											<td class="font_index">
+                                              <a href="/projects/3/watcherlist">5</a>
+                                            </td>
+											<td class="font_index">
+                                              <a href="/projects/3/issues">15</a>
+                                            </td>
+										</tr>
+										<tr class="font_aram">
+											<td align="center" width="70px">
+                                              成员
+                                            </td>
+											<td align="center" width="100px">
+                                              关注
+                                            </td>
+											<td align="center" width="70px">
+                                              缺陷
+                                            </td>
+											<!-- <td align="center" width="58px"></td> -->
+										</tr>
+									</table>
+									<div class="user_underline"></div>
+								</div>
+								<div class="inf_user_context">
+									<div class="font_title_left">
+										概述
+									</div>
+									<div style="padding-bottom: 8px">
+										<div class="font_lighter_sidebar" style="word-break:break-all;word-wrap: break-word;">
+											<p>该项目旨在通过对开源软件开发、发布、部署、运行过程中产生的包括源代码、缺陷跟踪、版本控制、软件标签、用户评论等等数据进行挖掘和分析，研究分析软件开发规律，构建软件开发辅助工具，从而提高软件开发效率和质量</p>
+										</div>
+										<div class="created_on_project">
+                                          <strong style="color: #15bccf">
+                                            创建时间：
+                                          </strong>
+                                          2013-06-29 10:46
+										</div>
+									</div>
+									<div class="user_underline"></div>
+								</div>
+								<!--tags-->
+								<div class="user_fans">
+									<!-- added by william -for tag -->
+									<div class="user_tags">
+										<div id="tags">
+											<div id="tags">
+	<!--  3 代表的是issue 当是issue是 处理方式与前2个对象不同 -->
+		<span>
+          <img alt="Tags" src="http://forge.trustie.net/images/sidebar/xtags.png,q1402999474.pagespeed.ic.-eupVVpnO1.png" pagespeed_url_hash="3837732743"/>
+        </span>
+		<span class="font_title_tag">
+          标签:
+        </span>
+		<span>
+          <a href="#" onclick="$(&#x27;#put-tag-form&#x27;).slideToggle(); $(&#x27;#tags_name&#x27;).focus(); return false;"><img alt="Add" src="http://forge.trustie.net/images/sidebar/xadd.png,q1402999474.pagespeed.ic.6ecwRHMYvR.png" pagespeed_url_hash="2246518169"/></a>
+        </span>
+		<div id="tags_show">
+			<script type="text/javascript"></script>
+<!-- 1代表是user类型   2代表是project类型  3代表是issue类型   4代表需求 7代表竞赛 9代表课程-->
+    <!-- 用来显示三大对象的主页中的tag  故是全部显示  -->
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98">数据挖掘</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C">社交网络</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=SNS">SNS</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=MSR">MSR</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90">文本分析</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+
+		</div>
+		<div id="put-tag-form" style="display: none">
+			<form accept-charset="UTF-8" action="/users/tag_save" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
+			<input id="tags_name" maxlength="14" minlength="1" name="tag_for_save[name]" require="true" size="28" type="text"/>
+			<input id="tag_for_save_object_id" name="tag_for_save[object_id]" size="30" style="display:none" type="text" value="3"/>
+			<input id="tag_for_save_object_flag" name="tag_for_save[object_flag]" size="30" style="display:none" type="text" value="2"/>
+             <!---->
+            <a href="#" onclick='$("#tags_name").parent().submit();' class="ButtonColor m3p10" style="padding: 3px 6px">
+              增加
+            </a>
+            <a class="ButtonColor m3p10" href="#" onclick="$(&quot;#put-tag-form&quot;).slideUp();; return false;" style="padding:3px 6px">取消</a>
+</form>		</div>
+</div>
+
+										</div>
+									</div>
+								</div>
+								<!--tool-->
+								<div class="user_underline"></div>
+								<div class="tool">
+									<div class="font_title_left">
+  项目工具集
+</div>
+
+<div class="tools ">
+  <ul><h3>项目交流</h3>
+    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/feedback">用户反馈</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/files">作品下载</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/wiki">Wiki</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/code_review/index">代码审查</a></li>
+  </ul>
+  <ul><h3>进度跟踪</h3>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/calendar">日历</a></li>
+
+    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/roadmap">里程碑</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/gantt">甘特图</a></li>
+
+  </ul>
+  <ul><h3>其他工具</h3>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/project/3/share">DTS测试工具</a></li>
+      <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/documents">文档</a></li>
+    <li></li>
+  </ul>
+
+</div>
+
+								</div>
+								<div class="user_underline"></div>
+							</div>
+						</div>
+						<div id="content">
+							<div class="tabs_new">
+                              <ul><li><a href="/projects/3" class="overview">近期动态</a></li>
+<li><a href="/projects/3/issues" class="issues">缺陷</a></li>
+<li><a href="/projects/3/news" class="news">新闻</a></li>
+<li><a href="/projects/3/boards" class="boards">讨论区</a></li>
+<li><a href="/projects/3/repository" class="repository selected">版本库</a></li>
+
+<li><a href="/projects/3/settings" class="settings">配置</a></li></ul>
+							</div>
+							
+							
+
+<div class="contextual">
+  
+<a href="/projects/3/repository/fisherweb/statistics" class="icon icon-stats">统计</a>
+
+<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/changes/index.html" id="revision_selector" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>  <!-- Branches Dropdown -->
+    | 分支: 
+    <select id="branch" name="branch"><option value=""></option>
+<option value="master" selected="selected">master</option></select>
+
+
+    | 修订: 
+    <input id="rev" name="rev" size="8" type="text" value="master"/>
+</form>
+</div>
+
+<h3><a href="/projects/3/repository/fisherweb/revisions/master/show">fisherweb</a>
+    / <a href="/projects/3/repository/fisherweb/changes/index.html?rev=master">index.html</a>
+@ master
+
+</h3>
+
+
+<p>
+历史记录 |
+    <a href="/projects/3/repository/fisherweb/revisions/master/entry/index.html">查看</a> |
+    <a href="/projects/3/repository/fisherweb/revisions/master/annotate/index.html">追溯</a> |
+<a href="/projects/3/repository/fisherweb/revisions/master/raw/index.html">下载</a>
+(10.086 KB)
+</p>
+
+
+
+
+
+
+<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/diff/index.html" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
+<table class="list changesets">
+<thead><tr>
+<th>#</th>
+<th></th>
+<th></th>
+<th>日期</th>
+<th>作者</th>
+<th>注释</th>
+</tr></thead>
+<tbody>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/d21f4f5d240465c6fdd40ba38cc2d31c9e0ee80a" title="修订 d21f4f5d">d21f4f5d</a>
+</td><td class="checkbox"><input checked="checked" id="cb-1" name="rev" onclick="$(&#x27;#cbto-2&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="d21f4f5d240465c6fdd40ba38cc2d31c9e0ee80a"/></td>
+<td class="checkbox"></td>
+<td class="committed_on">2014-10-06 04:25</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>1</p></td>
+</tr>
+<tr class="changeset even">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/43d1dc6fd1bdf13df254717609ab905bd72f2a40" title="修订 43d1dc6f">43d1dc6f</a>
+</td><td class="checkbox"><input id="cb-2" name="rev" onclick="$(&#x27;#cbto-3&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="43d1dc6fd1bdf13df254717609ab905bd72f2a40"/></td>
+<td class="checkbox"><input checked="checked" id="cbto-2" name="rev_to" onclick="if ($(&#x27;#cb-2&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-1&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="43d1dc6fd1bdf13df254717609ab905bd72f2a40"/></td>
+<td class="committed_on">2014-08-03 13:14</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>icsme paper</p>
+
+
+	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
+</tr>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/a58eddc01de467eae345b69946b94713a62e7c8c" title="修订 a58eddc0">a58eddc0</a>
+</td><td class="checkbox"><input id="cb-3" name="rev" onclick="$(&#x27;#cbto-4&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="a58eddc01de467eae345b69946b94713a62e7c8c"/></td>
+<td class="checkbox"><input id="cbto-3" name="rev_to" onclick="if ($(&#x27;#cb-3&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-2&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="a58eddc01de467eae345b69946b94713a62e7c8c"/></td>
+<td class="committed_on">2014-06-10 21:05</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>recommender href</p>
+
+
+	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
+</tr>
+<tr class="changeset even">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/220cc52059007b13e1b14119125ec75c1fe1589a" title="修订 220cc520">220cc520</a>
+</td><td class="checkbox"><input id="cb-4" name="rev" onclick="$(&#x27;#cbto-5&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="220cc52059007b13e1b14119125ec75c1fe1589a"/></td>
+<td class="checkbox"><input id="cbto-4" name="rev_to" onclick="if ($(&#x27;#cb-4&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-3&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="220cc52059007b13e1b14119125ec75c1fe1589a"/></td>
+<td class="committed_on">2014-02-22 01:38</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>msr14</p>
+
+
+	<p>Signed-off-by: YuYue &lt;<a class="email" href="mailto:yyuu51888@163.com">yyuu51888@163.com</a>&gt;</p></td>
+</tr>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/cfb36235774dadfa5f59b948d6fd6f112c17a8c5" title="修订 cfb36235">cfb36235</a>
+</td><td class="checkbox"><input id="cb-5" name="rev" onclick="$(&#x27;#cbto-6&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="cfb36235774dadfa5f59b948d6fd6f112c17a8c5"/></td>
+<td class="checkbox"><input id="cbto-5" name="rev_to" onclick="if ($(&#x27;#cb-5&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-4&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="cfb36235774dadfa5f59b948d6fd6f112c17a8c5"/></td>
+<td class="committed_on">2014-02-22 00:06</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>modify "ci yun"</p>
+
+
+	<p>Signed-off-by: fisheryue &lt;<a class="email" href="mailto:networksec2013@163.com">networksec2013@163.com</a>&gt;</p></td>
+</tr>
+<tr class="changeset even">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/3a0efc5279a1f234d7356ddbf20fd040494ea9c7" title="修订 3a0efc52">3a0efc52</a>
+</td><td class="checkbox"><input id="cb-6" name="rev" onclick="$(&#x27;#cbto-7&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="3a0efc5279a1f234d7356ddbf20fd040494ea9c7"/></td>
+<td class="checkbox"><input id="cbto-6" name="rev_to" onclick="if ($(&#x27;#cb-6&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-5&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="3a0efc5279a1f234d7356ddbf20fd040494ea9c7"/></td>
+<td class="committed_on">2014-01-15 20:37</td>
+<td class="author">xianbo</td>
+<td class="comments"><p>delete single caculate in browser</p></td>
+</tr>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/b3a96703480243e59b7200860e9b6eb94b47cdd7" title="修订 b3a96703">b3a96703</a>
+</td><td class="checkbox"><input id="cb-7" name="rev" onclick="$(&#x27;#cbto-8&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="b3a96703480243e59b7200860e9b6eb94b47cdd7"/></td>
+<td class="checkbox"><input id="cbto-7" name="rev_to" onclick="if ($(&#x27;#cb-7&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-6&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="b3a96703480243e59b7200860e9b6eb94b47cdd7"/></td>
+<td class="committed_on">2014-01-12 17:32</td>
+<td class="author">xianbo</td>
+<td class="comments"><p>add cnzz amd google anylysis to caculate the web about visitors'<br/>informations</p></td>
+</tr>
+<tr class="changeset even">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/5f07d7af4209a19687ccb0e13145f31b2559f4b6" title="修订 5f07d7af">5f07d7af</a>
+</td><td class="checkbox"><input id="cb-8" name="rev" onclick="$(&#x27;#cbto-9&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="5f07d7af4209a19687ccb0e13145f31b2559f4b6"/></td>
+<td class="checkbox"><input id="cbto-8" name="rev_to" onclick="if ($(&#x27;#cb-8&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-7&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="5f07d7af4209a19687ccb0e13145f31b2559f4b6"/></td>
+<td class="committed_on">2014-01-10 23:24</td>
+<td class="author">xianbo</td>
+<td class="comments"><p>add caculate visitors</p></td>
+</tr>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/bc99b26b845ceebe8242616446b9771e176f5723" title="修订 bc99b26b">bc99b26b</a>
+</td><td class="checkbox"><input id="cb-9" name="rev" onclick="$(&#x27;#cbto-10&#x27;).attr(&#x27;checked&#x27;,true);" type="radio" value="bc99b26b845ceebe8242616446b9771e176f5723"/></td>
+<td class="checkbox"><input id="cbto-9" name="rev_to" onclick="if ($(&#x27;#cb-9&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-8&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="bc99b26b845ceebe8242616446b9771e176f5723"/></td>
+<td class="committed_on">2013-12-18 23:03</td>
+<td class="author">yuyuenudt</td>
+<td class="comments"><p>change B.S to B.E</p>
+
+
+	<p>Signed-off-by: YuYue &lt;<a class="email" href="mailto:yyuu51888@163.com">yyuu51888@163.com</a>&gt;</p></td>
+</tr>
+<tr class="changeset even">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/512be42c7d466a58c4abb567427cf495eb43fae8" title="修订 512be42c">512be42c</a>
+</td><td class="checkbox"></td>
+<td class="checkbox"><input id="cbto-10" name="rev_to" onclick="if ($(&#x27;#cb-10&#x27;).attr(&#x27;checked&#x27;)) {$(&#x27;#cb-9&#x27;).attr(&#x27;checked&#x27;,true);}" type="radio" value="512be42c7d466a58c4abb567427cf495eb43fae8"/></td>
+<td class="committed_on">2013-12-18 08:14</td>
+<td class="author">senluo</td>
+<td class="comments"><p>2013-12-18</p></td>
+</tr>
+</tbody>
+</table>
+<input type="submit" value="查看差别"/>
+</form>
+
+
+
+							
+							<div style="clear:both;"></div>
+						</div>
+						<!--add by huang-->
+<div class="clearfix"></div>
+<div id="footer" style="margin-left:-5px;padding-top: 20px;clear: both;font-size: 12px;">
+	<div style="border-top:solid 1px #C6E9F1;"></div>
+ <div class="base_footer">
+  <div align="center">
+
+   <!--gcm-->
+   <p>
+      <p>
+    <span>主办单位</span>
+    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=47">国防科学技术大学并行与分布处理国家重点实验室</a></span>
+    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=41">计算机科学与技术系</a></span>
+    <span id="copyright">版权&copy;2007~2014</span>
+    <span class="footer_text_link" id="contact_us"><a target="_blank" href="http://forge.trustie.net/projects/2/member">联系我们</a></span>
+    <span class="footer_text_link" id="record"><a target="_blank" href="http://www.miibeian.gov.cn/">湘ICP备09019772</a></span>
+
+  </p>
+  </p>
+  <div id="logo_link">
+            <span class="footer_logo_link"><a href="http://www.nudt.edu.cn/special.asp?classid=12" target="_blank"><img alt="国防科学技术大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/1?1417140979" width="100" pagespeed_url_hash="2235555691"/></a></span>
+            <span class="footer_logo_link"><a href="http://eecs.pku.edu.cn" target="_blank"><img alt="北京大学信息科学技术学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/2?1417140979" width="100" pagespeed_url_hash="604533990"/></a></span>
+            <span class="footer_logo_link"><a href="http://scse.buaa.edu.cn" target="_blank"><img alt="北京航空航天大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/3?1417140979" width="100" pagespeed_url_hash="3268479585"/></a></span>
+            <span class="footer_logo_link"><a href="http://www.iscas.ac.cn" target="_blank"><img alt="中国科学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/4?1417140979" width="100" pagespeed_url_hash="1637457884"/></a></span>
+            <span class="footer_logo_link"><a href="http://www.inforbus.com" target="_blank"><img alt="山东中创软件商用中间件股份有限公司" height="30" src="/images/avatars/WebFooterCompany/5?1417140979" width="100" pagespeed_url_hash="6436183"/></a></span>
+ </div>
+ <!--gcm-->
+
+</div>
+</div>
+</div>
+<div class="debug">
+  
+  <div class="hidden">
+    <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-46523987-1','trustie.net');ga('send','pageview');</script>
+  </div>
+</div>
+
+
+					</div>
+
+					<div id="ajax-indicator" style="display:none;">
+						<span>载入中...</span>
+					</div>
+					<div id="ajax-modal" style="display:none;"></div>
+				</div>
+			</div>
+			
+
+
+
+
+		</div>
+	</body>
+</html>
+
diff --git a/index2.html b/index2.html
new file mode 100644
index 0000000..e1694f0
--- /dev/null
+++ b/index2.html
@@ -0,0 +1,171 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<!-- saved from url=http://forge.trustie.net/Fisher/ -->
+<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
+<TITLE>Yue Yu's Website</TITLE>
+<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<STYLE type=text/css>
+H1 {
+	MARGIN-BOTTOM: 0px
+}
+H2 {
+	COLOR: #004400
+}
+UL.pubs LI {
+	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
+}
+body {
+	background-color: #FFFFFF;
+}
+.STYLE1 {color: #3399FF}
+.STYLE4 {
+	color: #004400;
+	font-weight: bold;
+}
+.STYLE5 {color: #004400}
+</STYLE>
+
+<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
+<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
+link=#003300>
+<span class="STYLE1"></span>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD vAlign=middle align=left>
+      <H1>Yue Yu (余跃) </H1></TD>
+    <TD rowSpan=3 width=200 align=right><IMG 
+      src="res/Yy.jpg" width=160 height="153"></TD>
+  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
+  <TR>
+    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
+	<P>
+	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
+	</P>
+      </TD></TR></TBODY></TABLE>
+<HR align=center color=#006600 width=800 noShade>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+      <H2 class="STYLE4">Contact Information</H2>
+      <UL style="LIST-STYLE-TYPE: none"><LI>
+        <p>National  Laboratory for Parallel and Distributed Processing<br>
+          Computer  School, National University of Defense Technology<br>
+          Changsha,  Hunan Province, 410073, P.R.C<br>
+		   Phone: (86)13627319266<br>
+		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
+        </p>
+		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
+        <LI>
+        </UL>
+		 <hr size="2" color="black" align="center">
+      <H2>Education</H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
+			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
+			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
+			2007.9--2011.6 B.E. in Information Security<br>
+		</LI>
+		&nbsp;
+		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
+			2009.03-2010.06 Minor in Journalism and Communication.<br>
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE5">Research Experience </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>
+		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
+	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
+        <LI> National Science Foundation of China (Grant No.60903043)</LI>
+		<br>
+		<LI>
+		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
+		<LI>
+		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
+		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE4">Awards and Honors </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
+        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
+        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
+        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
+        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
+        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
+        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
+        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
+      </UL>
+	  <hr size="2" color="black" align="center">
+	  </TD></TR></TBODY></TABLE>
+	  
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+     <H2 class="STYLE5">Publications</H2>
+     
+	 <H3>2014</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
+		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
+		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		[<A href="res/paper/apsec2014.pdf">pdf</A>]
+		
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
+		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
+		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
+		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
+        
+      </UL> 	  
+	  
+      <H3>2013</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>
+		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
+		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
+		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
+        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
+		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
+		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
+		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
+		</UL>
+		
+	  <H3>2011</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
+		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
+		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
+		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
+		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
+		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
+		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
+      </UL>
+	  
+	  <H3>2010</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
+		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
+		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
+      </UL>
+		
+      </TD></TR></TBODY></TABLE>
+</BODY></HTML>
diff --git a/js/Caculate_VisitNumber.htm b/js/Caculate_VisitNumber.htm
new file mode 100644
index 0000000..61e0873
--- /dev/null
+++ b/js/Caculate_VisitNumber.htm
@@ -0,0 +1,573 @@
+
+<!DOCTYPE html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8"/>
+		<title>/js/Caculate_VisitNumber.js - 变更 - 开源软件数据挖掘与分析 - Trustie - 为大学生技术创新筑巢</title>
+		<meta name="description" content="Trustie"/>
+		<meta name="keywords" content="issue,bug,tracker"/>
+		<meta content="authenticity_token" name="csrf-param"/>
+<meta content="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U=" name="csrf-token"/>
+		<link rel='shortcut icon' href='http://forge.trustie.net/xfavicon.ico,q1402999474.pagespeed.ic.2wHlF4xYtA.png'/>
+		<link href="http://forge.trustie.net/stylesheets/jquery/A.jquery-ui-1.9.2.css,q1402999473.pagespeed.cf.97FmkTrJ-T.css" media="all" rel="stylesheet" type="text/css"/>
+<link href="http://forge.trustie.net/A.themes,,_redpenny-master,,_stylesheets,,_application.css,,q1421513702+stylesheets,,_nyan.css,,q1422005967,Mcc.Fo_9k7hi1W.css.pagespeed.cf.J10VbT8hwJ.css" media="all" rel="stylesheet" type="text/css"/>
+
+		
+		<script src="http://forge.trustie.net/javascripts/jquery-1.8.3-ui-1.9.2-ujs-2.0.3.js,q1416964772.pagespeed.jm.QKDsE6035i.js" type="text/javascript"></script>
+<script src="http://forge.trustie.net/javascripts/application.js,q1408787969.pagespeed.jm.vNffLRbOnZ.js" type="text/javascript"></script>
+<script src="http://forge.trustie.net/javascripts/jquery.colorbox-min.js,q1416964772.pagespeed.jm.Sn8ig1XkLd.js" type="text/javascript"></script>
+<script type="text/javascript">//<![CDATA[
+$(window).load(function(){warnLeavingUnsaved('若离开当前页面，则该页面内未保存的内容将丢失。');});
+//]]></script>
+		
+		<script src="http://forge.trustie.net/javascripts/hubspot/messenger.min.js,q1402999472.pagespeed.jm.JvIIVrDbxS.js" type="text/javascript"></script>
+<script type="text/javascript">//<![CDATA[
+(function(){var $,FutureMessage,spinner_template,__hasProp={}.hasOwnProperty,__extends=function(child,parent){for(var key in parent){if(__hasProp.call(parent,key))child[key]=parent[key];}function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();child.__super__=parent.prototype;return child;};$=jQuery;spinner_template='<div class="messenger-spinner">\n    <span class="messenger-spinner-side messenger-spinner-side-left">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n    <span class="messenger-spinner-side messenger-spinner-side-right">\n        <span class="messenger-spinner-fill"></span>\n    </span>\n</div>';FutureMessage=(function(_super){__extends(FutureMessage,_super);function FutureMessage(){return FutureMessage.__super__.constructor.apply(this,arguments);}
+FutureMessage.prototype.template=function(opts){var $message;$message=FutureMessage.__super__.template.apply(this,arguments);$message.append($(spinner_template));return $message;};return FutureMessage;})(window.Messenger.Message);window.Messenger.themes.future={Message:FutureMessage};}).call(this);
+//]]></script><link href="http://forge.trustie.net/A.stylesheets,,_hubspot,,_messenger.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-future.css,,q1402999473+stylesheets,,_hubspot,,_messenger-theme-flat.css,,q1402999473+plugin_assets,,_redmine_code_review,,_stylesheets,,_code_review.css,,q1404306138+stylesheets,,_jstoolbar.css,,q1420898142+stylesheets,,_scm.css,,q1420898142,Mcc.rDvSH_MBW5.css.pagespeed.cf.s3vzCFDPiK.css" media="screen" rel="stylesheet" type="text/css"/>
+
+
+		  <script src="http://forge.trustie.net/plugin_assets/redmine_code_review/javascripts/code_review.js,q1404306138.pagespeed.jm.YjLLojRa_h.js" type="text/javascript"></script>
+  <script src="http://forge.trustie.net/javascripts/jstoolbar/jstoolbar.js,q1402999472.pagespeed.jm.ZLhUmB8F8z.js" type="text/javascript"></script>
+  <script src="http://forge.trustie.net/javascripts/jstoolbar/textile.js,q1402999472.pagespeed.jm.rZDbwDsRrk.js" type="text/javascript"></script>
+  <script type="text/javascript">//<![CDATA[
+jsToolBar.strings={};jsToolBar.strings['Strong']='粗体';jsToolBar.strings['Italic']='斜体';jsToolBar.strings['Underline']='下划线';jsToolBar.strings['Deleted']='删除线';jsToolBar.strings['Code']='程序代码';jsToolBar.strings['Heading 1']='标题 1';jsToolBar.strings['Heading 2']='标题 2';jsToolBar.strings['Heading 3']='标题 3';jsToolBar.strings['Unordered list']='无序列表';jsToolBar.strings['Ordered list']='排序列表';jsToolBar.strings['Quote']='引用';jsToolBar.strings['Unquote']='删除引用';jsToolBar.strings['Preformatted text']='格式化文本';jsToolBar.strings['Wiki link']='连接到 Wiki 页面';jsToolBar.strings['Image']='图片';
+//]]></script>
+  
+  
+
+		<!-- page specific tags -->
+		  <script type="text/javascript">//<![CDATA[
+$(document).ready(function(){var branch_selected=$('#branch').length>0&&$('#rev').val()==$('#branch').val();var tag_selected=$('#tag').length>0&&$('#rev').val()==$('#tag').val();if(branch_selected||tag_selected){$('#rev').val('');}
+$('#branch,#tag').change(function(){$('#rev').val($(this).val());$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');});$('#rev').keydown(function(e){if(e.keyCode==13){$('#branch,#tag').attr('disabled',true);$(this).parent().submit();$('#branch,#tag').removeAttr('disabled');}});})
+//]]></script>
+
+	</head>
+	<!--add by huang-->
+	<body class="theme-Redpenny-master controller-repositories action-changes">
+		<div id="wrapper">
+			<div id="wrapper2">
+				<div id="wrapper3">					
+					<style type="text/css">#scrollsidebar{font-size:12px;font-family:"微软雅黑","宋体";line-height:1.9;background:#fff;font-style:normal}#scrollsidebar div,html,img,ul,li,p,body,h1,h2,h3,h4,p,a,table,tr,td,fieldset,input,span,ol{}#scrollsidebar div,img,tr,td,table{border:0}#scrollsidebar ol,ul,li{list-style-type:none}#scrollsidebar .cl{clear:both;overflow:hidden}#scrollsidebar a{text-decoration:none}html{overflow-x:hidden}.custom_service p img{display:inline;margin-top:-5px;vertical-align:middle}.scrollsidebar{position:absolute;z-index:999;top:150px}.side_content{width:154px;height:auto;overflow:hidden;float:left}.side_content .side_list{width:154px;overflow:hidden}.show_btn{width:0;height:112px;overflow:hidden;margin-top:50px;float:left;cursor:pointer}.show_btn span{display:none}.close_btn{width:24px;height:24px;cursor:pointer}.side_title,.side_bottom,.close_btn,.show_btn{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat}.side_title{height:46px}.side_bottom{height:8px}.side_center{font-family:Verdana,Geneva,sans-serif;padding:5px 12px;font-size:12px}.close_btn{float:right;display:block;width:21px;height:16px;margin:16px 10px 0 0;_margin:16px 5px 0 0}.close_btn span{display:none}.side_center .custom_service p{text-align:center;padding:6px 0;margin:0;vertical-align:middle}.msgserver{margin:10px 0 4px 4px}.msgserver a{background:url(http://forge.trustie.net/images/xsidebar_bg.png.pagespeed.ic.QgYqwy14bv.png) no-repeat -119px -115px;padding-left:22px}.opnionText{width:120px;height:180px;border-color:#cecece;-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;color:#999;padding:3px}a.opnionButton{display:block;font-weight:bold;margin:-25px auto 0;text-align:center}a:hover.opnionButton{text-decoration:underline}.side_title{background-position:-195px 0}.side_center{background:url(http://forge.trustie.net/images/xblue_line.png.pagespeed.ic.wO8Ooe9t0O.png) repeat-y center}.side_bottom{background-position:-195px -50px}.close_btn{background-position:-44px 0}.close_btn:hover{background-position:-66px 0}.show_btn{background-position:-119px 0}.msgserver a{color:#15bccf}.msgserver a:hover{text-decoration:underline}</style>
+<script>(function($){$.fn.fix=function(options){var defaults={float:'left',minStatue:false,skin:'blue',durationTime:1000}
+var options=$.extend(defaults,options);this.each(function(){var thisBox=$(this),closeBtn=thisBox.find('.close_btn'),show_btn=thisBox.find('.show_btn'),sideContent=thisBox.find('.side_content'),sideList=thisBox.find('.side_list');var defaultTop=thisBox.offset().top;thisBox.css(options.float,0);if(options.minStatue){$(".show_btn").css("float",options.float);sideContent.css('width',0);show_btn.css('width',25);}
+if(options.skin)thisBox.addClass('side_'+options.skin);$(window).bind("scroll",function(){var offsetTop=defaultTop+$(window).scrollTop()+"px";thisBox.animate({top:offsetTop},{duration:options.durationTime,queue:false});});closeBtn.bind("click",function(){sideContent.animate({width:'0px'},"fast");show_btn.stop(true,true).delay(300).animate({width:'25px'},"fast");});show_btn.click(function(){$(this).animate({width:'0px'},"fast");sideContent.stop(true,true).delay(200).animate({width:'154px'},"fast");});});};})(jQuery);$(function(){$("#button1").click(function(){myTips("您的意见已经反馈到公共贴吧的新手讨论吧，我们会第一时间解决您的问题，谢谢支持！","success");});})
+function f_submit()
+{$("#new_memo").submit();}</script>
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>意见反馈</title>
+
+</head>
+<body style="height:auto">
+<!-- ?ú?? ???? -->
+<div class="scrollsidebar" id="scrollsidebar">
+    <div class="side_content">
+        <div class="side_list">
+            <div class="side_title"><a title="意见反馈" class="close_btn"><span>意见反馈</span></a></div>
+            <div class="side_center">
+                <div class="custom_service">
+				  <form accept-charset="UTF-8" action="/forums/1/create_feedback" class="new_memo" id="new_memo" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
+         		    <textarea class="opnionText" cols="40" id="memo_subject" name="memo[subject]" placeholder="有什么想说的，尽管来咆哮吧~~" rows="20">
+</textarea>
+          			<input id="memo_content" name="memo[content]" required="required" type="hidden" value="该贴来自用户反馈！"/>
+          			<a href="javascript:void(0);" class="opnionButton" style=" color:#fd6e2a;" id="" onclick="f_submit();">提&nbsp;&nbsp;交</a>          			
+</form>                </div>                               
+                <div class="msgserver">
+                    <p>
+                   	<a href="http://user.trustie.net/users/12/user_newfeedback" style="color: #15BCCF;">技术支持：黄井泉</a></br>
+                    <a href="http://user.trustie.net/users/34/user_newfeedback" style="color: #15BCCF;">技术支持：白&nbsp;&nbsp;&nbsp;羽</a>
+                    </p>
+                </div>
+            </div>
+            <div class="side_bottom"></div>
+        </div>
+    </div>
+    <div class="show_btn"><span>提交</span></div>
+</div>
+<!-- ?ú?? ?á?? -->
+<script type="text/javascript">$(function(){$("#scrollsidebar").fix({float:'right',skin:'green',durationTime:600});});</script>
+
+<script>//<![CDATA[
+(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://forge.trustie.net/projects/3/repository/fisherweb/changes/js/Caculate_VisitNumber.js?rev=master','EWH6Fc22bt');
+//]]></script></body>
+</html>
+<div id="top-menu" style="background-color: #15bccf;height:40px;margin-top: 10px;margin-bottom: 10px;">
+	<div class="welcome_logo">
+		<a href="/projects/3/repository/fisherweb/changes"><img alt="Logo" height="36px" src="http://forge.trustie.net/images/Nx36xlogo.png,q1417140338.pagespeed.ic.hWN-x5nWc4.png" weight="36px" pagespeed_url_hash="2662075879"/></a>
+	</div>
+	<div id="account">
+		<ul><li><a href="/logout" class="logout" data-method="post" rel="nofollow">退出</a></li></ul>	</div>
+	<div id="loggedas">
+	<ul style="padding:0 0; margin:0 0;display:inline;">
+		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;" class="loggedas_li">
+			<a href="http://user.trustie.net/users/10/user_activities" class="user active">yuyuenudt</a>
+			<ul class="sub_menu">
+                          <li id="course_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+      <a href="/users/10/user_courses">我的课程</a>
+      <ul class="course_sub_menu">
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大牛软工核心知识开放课程" onmouseover="homeworkSlipMenuOver(40);" onmouseout="homeworkSlipMenuOut(40);">
+      <a href="/courses/40">大牛软工核心知识开放课程</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_40" style="top:0.0px;">
+      </ul>
+    </li>
+
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="研究生学术研究方法高级专题（凌晓峰主讲）" onmouseover="homeworkSlipMenuOver(76);" onmouseout="homeworkSlipMenuOut(76);">
+      <a href="/courses/76">研究生学术研究方法高级专题（凌晓峰主讲）</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_76" style="top:28.1px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT">
+              <a href="/calls/181/show_course" target="_blank">请同学们尽快提交在课堂上需要凌教授讲评的论文和简介PPT</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="课程建议">
+              <a href="/calls/367/show_course" target="_blank">课程建议</a>
+            </li>
+      </ul>
+    </li>
+
+                    <li id="homework_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;" title="大学计算机基础(C3)" onmouseover="homeworkSlipMenuOver(132);" onmouseout="homeworkSlipMenuOut(132);">
+      <a href="/courses/132">大学计算机基础(C3)</a>
+      <ul class="homework_sub_menu" id="homework_loggedas_ul_132" style="top:56.2px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业1（引言）">
+              <a href="/calls/297/show_course" target="_blank">作业1（引言）</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业2 XP系统使用">
+              <a href="/calls/344/show_course" target="_blank">作业2 XP系统使用</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业3：Word练习">
+              <a href="/calls/364/show_course" target="_blank">作业3：Word练习</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业4：PPT练习">
+              <a href="/calls/407/show_course" target="_blank">作业4：PPT练习</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="作业5：Excel练习">
+              <a href="/calls/430/show_course" target="_blank">作业5：Excel练习</a>
+            </li>
+      </ul>
+    </li>
+
+      </ul>
+    </li>
+
+                  <li id="project_loggedas_li" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+      <a href="http://forge.trustie.net/users/10/user_projects">我的项目</a>
+      <ul class="project_sub_menu" style="top:35px;">
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie-Forge">
+              <a href="http://forge.trustie.net/projects/2">Trustie-Forge</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="开源软件数据挖掘与分析">
+              <a href="http://forge.trustie.net/projects/3">开源软件数据挖掘与分析</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Influx开源搜索平台">
+              <a href="http://forge.trustie.net/projects/7">Influx开源搜索平台</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="企业员工MISS系统">
+              <a href="http://forge.trustie.net/projects/63">企业员工MISS系统</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Topcoder研讨空间">
+              <a href="http://forge.trustie.net/projects/83">Topcoder研讨空间</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="Trustie history">
+              <a href="http://forge.trustie.net/projects/108">Trustie history</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="王怀民教授每周研讨共享空间">
+              <a href="http://forge.trustie.net/projects/117">王怀民教授每周研讨共享空间</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="GetArchive">
+              <a href="http://forge.trustie.net/projects/129">GetArchive</a>
+            </li>
+            <li style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap;" title="群体化软件开发方法">
+              <a href="http://forge.trustie.net/projects/368">群体化软件开发方法</a>
+            </li>
+      </ul>
+    </li>
+
+              <li style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
+                <a href="http://user.trustie.net/my/account">修改资料</a>
+              </li>
+			</ul>
+		</li>
+		<li style="padding:0 0; margin:0 0;display:inline;border-bottom: 0;">
+			<a href="http://user.trustie.net/users/10/user_newfeedback" class="my-message">留言(0)</a>
+		</li>
+	</ul>
+	</div>
+	<ul><li><a href="/">主页</a></li><li><a href="/forums">公共贴吧</a></li></ul></div>
+<div style="border-top:solid 1px #C6E9F1;width:940px;margin-left:auto;margin-right:auto;margin-bottom: 0px;margin-top: -10px;"></div>
+<div style="clear:left;"></div>
+
+<script type="text/javascript">function setMessageCount(){var mes=$('#loggedas .my-message');mes.html(mes.html()+'('+0+")");}
+function addSlipMenu(){var loggedas=$('#loggedas ul li:first');var sub_menu=$('.sub_menu');loggedas.mouseenter(function(event){sub_menu.show();});sub_menu.mouseleave(function(event){sub_menu.hide();});}
+function addProjectSlipMenu(){var loggedas=$('#project_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){course_sub_menu.hide();project_sub_menu.show();});project_sub_menu.mouseleave(function(event){project_sub_menu.hide();});}
+function addCourseSlipMenu(){var loggedas=$('#course_loggedas_li');var project_sub_menu=$('.project_sub_menu');var course_sub_menu=$('.course_sub_menu');loggedas.mouseenter(function(event){project_sub_menu.hide();course_sub_menu.show();});course_sub_menu.mouseleave(function(event){course_sub_menu.hide();});}
+function homeworkSlipMenuOver(id)
+{$('.project_sub_menu').hide();$('#course_loggedas_li').show();$("#homework_loggedas_ul_"+id).show();}
+function homeworkSlipMenuOut(id)
+{$("#homework_loggedas_ul_"+id).hide();}
+$(document).ready(function(){addSlipMenu();addProjectSlipMenu();addCourseSlipMenu();});jQuery(document).ready(function($){$('.sub_menu').find("a").attr('target','_blank');$('.project_sub_menu').find("a").attr('target','_blank');$('.course_sub_menu').find("a").attr('target','_blank');});</script>
+
+					<div id="main">
+						<div class="top-content">							
+							<table>
+								<tr>
+									<td class="info_font" style="width: 240px;" rowspan="2">
+                                      <a href="http://forge.trustie.net" style="color: #15bccf;">
+                                        软件项目托管社区
+                                      </a>
+									</td>
+									<td style="width: 430px; color: #15bccf">
+                                      <strong>当前位置 : </strong>
+                                    </td>
+									<td rowspan="2" width="250px">
+										<div class="top-content-search">
+                                            <script type="text/javascript">function regexName()
+{var name=$.trim($("#name").val());if(name.length==0)
+{$("#project_name_span").text("搜索条件不能为空");$("#project_name_span").css('color','#ff0000');$("#project_name_span").focus();return false;}
+else
+{$("#project_name_span").text("");return true;}}
+function submitSerch()
+{if(regexName()){$("#project_search_form").submit();}}</script>
+											<form accept-charset="UTF-8" action="/projects/search" id="project_search_form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
+                                                <input id="name" name="name" onkeyup="regexName();" size="20" style="float:left" type="text"/>
+                                                <input id="project_type" name="project_type" type="hidden"/>
+                                                <a href="#" onclick="submitSerch();" class="ButtonColor m3p10" style="float:left;padding-top: 3px; margin: 0px;padding-bottom:0px;">
+                                                    搜索
+                                                </a>
+                                                <br/>
+                                                <span id="project_name_span" style="float: left"></span>
+</form>										</div>
+									</td>
+								</tr>
+								<tr>
+									<td>
+                                      <p class="top-content-list">
+                                        <a href="/">主页</a> >
+                                        <a href="/projects/3">开源软件数据挖掘与分析</a>
+                                      </p>
+                                    </td>
+								</tr>
+							</table>							
+						</div>
+						<div id="sidebar">
+							<div class="spaceleft">
+								<div class="inf_user_image">
+									<table>
+										<tr>
+											<td>
+                                              <img alt="0?1417140979" class="avatar2" src="/images/avatars/Project/0?1417140979" pagespeed_url_hash="3661586667"/>
+                                            </td>
+											<td>
+												<div class="info-course">
+													<a href="/projects/3">开源软件数据挖掘与分析</a>
+												</div>
+												<div>
+													
+														项目得分 : 
+														<a href="/users/3/show_projects_score" data-remote="true" style="color: #EC6300;">116</a>
+												<!-- end -->
+												</div>
+                                              <div id="join_exit_project_div">
+                                                <div style="margin-left: 20px;">
+
+  </div>
+<!--添加项目申请-->
+<div style="margin-left: 20px;">
+</div>
+
+<!--添加退出项目-->
+<div style="margin-left: 20px;">
+</div>
+                                              </div>
+											</td>
+										</tr>
+									</table>												
+								</div>
+
+								<div class="user_fans">
+									<table width="240" border="0">
+										<tr align="center" width="80px">
+											<td class="font_index">
+                                              <a href="/projects/3/member">10</a>
+                                            </td>
+											<td class="font_index">
+                                              <a href="/projects/3/watcherlist">5</a>
+                                            </td>
+											<td class="font_index">
+                                              <a href="/projects/3/issues">15</a>
+                                            </td>
+										</tr>
+										<tr class="font_aram">
+											<td align="center" width="70px">
+                                              成员
+                                            </td>
+											<td align="center" width="100px">
+                                              关注
+                                            </td>
+											<td align="center" width="70px">
+                                              缺陷
+                                            </td>
+											<!-- <td align="center" width="58px"></td> -->
+										</tr>
+									</table>
+									<div class="user_underline"></div>
+								</div>
+								<div class="inf_user_context">
+									<div class="font_title_left">
+										概述
+									</div>
+									<div style="padding-bottom: 8px">
+										<div class="font_lighter_sidebar" style="word-break:break-all;word-wrap: break-word;">
+											<p>该项目旨在通过对开源软件开发、发布、部署、运行过程中产生的包括源代码、缺陷跟踪、版本控制、软件标签、用户评论等等数据进行挖掘和分析，研究分析软件开发规律，构建软件开发辅助工具，从而提高软件开发效率和质量</p>
+										</div>
+										<div class="created_on_project">
+                                          <strong style="color: #15bccf">
+                                            创建时间：
+                                          </strong>
+                                          2013-06-29 10:46
+										</div>
+									</div>
+									<div class="user_underline"></div>
+								</div>
+								<!--tags-->
+								<div class="user_fans">
+									<!-- added by william -for tag -->
+									<div class="user_tags">
+										<div id="tags">
+											<div id="tags">
+	<!--  3 代表的是issue 当是issue是 处理方式与前2个对象不同 -->
+		<span>
+          <img alt="Tags" src="http://forge.trustie.net/images/sidebar/xtags.png,q1402999474.pagespeed.ic.-eupVVpnO1.png" pagespeed_url_hash="3837732743"/>
+        </span>
+		<span class="font_title_tag">
+          标签:
+        </span>
+		<span>
+          <a href="#" onclick="$(&#x27;#put-tag-form&#x27;).slideToggle(); $(&#x27;#tags_name&#x27;).focus(); return false;"><img alt="Add" src="http://forge.trustie.net/images/sidebar/xadd.png,q1402999474.pagespeed.ic.6ecwRHMYvR.png" pagespeed_url_hash="2246518169"/></a>
+        </span>
+		<div id="tags_show">
+			<script type="text/javascript"></script>
+<!-- 1代表是user类型   2代表是project类型  3代表是issue类型   4代表需求 7代表竞赛 9代表课程-->
+    <!-- 用来显示三大对象的主页中的tag  故是全部显示  -->
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98">数据挖掘</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C">社交网络</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=SNS">SNS</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=MSR">MSR</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+            <div id="tag">
+                <span class="tag_show">
+                  <a href="/tags/index?obj_id=3&amp;object_flag=2&amp;q=%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90">文本分析</a>
+                  <!-- 对用户主页 是本人 ，对项目，需求，问题是管理员 -->
+                </span>
+            </div>
+
+		</div>
+		<div id="put-tag-form" style="display: none">
+			<form accept-charset="UTF-8" action="/users/tag_save" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="p1C3DQgYIUz1M08TF+b9FTqEX9HLa+7GhzYxH2eQX6U="/></div>
+			<input id="tags_name" maxlength="14" minlength="1" name="tag_for_save[name]" require="true" size="28" type="text"/>
+			<input id="tag_for_save_object_id" name="tag_for_save[object_id]" size="30" style="display:none" type="text" value="3"/>
+			<input id="tag_for_save_object_flag" name="tag_for_save[object_flag]" size="30" style="display:none" type="text" value="2"/>
+             <!---->
+            <a href="#" onclick='$("#tags_name").parent().submit();' class="ButtonColor m3p10" style="padding: 3px 6px">
+              增加
+            </a>
+            <a class="ButtonColor m3p10" href="#" onclick="$(&quot;#put-tag-form&quot;).slideUp();; return false;" style="padding:3px 6px">取消</a>
+</form>		</div>
+</div>
+
+										</div>
+									</div>
+								</div>
+								<!--tool-->
+								<div class="user_underline"></div>
+								<div class="tool">
+									<div class="font_title_left">
+  项目工具集
+</div>
+
+<div class="tools ">
+  <ul><h3>项目交流</h3>
+    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/feedback">用户反馈</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/files">作品下载</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/wiki">Wiki</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/code_review/index">代码审查</a></li>
+  </ul>
+  <ul><h3>进度跟踪</h3>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/calendar">日历</a></li>
+
+    <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/roadmap">里程碑</a></li>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/issues/gantt">甘特图</a></li>
+
+  </ul>
+  <ul><h3>其他工具</h3>
+        <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/project/3/share">DTS测试工具</a></li>
+      <li style="background:url(http://forge.trustie.net/images/sidebar/tool_tag_alpha.png) no-repeat scroll 10px 30% transparent"><a href="/projects/3/documents">文档</a></li>
+    <li></li>
+  </ul>
+
+</div>
+
+								</div>
+								<div class="user_underline"></div>
+							</div>
+						</div>
+						<div id="content">
+							<div class="tabs_new">
+                              <ul><li><a href="/projects/3" class="overview">近期动态</a></li>
+<li><a href="/projects/3/issues" class="issues">缺陷</a></li>
+<li><a href="/projects/3/news" class="news">新闻</a></li>
+<li><a href="/projects/3/boards" class="boards">讨论区</a></li>
+<li><a href="/projects/3/repository" class="repository selected">版本库</a></li>
+
+<li><a href="/projects/3/settings" class="settings">配置</a></li></ul>
+							</div>
+							
+							
+
+<div class="contextual">
+  
+<a href="/projects/3/repository/fisherweb/statistics" class="icon icon-stats">统计</a>
+
+<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/changes/js/Caculate_VisitNumber.js" id="revision_selector" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>  <!-- Branches Dropdown -->
+    | 分支: 
+    <select id="branch" name="branch"><option value=""></option>
+<option value="master" selected="selected">master</option></select>
+
+
+    | 修订: 
+    <input id="rev" name="rev" size="8" type="text" value="master"/>
+</form>
+</div>
+
+<h3><a href="/projects/3/repository/fisherweb/revisions/master/show">fisherweb</a>
+    / <a href="/projects/3/repository/fisherweb/revisions/master/show/js">js</a>
+    / <a href="/projects/3/repository/fisherweb/changes/js/Caculate_VisitNumber.js?rev=master">Caculate_VisitNumber.js</a>
+@ master
+
+</h3>
+
+
+<p>
+历史记录 |
+    <a href="/projects/3/repository/fisherweb/revisions/master/entry/js/Caculate_VisitNumber.js">查看</a> |
+    <a href="/projects/3/repository/fisherweb/revisions/master/annotate/js/Caculate_VisitNumber.js">追溯</a> |
+<a href="/projects/3/repository/fisherweb/revisions/master/raw/js/Caculate_VisitNumber.js">下载</a>
+(1.968 KB)
+</p>
+
+
+
+
+
+
+<form accept-charset="UTF-8" action="/projects/3/repository/fisherweb/diff/js/Caculate_VisitNumber.js" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/></div>
+<table class="list changesets">
+<thead><tr>
+<th>#</th>
+<th></th>
+<th></th>
+<th>日期</th>
+<th>作者</th>
+<th>注释</th>
+</tr></thead>
+<tbody>
+<tr class="changeset odd">
+<td class="id">
+  <a href="/projects/3/repository/fisherweb/revisions/5f07d7af4209a19687ccb0e13145f31b2559f4b6" title="修订 5f07d7af">5f07d7af</a>
+</td><td class="checkbox"></td>
+<td class="checkbox"></td>
+<td class="committed_on">2014-01-10 23:24</td>
+<td class="author">xianbo</td>
+<td class="comments"><p>add caculate visitors</p></td>
+</tr>
+</tbody>
+</table>
+
+</form>
+
+
+
+							
+							<div style="clear:both;"></div>
+						</div>
+						<!--add by huang-->
+<div class="clearfix"></div>
+<div id="footer" style="margin-left:-5px;padding-top: 20px;clear: both;font-size: 12px;">
+	<div style="border-top:solid 1px #C6E9F1;"></div>
+ <div class="base_footer">
+  <div align="center">
+
+   <!--gcm-->
+   <p>
+      <p>
+    <span>主办单位</span>
+    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=47">国防科学技术大学并行与分布处理国家重点实验室</a></span>
+    <span class="footer_text_link"><a target="_blank" href="http://www.nudt.edu.cn/ArticleShow.asp?ID=41">计算机科学与技术系</a></span>
+    <span id="copyright">版权&copy;2007~2014</span>
+    <span class="footer_text_link" id="contact_us"><a target="_blank" href="http://forge.trustie.net/projects/2/member">联系我们</a></span>
+    <span class="footer_text_link" id="record"><a target="_blank" href="http://www.miibeian.gov.cn/">湘ICP备09019772</a></span>
+
+  </p>
+  </p>
+  <div id="logo_link">
+            <span class="footer_logo_link"><a href="http://www.nudt.edu.cn/special.asp?classid=12" target="_blank"><img alt="国防科学技术大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/1?1417140979" width="100" pagespeed_url_hash="2235555691"/></a></span>
+            <span class="footer_logo_link"><a href="http://eecs.pku.edu.cn" target="_blank"><img alt="北京大学信息科学技术学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/2?1417140979" width="100" pagespeed_url_hash="604533990"/></a></span>
+            <span class="footer_logo_link"><a href="http://scse.buaa.edu.cn" target="_blank"><img alt="北京航空航天大学计算机学院" height="30" src="/images/avatars/WebFooterCompany/3?1417140979" width="100" pagespeed_url_hash="3268479585"/></a></span>
+            <span class="footer_logo_link"><a href="http://www.iscas.ac.cn" target="_blank"><img alt="中国科学院软件研究所" height="30" src="/images/avatars/WebFooterCompany/4?1417140979" width="100" pagespeed_url_hash="1637457884"/></a></span>
+            <span class="footer_logo_link"><a href="http://www.inforbus.com" target="_blank"><img alt="山东中创软件商用中间件股份有限公司" height="30" src="/images/avatars/WebFooterCompany/5?1417140979" width="100" pagespeed_url_hash="6436183"/></a></span>
+ </div>
+ <!--gcm-->
+
+</div>
+</div>
+</div>
+<div class="debug">
+  
+  <div class="hidden">
+    <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-46523987-1','trustie.net');ga('send','pageview');</script>
+  </div>
+</div>
+
+
+					</div>
+
+					<div id="ajax-indicator" style="display:none;">
+						<span>载入中...</span>
+					</div>
+					<div id="ajax-modal" style="display:none;"></div>
+				</div>
+			</div>
+			
+
+
+
+
+		</div>
+	</body>
+</html>
+

commit c49012868e0cfe84bbb3ea8125b8402eff9dc0bb
Author: fisher <yyuu51888@163.com>
Date:   Fri Jan 23 13:06:04 2015 -0800

    init home page
---
 index.html                                         | 172 ++++++++++++++++++++-
 res/CV_Yu.pdf                                      | Bin 0 -> 105648 bytes
 res/EI Num.txt                                     |  14 ++
 res/Yy.jpg                                         | Bin 0 -> 449185 bytes
 res/paper/20130122-Frecom-slide.pdf                | Bin 0 -> 1974699 bytes
 res/paper/325-HESA-slide.pdf                       | Bin 0 -> 1739438 bytes
 res/paper/ADMA12-camera-ready.pdf                  | Bin 0 -> 987055 bytes
 res/paper/F-recommendation-CameraReady.pdf         | Bin 0 -> 2158730 bytes
 res/paper/ISPDPAW.pdf                              | Bin 0 -> 449152 bytes
 ...l for Trusted Computing Dynamic Attestation.pdf | Bin 0 -> 484487 bytes
 res/paper/PaperID325-HESA.pdf                      | Bin 0 -> 2026644 bytes
 res/paper/apsec2014.pdf                            | Bin 0 -> 2080794 bytes
 res/paper/crowdsoft2014.pdf                        | Bin 0 -> 2010181 bytes
 res/paper/pr-assignment-demo-final.pdf             | Bin 0 -> 11153344 bytes
 res/paper/trustcom2013_EI.pdf                      | Bin 0 -> 723204 bytes
 15 files changed, 185 insertions(+), 1 deletion(-)

diff --git a/index.html b/index.html
index 2fcee71..e1694f0 100644
--- a/index.html
+++ b/index.html
@@ -1 +1,171 @@
-echo "Hello World"
\ No newline at end of file
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<!-- saved from url=http://forge.trustie.net/Fisher/ -->
+<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
+<TITLE>Yue Yu's Website</TITLE>
+<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<STYLE type=text/css>
+H1 {
+	MARGIN-BOTTOM: 0px
+}
+H2 {
+	COLOR: #004400
+}
+UL.pubs LI {
+	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
+}
+body {
+	background-color: #FFFFFF;
+}
+.STYLE1 {color: #3399FF}
+.STYLE4 {
+	color: #004400;
+	font-weight: bold;
+}
+.STYLE5 {color: #004400}
+</STYLE>
+
+<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
+<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
+link=#003300>
+<span class="STYLE1"></span>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD vAlign=middle align=left>
+      <H1>Yue Yu (余跃) </H1></TD>
+    <TD rowSpan=3 width=200 align=right><IMG 
+      src="res/Yy.jpg" width=160 height="153"></TD>
+  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
+  <TR>
+    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
+	<P>
+	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
+	</P>
+      </TD></TR></TBODY></TABLE>
+<HR align=center color=#006600 width=800 noShade>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+      <H2 class="STYLE4">Contact Information</H2>
+      <UL style="LIST-STYLE-TYPE: none"><LI>
+        <p>National  Laboratory for Parallel and Distributed Processing<br>
+          Computer  School, National University of Defense Technology<br>
+          Changsha,  Hunan Province, 410073, P.R.C<br>
+		   Phone: (86)13627319266<br>
+		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
+        </p>
+		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
+        <LI>
+        </UL>
+		 <hr size="2" color="black" align="center">
+      <H2>Education</H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
+			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
+			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
+			2007.9--2011.6 B.E. in Information Security<br>
+		</LI>
+		&nbsp;
+		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
+			2009.03-2010.06 Minor in Journalism and Communication.<br>
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE5">Research Experience </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>
+		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
+	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
+        <LI> National Science Foundation of China (Grant No.60903043)</LI>
+		<br>
+		<LI>
+		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
+		<LI>
+		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
+		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE4">Awards and Honors </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
+        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
+        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
+        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
+        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
+        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
+        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
+        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
+      </UL>
+	  <hr size="2" color="black" align="center">
+	  </TD></TR></TBODY></TABLE>
+	  
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+     <H2 class="STYLE5">Publications</H2>
+     
+	 <H3>2014</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
+		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
+		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		[<A href="res/paper/apsec2014.pdf">pdf</A>]
+		
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
+		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
+		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
+		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
+        
+      </UL> 	  
+	  
+      <H3>2013</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>
+		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
+		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
+		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
+        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
+		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
+		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
+		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
+		</UL>
+		
+	  <H3>2011</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
+		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
+		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
+		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
+		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
+		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
+		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
+      </UL>
+	  
+	  <H3>2010</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
+		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
+		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
+      </UL>
+		
+      </TD></TR></TBODY></TABLE>
+</BODY></HTML>
diff --git a/res/CV_Yu.pdf b/res/CV_Yu.pdf
new file mode 100644
index 0000000..22fb33e
--- /dev/null
+++ b/res/CV_Yu.pdf
@@ -0,0 +1,86 @@
+Yue Yu（余跃）http://fisher.trustie.net/
+National Laboratory for Parallel and Distributed Processing
+Computer School, National University of Defense Technology
+Changsha, Hunan Province, 410073, P.R.C
+Phone: (86)13627319266
+Email: yuyue_whu@foxmail.com
+
+
+EDUCATION
+National Laboratory for Parallel and Distributed Processing (PDL), National University of
+Defense Technology (NUDT), China.
+2013.3--present Ph.D. in Software Engineering. Advisor: Huaimin Wang
+Computer School, National University of Defense Technology, China (Rank: top 5)
+2011.9--2013.3 M.S. in Computer Science. Advisor: Huaimin Wang
+Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
+2007.9--2011.6 B.E. in Information Security.
+School of Journalism and Communication, Wuhan University, China.
+2009.03-2010.06 Minor in Journalism and Communication.
+
+
+AWARDS AND HONORS
+2013 OW2 International Programming Contest                        Special Prize (Only One)
+2012 OW2 International Programming Contest                         First Prize (Top 1)
+2011 National Information Security Competition                     Third Prize (17%)
+2010 National Information Security Competition                     First Prize (2.3%)
+Awarded “Yungui Ci” Scholarship in NUDT                            2011-2012 (Top 2)
+Awarded First-class Scholarship in Wuhan University                2010-2011 (Top 5%)
+Awarded National Scholarship of China                              2009-2010 (Top 2)
+Honored as Outstanding Graduates of Wuhan University               2007-2011 (20%)
+Honored as Excellent Student Leader of Wuhan University (Twice)
+
+
+SKILLS
+   Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
+   System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene
+    OpenSSL, Geni, Weka.
+
+
+TEACHING & RESEARCH EXPERIENCE
+   Teaching Assistant, National University of Defense Technology          2012.8-2013.8
+     Network Program Design
+     Distributed Computing Environment
+   Research Intern, Trustie Group, PDL, NUDT                              2011.9-present
+       National High Technology Research and Development Program of China (Grant No.
+        2012AA010101)
+     National Science Foundation of China (Grant No.60903043)
+   Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
+     Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
+     Research on Feature Detection and Location of OSS Repository           2012.3-2013.3
+   Vice-Chairman of Student Union, Wuhan University                       2009.10-2010.10
+     Awarded Excellent Student Union
+
+
+PUBILCATIONS
+2013
+   Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of
+    Hierarchical Software Feature Repository. The 25th International Conference on Software
+    Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%
+    acceptance Rate)
+   Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software
+    Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on
+    Internetware, Changsha, China, 2013. (28.8% acceptance Rate)
+   Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on
+    Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy
+    in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+2011
+   Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using
+    Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium
+    on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+   Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted
+    Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5):
+    1436-1445, 2011.
+2010
+   Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted
+    Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3):
+    195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+   Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform
+    Module. The International Conference on Computer Application and System Modeling,
+    Taiyuan, China, 2010.
+   Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted
+    Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20):
+    169-173, 2010. (in Chinese)
+
+
+ACTIVITES          Football, Table tennis, Swimming.
+
\ No newline at end of file
diff --git a/res/EI Num.txt b/res/EI Num.txt
new file mode 100644
index 0000000..c94aef6
--- /dev/null
+++ b/res/EI Num.txt	
@@ -0,0 +1,14 @@
+A Trusted Remote Attestation Model based on Trusted Computing
+Accession number:  20140617288556
+
+Mining and recommending software features across multiple web repositories 
+Accession number:  20135217132788
+
+Expand the SSL/TLS protocol on trusted platform module
+Accession number:  20104913453439
+
+Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model
+Accession number:  20113514267201
+
+Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation
+Accession number:  20112214022490
\ No newline at end of file
diff --git a/res/Yy.jpg b/res/Yy.jpg
new file mode 100644
index 0000000..68a4ced
Binary files /dev/null and b/res/Yy.jpg differ
diff --git a/res/paper/20130122-Frecom-slide.pdf b/res/paper/20130122-Frecom-slide.pdf
new file mode 100644
index 0000000..5935f55
--- /dev/null
+++ b/res/paper/20130122-Frecom-slide.pdf
@@ -0,0 +1,217 @@
+Mining and Recommending Software 
+Mining and Recommending Software
+          Features across
+     Multiple Web Repositories
+     Multiple Web Repositories
+
+
+                           Yu Yue
+                     Trustie Group of NUDT
+Introduction
+
+
+
+
+          Begin with an example
+          Begin with an example
+ Introduction                       Community                   Time                Scale
+                                    Freecode                1998               45,021+
+                                    SourceForge             1999               432,004+
+
+                                    Rubyforge               2003               9,349+
+
+1. Massive number of OSS 
+1. Massive number of OSS 
+1 M    i        b   f OSS           Ohloh                   2004               500,000+
+
+projects in open source 
+projects in open source             Google Code
+                                    …
+                                                            2006               250,000+
+
+
+communities
+
+2 OSS projects are utilized for
+2. OSS projects are utilized for 
+2. OSS projects are utilized for 
+industry wildly
+
+                                            [Actuate09] 4th Actuate Annual Open Source Survey
+Introduction
+
+
+
+
+         Software Resource 
+         Software Resource
+    Reorganized in a efficient way
+        g                        y
+Introduction
+Introduction
+Introduction
+
+
+
+
+               for stakeholders to
+     challenge for stakeholders to
+       retrieve the suitable one
+Introduction
+
+
+
+
+                     Stakeholders
+               What are you seeking for？
+               What are you seeking for？
+Challenge
+
+
+                  Mature Software
+
+
+
+
+              large-
+              large-scale, uncategorized 
+        There are 39.8% uncategorized software in SourceForge
+        There are 39.8% uncategorized software in SourceForge
+                          and 61.68% in Ohloh
+                          and 61.68% in Ohloh
+Challenge
+
+
+
+    Reusable Module and Component
+    R    bl M d l     dC        t
+
+
+
+
+            manually ， difficultly
+                 ll
+            manually ， diffi ltl
+Challenge
+
+
+
+            Reusable Code Snippet
+            Reusable Code Snippet
+
+
+
+
+                     inaccuracy 
+                     Google Code Search
+                            Krugle
+               Codase Source Code Search Engine
+Feature
+
+
+
+
+          Software Feature
+          Software Feature
+   capture and identify commonalities and differences in
+                    a software domain
+Feature
+
+
+
+  F t                   i    t d di ti ti
+  Features are any prominent and distinctive
+  concepts or characteristics that are visible to
+  various stakeholders.
+     i     t k h ld
+  a) Features are externally visible characteristics that can
+     differentiate one product from the others.
+
+     Functions, objects, and aspects have been mainly used to
+  b) F    ti      bj t      d       t h     b    i l     dt
+     specify the internal details of a system.
+Feature
+
+
+
+
+          Social Feature
+          Social Feature
+          Social
+Challenge
+
+
+1 Synonymic Feature Element:
+1. Synonymic Feature Element:
+Challenge
+
+
+2. Hybrid Semantic-
+2 Hybrid Semantic
+          Semantic-
+2. Hybrid Semantic-level:
+             Doc Topic
+             Doc-Topic
+
+
+
+
+Topic-Word
+Topic Word
+Topic Model
+
+
+
+
+ID1000：Real-time windows registry monitor utility.
+Topic structure
+
+
+
+
+            1. Email S       h    d    il    t ti
+            1 E il Scanner enhanced email protection;
+            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
+            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
+               il li t         i           il i f      f i         d th th t
+            mail clients, ensuring your email is free of viruses and other threats;
+            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
+            before they reach your inbox;
+Ontology
+资源定位
+ Overview
+Evaluation
+Evaluation
+Evaluation
+
+
+
+
+      (a) the average value
+                                                (b) the standard deviation
+
+
+                 The clustering results for each category
+Recommend
+Recommend
+Recommend
+Conclusion
+
+
+
+
+1. Build a Hierarchical rEpository of Software feAture
+1. Build a Hierarchical rEpository of Software feAture (HESA)
+
+2. Induce the Feature-
+2. Induce the Feature-Pattern base on association rule mining
+
+
+3. Recommend  the most relevant features to users
+      You！
+Thank You！
+                      Yu Yue
+                  INFLUX Group
+                  I FL X G
+     National University of Defense Technology
+
\ No newline at end of file
diff --git a/res/paper/325-HESA-slide.pdf b/res/paper/325-HESA-slide.pdf
new file mode 100644
index 0000000..c6a7348
--- /dev/null
+++ b/res/paper/325-HESA-slide.pdf
@@ -0,0 +1,185 @@
+            HESA
+The Construction and Evaluation of 
+The Construction and Evaluation of 
+  Hierarchical Software Feature
+  Hierarchical Software Feature 
+           Repository
+
+                                   Yu Yue
+                               INFLUX Group
+                  National University of Defense Technology
+Introduction
+
+
+
+
+          Begin with an example
+          Begin with an example
+ Introduction                       Community                   Time                Scale
+                                    Freecode                1998               45,021+
+                                    SourceForge             1999               432,004+
+
+                                    Rubyforge               2003               9,349+
+
+1. Massive number of OSS
+1. Massive number of OSS 
+1 M    i        b   f OSS           Ohloh                   2004               500,000+
+
+projects in open source 
+projects in open source             Google Code
+                                    …
+                                                            2006               250,000+
+
+
+communities
+
+2 OSS projects are utilized for
+2. OSS projects are utilized for 
+2. OSS projects are utilized for 
+industry wildly
+
+                                            [Actuate09] 4th Actuate Annual Open Source Survey
+Introduction
+
+
+
+
+                     Stakeholders
+               What are you seeking for？
+               What are you seeking for？
+Challenge
+
+
+                  Mature Software
+
+
+
+
+              large-
+              large-scale, uncategorized 
+        There are 39.8% uncategorized software in SourceForge
+        There are 39.8% uncategorized software in SourceForge
+                          and 61.68% in Ohloh
+                          and 61.68% in Ohloh
+Challenge
+
+
+
+    R
+    Reusable Module and Component
+         bl M d l     dC        t
+    Reusable Module and Component
+
+
+
+
+            manually ， difficultly
+                 ll
+            manually ， diffi ltl
+Challenge
+
+
+
+            Reusable Code Snippet
+            Reusable Code Snippet
+
+
+
+
+                     inaccuracy 
+                     Google Code Search
+                     Google Code Search
+                            Krugle
+               Codase Source Code Search Engine
+Feature
+
+
+
+
+          Software Feature
+          Software Feature
+   capture and identify commonalities and differences in
+                    a software domain
+Feature
+
+
+
+  F t                   i    t d di ti ti
+  Features are any prominent and distinctive
+  concepts or characteristics that are visible to
+  various stakeholders.
+     i     t k h ld
+  a) Features are externally visible characteristics that can
+     differentiate one product from the others.
+
+     Functions, objects, and aspects have been mainly used to
+  b) F    ti      bj t      d       t h     b    i l     dt
+     specify the internal details of a system.
+Feature
+
+
+
+
+          Social Feature
+          Social Feature
+          Social
+Challenge
+
+
+1 Synonymic Feature Element:
+1. Synonymic Feature Element:
+Challenge
+
+
+2. Hybrid Semantic-
+2 Hybrid Semantic
+          Semantic-
+2. Hybrid Semantic-level:
+             Doc Topic
+             Doc-Topic
+
+
+
+
+Topic-Word
+Topic Word
+Topic Model
+
+
+
+
+ID1000：Real-time windows registry monitor utility.
+Topic structure
+
+
+
+
+            1. Email S       h    d    il    t ti
+            1 E il Scanner enhanced email protection;
+            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
+            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
+               il li t         i           il i f      f i         d th th t
+            mail clients, ensuring your email is free of viruses and other threats;
+            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
+            before they reach your inbox;
+Ontology
+资源定位
+ Overview
+Evaluation
+Evaluation
+
+
+
+
+      (a) the average value
+                                                (b) the standard deviation
+
+
+                 The clustering results for each category
+      You！
+Thank You！
+                      Yu Yue
+                  INFLUX Group
+                  I FL X G
+     National University of Defense Technology
+
\ No newline at end of file
diff --git a/res/paper/ADMA12-camera-ready.pdf b/res/paper/ADMA12-camera-ready.pdf
new file mode 100644
index 0000000..39b4231
--- /dev/null
+++ b/res/paper/ADMA12-camera-ready.pdf
@@ -0,0 +1,709 @@
+           Inducing Taxonomy from Tags :
+       An Agglomerative Hierarchical Clustering
+                     Framework
+
+    Xiang Li1 , Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, Yue Yu, and
+                                Dengqing Tang2
+            1
+                 National Laboratory for Parallel and Distributed Processing,
+                                 School of Computer Science,
+                National University of Defense Technology, Changsha, China
+                    {shockleylee,jack.nudt,taowang.2005}@gmail.com
+                  2
+                     College of Mechatronics Engineering and Automation,
+                National University of Defense Technology, Changsha, China
+                                  http://www.nudt.edu.cn
+
+
+        Abstract. By amassing ‘wisdom of the crowd’, social tagging systems
+        draw more and more academic attention in interpreting Internet folk
+        knowledge. In order to uncover their hidden semantics, several researches
+        have attempted to induce an ontology-like taxonomy from tags. As far
+        as we know, these methods all need to compute an overall or relative
+        generality for each tag, which is diﬃcult and error-prone. In this paper,
+        we propose an agglomerative hierarchical clustering framework which
+        relies only on how similar every two tags are. We enhance our framework
+        by integrating it with a topic model to capture thematic correlations
+        among tags. By experimenting on a designated online tagging system,
+        we show that our method can disclose new semantic structures that
+        supplement the output of previous approaches. Finally, we demonstrate
+        the eﬀectiveness of our method with quantitative evaluations.
+
+        Keywords: social tagging; semantics; tag taxonomy; tag generality; ag-
+        glomerative hierarchical clustering; topic model
+
+
+
+
+1     Introduction
+Social tagging websites like Delicious3 and Flickr4 are becoming popular, wit-
+nessing a soaring click rate during recent years. By annotating web contents
+with free-form tags that they feel appropriate, users of social tagging websites
+are enabled to play the dual role of visitors and contributors simultaneously.
+Speciﬁcally, a user is allowed to search and browse resources (documents, im-
+ages, URLs, etc.) through tags annotated by others and is free to add or delete
+tags whenever he or she wants.
+3
+    http://www.delicious.com/
+4
+    http://www.ﬂickr.com/
+2       Inducing Taxonomy from Tags: An AHC Framework
+
+
+
+
+       (a) tag cloud in Freecode.com           (b) taxonomy in Amazon.com
+
+                      Fig. 1. diﬀerent navigation mechanisms
+
+
+
+
+    For computer programs, tags are merely character strings with no meaningful
+relationships among them, which makes it hard to organize them into an infor-
+mative structure. As depicted in Fig.1(a), most tagging websites manage tags in
+a ﬂat tag cloud, where the font size of a tag is proportional to its frequency of
+usage, so users can have easy access to buzzword tags. Sometimes however, the
+desired tags are vague in users’ head and may go beyond what is popular. A tag
+cloud could do little help in this situation, and tags should be better arranged and
+managed to satisfy the requirement. In retail websites, a user usually navigates
+through hierarchical taxonomy (as in Fig.1(b)) when her requirement is only a
+vague notion rather than a concrete keyword. So promisingly, taxonomy of tags
+will analogously facilitates navigation and searching in the now-booming social
+tagging websites. Besides, in the view of online data analysts, generating tag
+taxonomy is crucial for representing and understanding Internet folk knowledge.
+An ontology-like taxonomy is intrinsically a good knowledge structure which
+captures semantics of terms in a machine understandable way[1].
+
+    Previous literature[2][3] has addressed on how to generate tag taxonomy ef-
+fectively. By using machine learning techniques, these researches achieved auto-
+mated taxonomy generation, which could bootstrap and alleviate manual con-
+struction. However, new methods[4][5] keep emerging because resultant taxon-
+omy never seemed satisfying enough. In an attempt to detect the bottleneck,
+we ﬁnd that to deduce semantic generality of each tag is the most diﬃcult and
+error prone (see Chapter 2 Related Work). To meet such challenge, we propose
+a novel approach of tag taxonomy construction. Our innovation lies in: i) By
+using an Agglomerative Hierarchical Clustering (AHC) framework, we only need
+to compute how similar two tags are and deliberately skip the calculation of tag
+generality. ii) We seamlessly integrate a topic model into the framework, so it
+is able to capture thematic correlations among tags. iii) We make comparative
+evaluation with existing approaches, the results demonstrate the usefulness and
+eﬀectiveness of our method.
+                        Inducing Taxonomy from Tags: An AHC Framework             3
+
+2   Related Work
+Because of the convention of constructing taxonomies with the general tags at
+the top and the more speciﬁc tags below them[6], a key step in existing taxonomy
+construction methods is extracting generality of each tag, either by computing
+a generality score[2][7] or by pair-wise comparison[3][4]. As far as we know, two
+types of techniques are used to achieve this step.
+    Some research works[2][7] use set theory techniques to compute a tag gener-
+ality. In such works, each tagged resource is treated as a distinct data item with
+their textual contents ignored. Each tag is presented as the collection of item-
+s it annotates. For example, Heymann et al.[7] proposed a simple yet eﬀective
+way to learn a tag taxonomy. They ﬁrst model each tag as a vector, with each
+entry being the number of times the tag annotates a corresponding resource.
+Cosine metric is then used to measure tag similarity. They come up with the tag
+similarity graph by connecting suﬃciently similar (controlled with a threshold)
+tags. The graph centrality metric, which is originally proposed in social network
+analysis literature, is used to measure the generality of each tag. Finally, tags of
+higher generality are greedily placed at the upper levels of the resultant taxon-
+omy. Liu et al.[2] used association rule mining which takes each tagged resource
+as a transaction and tags as items. The rules are in the form of “for an unknown
+resource X, if tag A appears then probably tag B will also appear”, which they
+call “tag B subsumes tag A”. The likelihood of such subsumption is naturally
+modeled as the conﬁdence and support of the corresponding rule. Based on sub-
+sumption likelihood between each pair of tags they calculate an overall generality
+score for each tag by using a random walk process. Eventually, a taxonomy is
+constructed using a top-down manner.
+    However, such set theory based approaches share a common ﬂaw. They only
+distinguish one resource from another and do not exploit tagged web documents.
+In light of this, some researches apply topic models to do the job. Such methods
+learn a latent topic distribution for each tag from web documents they anno-
+tate, tag relations are measured based on pair-wise comparison among topic
+distributions. Tang et al.[3] designed the Tag-Topic model based on the classic
+LDA(Latent Dirichlet Allocation) model[8]. They treat each word as a draw from
+a topic-speciﬁc word distribution, and a latent topic is in turn a draw from a
+tag-speciﬁc topic distribution. Based on such a generative model, Gibbs sam-
+pling is used to infer distribution parameters. They use Kullback-Leibler (KL)
+divergence to measure the diﬀerence between two distributions, and have pro-
+posed a relative generality score metric based on the intuition “if one tag has
+higher posterior probabilities on the latent topics, then it has a relatively higher
+generality”. Wang et al.[4] merge documents annotated by the same tag (they
+use ‘keyword’ instead) as a new document which they believe can explain that
+tag. They learn a standard LDA model out of the underlying corpus. Those new
+documents are folded-in thereafter. Thus, topic distribution of each tag (new
+document) is obtained. Their measurement of relative generality is based on the
+“surprise” theory[9] plus an intuitive law that “given an anticipated tag A, the
+appear of a document on a more general tag B will cause less ‘surprise’ than if
+4       Inducing Taxonomy from Tags: An AHC Framework
+
+A and B are switched”. It is really diﬃcult to come up with a tag generality
+score that both [3] and [4] resort to intuitions.
+
+
+3   AHCTC: Agglomerative Hierarchical Clustering for
+    Taxonomy Construction
+In order to avoid computing tag generality, we borrow the idea from the classic
+agglomerative hierarchical clustering which only relies on how similar/distant
+two points are in building a hierarchy.
+    The term agglomerative hierarchical clustering is not new in the ﬁeld of tax-
+onomy construction. Brooks and Montanez[10] adopted such methods to orga-
+nizing tags into a hierarchy, yet their hierarchy is not a taxonomy for lack of
+supertype-subtype relationships. In Liu et al.[2], authors also mention the use
+of agglomerative hierarchical clustering. However, their strategy is to iteratively
+place the most general tag remained, which is diﬀerent from the classic meaning
+of the agglomerative hierarchical clustering framework. The brilliance of agglom-
+erative hierarchical clustering is yet to be fully exploited in the ﬁeld of taxonomy
+construction.
+
+
+
+               0.9
+
+              0.85
+
+               0.8
+
+              0.75
+
+               0.7
+
+              0.65
+
+               0.6
+
+              0.55
+
+               0.5
+
+              0.45
+
+               0.4
+                           2       6       5      3       1      4
+
+
+
+
+                     Fig. 2. dendrogram of a typical clustering process
+
+
+
+   To illustrate the AHCTC framework in a broader picture, we eliminate any
+presumption on how the proximity scores are calculated, but rather assume
+they are known a-priori. In the next chapter, we will describe how to get a
+meaningful proximity score. With each data point being an initial cluster, classic
+agglomerative hierarchical clustering merges two closest clusters each time until
+only one all-inclusive cluster is left. The dendrogram of a typical AHC process
+consisting of 6 points are depicted in Fig.2. Sadly, the result is not a taxonomy for
+                       Inducing Taxonomy from Tags: An AHC Framework                5
+
+
+                                       Animals
+
+
+
+
+                        Mammals          Fish        Birds
+
+
+ Fig. 3. a hierarchy of the cluster {Birds, Mammals, Fish, Animals} after promote
+
+
+
+the absence of supertype-subtype relationships. In the dendrogram, for example,
+a supertype should be there to overarch the cluster consisting of point 2 and 6.
+Now that data points are tags in our problem, a tag cluster should have a direct
+supertype (parent tag) or the resultant tag tree is not technically a taxonomy.
+    Of course, a tag cluster’s direct supertype should have high semantic proxim-
+ity to each tag in the cluster. For the cluster {Birds, Mammals, Fish Animals},
+a tag like Animals is more suitable to be the supertype than a Living Things
+tag. During the clustering process, tags with high proximity are assigned to the
+same cluster, so the supertype should better be selected from within a given clus-
+ter. Speciﬁcally, we choose the medoid of a cluster, i.e., the most central point.
+This medoid upgrades as the supertype of all other cluster members. We call
+this change as a promote operation. Now suppose the original cluster is {Birds,
+Mammals, Fish, Animals}, and Animals happens to be the medoid according
+to some proximity measure, the resultant hierarchy after promote is depicted in
+Fig.3.
+    In a hierarchical clustering scenario, a new cluster is merged from two old
+clusters each with a hierarchy itself, it forces the promote operation to be able
+to combine these two old hierarchies into a new one. With such requirements, we
+devise a promote mechanism and append it to each merge operation of classic
+AHC, the new taxonomy construction algorithm is illustrated in Algorithm 1.
+Two building blocks of the algorithm, proximity(i, j) and sup(m) are assumed
+known a-priori. We will illustrate how to get them later. The algorithm uses
+an adjacent matrix T to store resultant taxonomy. Initially, every data point is
+a distinct cluster. Each iteration in the while clause executes a merge and a
+promote operation. Line 4-7 ﬁnds the closest two clusters in the current cluster
+set to merge.
+    Line 8-21 is the promote operation, which is also the only operation edits
+T . Diﬀerent from the basic promote operation we have described in Fig.3, the
+promote operation here will be much more intricate since a hierarchical scenario
+is concerned. For ease of illustration, we call the the two supertypes over the
+clusters being merged as old supertypes. Line 8-11 says if the new supertype
+sup(m) happens to be one of the two old supertypes, an directed edge is added
+from it to the other old supertype (see Fig.4(a) and Fig.4(b)).
+    Otherwise, if sup(m) comes from the public, the procedure will have to go
+through the intricacies of line 13-20. Fig.4(c) and Fig.4(d) displays them in de-
+6      Inducing Taxonomy from Tags: An AHC Framework
+
+Algorithm 1 AHCTC
+Require: Data points D = {d1 , d2 , ..., dn }.
+Require: T = [tij ]n×n the adjacent matrix for the resultant taxonomy, tij = 1 when
+    di is a direct supertype of dj .
+Require: M = {m1 , m2 , ...}, the set of all remaining clusters.
+Require: sup(m), index of the supertype data point for a given cluster m.
+Require: proximity(i, j), the proximity score between data points di and dj .
+Ensure: construct the resultant taxonomy T .
+ 1: T ← (0)n×n
+ 2: M ← D
+ 3: while |M | > 1 do
+ 4:    ﬁnd mi and mj in M with maximum proximity(sup(mi ), sup(mj ))
+ 5:    merge mi and mj as m
+ 6:    add m to M
+ 7:    delete mi and mj from M
+ 8:    if sup(m) equals sup(mi ) then
+ 9:       tsup(m),sup(mj ) ← 1
+10:    else if sup(m) equals sup(mj ) then
+11:       tsup(m),sup(mi ) ← 1
+12:    else
+13:       ﬁnd k that tk,sup(m) equals 1
+14:       tk,sup(m) ← 0
+15:       for all g that tsup(m),g equals 1 do
+16:          tsup(m),g ← 0
+17:          tk,g ← 1
+18:       end for
+19:       tsup(m),sup(mi ) ← 1
+20:       tsup(m),sup(mj ) ← 1
+21:    end if
+22: end while
+
+
+
+
+tails. Simply speaking, former subtypes of point B (the newly elected supertype),
+i.e. D and E, should now be A’s subtypes after B’s promote operation. This is
+because A is formerly their nearest ancestor besides B, and we want to maintain
+the relation that A be more general than either D or E after B’s promote. To
+implement this process, the algorithm detaches sup(m) from its direct supertype
+k (line 13-14), attaches all children of sup(m) to k (line 15-18) and ﬁnally the
+two old supertypes are attached to sup(m) (line 19-20).
+
+    If n is the number of data points, the basic AHC algorithm requires O(n2 log n)
+time[11]. The only extra step of our algorithm is the promote operation (line 8-
+21), which at worst induces O(n2 ). The while loop will iterates for n − 1 times,
+because after each iteration the number of clusters only reduces one. At the
+worst case, all n − 1 iterations undergo line 13-20, each needs to look up and
+edit at most n − 1 edges in T . Totally speaking, our algorithm has the same time
+complexity as the basic AHC, O(n2 log n).
+                             Inducing Taxonomy from Tags: An AHC Framework                     7
+
+                                                                   A
+                     A              F
+
+
+
+                                                       B           C           F
+                 B       C     G    H    I
+
+
+
+
+             D       E                         D       E           G           H       I
+
+
+            (a) Type 1: before promote         (b) Type 1: after promote
+                     A              F
+                                                                   B
+
+
+
+                 B       C     G    H    I
+                                                           A               F
+
+
+
+
+             D       E                        D    E           C       G           H       I
+
+
+
+            (c) Type 2: before promote         (d) Type 2: after promote
+
+Fig. 4. Two types of promote operation during hierarchical clustering. The selected
+supertype and newly added edges are in red, edges to be removed are in dashed lines.
+
+
+4     Integration with Topic Models
+In order to get AHCTC running, we have to mount its assemblies. Notice that
+sup(m) ﬁnds the most central points based on proximity(i, j). So essentially, we
+only have to implement proximity(i, j) which quantiﬁes the similarity measure
+between tags.
+    Web documents annotated by a certain tag usually contain semantic informa-
+tion of that tag. It will be a great loss for a tag taxonomy construction method to
+overlook latent semantics in tagged web documents. Recent years have witnessed
+drastic methodology evolution in the ﬁeld of information retrieval, towards the
+unchanging goal of uncovering semantic information in unstructured text data.
+Since the publish of LDA[8], a family of algorithms[12][13] known as Probabilis-
+tic Topic Models emerge and quickly win massive adoptions. Probabilistic Topic
+Models are skilled at discovering hidden thematic structure of text documents.
+In a real corpus like New York Times, a document may be tightly related to
+topics like Foreign Policy and Economics, while only mentions a little on Sports.
+Topic models answer what themes or topics a document relates to and quantify
+how strong such relations are. Thus, a thematic similarity measure could be in-
+duced for each pair of documents. Wang et al.[4] and Tang et al.[3] each design
+a variant of the basic topic model able to learn thematic structure of tags from
+tagged corpus. Our proximity(i, j) measure is built on top of Wang’s model.
+Chapter 4.1 brieﬂy introduces stantard LDA and Wang’s topic model.
+
+4.1   Probabilistic Topic Model
+LDA is the basic Probabilistic Topic Model. In LDA, a latent topic z = j is
+modeled as an unlabeled corpus-wide word distribution φ(j) = P (w|z = j),
+which was drawn from a dirichlet prior distribution Dirichlet(β). The number
+8        Inducing Taxonomy from Tags: An AHC Framework
+
+of topics T is speciﬁed beforehand to adjust the granularity. Each document d is
+a mixture of topics θ(d) = P (z) with a dirichlet prior distribution Dirichlet(α).
+The generative process of each word in d is essentially a draw from the joint
+                         T
+distribution P (wi ) =         P (wi |zi = j)P (zi = j). Given the observed documents,
+                         j=1
+Gibbs Sampling algorithm[14] is usually used for posterior inference.
+    [4] modiﬁes LDA to deal with tags (keywords). Their assumption is that
+documents annotated by a tag usually have thematic information of that tag.
+For a given tag, they merge documents annotated with it into a new document,
+removing those words occurred only once. After the standard LDA training,
+new documents are folded-in to the trained model by an extra run of Gibbs
+Sampling algorithm. Finally, a tag-topic distribution for each new document is
+estimated. Jenson-Shannon divergence or cosine similarity measure could be used
+to calculate the divergence between any two tag-topic distributions.
+
+4.2    Tag Proximity Measure
+Based on the above model, our tag proximity measure is chosen just as the diver-
+gence between tag-topic distributions: if we think a tag-topic distribution over T
+topics as the tag’s coordinate in a T -dimensional thematic space. The divergence
+between two tag-topic distributions can be understood as the thematic space co-
+ordinate distance between the two tags. So it becomes clear that such a proximi-
+ty measure exploits semantic (thematic) correlation among tags. Based on that,
+sup(m) is deﬁned as the most central point of cluster m in the thematic space,
+which ensures that a supertype can thematically represents the whole cluster. In
+other words, sup(m) ﬁnds the data point index arg min{ dj ∈m proximity(i, j)}.
+                                                        i
+After integrating with the topic model, AHCTC can hierarchically cluster tags
+that are thematically similar and pick the most central tag in the thematic space
+as the supertype for each cluster. Notice the diﬀerence between our method and
+[3][4] is that we don’t have to tell which tag is more general from the topic model,
+which is not what a topic model good at.
+
+
+5     Experiment
+Ohloh5 is a popular online open source software directory and community plat-
+form whose user number has exceeded 1,500,000. It provides information on
+more than 500,000 open source software projects. In the proﬁle of each project,
+there is a brief description along with other valuable information like develop-
+ment history and technical features. Being a social tagging website, its users are
+given the freedom to edit this information and to tag the projects. A typical
+project proﬁle in Ohloh is depicted in Fig.5. To browse projects by tags, users
+can either pick from the ﬂat tag list or use keyword search for sifting. However,
+such a ﬂat list does not give the conceptual scope of each tag nor the possible
+5
+    http://www.ohloh.net/
+                       Inducing Taxonomy from Tags: An AHC Framework           9
+
+
+
+
+           Fig. 5. Part of project proﬁle of the Mozilla Firefox in Ohloh
+
+
+relationships among several tags. A tag taxonomy will apparently do a better
+job. Based on such a requirement, we choose Ohloh as our dataset to validate
+our tag taxonomy construction algorithm.
+    Dataset and Parameter Setting. From Ohloh, we have crawled 10,000
+open source software project proﬁles and extracted their descriptions and tags.
+Suﬀering from the common ﬂaws of all folk knowledge, tags might be poor
+phrased or too esoteric and some are even meaningless. We omit tags with less
+than 300 references and manually delete the meaningless tags ‘1’, ‘???’, ‘????’,
+‘?????’ which somehow are widely adopted in Ohloh. The result after prepro-
+cessing is a set of 267 tags. For topic modeling, we set the number of topics at
+60 and iterate 2000 times in the Gibbs Sampling process.
+    Baseline methods. We compare AHCTC with two of the published meth-
+ods on the same dataset. For comparison with set theory based methods, we
+choose the ontology induction algorithm proposed in [2] as our baseline. Since
+their method is based on tag subsumption, we use the shorthand SUBSUME to
+stand for their method. Ohloh does not provide author information of each tag,
+so we use KR = (G = R, M = T, I) as the projection from a folksonomy onto a
+formal context, details are given in the original paper. We set the parameters at
+the best setting given by the authors, i.e.,λ = 0.95, θs = 0.00001, θc = 0.15 and
+the maximum number of random walk iteration equals 1000.
+    For comparison with topic model based methods, we choose the LSHL al-
+gorithm proposed in [4] as the baseline. The other algorithm in [4], GSHL, is
+just a modiﬁed version of LSHL aiming at a diﬀerent goal. Their experiment
+use keywords of academic paper abstracts as Concepts while here we use the
+267 Ohloh tags to take their places. Parameters are also set at what the original
+paper suggests, T Hs = 0.6, T Hd = 0.35, T Hn = 0.4 and the number of topics
+for topic modeling is set to 60.
+    Experiment result. The resultant taxonomies are shown in Fig.6. Since
+the space is limited, only the framework subtree of our result is depicted. For
+result of LSHL algorithm, the library subtree is chosen since it has suﬃcien-
+10             Inducing Taxonomy from Tags: An AHC Framework
+
+                                                                                                                                         c#
+
+
+                                                                                                             library                   haskell
+
+
+                                                                                                                                    development
+
+
+                                                       j2ee                       jsf                                                  module
+
+
+                     api                               jpa                                                                              cms
+                                                                                                             struts
+
+                   python                              jsp                      workflow                                           dynamic_content
+                                                                                                           framework
+
+                   source                              orm                                                                           application
+
+                                  hibernate                                                                 apache
+                                                                                                                                   object_oriented
+                 visualization                        spring
+                                                                                                              mvc
+                                                                                                                                        oop
+                  windows                              sql
+                                                                                                           opensource
+     library
+                                                                                               java                                   template
+                     xml                              struts
+                                                                                                            hibernate
+                                                                                                                                        free
+                     java          eclipse           groovy
+                                                                                                              j2ee
+
+
+                    code          general            maven
+                                                                                                            database                    orm
+
+
+                 development        ide                                                                      spring
+
+
+                  framework         ajax            component                                                oracle
+
+
+                                 opensource                                                                   rest
+
+
+                 (a) part of LSHL java subtree                                              (b) SUBSUME library subtree
+                                                                                                jsf                       jsp
+
+
+                                                                   j2ee                       spring
+
+
+                                                                   java                       general
+
+
+                                                                    jpa                        xml
+                                      hibernate
+                                                                   json                         xslt
+                                                                                                                          sql
+                                                                   orm                        oracle
+                                                                                                                        database
+                                                                  groovy
+
+
+                                                                opensocial
+
+
+                                                                    rest                    webservices
+
+
+                                       apache                      atom
+
+
+                                           mvc                 authentication
+
+
+                    framework              oop                  webservice
+
+
+                                     opensource                    php5                    zendframework
+
+
+                                           rails                rubyonrails
+
+
+                                           struts
+
+
+                                           (c) AHCTC framework subtree
+
+                                 Fig. 6. Part of the resultant taxonomies
+                        Inducing Taxonomy from Tags: An AHC Framework           11
+
+t overlapped tags with AHCTC framework subtree. We can see from Fig.6(a)
+and Fig.6(c) that despite some parts, the two trees are diﬀerent in their struc-
+tures. The AHCTC framework subtree apparently classiﬁes the tags according
+to the technical framework they belong. In the LSHL library subtree, tags are
+ﬁrst classiﬁed by diﬀerent types of programming libraries. For example, in the
+AHCTC framework subtree hibernate is classiﬁed as a kind of framework but in
+LSHL it is deemed as a java library. The two taxonomies are of diﬀerent facades.
+They complement one another and are both valuable in disclosing tag seman-
+tic structure. If these machine-learned taxonomies are to be used as prototypes
+helping ontology engineers to build a well-deﬁned taxonomy, both the resultant
+taxonomies will be needed in order to provide a comprehensive picture.
+    The SUBSUME taxonomy seems rather ﬂat, many tags appear as the root’s
+children. This coincides with experiment results and illustrations given in the
+original paper. In fact, this taxonomy takes 91 out of 267 tags as the children of
+root java, including most of the tags in AHCTC framework subtree. To make a
+visual comparison with the other two subtrees, we can only render an excerpt of
+the java tree consisting of only pertinent tags. In Fig.6(b) the induced edges seem
+reasonable individually, but the whole taxonomy is too ﬂat to be informative. We
+believe the cause is that SUBSUME algorithm does not exploit text of tagged
+documents.
+   Quantitative Evaluation. In order to make a convincing quantitative e-
+valuation, we have to do multiple experiments for each of the three algorithms.
+We conduct 3 AHCTC experiments each time with a diﬀerent tag similarity
+measure, Jenson-Shannon divergence (JS), cosine similarity (COS) and KL di-
+vergence. For the LSHL taxonomy which also needs to calculate a tag similarity
+score, JS and COS as the only measures proposed in the original paper are e-
+valuated respectively. We fail to conduct multiple versions of the SUBSUME
+experiment since the algorithm do not have any replaceable building block.
+    To evaluate a tag taxonomy is diﬃcult, because several complementary tax-
+onomies might exist. However, several related works have tried in designing ef-
+fective taxonomy evaluation methods. [2] uses the concept hierarchy from Open
+Directory Project as the ground truth to validate their learned ontology. In com-
+paring the two hierarchies, both lexical and taxonomical precision and recall are
+evaluated. [4] asks domain experts to evaluate the correctness of each edge in-
+dividually, and precision is deﬁned as the proportion of correct edges in all the
+learned edges.
+    Our quantitative evaluation considers both these techniques. First, we ask 20
+students to judge the correctness of each edge in a taxonomy. They are given 3
+days to ﬁnish this task, and are encouraged to consult any accessible knowledge
+source for tags they don’t understand. We use the precision measure proposed
+in [4] to calculate edge correctness. We calculate the average value and standard
+deviation of the edge correctness. The results are given in TABLE 1. All AHCTC
+taxonomies have high average edge correctness compared to other results, and
+the AHCTC-KL taxonomy has the highest. AHCTC-JS and LSHL-COS tax-
+12      Inducing Taxonomy from Tags: An AHC Framework
+
+onomies have relatively higher standard deviations, which means many of the
+edges are indeterminate so judges make quite diﬀerent judgements.
+
+
+               Table 1. Edge Correctness Judged by Human Experts
+
+                                            Avg.        S.d.
+                             LSHL-JS        0.7319 0.0935
+                            LSHL-COS        0.6888 0.1313
+                            SUBSUME         0.6897 0.0639
+                            AHCTC-KL 0.7940 0.0432
+                            AHCTC-JS        0.7895 0.1213
+                           AHCTC-COS 0.7519 0.0879
+
+
+
+     To consider the correctness of each edge individually is not fully appropriate.
+We refer to the taxonomical precision measurement proposed in [2]. The golden
+truth is chosen as the sof tware subtree of the Open Directory Project concept
+hierarchy. This subtree covers 179 out of 267 tags we are concerning, which is
+a 67.29% lexical precision. We also apply the taxonomical metrics deﬁned in
+[2]. The taxonomical precision, recall and F-measure (T P , T R, T F ) for diﬀerent
+experiments are given in TABLE 2. AHCTC with KL divergence gets the highest
+value on all three metrics.
+
+
+                  Table 2. Taxonomical Quantitative Evaluation
+
+                                       TR          TP          TF
+                        LSHL-JS      0.0194    0.0235      0.0212
+                       LSHL-COS      0.0244    0.0296      0.0268
+                       SUBSUME       0.0267    0.0393      0.0318
+                      AHCTC-KL 0.0525 0.0514 0.0519
+                       AHCTC-JS      0.0370    0.0334      0.0351
+                      AHCTC-COS 0.0306         0.0328      0.0317
+
+
+
+    Discussion The above experiments and evaluations demonstrate the useful-
+ness and eﬀectiveness of AHCTC algorithm, given the existence of similar meth-
+ods: through qualitative evaluation, we show that AHCTC discovers valuable
+tag structures that are diﬀerent from those discovered by any existing algorith-
+m. Quantitative metrics suggest that AHCTC can construct better taxonomies.
+    As we have mentioned, parameters in SUBSUME and LSHL experiment are
+set at the practical best settings suggested by original papers. However, au-
+thors didn’t guarantee that those settings are always the best regardless of what
+                         Inducing Taxonomy from Tags: An AHC Framework              13
+
+dataset being used. For this reason, we have actually tested several other com-
+binations of parameter values. It turns out that the best settings still practically
+outrun other settings in our dataset in terms of the quality of resultant tax-
+onomies.
+    It shall be noted that evidence given by our quantitative evaluations is still
+weak in measuring how ‘good’ a taxonomy is: edge correctness considers whether
+each individual edge is correct and can not measure the correctness of an entire
+taxonomy. Taxonomical metrics gained by comparing against a gold taxonomy
+is not persuasive, given that several complementary taxonomies might exist. It is
+also the reason why metrics in TABLE 2 are quite small. Taxonomy evaluation
+is still an open issue to be investigated in the future.
+
+
+6   Conclusion
+Many research eﬀorts have been spent on inducing a taxonomy from a set of
+tags. This paper proposes a novel approach based on agglomerative hierarchical
+clustering, which can eﬀectively skip the error prone step of calculating each
+tag’s generality. A topic model is integrated into the AHC framework to disclose
+thematic correlations among tags. The experiment is built on top of data from
+Ohloh, an online social network software directory. With qualitative and quanti-
+tative evaluations, we demonstrate usefulness and eﬀectiveness of the proposed
+method, after comparing with two representative previous works.
+
+
+7   Acknowledgement
+This research is supported by the National Science Foundation of China (Grant
+No.60903043), the National High Technology Research and Development Pro-
+gram of China (Grant No. 2012AA010101) and the Postgraduate Innovation
+Fund of University of Defence Technology (Grant No.120602). Our gratitude
+goes to authors of [4], Wang Wei and Payam Barnaghi, for their help in provid-
+ing us the details of LSHL algorithm.
+
+
+References
+ 1. Staab, S., Studer, R., eds.: Handbook on Ontologies. 2. edn. Springer, Berlin
+    (2009)
+ 2. Liu, K., Fang, B., Zhang, W.: Ontology emergence from folksonomies. In Huang,
+    J., Koudas, N., Jones, G.J.F., Wu, X., Collins-Thompson, K., An, A., eds.: CIKM,
+    ACM (2010) 1109–1118
+ 3. Tang, J., fung Leung, H., Luo, Q., Chen, D., Gong, J.: Towards ontology learning
+    from folksonomies. In Boutilier, C., ed.: IJCAI. (2009) 2089–2094
+ 4. Wang, W., Barnaghi, P.M., Bargiela, A.: Probabilistic topic models for learning
+    terminological ontologies. IEEE Trans. Knowl. Data Eng. 22(7) (2010) 1028–1040
+ 5. Navigli, R., Velardi, P., Faralli, S.: A graph-based algorithm for inducing lexical
+    taxonomies from scratch. In Walsh, T., ed.: IJCAI, IJCAI/AAAI (2011) 1872–1877
+14      Inducing Taxonomy from Tags: An AHC Framework
+
+ 6. Russell, S.J., Norvig, P.: Artiﬁcial Intelligence - A Modern Approach (3. internat.
+    ed.). Pearson Education (2010)
+ 7. Heymann, P., Garcia-Molina, H.: Collaborative creation of communal hierarchical
+    taxonomies in social tagging systems. Technical report, Computer Science Depart-
+    ment, Standford University (April 2006)
+ 8. Blei, D.M., Ng, A.Y., Jordan, M.I.: Latent dirichlet allocation. Journal of Machine
+    Learning Research 3 (2003) 993–1022
+ 9. Itti, L., Baldi, P.: Bayesian surprise attracts human attention. In: NIPS. (2005)
+10. Brooks, C.H., Montanez, N.: Improved annotation of the blogosphere via auto-
+    tagging and hierarchical clustering. In Carr, L., Roure, D.D., Iyengar, A., Goble,
+    C.A., Dahlin, M., eds.: WWW, ACM (2006) 625–632
+11. Tan, P.N., Steinbach, M., Kumar, V.: Introduction to Data Mining. Addison-
+    Wesley (2005)
+12. Blei, D.M., McAuliﬀe, J.D.: Supervised topic models. In Platt, J.C., Koller, D.,
+    Singer, Y., Roweis, S.T., eds.: NIPS, Curran Associates, Inc. (2007)
+13. Blei, D.M., Griﬃths, T.L., Jordan, M.I.: The nested chinese restaurant process
+    and bayesian nonparametric inference of topic hierarchies. J. ACM 57(2) (2010)
+14. Griﬃths, T.L., Steyvers, M.: Finding scientiﬁc topics. Proceedings of the National
+    Academy of Science 101 (2004) 5228–5235
+
\ No newline at end of file
diff --git a/res/paper/F-recommendation-CameraReady.pdf b/res/paper/F-recommendation-CameraReady.pdf
new file mode 100644
index 0000000..671b8dd
--- /dev/null
+++ b/res/paper/F-recommendation-CameraReady.pdf
@@ -0,0 +1,622 @@
+       Mining and Recommending Software Features across
+                   Multiple Web Repositories
+
+                                                 Yue Yu, Huaimin Wang, Gang Yin, Bo Liu
+                               National Laboratory for Parallel and Distributed Processing
+            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
+                          yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@163.com
+
+
+ABSTRACT                                                                            of “Internet as computer”[21][23], more and more software
+The “Internetware” paradigm is fundamentally changing the                           projects are developed, maintained and diﬀused through the
+traditional way of software development. More and more                              Internet computing environment. The Internet-based soft-
+software projects are developed, maintained and shared on                           ware repositories, such as Sourceforge.net1 , Freecode.com2 ,
+the Internet. However, a large quantity of heterogeneous                            Ohloh.com3 and Softpedia.com4 , have hosted large amounts
+software resources have not been organized in a reasonable                          of software projects, which are fundamentally changing the
+and eﬃcient way. Software feature is an ideal material to                           traditional paradigms of software development. Around the
+characterize software resources. The eﬀectiveness of feature-                       repositories, manifold reusable software resources[13] have
+related tasks will be greatly improved, if a multi-grained                          been accumulated, including code bases, execution traces,
+feature repository is available. In this paper, we propose a                        historical code changes, mailing lists, bug databases, soft-
+novel approach for organizing, analyzing and recommend-                             ware descriptions, social tags, user evaluations and so on.
+ing software features. Firstly, we construct a Hierarchical                            However, all of these valuable resources have not been
+rEpository of Software feAture (HESA). Then, we mine the                            reorganized in a reasonable and eﬃcient way to assist in
+hidden aﬃnities among the features and recommend relevant                           the activities of software development[30]. For example, a
+and high-quality features to stakeholders based on HESA.                            large proportion of projects in the above repositories have
+Finally, we conduct a user study to evaluate our approach                           not been categorized or marked with some eﬀective tags. In
+quantitatively. The results show that HESA can organize                             Sourceforge.net, there are 39.8% software projects have no
+software features in a more reasonable way compared to the                          category label and in Ohloh.com 61.68% projects have not
+traditional and the state-of-the-art approaches. The result                         tagged by users. Table 1 (according to data in mid-2011)
+of feature recommendation is eﬀective and interesting.                              presents the details about our statistical results. Consid-
+                                                                                    ering the large-scale, heterogeneous and multi-grained soft-
+                                                                                    ware resources, it is a great challenge for stakeholders to
+Categories and Subject Descriptors                                                  retrieve the suitable one.
+D.2.9 [Software Engineering]: Mining Software Reposi-                                         Table 1: Labels in open source communities
+tory; H.3.3 [Information Storage and retrieval]: Fea-                                     Repository
+                                                                                                          total    unique       ratio         ratio
+ture Model, Clustering, Query formulation                                                               projects    labels   (#label=0)   (#label=0,1)
+                                                                                          SourceForge   298,402      363       39.80%       77.00%
+                                                                                          Ohloh         417,344    102,298     61.68%       69.89%
+General Terms                                                                             Freecode       43,864     6,432      8.61%        20.60%
+                                                                                      As a kind of visible attributes which capture and identify
+Algorithms, Human Factors
+                                                                                    commonalities and diﬀerences in a software domain, Fea-
+                                                                                    ture[3][15] is an ideal material to represent the software re-
+Keywords                                                                            sources. For example, when a company wants to develop a
+Mining Software Repository, Domain Analysis, Feature On-                            new commercial software product about Video-Player, do-
+tology, Recommender System                                                          main analysts might evaluate user comments to pick out
+                                                                                    outstanding competing products, analyze and extract the
+                                                                                    reusable feature assets, combine the related function points
+1. INTRODUCTION                                                                     and design a novel feature model. Based on the feature
+  The Internet is undergoing a tremendous change towards                            model, developers match the features with corresponding
+the globalized computing environment. With the vision                               software resources including code fragments, components
+                                                                                    and mature open source software.
+                                                                                      However, classic feature analysis techniques, such as Fea-
+                                                                                    ture Oriented Domain Analysis (FODA)[14] and Domain
+                                                                                    Analysis and Reuse Environment (DARE)[9], are heavily
+Permission to make digital or hard copies of all or part of this work for
+personal or classroom use is granted without fee provided that copies are
+                                                                                    relied on the experience of domain experts and plenty of
+not made or distributed for proﬁt or commercial advantage and that copies           1
+                                                                                      http://sourceforge.net
+bear this notice and the full citation on the ﬁrst page. To copy otherwise, to      2
+                                                                                      http://freecode.com
+republish, to post on servers or to redistribute to lists, requires prior speciﬁc   3
+permission and/or a fee.                                                              http://www.ohloh.net
+                                                                                    4
+Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                      http://www.softpedia.com
+                             Figure 1: The overview of HESA construction and feature recommendation
+
+market survey data. Hence, the feature analysis is a labor-       input limited information for the initial idea about an in-
+intensive and error-prone process. Nowadays, in order to          novative software product. When stakeholders accept some
+promote software products to users, stakeholders write some       recommended features or provide more requirements, our
+marketing-like summaries, release notes and feature descrip-      system would reﬁne the recommendations in the next stage.
+tions on the proﬁle pages via natural language, as shown in          Before describing the speciﬁc details of the underlying al-
+Figure 2. The massive number of software proﬁles can be           gorithms, an architectural overview of approach will be pro-
+treated as a kind of repository contains a wealth of informa-     vided as below. There are actually two processes concerning
+tion about social software features.                              the application of our method, i.e., the construction pro-
+   In this paper, we propose a novel approach for organizing,     cess of HESA and the process of feature recommendation to
+analyzing and recommending software features to reduce the        stakeholders. As depicted in Figure 1, the construction pro-
+costs of domain analysis. First of all, mining the hidden         cess consists of three primary modules and the input data
+semantic structure, we construct a Hierarchical rEpository        are software proﬁles collected and updated continuously by a
+of Software feAture (HESA) using an improved agglomera-           web crawler. There is a wealth of information on a software
+tive hierarchical clustering algorithm. The features are orga-    proﬁle page as shown in Figure 2. Our system can automat-
+nized as a kind of hierarchical structure in HESA. From top       ically extract social feature elements (blue boxes), softsware
+down, the semantic granularity is ﬁner and ﬁner accompa-          categories (green box) and the user evaluations (red boxes).
+nying with the increasing number of features, which can sat-         The Feature-Topic Modeler is responsible for mining the
+isfy the requirements of multi-grained reuse environments.        semantic structures hidden in social feature elements. Then,
+Then, utilizing the search engine for HESA, features in the       the HESA Constructor will merge the synonymic elements
+speciﬁc layers are retrieved and tied together to mine the        and build the feature ontology based on the semantic struc-
+aﬃnities among them. Finally, we design a novel strategy          tures. After all the raw data under our category are dis-
+to evaluate the popularity and quality of software products       posed, the construction process of HESA is ﬁnished.
+and circularly recommend features to stakeholders.                   In terms of user evaluations, the Popularity Evaluator and
+   The rest of this paper is or organized as follows. Section 2   Resource Selector can classify the software resources into
+introduces the overview of our work. Section 3 describes the      diﬀerent groups such as popular and high-quality group and
+construction of HESA in detail. We mine the hidden rela-          unpopular and low-quality group. When stakeholders input
+tionship of software features and present the novel approach      their requirements of a speciﬁc domain, the HESA Search
+of feature recommendation in Section 4. Experiments and           Engine can retrieve the features in the corresponding gran-
+analysis can be found in Section 5. Finally, we review related    ularity. Combining the feature and the diﬀerent group of
+work in Section 6 and draw conclusions in Section 7.              software resources, the system can mine the Feature-Pattern
+                                                                  based on the resource-by-feature matrix. The last module,
+                                                                  Feature Recommender, outputs a set of features to stake-
+2. OVERVIEW                                                       holders and gather their feedback. Then, according to the
+  The objective of this paper is to recommend a set of the        feedback, it will circulate the mining process and recommend
+most relevant and high-quality software features to stake-        more relevant features to stakeholders.
+holders. We have collected a massive number of social soft-
+ware features to build a Hierarchical rEpository of Software
+feAture (HESA). At the beginning, stakeholders can just           3. THE CONSTRUCTION OF HESA
+                                            Figure 2: An example of the software proﬁle
+
+  In this section, we present the key algorithms of the HESA        formation about latest threats”;
+construction. You can ﬁnd more details about our stages,               (3) “Incremental updating system minimizes the size of
+algorithms and data analysis in our previous work[30].              regular update ﬁles”;
+                                                                       These three elements present the common attribute about
+3.1    Social Feature Elements in Proﬁles                           incremental updating database, but only the word “update”
+   Social feature element is a kind of raw descriptions written     is shared by the two sentences. Thus, social feature elements
+by diﬀerent users of web repositories, which can indicate a         should be merged together by an eﬀective method.
+functional characteristic or concept of a software product.
+In this paper, all the social feature elements are extracted
+from Softpedia.com, Freecode.com and Sourceforge.net.               3.2 Feature-Topic Model
+   Due to the open, dynamic and uncontrollable natures of              According to the observation in our previous work[30], the
+the Internet[22], diﬀerent people describe the functions in         probabilistic topic model can be used to mine the semantic
+terms of their personal understanding. We face two main             structures hidden in the massive number of social feature
+challenges of the unstructured social feature elements.             elements.
+   Hybrid Semantic level: The problem of hybrid seman-                 In a speciﬁc category, such as Video-Player, all the so-
+tic level is that diﬀerent social feature elements describe a       cial feature elements in the corpus can be represented as
+common theme in diﬀerent semantic level, such as the fol-           Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes the ith ele-
+lowing descriptions:                                                ments in the corpus. Assuming that K latent topics Tk =
+   (1) “Internationalized GUI”;                                     {t1 , t2 , . . . , tj , . . . , tk } are implicit in the social feature ele-
+   (2) “Various language packs are available”;                      ments, where tj denotes the jth topic. Although a social
+   (3) “Multi-language supported: including English, Simpli-        feature element can be bound up with several topics, it may
+ﬁed Chinese, Traditional Chinese, Japanese, Korean, Ger-            put more emphasis on some topics than the others. The
+man, French, Spanish, Italian, Russian etc”;                        topic degree within fi can be represented as a K -dimensional
+   The ﬁrst two sentence describes the theme of multilingual        vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ), where pi,j is a topic
+setting in a general level. However, the last sentence present      weight describing the extent to which the topic tj appears
+more details including what kind of languages would be sup-         in fi . When pi,j = 0, fi is irrelevant to tj . Thus, the
+ported. On the one hand, the massive number of social fea-          υi , i ∈ [1, m], represented by Vm , can be used to indicate
+ture elements in diﬀerent semantic-level are good materials         the semantic structure implied in social feature elements.
+for the construction of ﬂexible granularity ontology. On the        If the Vm can be obtained, the thematic similarity measure
+other hand, it is a great challenge for the traditional meth-       would be induced for each pair of social feature elements and
+ods to cluster and reorganize these social feature elements.        the synonymic elements would be merged together. Because
+   Synonymic Element: The problem of synonymic ele-                 topic models answer what themes or topics a document re-
+ment happens when two features are used to describe some            lates to and quantify how strong such relations are, it is a
+common or very similar functional attributes.                       eﬀective way to learn Vm .
+   Some social feature elements are almost the same with               In this paper, we choose Latent Dirichlet Allocation (LDA)
+each other, such as the three elements below:                       [6] to learn Vm , because it has been shown to be more ef-
+   (1) “Simple user interface”;                                     fective for a variety of software engineering purposes[28][4]
+   (2) “User-friendly interface”;                                   than other topic models. A social feature element fi can
+   (3) “Easy and friendly user interface”;                          be viewed as a document which is preprocessed by remov-
+   Another typical problem is that each pair only shares few        ing commonly occurring words and then by stemming the
+core words, such as the following:                                  remaining words to their root form. According to category,
+   (1) “Ability to update that does not require downloading         we apply LDA to process the documents using the MALLET
+full package”;                                                      tool[19] which is an implementation of the Gibbs sampling
+   (2) “Incremental database updates and often to include in-       algorithm[10].
+3.3    iAHC: improved Agglomerative Hierarchi-                       represent the theme of c. Two metrics, similarity value and
+       cal Clustering                                                topic degree, are used to determine the medoid. Firstly, to
+  To support multi-grained reuse environment, the semantic           get the values , we calculate the similarity between ci ∈ c and
+similar social feature elements should be merged and reorga-         the centroid of c through Equation 2, where the vector υc of¯
+                                                                                                        |c|
+                                                                                                               υ
+nized as a ﬂexible hierarchical structure deﬁned as feature-         centroid is calculated by υc = i=1 i . Then, the Equation
+                                                                                                 ¯      |c|
+ontology. In this paper, we present the iAHC algorithm               3 is used to calculate the degreet based on the following two
+(Algorithm 1) integrated with the LDA.                               important observations of feature-topic distribution Vm in
+                                                                     our datasets.
+Algorithm 1 improved Agglomerative Hierarchical Clus-                                                        1
+tering                                                                           degreet = xmax +                               (3)
+                                                                                                          ˆ
+                                                                                                          k                2
+                                                                                                          r=1 (xmax −pir )
+Require:                                                                                            e            ˆ
+                                                                                                                 k
+    Fm = {f1 , f2 , . . . , fi , . . . , fm };
+                                                                                                                       ˆ
+                                                                     Where xmax is the maximum value of υi , and k is the fre-
+    feature-topic distribution Vm ;
+Ensure:                                                              quency when υi not equal to zero, and pir is any value that
+    The construction of feature-ongtology;                           not equals to zero in υi .
+ 1: M ← D                                                               Observation 1 The most probable topic reﬂects the most
+ 2: f eatureSet ← ∅                                                  prominent theme that the document (social feature element)
+ 3: repeat                                                           is about.
+ 4:     ci , cj = ﬁndTwoClosestClusters(M )                             Observation 2 The more widely and evenly distributed
+ 5:    merge ci and cj as c                                          its topics are, the higher-level the document (social feature
+ 6:    delete ci and cj from M                                       element) is.
+ 7:    add c to M                                                       In brief, Equation 3 can ensure the social feature element
+ 8:    centroid = calculateCentroid(c)                               in the coarsest granularity have the highest score degreet ∈
+ 9:    for ci ∈ c do                                                 (0, 2], where xmax ∈ (0, 1] can reﬂect the emphasis topic
+                                                                                                 1
+10:       values = Similarity(ci , centroid)                         and the formula        ˆ
+                                                                                                            ∈ (0, 1] can reﬂect the
+                                                                                           k               2
+                                                                                       e   r=1 (xmax −wir )
+11:       degreet = calculateTopicDegree(ci )
+                                                                     semantic generality.
+12:       scorem = κ · values + λ · degreet
+                                                                        The scorem is used to measure the medoid calculated as
+13:       add scorem to M edoidScore
+                                                                     the Equation of line 12, where κ and λ is the empirical co-
+14:    end for
+                                                                     eﬃcients.
+15:    medoidC = ﬁndMaximumScores(M edoidScore)
+                                                                        Finally, the medoid with the highest scorem would be se-
+16:    scoreF = Similarity(medoidC )
+                                                                     lected. Measuring the similarity for the each pair of elements
+17:    f eatureC = mergeMedoid(medoidC , scoreF )
+                                                                     in medoidC (line 15), the f eatureC (line 17) can be formed
+18:    saveFeaturetoHESA(M, f eatureC )
+                                                                     by merging distinguished social feature elements whose sim-
+19: until |M | = 1
+                                                                     ilarity score below a threshold (set to 0.38). Each iteration
+                                                                     in the repeat clause saves the M and f eatureC to HESA.
+  Initially, every social feature elements is a distinct cluster.    On the termination of the algorithm, a feature-ontology for
+Line 4-7 ﬁnds the closest two clusters ci and cj in the current      the category is constructed.
+cluster set M , and merge them into a new cluster c and                 After all the feature-ontologies under diﬀerent categories
+update M . The proximity used to measure the distance                are generated, the construction process of HESA is ﬁnished.
+between every two clusters, deﬁned as below:
+                               f i∈ci   similarity(f i, f j)         4. FEATURE RECOMMENDATION
+                               f j∈cj
+       proximity(ci , cj ) =                                   (1)     In this section, mining the hidden relationship between
+                                        |ci | × |cj |                software features, we present a novel strategy of feature rec-
+Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the      ommendation. Firstly, we classify software resources into
+divergence between any two data point. Based on LDA,                 diﬀerent groups. Then, combining the feature with the pop-
+the divergence can be understood as the thematic space               ular and high-quality resources, we use association rules to
+coordinate distance between the two elements. There are              mine the feature-patterns. Finally, analyzing the hidden as-
+several ways to calculate the divergence between any two             sociations between the features, we can recommend relevant
+feature-topic distributions, such as cosine similarity, Jenson-      features to stakeholders.
+Shannon divergence and Kullback-Leibler divergence. Tak-
+ing cosine similarity as an example, the Equation is shown
+                                                                     4.1 Software Resource Evaluation
+as below:                                                              When users try out a kind of software resource from web
+                                         υi · υj                     repositories, they may give evaluations according to their ex-
+               similarity(fi , fj ) =                                perience. Taking software projects in Sourceforge.net, Soft-
+                                      ||υi || ||υj ||
+                              k
+                                                                     pedia.com, Ohloh.com and Freecode.com as an example, we
+                                                            (2)
+                              r=1 pir × pjr                          have extracted a large number of user’s evaluations from
+                  =
+                          k     2          k     2                   the software proﬁles including rating, vote, downloads, and
+                          r=1 pir ×        r=1 pjr
+                                                                     subscriptions as shown in table 2.
+Where k is the topic number and p is the probability value             Because the core services of the web repository are diﬀer-
+of υ.                                                                ent, there are diﬀerent types of user evaluation to measure
+   Line 8-14 pick out a set of social feature elements from          the popularity and quality. Some giant forges like Source-
+the new cluster, deﬁned as medoid, which can be used to              forge.net host a massive amount of software source code,
+                                                  Table 2: User evaluation in software proﬁles
+                         Project Name         Repository    Rating (#Raters)    Vote (#Voters)    #Downloads   #Subscriptions
+                         Hard Disk Sentinel    Softpedia      3.7 Stars (42)                        19,347
+                         Mozilla Firefox      Sourceforge     4.0 Stars (60)                         332
+                         Mozilla Firefox        Ohloh       4.4 Stars (3,492)                                      12,227
+                         Chromium               Ohloh        4.5 Stars (538)                                        1,883
+                         PostgreSQL            Freecode                         145 Score (153)                      755
+                         phpMyAdmin            Freecode                         202 Score (213)                      956
+
+so the code #Downloads is adopted to quantify the project
+popularity. However, the core service of some repositories
+is providing social directories such as Ohloh.com. Thus, the
+#Subscriptions is used to measure the project popularity.
+   In addition, the Rating and Vote can reﬂect the quality of
+the software project. Most of the repositories use the Rating
+from 1 to 5 stars to measure the project quality. Hence,
+we convert the Vote into a ﬁve-point scale by the following
+formula, where is the reliability of the web repository.
+                                   Vote
+                   Rating = ·             ×5                        (4)
+                                  #Voters
+  For example, if sets to 1, the Vote of PostgreSQL in
+Freecode.com can convert to 4.74 points Rating by the for-
+           145
+mula: 1 × 153 × 5 ≈ 4.74.
+  Moreover, a project may have several diﬀerent ratings
+when it is hosted across multiple repositories. In this case,                     Figure 3: Part of the feature-pattern in Video-Player domain
+to lower the users’ personal bias, we choose the rating based
+                                                                                generate the feature-pattern based on the association rule
+on most users’ records. As depicted in Table 2, our system
+                                                                                learning[11][29].
+automatically select 4.4 Stars in Ohloh.com to represent the
+                                                                                   Let F = f1 , f2 , . . . , fm be a set of item in the resource-
+quality of Mozilla Firefox 56 , because it is rated by more
+                                                                                by-feature matrix. An association rule is an implication of
+users (3,492) than the rating in Sourceforge.net (60).
+                                                                                the form {X ⇒ Y }, where X ⊂ F , Y ⊂ F and X ∩ Y = ∅.
+                        #Downloads                                              The σ(X), called support count, is used to get the is the
+    Rankingpq = α ·                   × β · Rating                  (5)
+                      MAX(#Downloads)                                           number of transactions that contain the X itemset. There-
+                                                                                fore, support can indicate the frequency and the association
+  Then, synthesizing the popularity and the quality, we use                     degree of the itemsets, deﬁned as below:
+the Equation 5 to rank the software projects, where α and
+β (α · β = 1) are the empirical coeﬃcients used to balance                                                                  σ(X ∪ Y )
+                                                                                                   support(X ⇒ Y ) =                         (6)
+the popularity with the quality. The #Downloads can be                                                                         |F |
+replaced by the #Subscriptions and the Rankingpq ∈ (1, 5].
+                                                                                   The feature-pattern is a kind of directed graph, which can
+  In this paper, we pick up the software projects over a
+                                                                                be represented as GF P = V, E , where V is a set of feature
+Rankingpq threshold. Actually, the software resources can
+                                                                                itemsets and E is a sub set of E(V ), E(V ) = {(u, v)|u, v ∈
+be divided into any number of groups, such as popular group,
+                                                                                V }. The element e of E is the a pair of vertices and the
+high-quality group, unpopular group and low-quality group.
+                                                                                conf idence is the weight assigned to the arcs. As shown in
+Combining with the features and diﬀerent groups of soft-
+                                                                                Equation 7, conf idence indicate the percentage of transac-
+ware resources, we can mine the hidden feature pattern and
+                                                                                tions containing a given itemset that also contain the other
+recommend relevant features more accurately. Furthermore,
+                                                                                speciﬁc itemset.
+the software resources are manifold, such as software com-
+ponents, code fragments, bug reports and so on. Based on
+the feature location technique, we can recommend these re-                                                      σ(X ∪ Y )   support(X ∪ Y )
+                                                                                  conf idence(X ⇒ Y ) =                   =                 (7)
+sources to stakeholders. We really expect to do this research                                                     σ(X)        support(X)
+in future work.
+                                                                                   For example, in Table 3, the support(N o.21 ⇒ N o.41) =
+4.2      Feature Pattern Mining                                                 1/4 and the conf idence(N o.21 ⇒ N o.41) = 1/3. In Figure
+                                                                                3, the edge e = {(21), (21, 67)} represent the association rule
+   We merge the software projects and the software features
+                                                                                {N o.21 ⇒ N o.67} and the weight 0.3429 is the conf idence
+into a resource-by-feature matrix and a series of implicit fea-
+                                                                                of this rule.
+ture rules can be discovered. As illustrated in Table 3, the
+                                                                                   Firstly, we use Apriori algorithm [11] to generate the fre-
+features about Video-Codec and Customizable Option are es-
+                                                                                quent itemsets (support satisﬁes a threshold 0.35) as the ini-
+sential for a new products in the Video-Play domain, because
+                                                                                tial value of V . Then, we add the infrequent itemsets except
+the most of competing software implement these functional-
+                                                                                the item within frequent itemsets (support below a thresh-
+ities. The No.35 may be the latest and novel feature in this
+                                                                                old 0.05) to the V . Finally, we connect the nodes together
+domain, because only a few of high-quality products own this
+                                                                                based on the association rules and allocate the weights of
+functionality. In this paper, we deﬁne the Feature-Pattern
+                                                                                the edges in terms of their conf idence values.
+to represent the relationship between software features and
+                                                                                   Figure 3 illustrates a part of feature-pattern in the Video-
+5
+    http://www.ohloh.net/p/ﬁrefox                                               Player domain. The solid lines show the connections of the
+6
+    http://sourceforge.net/projects/ﬁrefox.mirror/                              frequent itemsets. We discover that the subgraphs about
+some fundamental features always have the homogeneous                             is (21,41,63,67). Similarly, if we set the minconf to 0.75,
+weights and they are much ﬂatter than the subgraphs of                            the feature No.35, No.63, No.67, No.13 would be selected
+common features. In a speciﬁc domain, the fundamental                             out one by one.
+features is implemented by the most of software such as                              Feature recommadtion is a iterative process. Once users
+the feature No.21 about video-codec in the Video-Player do-                       choose the recommended features or give their feedback, our
+main, so it have the high support and widely co-occur with                        system will reﬁne the recommendations in the next stage.
+other features, which leads the subgraph to become ﬂat. If a
+connection contains a element of the infrequent itemsets, we                      Algorithm 2 a breadth-ﬁrst recommendation algorithm
+use the dotted lines to represent it. We ﬁnd that the infre-
+quent features may be some innovative functionalities, such                       Require:
+as the feature No.13 about displaying video in customized                             req the feature set of you need;
+multiple screens. Thus, the connections between infrequent                            minconf the threshold of the conf ident; GF P the fea-
+and fundamental features are signiﬁcant to the feature rec-                           ture pattern graph;
+ommendation.                                                                      Ensure:
+       Table 3: An example of resource-by-feature matrix                              recSet a set of features recommended to users;
+                 Feature
+                                                                                   1: reqItem ← matchItemsets(req)
+                            No.211 No.352 No.373 No.414 No.635 No.676              2: recSet ← reqItem
+ Software
+          nDVD                 0       0       1        1       1         0        3: if reqItem = f undSet then
+       FLV Player              1       0       1        1       1         0        4:    maxconftmp ← getMaxWeight(E(reqItem))
+  Aviosoft DTV Player          1       1       0        0       1         1
+   Mac Blu-ray Player          1       0       0        1       1         1        5:    updateConﬁdences(E(reqItem), maxconftmp )
+ 1
+   Support multi-formats of video ﬁles such as FLV, MPEG4, DIVX, HD-               6:    addConnections(req, inf reqSet)
+   MOV, M2TS, MKA, 3GPP and so on.                                                 7: end if
+ 2
+   Smart stretch lets video smart ﬁt on all monitor with diﬀerent aspect ratio,
+   avoid video loss or distortion.                                                 8: T set ← getInitialRecSet(GF P (reqItems), minconf )
+ 3
+   Title repeat, chapter repeat, AB repeat function that lets you set your         9: repeat
+   favorite scenes for instant repeat.
+ 4
+   Fast Forwards and Backwards with Customizable Speeds.                          10:    recSet ← recSet ∪ searchNextDepthSet(T set)
+ 5
+   You can easily conﬁgure every option of the Player by using a nice pref-       11: until GF P END
+   erences dialog.
+ 6
+   Brightness, contrast, hue, saturation and gamma settings.
+                                                                                  12: return recSet
+
+4.3     Feature Recommendation Algorithm
+   When a user input his requirements, the system convert
+the requirements to a set of features which is the same as                        5. EMPIRICAL EVALUATION
+the preprocessing of raw social feature elements. If it can                         In this section, we present our dataset and experiment
+be matched with the any one of the itemsets in the feature-                       setting, research questions and answers, and describe some
+pattern, the system begin the process of feature recommen-                        threats to validity.
+dation. Algorithm 2 present a breadth-ﬁrst recommenda-
+tion algorithm, where the input are user requirements, the                        5.1 Dataset and Experimental Setting
+minimum conf idence and the feature-pattern. The output
+                                                                                     Dataset: We have collected 187,711, 432,004 and 45,021
+recSet is a set of relevant feautres for recommendation.
+                                                                                  projects’ proﬁles from Softpedia.com, Sourceforge.net and
+   We ﬁrstly initialize the recSet with the matched itemset
+                                                                                  Freecode.com respectively. Compared with the other two
+(Line 1-2). If the matched itemset equals a fundamental
+                                                                                  repositories, the quantity of projects from Freecode.com is
+feature or feature set, we should update the feature-pattern
+                                                                                  relatively small. Thus, we just adopt projects in Softpe-
+GF P . Line 4-5 ﬁnd the maximum weight maxconftmp within
+                                                                                  dia.com and Sourceforge.net for the experiment.
+the edges E(reqItem) and update the weight wi by using
+                                                                                     The social feature elements have been classiﬁed into 385
+blew formula:
+                                                                                  categories and we randomly choose the data of 6 unique cat-
+                                 wi
+             weightnew =                  ∈ (0, 1]       (8)                      egories to evaluate our method including Antivirus, Audio-
+                            maxconftmp                                            Player, Browser, File-manger, Email and Video-Player. Fur-
+   For example, as shown in Figure 3, when we matched                             thermore, the social feature elements are preprocessed by
+the feature No.21, we can ﬁnd 0.4571 is the maxconftmp of                         removing commonly occurring words and then by stemming
+E(reqItem) and update the weight(0.3714) of {(21), (21,41)}                       the remaining words to their root form. To ensure the qual-
+              0.3714
+to 0.8125 = 0.4571 . Therefore, although user set the minconf                     ity of data, we omit the preprocessed data with less than
+over 0.75, the feature No.41 also can be recommended.                             6 words. In each category, we choose hundreds of candi-
+   In addtion, Line 6 associate the E(reqItem) with the in-                       date projects to ﬁnd the popular and high-quality software
+frequent itemsets, which make some interesting features can                       in the two repositories. Table 4 presents the details about
+be recommended to users. Then, we merge the itemsets                              our experiment dataset.
+into the recSet, whose the conf idence values are over the                           Parameter Setting: As shown in Table 4, for LDA, the
+minconf and use the breadth-ﬁrst search strategy to ﬁnd                           number of topics K was empirically set as diﬀerent value,
+all relevant features (Line 8-12).                                                and the hyper-parameters α and β were set with α = 50/K
+   For example, supposing we begin with {21}, we would up-                        and β = 0.01 respectively, and the iteration of Gibbs Sam-
+date the weights of {(21), (21,37)}, {(21), (21,41)}, {(21),                      pling was set as 1000. In addition, the coeﬃcients κ and λ
+(21,63)} and {(21), (21,67)} and the subgraph of the fea-                         of Algorithm 1 were set as κ = 0.7 and λ = 0.3. We treat
+ture No.35 is added. Then, if we set the minconf to 0.8, we                       the popularity is as important as the quality for a software
+would retrive (21,41), (21,63), (21,63,67) step by step. Fi-                      project, so we set α = 1 and β = 1 (Equation 5). The
+nally, we merge them together and the recommendation set                          Rankingpq threshold is set as 3.0.
+                                                Table 4: Preprocessed experiment datasets
+
+                                Category      #Feature sp     #Feature sf   #Project sp   #Project sf   #Topic
+                              Antivirus          2919            1105           667          435          40
+                            Audio-Player         3714            1283           379          530          60
+                               Browser           3010             831           344          177          40
+                            File-Manager         2270             970           330          177          40
+                                Email            8511            1050           823          204          80
+                            Video-Player         3318            2697           379          530          60
+
+5.2    Research Questions
+   To demonstrate the eﬀectiveness of the approach in this
+paper, we are interested in the following research questions:
+   RQ1 How accurate is the clustering result of iAHC? Are
+the hierarchical structures of HESA reasonable?
+   RQ2 What the popular and high-quality projects look
+like? What rules can be mined based on the feature-pattern?
+   RQ3 Are the recommendations from our approach are
+reasonable and eﬀective?
+                                                                                                (a) the average value
+5.3    Cross-Validation Design of the User Study
+  The cross-validation limits potential threats to validity
+such as fatigue, bias towards tasks, and bias due to unrelated
+factor. We randomly divided the 30 students from computer
+school of NUDT into three groups to evaluate the questions.
+Each group randomly picks up 2 categories and ﬁnishes the
+evaluations in one day, and then we summarize the result.
+
+RQ1: Clustering Result and HESA Structure. We
+choose the K-Medoids (tf-idf), a traditional and widely used
+clustering algorithm, and the Incremental Diﬀusive Cluster-
+ing (IDC), the state-of-the-art technique proposed in paper
+[8], as the baseline. Especially, the IDC use the feature
+descriptions from Softpedia.com which is the same as our                                     (b) the standard deviation
+dataset. We also use the modiﬁed version of Can’s metric[8]                                 Figure 4: The clustering results
+to compute the ideal number of clusters. Then, we retrieve
+the corresponding number of clusters from HESA for com-                       Table 5 shows that 37.58% features are reasonable, 47.48%
+parison. Precision is a percent of the reasonable elements                  partially reasonable and only 14.93% unreasonable. The
+in a cluster. Figure 4 shows the average value and standard                 mean of Likert score is 2.23, which means that the feature
+deviation of the judgments given by diﬀerent groups under                   selected out by our approach is reasonably meaningful.
+the Antivirus, Audio-Player and File-Manger categories.
+   We can see that our approach achieves the highest preci-                 RQ2: Project Evaluation and Feature-pattern. As
+sion in all three categories and relatively low deviations. The             shown in Table 6, we use our evaluation method to select out
+precisions and deviations are comparatively stable across dif-              a fraction of project synthesizing the software popularity and
+ferent categories, which shows the probability that our ap-                 the quality. We can get a reasonable number of candidate
+proach is more generalizable in diﬀerent domains. We plan                   features. Specially, to illustrate the importance of project
+to conduct more quantitative experiments in future work.                    evaluation for feature pattern mining, we lower the threshold
+   According to the six categories, participants randomly                   (1.0) in File-Manager category. Hence, we get a unnormal
+choose 30 clusters in diﬀerent layers from HESA using the                   number of itemsets which exert a negative impact on feature-
+search engine respectively. Each participant is randomly as-                pattern mining and feature recommendation.
+signed 10 layers and asked to provide a 3-point Likert score                   Figure 3 shows an example of feature-pattern under the
+for each cluster to indicate whether they agree if the feature              Video-Player, where the feature No.21 (about video-codec)
+is the most representative of all terms. Score 3 means “very                and No.63 (about user interface) is the fundamental features.
+reasonable”, Score 2 means “reasonable but also have better                 Similarly, we ﬁnd the feature about virus database updating
+one”, Score 1 means “unreasonable”.                                         is one of essential functionalities for an antivirus software.
+            Table 5: Evaluation of HESA structure
+                                                                            RQ3: Feature Recommendation. We show some mean-
+         Category     Score-3   Score-2    Score-1   Likert                 ingful and interesting case in Table 7. In the Email category,
+         Antivirus    33.3%     50.0%       16.7%    2.17                   if you input “High level ﬁlter system for spam”, our system
+       Audio-Player   39.1%     46.3%       14.6%    2.25                   can recommend 5 relevant features. The ﬁrst three features
+          Browser     36.8%      41.9%      21.3%    2.16                   are directly related to the input, but the third feature about
+       File-Manager   32.7%     52.4%      14.9%     2.18
+           Email       36.4%     52.8%      10.8%    2.26                   privacy protection is very easy to leave out. The last two
+       Video-Player    47.2%     41.5%      11.3%    2.36                   features represent the fundamental abilities under the Email
+          Average     37.58%    47.48%     14.93%    2.23                   category. From these examples, we can demonstrate our ap-
+                                                Table 6: Project Evaluation and Feature-pattern
+                               Category       #Project total      #Project ranking     Ratio     #|Itemsets|    #Feature fund
+                              Antivirus            1,082                  63            5.82%        75               7
+                             Audio-Player           909                  65            7.15%         68               13
+                               Browser              521                   57           10.94%        64                8
+                            *File-Manager           447                  192           42.95%        187              46
+                                Email              1,027                 39            3.80%          53               4
+                             Video-Player           523                   91           17.40%        68                5
+
+
+                                                         Table 7: Feature recommandations
+             Category                       Input                                                    Recommendations
+              Email          -High level ﬁlter system for spam.                 -Automatically start spam process when Windows starts.
+                                                                                           -Attachment and keyword ﬁltering.
+                                                                               -Privacy guaranteed-your emails never leave your network.
+                                                                                       -Full support for international characters.
+                                                                                        -Automatic import of local address book.
+           Video-Player       -Support multi-formats of video.              -Smart stretch lets video smart ﬁt on all monitor with diﬀerent
+                                                                                       aspect ratio, avoid video loss or distortion.
+                                                                              -Customized player supports multiple windows and screens.
+                                                                            -Play anything including movie, video, audio, music and photo.
+                                                                      -Video desktop lets you view video in true background mode like wallpaper.
+           Audio-Player              -Radio streaming.                                         -Free Lossless Audio Codec.
+                          -Easy to use and friendly User Interface.                      -Playlists for each day of week or date.
+                                                                                          -Flexible XML based skinning engine,
+                                                                              Create your own skins, or choose one of the available skins.
+                                                                                                -Contextual Help System.
+
+proach is highly signiﬁcant of the software development.                          tions system is build by using association rule mining and
+                                                                                  the k-Nearest-Neighbor machine learning strategy. Com-
+5.4   Threats to validity                                                         pared with these studies, the clustering algorithm presented
+  First, the participants manually judge the clustering re-                       in this paper is more eﬀective by mining the semantic struc-
+sults and their ratings could be inﬂuenced by fatigue, prior                      tures from social feature elements and especially focus on
+knowledge and the other external factors. These threats                           the construction of feature-ontology.
+were minimized by randomly distributing participants to the                          Ontology learning from text aims at extracting ontological
+various groups and dividing the tasks into multiple parts.                        concepts and relation from plain text or Web pages. Paper
+Second, the clustering error may exert a negative inﬂuence                        [18] developed an ontology learning framework using hierar-
+on the recommendation. Third, due to our limited datasets,                        chical cluster and association rule for ontology extraction,
+parameters used in our approach, the evaluation is not com-                       merging, and management. Jie Tang et al.[27] proposed a
+prehensive enough.                                                                generative probabilistic model to mine the semantic struc-
+                                                                                  ture between tags and their annotated documents, and then
+                                                                                  create an ontology based on it. Xiang Li et al.[16] enhance an
+6.    RELATED WORK                                                                agglomerative hierarchical clustering framework by integrat-
+   Recently, mining software repository has been brought                          ing it with a topic model to capture thematic correlations
+into focus and many outstanding studies have emerged to                           among tags. In this paper, to support multi-grained reuse,
+support various aspects of software development[12]. How-                         emphases of the feature-ontology’s construction is on the
+ever, to the best of our knowledge, fewer previous works have                     measure of similarity and granularity instead of generality.
+been done for mining software feature and especially con-                            As an indispensable type of information ﬁltering tech-
+struction of feature-ontology to manage software resources.                       nique, recommender systems have attracted a lot of atten-
+In this section, we review some previous works about feature                      tion in the past decade[17]. In the ﬁeld of collaborative
+analysis, ontology learning and recommender system.                               ﬁltering, two traditional types of methods are widely stud-
+   In feature analysis area, most approaches extract feature                      ied: neighborhood-based approaches and model-based ap-
+related descriptions from software engineering requirements                       proaches. Based on the co-occurrence matrix, neighborhood-
+and then use the clustering algorithm to identify associa-                        based[7] methods mainly focus on ﬁnding the similar items
+tions and common domain entities[2][9][25]. Mathieu Acher                         for recommendations. However, model-based approaches
+et al.[1] introduced a semi-automated method for easing the                       train a compect model to explain the data ﬁrstly, and then
+transition from product descriptions expressed in a tabu-                         predict the hidden values. Recently, the low-dimensional
+lar format to feature models. Niu et al.[24] propose an on-                       matrix approximation methods[26] are used widely in deal-
+demand clustering framework that provided semi-automatic                          ing with large scale datasets. In future work, we will design
+support for analyzing functional requirements in a product                        some comparative studies by using diﬀerent methods and it
+line. A decision support platform is proposed in paper [5] to                     is possible to help us mining much more feature patterns.
+build the feature model by employing natural language pro-
+cessing techniques, external ontology and MediaWiki sys-
+tem. However, the quantity of the existing documents is so                        7. CONCLUSION AND FUTURE WORK
+limited that the brilliance of data mining techniques can-                          The continuing growth of open source ecosystems creates
+not be fully exploited. To address this limitation, paper [8]                     ongoing opportunities for mining reusable knowledge. In
+and [20] proposed the Incremental Diﬀusive Clustering to                          this paper, we have explored the idea of mining large scale
+discover features from a large number of software proﬁles                         repositories and constructed the Hierarchical rEpository of
+in Softpedia.com. Based on the features, a recommenda-                            Software feAture (HESA) to support software reuse. Then,
+we generate the co-occurrence matrix by the features and the     [13] A. E. Hassan and T. Xie. Mining software engineering
+software projects across multiple web repositories. Finally,          data. In ICSE (2), pages 503–504, 2010.
+our approach induced the feature-pattern and circularly rec-     [14] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and
+ommend the most relevant features to stakeholders.                    A.S.Peterson. Feature-oriented domain analysis (foda)
+   In the future, we plan to improve the performance of our           feasibility study. technical report. 1990.
+method and aggregate richer software resources from soft-        [15] K. Lee, K. C. Kang, and J. Lee. Concepts and
+ware repositories. For example, Stack Overﬂow community7              guidelines of feature modeling for product line
+which is a programming question and answer websites, con-             software engineering. In ICSR, pages 62–77, 2002.
+tains abundant knowledge of software development. In addi-       [16] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu,
+tion, we will design several representative applications based        and D. Tang. Inducing taxonomy from tags: An
+on HESA, such as software resource recommender system,                agglomerative hierarchical clustering framework. In
+to support the reuse of multi-grained resources.                      Advanced Data Mining and Applications, volume 7713,
+                                                                      pages 64–77. Springer Berlin Heidelberg, 2012.
+8. ACKNOWLEDGEMENT                                               [17] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King.
+   This research is supported by the National High Technol-           Recommender systems with social regularization. In
+ogy Research and Development Program of China (Grant                  Proceedings of the fourth ACM international
+No. 2012AA011201) and the Postgraduate Innovation Fund                conference on Web search and data mining, pages
+of University of Defense Technology (Grant No.B130607).               287–296. ACM, 2011.
+                                                                 [18] A. Maedche and S. Staab. Learning ontologies for the
+9. REFERENCES                                                         semantic web. In SemWeb, 2001.
+ [1] M. Acher, A. Cleve, G. Perrouin, P. Heymans,                [19] A. K. McCallum. Mallet: A machine learning for
+     C. Vanbeneden, P. Collet, and P. Lahire. On                      language toolkit. http://mallet.cs.umass.edu, 2002.
+     extracting feature models from product descriptions.        [20] C. McMillan, N. Hariri, D. Poshyvanyk,
+     In VaMoS, pages 45–54, 2012.                                     J. Cleland-Huang, and B. Mobasher. Recommending
+ [2] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid,                source code for use in rapid software prototypes. In
+     P. Sawyer, P. Rayson, C. Pohl, and A. Rummler. An                ICSE, pages 848–858, 2012.
+     exploratory study of information retrieval techniques       [21] H. Mei, G. Huang, and T. Xie. Internetware: A
+     in domain analysis. In SPLC, pages 67–76, 2008.                  software paradigm for internet computing. Computer,
+ [3] S. Apel and C. Kastner. An overview of                           45(6):26–31, June 2012.
+     feature-oriented software development. pages 49–84,         [22] H. Mei, G. Huang, H. Zhao, and W. Jiao. A software
+     2009.                                                            architecture centric engineering approach for
+ [4] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor.                internetware. Science in China Series F: Information
+     Software traceability with topic modeling. In ICSE               Sciences, 49(6):702–730, 2006.
+     (1), pages 95–104, 2010.                                    [23] H. Mei and X. Liu. Internetware: An emerging
+ [5] E. Bagheri, F. Ensan, and D. Gasevic. Decision                   software paradigm for internet computing. J. Comput.
+     support for the software product line domain                     Sci. Technol., 26(4):588–599, 2011.
+     engineering lifecycle. pages 335–377, 2012.                 [24] N. Niu and S. M. Easterbrook. On-demand cluster
+ [6] D. Blei, A. Ng, and M. Jordan. Latent Dirichlet                  analysis for product line functional requirements. In
+     Allocation. Journal of Machine Learning Research,                SPLC, pages 87–96, 2008.
+     3:993–1022, 2003.                                           [25] S. Park, M. Kim, and V. Sugumaran. A scenario, goal
+ [7] J. S. Breese, D. Heckerman, and C. Kadie. Empirical              and feature-oriented domain analysis approach for
+     analysis of predictive algorithms for collaborative              developing software product lines. pages 296–308,
+     ﬁltering. In Proceedings of the Fourteenth conference            2004.
+     on Uncertainty in artiﬁcial intelligence, pages 43–52.      [26] J. D. Rennie and N. Srebro. Fast maximum margin
+     Morgan Kaufmann Publishers Inc., 1998.                           matrix factorization for collaborative prediction. In
+ [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang,              Proceedings of the 22nd international conference on
+     B. Mobasher, C. Castro-Herrera, and M. Mirakhorli.               Machine learning, pages 713–719. ACM, 2005.
+     On-demand feature recommendations derived from              [27] J. Tang, H. fung Leung, Q. Luo, D. Chen, and
+     mining public product descriptions. In ICSE, pages               J. Gong. Towards ontology learning from
+     181–190, 2011.                                                   folksonomies. In IJCAI, pages 2089–2094, 2009.
+ [9] W. B. Frakes, R. P. D´  llaz, and C. J. Fox. Dare:          [28] K. Tian, M. Revelle, and D. Poshyvanyk. Using latent
+     Domain analysis and reuse environment. pages                     dirichlet allocation for automatic categorization of
+     125–141, 1998.                                                   software. In MSR, pages 163–166, 2009.
+[10] T. Griﬃths. Gibbs sampling in the generative model          [29] X. Wu, V. Kumar, J. R. Quinlan, J. Ghosh, Q. Yang,
+     of Latent Dirichlet Allocation. Technical report,                H. Motoda, G. J. McLachlan, A. Ng, B. Liu, S. Y.
+     Stanford University, 2002.                                       Philip, et al. Top 10 algorithms in data mining.
+[11] J. Han, M. Kamber, and J. Pei. Data mining: concepts             Knowledge and Information Systems, 14(1):1–37, 2008.
+     and techniques. Morgan kaufmann, 2006.                      [30] Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
+[12] A. E. Hassan. The road ahead for mining software                 The construction and evaluation of hierarchical
+     repositories. 2008.                                              software feature repository. In SEKE, pages 624–631,
+                                                                      2013.
+7
+    http://stackoverﬂow.com
+
\ No newline at end of file
diff --git a/res/paper/ISPDPAW.pdf b/res/paper/ISPDPAW.pdf
new file mode 100644
index 0000000..0105a51
--- /dev/null
+++ b/res/paper/ISPDPAW.pdf
@@ -0,0 +1,460 @@
+           Ninth IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops
+
+
+                                  Trusted Computing Dynamic Attestation
+                               by Using Static Analysis based Behavior Model
+
+
+                               Fajiang Yu               Tang‡ , Yue Yu∗ , Tong Li∗ and Tong Yang∗
+                                            ∗ † , Xianglei
+                                              ∗ School of
+                                                        Computer, Wuhan University,
+                                                  Wuhan, Hubei, P.R.C. 430072
+                                                    Email: qshxyu@126.com
+                          † Key Laboratory of Aerospace Information Security and Trusted Computing,
+                                                 Ministry of Education in China
+                                  ‡ Zhejiang Provincial Testing Institute of Electronic Products,
+                                               Hangzhou, Zhejiang, P.R.C. 310012
+
+
+
+    Abstract—Current technology of trusted computing can not           and generates formal safety proofs, which is based on the
+ comply with the requirement of trusted behavior. One method           consumer’s policy. The proofs are bounded in addition to
+ for trusted computing dynamic attestation was proposed in this        source code, which usually is implemented by the compiler.
+ paper. This method uses the behavior model based on static
+ analysis of binary code. One same source code may have several        The consumer uses type based logic to check the program
+ different binary versions, this paper proposed one method of          automatically. The implementation of PCC also needs know
+ building almost the same core function model for different            program’s source code.
+ binary versions. This paper also overcame the difﬁculty that             Document [7] proposed one semantic remote attestation
+ some dynamic behaviors can not be obtained by static analysis.
+                                                                       (SRA) framework . SRA is based on trusted Java virtual
+ The paper also gave out some solutions of dynamic attestation
+ for some complex programs, such as recursion program, library         machine (Trusted VM) on client, and server attests Java
+ link program and multi threads program.                               program’s hierarchies, restricted interfaces, runtime state,
+   Keywords-trusted computing; dynamic attestation; behavior
+                                                                       input information, and etc. But there is no good solutions of
+ model; static analysis                                                building the semantic model of one program.
+                                                                          This paper mainly makes the following contributions: 1)
+                       I. I NTRODUCTION                                Behavior model is built based on static analysis of binary
+    Trusted computing is an information system security solu-          code. 2) This paper proposed one method of building almost
+ tion for the basic computing security problem [1]. The tech-          the same core function model for different binary versions
+ nology which trusted computing platforms currently adopted            of same code. 3) This paper also overcame the difﬁculty
+ guarantees the integrity of its feature code and conﬁguration         that some dynamic behaviors can not be obtained by static
+ data is the same as expected, before the components of the            analysis. 4) The paper also gave out the solutions of dynamic
+ computing platform take control of the main CPU, which                attestation for some complex programs.
+ is called trusted computing static attestation, but it does not
+ comply with the requirements that the behaviors are trusted.             II. S TATIC A NALYSIS BASED P ROGRAM B EHAVIOR
+ We need to verify the dynamic behavior of components as                                  M ODEL B UILDING
+ well, which is called trusted computing dynamic attestation.
+                                                                         Program runtime behavior attestation is the main part
+    The related researches mainly include MCC (Model Car-
+                                                                       of trusted computing dynamic attestation. The ﬁrst step of
+ rying Code), PCC (Proof Carrying Code), semantic remote
+                                                                       program behavior attestation is building program behavior
+ attestation, and etc.
+                                                                       model. You can see the detail stages and algorithms about
+    MCC [2] [3] was proposed by R. Sekar et al., its key
+                                                                       building trusted behavior model based on static analysis of
+ idea is: Code producer generates behavior information about
+                                                                       PE binary ﬁle in our previous work [8].
+ program security (Model), a consumer receives both the
+ model and the program from the producer. The consumer
+                                                                       A. Variance between Debug and Release Version
+ checks whether the model satisﬁes the consumer’s security
+ policy by formal reasoning. Document [4] and [5] have                   The same code is compiled with same compiler but choos-
+ done some implementations of MCC on JVM (Java Virtual                 ing different compiling options, different binary versions
+ Machine). The MCC developer should know program’s                     could be obtained, among which the most typical is Debug
+ source code, but this assumption does not always be true.             and Release version. Program behavior model constructing
+    PCC [6] was proposed by George C. Necula et al.,                   should not only support static analysis of Release version,
+ its key idea is: The producer carries analysis on code                but also the Debug version.
+
+
+978-0-7695-4429-8/11 $26.00 © 2011 IEEE                            1
+DOI 10.1109/ISPAW.2011.14
+  We use Visual C++ 6.0 for compiling one instance                  lead to the variance of sub function number in dif-
+to a Debug version, and then disassemble it by using                ferent binary versions’ behavior models. For example,
+IDA. It can be observed that the program entry point is             VS2010 invokes HeapSetInformation to set stack infor-
+_mainCRTStratup, and the forms of API calling in some               mation, while VS2005 and VC6 do not. VS2005 invokes
+sub-functions are like:                                             __security_init_cookie to initialize Cookie for pre-
+call     ds :    imp     GetVersion@0 ;
+                                                                    venting buffer overﬂow. VS2010 wraps the following API
+call     ds :    imp     OpenFile@12 ;                              sequence in a sub function sub_40250F, to accomplish
+                                                                    the same initialization of __security_init_cookie. But
+  And we use Visual C++ 6.0 for the same code to a Release          VC6 does not carry this work.
+version. It can be observed that the disassembled code’s            G e t S y s t e m T i m e A s F i l e T i m e− e t C u r r e n t P r o c e s s I d −
+                                                                                                                  >G                                    >
+entry point is start, and the API calling in some sub-                      G e t C u r r e n t T h r e a d I d − e t T i c k C o u n t−
+                                                                                                                 >G                      >
+functions is very direct:                                                   QueryPerformanceCounter
+
+call     ds : GetVersion ;                                             Besides, there are some different API callings in dif-
+call     d s : GetCommandLineA ;
+call     e s i : OpenFile ;                                         ferent program versions from different compilers. This is
+                                                                    because some same functions are implemented by different
+   So when we start constructing program behavior model             APIs. Such as VC6 and VS2005 use GetStartupInfoA to
+for Debug version, we need do some preprocessing, such as           gain the information in initiating stage, while VS2010 uses
+removing preﬁxes like __imp__ and sufﬁxes like @*.                  GetStartupInfoW. Some new compilers use extended API
+   In addition, there is also a big difference in the number        to replace the old ones, such as GetVersion used by VC6
+of sub-function between Debug and Release version.                  has already been replaced by GetVersionEx.
+   Both Debug and Release Version have a quite large                C. Modeling Management for Different Binary Versions
+number of sub functions in the disassembled result of cor-
+responding binary program. The main cause is the compiler              Although there is big variance between different binary
+will add some essential additional codes. The reason why            versions of one same code, they should have fairly same
+Debug version has more sub functions than Release is                core function behavior model.
+                                                                                                                           cdr
+that Debug version contains plenty of debug information,               We obtain the corresponding binary program (Bϕ ) with
+and must include more API calling, such as DebugBreak,              a speciﬁc compiler and compiling options to compiler
+InterlockedIncrement, and etc.
+                                                                    “empty program” (Pϕ , see Example 1), its program behavior
+                                                                                               cdr
+                                                                    model is denoted as Mϕ , which can act as a reference
+   Although there is big difference, the core function behav-
+                                                                    template when we construct model for other normal program
+ior model based on Debug version should be fairly consistent
+                                                                    with the same compiler and compiling options.
+with Release version.
+                                                                       At the time of behavioral modeling of a certain normal
+B. Variance between Different Compilers                             binary program (Bn ), we can get the speciﬁc compiler name
+                                                                    and determine Bn is a Release version or Debug version by
+   The same code is compiled with different compiler, dif-          performing a static analysis of Bn , and then Bn can be
+ferent binary versions could be obtained. We use one empty                           cdr
+                                                                    speciﬁed as Bn . We get the optimized model of Bn ,        cdr
+Win32 console program as an instance (Example 1). This                              cdr
+                                                                    denoted as Mn . Referring to the corresponding “empty
+program is compiled with Visual C++ 6.0, Visual Studio                                             cdr
+                                                                    program” behavior model Mϕ , we can remove the relevant
+2005 and Visual Studio 2010 respectively. And then we                                                                  cdr
+                                                                    parts about initialization and exit operation in Mn , the core
+disassemble these versions, the sub function numbers in the         function behavior model Mnc = Mn − Mϕ . Then the
+                                                                                                   cdr      cdr      cdr
+disassembled results of corresponding binary versions are           different binary versions of the same Pn could have fairly
+different.                                                          same core function behavior model.
+   Example 1: empty.c
+                                                                        III. P ROGRAM DYNAMIC B EHAVIOR ATTESTATION
+v o i d main ( i n t a r g c , char ∗ a r g v [ ] )
+{ return ; }                                                           After building the model of the program expected behav-
+                                                                    ior, we also need to monitor the program’s running behavior.
+   Different compilers cover API in different wraps. VS2010         We use the library of Microsoft Detours to monitor the
+covers most API in wraps as sub functions, all implementa-          program behavior, and monitor 311 core API functions in
+tions are based on sub function calling, such as sub_401E83         Ntdll.dll.
+only wrap one API EncodePointer, sub_401E83 only
+wrap one API TlsAlloc. So the behavior models of differ-            A. Preprocessing Program Behavior
+ent binary versions have different number of sub functions.            When one program runs on the operating system, some
+   To make sure program running safely, some com-                   Win32 APIs called by the program can not be obtained by
+pilers lay more emphases on initialization, which also              static analysis of the program self. We need to do some
+
+
+                                                                2
+program behaviors preprocessing, then we can use the static                      behavior model to verify w, just see whether the constructed
+analysis based program behavior model to do attestation.                         global PDA MG = (QG , ΣG , ΓG , δG , qG0 , ZG0 , FG )
+   1) Preprocessing program initialization and exit behavior                     (ZG0 = ε) can accept w.
+   When running the console program which is compiled                              Whether MG can accept w depends on whether MG can
+from Example 1 on Windows XP SP3, we can monitor the                             be transformed from the initial Instantaneous Description
+following API sequence:                                                          ID(qG0 , w, ε) to ID(pG , ε, ε) (pG ∈ FG ) by making some
+G e t F i l e T y p e − o c k R e s o u r c e−
+                       >L                     >GetCommandLineA                   moves, which is denoted as:
+
+  And the API LockResource can not be obtained by static                                            (qG0 , w, ε) ⊢∗ G (pG , ε, ε), pG ∈ FG
+                                                                                                                  M
+analysis of the corresponding binary program self.                                 ⊢MG denotes that MG make a move, including ε move
+  When we run the same program on Windows 7, the                                 and non-ε move.
+monitored API sequence is:
+GetFileType− etHandleCount−
+            >S             >GetCommandLineA                                      C. Single Thread Program Attestation
+                                                                                    On Window XP SP3, we use VC6 to compile the code
+   Obviously, the same program runs on different operating                       in Example 2, and then build the behavior model of the
+systems, some Win32 APIs called by the program are also                          corresponding binary program. After being simpliﬁed by
+different.                                                                       following the procedures described in subsection II-C, we
+   We take the API sequence called by “empty program” as                         get the core function model of Example 2’s program, Ms =
+a standard, which is used to verify the program’s actual API                     (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ), which is shown as Figure 1.
+sequence during the process of initialization and exit. And                         Example 2: ﬁle.c
+then the other API sequences left can be veriﬁed by using
+static analysis based program behavior model.                                    v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
+                                                                                   ... ...
+   2) Preprocessing complicated Win32 API behavior                                 p f 1 = (HANDLE) O p e n F i l e ( fn1 ,& of , OF READWRITE) ;
+   When one program calls some complicated Win32 APIs,                             i f ( pf1 ) {
+the system will call some other relevant APIs to complete                            r t = R e a d F i l e ( pf1 , bf1 , s i z e o f ( b f 1 ) ,& r s i z e , NULL) ;
+                                                                                     if ( rt ) {
+the complicated function. These relevant APIs also can not                             p f 2 = (HANDLE) O p e n F i l e ( fn2 ,& of , OF READWRITE) ;
+be obtained by static analysis of the program self.                                    i f ( pf2 ) {
+   For example, when running the console program which                                   r t = W r i t e F i l e ( pf2 , bf2 , s t r l e n ( b f 2 ) ,& w s i z e , NULL) ;
+                                                                                         CloseHandle ( pf2 ) ;
+is compiled from Example 1, we can monitor the following                               }
+API sequence:                                                                        }
+                                                                                     CloseHandle ( pf1 ) ;
+O p e n F i l e − e a r c h P a t h A−
+                 >S                   >SearchPathW− r e a t e F i l e A −
+                                                   >C                    >         }
+       CreateFileW− etFileTime−
+                            >G               >                                   }
+       Fil eT im e T o D o sD a t e Ti me
+
+   While carrying a static analysis of the corresponding                                                                           , Pop 0001
+binary program, we can only obtain the API of OpenFile.                                                                                   CloseHandle
+                                                                                                                               _main
+So we ﬁrstly need to preprocess the relevant APIs, then we                                                      ReadFile        -2
+can use the static analysis based program behavior model to                              Start-                     OpenFile                         _main
+                                                                                                    _main-                                                            Start-
+                                                                                           8                                                          -4
+do attestation.                                                                                       1                                                                10
+                                                                                                                _main-           CloseHandle
+   3) Preprocessing Unicode API behavior                                                                          3                             CloseHandle
+                                                                                                                                       _main-                   , Pop 0001
+   On the Windows NT-based operating system, the Win32                                                   OpenFile WriteFile
+                                                                                                                                         5
+API calling related char operation (including ANSI char                                           , Push 0001                                           _main
+                                                                                                                         _main                           -6
+and Unicode char) ultimately will call Unicode API. For                                                                   -0             CloseHandle
+
+example, if the API is GetModuleHandleA in the static
+analysis based behavior model of one program, then when                                     Figure 1.        Core function behavior model of Example 2
+running the program, we can monitor the two APIs:
+GetModuleHandleA and GetModuleHandleW. So we need                                   We run the console program which is compiled from Ex-
+to preprocess the program behavior of Unicode API, then we                       ample 2 on Windows XP SP3, and preprocess the monitored
+can use the static analysis based program behavior model to                      Win32 API sequence by following the procedures described
+do attestation.                                                                  in subsection III-A. The preprocessed API sequence (ws ) is:
+B. General Program Dynamic Attestation                                           Openfile − eadFile− penFile−
+                                                                                           >R       >O       >W r i t e F i l e −>
+                                                                                     CloseHandle− loseHandle
+                                                                                                 >C
+   The preprocessed program behavior is denoted as w =
+a1 a2 · · · an , where ai (i = 1, 2, · · · , n) is the name of Win32               The initial instantaneous description of Ms is
+API. Now we can use the static analysis based program                            ID(Start-8, ws , ε). Let us see whether Ms can accept
+
+
+                                                                             3
+ws :                                                                                           The initial instantaneous description of Mr                                        is
+                                                                                                    ′                                         ′
+             (Start-8, ws , ε) ⊢Ms ( main-0, ws , ‘0001’)                                    ID(0, wr , ε). Let us see whether Mr can accept wr :
+                                                                                                                             ′1              ′1
+             ......                                                                                         (0, ‘WriteFile’ wr , ε) ⊢Mr (1, wr , ε)
+             ( main-4, ε, ‘0001’) ⊢Ms (Start-10, ε, ε)                                                      ......
+  Start-10 is one ﬁnal state, so ws can be accepted by                                                      (3, ‘ReadFile’, ε) ⊢Mr (2, ε, ε)
+Ms . It means the program behavior during this run time                                                                  ′
+passed the dynamic attestation.                                                                 2 is one ﬁnal state, so wr can be accepted by Mr . It
+                                                                                             means the program behavior during this run time passed the
+D. Recursion Program Attestation                                                             dynamic attestation. This shows our method can solve the
+   We use one instance to illustrate how to do dynamic                                       difﬁculty of dynamic attestation for recursion program.
+attestation for a recursion program, whose source code is
+shown in Example 3.                                                                          E. Library Link Program Attestation
+   Example 3: Recursion.c                                                                       We use one link library instance (source code is in
+i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) ;                                Example 4 to illustrate how to do dynamic attestation for
+v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {                                        a library link program.
+  ... ...
+  p f i l e = (HANDLE) O p e n F i l e ( FPATH , &of , OF READWRITE) ;                          Example 4: Export function FOp in one link library
+  if ( pfile ) {
+    Recu ( i , p f i l e , r s i z e ) ;                                                     v o i d FOp ( char ∗ P a t h S , char ∗ PathD ) {
+    CloseHandle ( p f i l e ) ;                                                                ... ...
+  }                                                                                            p f S = (HANDLE) O p e n F i l e ( PathS ,& of , OF READWRITE) ;
+}                                                                                              i f ( pfS ) {
+i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) {                                    r t = R e a d F i l e ( pfS , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
+  i f ( i <=0) { . . . }                                                                         if ( rt ) {
+  else {                                                                                           pfD = (HANDLE) O p e n F i l e ( P a t h D t ,& of , OF READWRITE) ;
+    W r i t e F i l e ( p f i l e , buf , s t r l e n ( b u f ) ,& r s i z e , NULL) ;             i f ( pfD ) {
+    R e c u r s i o n ( i −1, p f i l e , r s i z e ) ;                                              W r i t e F i l e ( pfD , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
+    R e a d F i l e ( p f i l e , buf , s i z e o f ( b u f ) , &r s i z e , NULL) ;                 C l o s e H a n d l e ( pfD ) ;
+  }                                                                                                }
+  return 0;                                                                                      }
+}                                                                                                CloseHandle ( pfS ) ;
+                                                                                               }
+                                                                                             }
+  We build the behavior model of the corresponding binary
+program by following the procedures described in section II,
+                                                                                                One program uses one link library in two ways: static link
+and get the core function model of the recursion program,
+                                                                                             and dynamic link. The source code of one program bounded
+Mr = (Qr , Σr , Γr , δr , qr0 , Zr0 , Fr ), which is shown as
+                                                                                             with the static link library (Example 4) is shown in Example
+Figure 2.
+                                                                                             5.
+                                                                                                Example 5: Bounding with a static link library
+                       WriteFile                           ReadFile
+                                                                                             #pragma comment ( l i b , ” v e r D l l . l i b ” )
+                   0               1    ReadFile       2                3
+                                                                                               d e c l s p e c ( d l l i m p o r t ) v o i d FOp ( char ∗ ps , char ∗ pd ) ;
+                       , Push 0002                         , Pop 0002                        v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
+                                                                                                    ... ...
+                                                                                                   F i l e O p ( Src , Des ) ;
+            Figure 2.     Core function model of recursion program                                 return ;
+                                                                                             }
+   We run the recursion program which is compiled from
+Example 3, and preprocess the monitored Win32 API se-                                           We build the behavior model of the corresponding binary
+quence by following the procedures described in subsection                                   program from Example 4 and Example 5 by following the
+III-A. The preprocessed API sequence (wr ) is:                                               procedures described in section II, and get the core function
+                                                                                             model, Msl = (Qsl , Σsl , Γsl , δsl , qsl0 , Zsl0 , Fsl ), which is
+OpenFile
+−>W r i t e F i l e −>W r i t e F i l e −>W r i t e F i l e − e a d F i l e −
+                                                             >R              >               shown as Figure 3.
+      ReadFile− eadFile >R                                                                      We run the program which is compiled from Example
+−>C l o s e H a n d l e                                                                      5, and preprocess the monitored Win32 API sequence by
+                                                                                             following the procedures described in subsection III-A. The
+   The ﬁrst API OpenFile and the last API CloseHandle
+                                                                                             preprocessed API sequence (wsl ) is:
+are called by main(). We only use the model of recursion
+                                      ′
+function to verify the API sequence (wr ) between ﬁrst API                                   OpenFile− eadFile− penFile−
+                                                                                                      >R        >O       >W r i t e F i l e −>
+OpenFile and the last API CloseHandle.                                                           CloseHandle− loseHandle
+                                                                                                             >C
+
+
+
+                                                                                         4
+                                                       CloseHandle
+           , Push 0001
+                                                      FOp                                                          IV. A NTI - ATTACK E XPERIMENT
+                                         OpenFile      -3        CloseHandle
+        Start-     _main       FOp            WriteFile                               FOp             We use two typical attacking experiments to prove that
+          8         -0          -2                           FOp-                      -4
+                                               CloseHandle    6
+                                                                        CloseHandle                the method of dynamic attestation proposed in this paper is
+        , Push 0002        ReadFile     FOp                              , Pop 0002
+                                         -5
+                                                                                      Start-
+                                                                                                   effective.
+  FOp                    FOp
+           OpenFile                                 _main           , Pop 0001
+                          -1          , Pop 0002                                       10
+   -0                                                -1
+                                                                                                   A. DLL Hijacking
+
+         Figure 3.       Behavior model of static link library program
+                                                                                                     When one Windows program calls the API in one system
+                                                                                                   DLL, the system will search the corresponding DLL in the
+                                                                                                   system directory. This experiment uses one pseudo DLL in
+  The initial instantaneous description of Msl is                                                  system directory to launch the attack.
+ID(Start-8, wsl , ε). Let us see whether Msl can accept                                              The object being attacked is a socket program (Ps ). We
+wsl :                                                                                              build the behavior model of the corresponding binary ﬁle of
+          (Start-8, wsl , ε) ⊢Msl ( main-0, wsl , ‘0001’)                                          Ps by following the procedures described in section II, and
+                                                                                                   get its function model, Ms = (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ).
+          ......                                                                                   There has the following valid API sequence in Ms :
+          ( main-1, ε, ‘0001’) ⊢Msl (Start-10, ε, ε)
+                                                                                                   WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
+                                                                                                              >s          >h         >b    >l          >a          >
+  Start-10 is one ﬁnal state, so wsl can be accepted by                                               send− e c v − l o s e s o c k e t
+                                                                                                            >r     >c
+Msl . This shows our method can solve the difﬁculty of
+dynamic attestation for static link library program.                                                 Because the socket program has to call the APIs from
+   When one program is bounded with the dynamic link                                               ws2_32.dll, we use one “malicious” DLL to replace
+library, due to that the link library is dynamically loaded                                        the original ws2_32.dll. Except for send(), all other
+to program space, the actual address of export functions in                                        functions in the pseudo DLL are completely in the same way
+library can not be obtained by static analysis. In our future                                      like original ws2_32.dll. send() is modiﬁed as using the
+work, we will get the name of export function in link library                                      following API sequence to stole sensitive information.
+by carrying analysis of Win32 API arguments, and complete                                          OpenFile−>W r i t e F i l e − l o s e H a n d l e − e n d
+                                                                                                                                >C                    >s
+the attestation for dynamic link library program.
+                                                                                                      We run the program (Ps ) on the platform with the mali-
+F. Multi-thread Program Attestation                                                                cious ws2_32.dll, and preprocess the monitored Win32
+   We build the behavior model of one multi-thread bi-                                             API sequence by following the procedures described in
+nary program by following the procedures described in                                              subsection III-A. The preprocessed API sequence (ws ) is:
+section II, and get the core function model, Mm =                                                  WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
+                                                                                                              >s           >h         >b        >l            >a       >
+(Qm , Σm , Γm , δm , qm0 , Zm0 , Fm ).                                                                OpenFile−  >W r i t e F i l e − l o s e H a n d l e −
+                                                                                                                                     >C                    >send− e c v −
+                                                                                                                                                                 >r      >
+   The current behavioral model does not include API ar-                                              closesocket
+gument value, so there is no way to embed the automaton
+                                                                                                      Let us see whether Ms can accept ws . When Ms reads
+of each sub-thread into that of the main thread, and form a
+                                                                                                   in OpenFile, there is no path to complete the transition,
+complete global automaton.
+   Due to the irregularity of parallel programs execution                                          denoted as:
+in operating system, the API calls of each thread appear                                                                     ′                     ′
+                                                                                                            (ps , ‘OpenFile’ws , Zs β) ⊬∗ s (qs , ws , γβ)
+                                                                                                                                        M
+alternately, and the appearance order of API also is different
+                                                                                                                                           ′
+at each run-time. In addition to record the API name, we                                              At this time, ps ∈ Qs , ‘OpenFile’ws ̸= ε, Zs β ̸= ε.
+                                                                                                                       /
+should also record the thread ID who calls the corresponding                                       This means Ms can not accept ws , and Ps ’s running
+API when monitoring the dynamic behavior of multi-thread                                           behavior can not pass the dynamic attestation. We can see
+program.                                                                                           our method can protect the system against DLL Hijacking
+   We do the dynamic attestation for every sub-thread’s                                            attack.
+behavior independently. The speciﬁc method is similar to                                           B. Buffer Overﬂow
+singe thread program attestation (see III-C). The difference
+from the single thread program is that we need try to                                                 The object being attacked is a program (Pb ) for ﬁle con-
+determine the correspondence relation between the actual                                           tent copy. Pb reads some data from the ﬁrst ﬁle, and writes
+behavior and sub-function’s behavioral model of a certain                                          the data into the second ﬁle. We build the behavior model of
+thread by making multi attempts.                                                                   Pb by following the procedures described in section II, and
+   In our future work, we will get the name of sub-                                                get its function model, Mb = (Qb , Σb , Γb , δb , qb0 , Zb0 , Fb ).
+thread function by carrying analysis of the arguments in                                           There has the following valid API sequence in Mb :
+CreateThread, and then the behavior model of sub-thread                                            Openfile − eadFile− penFile− p r i n t f − t r c p y −
+                                                                                                                >R            >O       >s      >s        >
+function can be embedded into the model of main thread.                                                W r i t e F i l e − loseHandle− loseHandle
+                                                                                                                          >C          >C
+
+
+
+                                                                                               5
+  We build a piece of Shell Code, which will call                                            R EFERENCES
+MessageBox, and then write the Shell Code into the ﬁrst             [1] Shen Changxiang, Zhang Huanguo, Wang Huaimin and et
+ﬁle. When Pb uses strcpy, the Shell Code will be called.                al. Research and development of trusted computing. Science
+We run the program (Pb ) on the platform with the Shell Code            China: Information Science, 2010, 40(2): 139-166. (in Chi-
+ﬁle, and preprocess the monitored Win32 API sequence by                 nese)
+following the procedures described in subsection III-A. The
+                                                                    [2] R. Sekar, V. N. Venkatakrishnan, Samik Basu, et al. Model-
+preprocessed API sequence (wb ) is:                                     Carrying Code: A Practical Approach for Safe Execution of
+Openfile − eadFile− penFile− p r i n t f − t r c p y −
+          >R       >O                >s               >s    >           Untrusted Applications. Proceedings of the nineteenth ACM
+    MessageBoxA−>W r i t e F i l e − l o s e H a n d l e −
+                                    >C                    >             symposium on Operating systems principles (SOSP’03), Bolton
+    CloseHandle                                                         Landing, New York, USA, ACM Press, 2003: 15-28.
+
+  Let us see whether Mb can accept wb . When Mb reads in            [3] R. Sekar, C. R. Ramakrishnan, I.V. Ramakrishnan, and et
+MessageBoxA, there is no path to complete the transition,               al. Model-Carrying Code (MCC): A New Paradigm for
+                                                                        Mobile-Code Security. Proceedings of the 2001 New Security
+denoted as:                                                             Paradigms Workshop (NSPW’01), Cloudcroft, New Mexico,
+                                                                        USA, ACM Press, 2001: 23-30.
+                          ′                     ′
+      (pb , ‘MessageBoxA’wb , Zb β) ⊬∗ b (qb , wb , γβ)
+                                     M
+
+                    /                       ′
+   At this time, pb ∈ Fb , ‘MessageBoxA’wb ̸= ε, Zb β ̸=            [4] Wei Da, Jin Ying, Zhang Jing,and et al. Enforcing Security
+                                                                        Policie s in Open Source JVM. ACTA ELECTRONICA SINICA,
+ε.This means Mb can not accept wb , and Pb ’s running                   2009, 37 (4A): 36-41. (in Chinese)
+behavior can not pass the dynamic attestation. We can see
+our method can protect the system against buffer overﬂow            [5] Jin Ying, Li Zepeng, Zhang Jing, and et al. Static Checking
+attack.                                                                 of Security Related Behavior Model for Multithreaded Java
+                                                                        Programs. Chinese Journal of Computers, 2009, 32 (9): 1856-
+   Our methods are also effective against other unknown
+                                                                        1868. (in Chinese)
+attacks.
+                                                                    [6] George C. Necula. Proof-Carrying Code. Proceedings of 24th
+          V. C ONCLUSION AND F UTURE W ORK                              ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
+   Our method for trusted computing dynamic attestation                 gramming Languages (POPL’97), Paris, France, ACM Press,
+                                                                        1997: 106-119.
+uses the behavior model based on static analysis of binary
+code. This paper proposed one method of building almost             [7] Vivek Haldar, Deepak Chandra, Michael Franz. Semantic Re-
+the same core function model for different versions of                  mote attestation: A Virtual Machine Directed Approach to
+same code. This paper also overcame the difﬁculty that                  Trusted Computing. Proceedings of the 3rd conference on
+some dynamic behaviors can not be obtained by static                    USENIX Virtual Machine Research and Technology Sympo-
+                                                                        sium, San Jose, California, USA, USENIX Association, 2004:
+analysis. The paper also gave out some solutions of dynamic             29-41.
+attestation for some complex programs.
+   Our current method can not protect programs against              [8] Yu Fajiang, Yu Yue. Static analysis-based behavior model
+mimicry attack [9] [10]. Some researchers have proposed                 building for trusted computing dynamic veriﬁcation. Wuhan
+some methods to protect program against mimicry attack.                 University Journal of Natural Sciences, 2010, 15(3): 195-200.
+Based on these researches, we will build program behav-             [9] David Wagner, Paolo Soto. Mimicry attacks on host based
+ior model by using EFSA (Extended FSA) to describe                      intrusion detection systems. Proceedings of the 9th ACM
+arguments value. The behavior model including arguments                 conference on Computer and Communications Security, Wash-
+also can help solve the difﬁculty of dynamic link library               ington, DC, USA, ACM Press, 2002: 255-264.
+programs’ behavior attestation.
+                                                                    [10] Li Wen, Dai Yingxia, Lian Yifeng, and et al. Context sensitive
+   The method in this paper can not ensure security of                  host-based IDS using hybrid automaton. Journal of Software,
+mobile code program (such as Web script), which only can                2009, 20(1): 138-151. (in Chinese)
+ensure the security of script execution host program (such
+as Browser). We will carry further research on the dynamic
+attestation of mobile code program and parallel program.
+
+                    ACKNOWLEDGMENT
+   This work is supported by the National Natural Sci-
+ence Foundation of China (Grant No. 60673071, 60970115,
+91018008), the Fundamental Research Funds for the Central
+Universities in China (Grant No. 3101044), and open foun-
+dation of Zhejiang Key Laboratory of Information Security
+in China.
+
+
+                                                                6
+
\ No newline at end of file
diff --git a/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf b/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf
new file mode 100644
index 0000000..44eef7d
--- /dev/null
+++ b/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf	
@@ -0,0 +1,482 @@
+Journal of Computational Information Systems 7:5 (2011) 1436-1445
+Available at http://www.Jofcis.com
+
+
+
+
+        Optimization of Program Behavior Model for Trusted Computing
+                             Dynamic Attestation
+
+                              Fajiang YU1,2,†, Yuewei XU3, Yue YU1, Yang LIN1, Yaohui WANG1
+                                        1
+                                          School of Computer, Wuhan University, Wuhan 430072, China
+                   2
+                       Key Laboratory of Aerospace Information Security and Trusted Computing, Wuhan 430072, China
+                       3
+                         Zhejiang Provincial Testing Institute of Electronic Products, Hangzhou, Zhejiang 310012, China
+
+
+                                                                 Abstract
+       Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of program’s behavior
+       verification is building program’s trusted behavior model. Static analysis based behavior model building can cover all
+       running paths, but there may be many        run circuits, which can lead to the failure of dynamic attestation execution. This
+       paper gives out an improved Floyd algorithm to find out and remove one          run circuit with shortest length. The action is
+       repeated until there is no     run circuit, which can optimize the trusted behavior model. This paper also carries out one
+       theoretical analysis of the time complexity and space complexity, the optimization method is better than the method based
+       on the traditional algorithm of finding out all elementary circuits in directed graph. Finally, this paper does some
+       optimization experiments about real Windows binary program’s behavior model. The result shows there is a large
+       reduction in the number of directed graph’s nodes and edges in the behavior model after deleting all       run circuits.
+
+       Keywords: Trusted Computing; Dynamic Attestation; Behavior Model;           Run Circuit
+
+1. Introduction
+Trusted Computing is an information system security solution for the basic computing security problem. It
+has become one of hot subjects in the information security research field [1, 2]. From the angle of behavior,
+Trusted Computing Group (TCG) gives us a standard to verify the computing platform whether is trusted or
+not: “an entity can be trusted if it always behaves in the expected manner for the intended purpose” [3]. The
+technology which the trusted computing platforms currently adopted does not comply with the
+requirements that the behaviors are trusted. We need to verify the dynamic behavior of components as well.
+   Currently, there are few researches on the theory and method of trusted computing dynamic verification.
+The related researches are focus on extended trusted network connection and remote attestation,
+trustworthy software, host-based intrusion detection, malicious software detection based on behavior
+analysis, and etc.
+   In the aspect of extended trusted network connection and remote attestation, Vivek Haldar et al. have
+given us a basic framework on the semantic remote attestation for the trustworthiness of a Java program
+running behavior [4]. Xiaoyong Li et al. have proposed one model of system behavior based
+trustworthiness attestation for computing platform [5]. Ahmad-Reza Sadeghi et al. have presented a method
+of property-based attestation for computing platforms [6]. Dengguo Feng et al. have proposed a complete
+dynamic update attestation scheme for multiple remote attestation instance in trusted computing
+environment [7]. These researches have improved some disadvantages of TCG trusted network connection,
+but it does not verify the dynamic behavior of the components.
+
+†
+    Corresponding author.
+    Email addresses: qshxyu@126.com (Fajiang YU)
+
+1553-9105/ Copyright © 2011 Binary Information Press
+May, 2011
+ 1437                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+   Current research on trustworthy software are mainly concentrated on the fields of model building and
+verification, software trustworthiness design, the analysis and test on software trustworthiness, the
+evolution of software trustworthiness [8], and etc. The research covers every software lifecycle stage. The
+trusted computing dynamic verification pays more attention to verify the dynamic behavior.
+   Since Stephanie Forrest et al. started to use the sequence of Linux system call to describe the program
+behavior and conduct host-based intrusion detection system [9, 10], many researchers have done a lot of
+work in this area. But the behavioral characteristic of trusted computing dynamic verification is not limited
+to the sequence of system call.
+   To improve the ability of detecting metamorphic viruses and unknown viruses, the detecting method
+based on behavior analysis has been proposed [11-13]. At present, the main behavioral characteristic for
+malicious code detection is API, but for trusted computing dynamic verification, it is not limited to API.
+   The first step of trusted computing dynamic attestation is building the behavior model of all platform
+components. Generally, there are two methods for model building: dynamic training and static analysis.
+Dynamic training always faces the classic problem of machine learning. It is hard to build a training set
+which can cover all possible program execution paths. In order to solve this problem of dynamic training,
+David Wagner et al. started using static analysis to build a Finite State Automata (FSA) model for the
+program behavior [14]. Jonathon T. Giffin et al. inserted one “null call” before and after calling one sub
+function for building one context-sensitive model to guarantee the high efficiency of FSA model and
+remove impossible paths [15, 16]. Henry Hanping Feng et al. built a stack-deterministic Push down
+Automata (sDPDA) model to improve the efficiency [17]. Rajeev Gopalakrishna et al. directly embedded
+the sub functions for building global FSA to improve the efficiency [18]. LI Wen et al. connected every sub
+function only when the application is running to reduce stack size [19].
+   These methods which use static analysis to build the FSA program model mainly focus on the
+characteristic of system call or API. It is regarded as the input alphabet symbol of FSA state transition. But
+there may be no code of the system call or the API call in many program blocks. This will cause that the
+generated FSA has a lot of transitions. It means that there is no need of inputting any alphabet symbol
+when the state of FSA shifts. These transitions may form run circuits in the FSA, which can cause the
+FSA falls into endless loop and can not stop when it is used to do trusted computing dynamic attestation.
+So when we build the FSA behavior model for the program, we need to find out and delete run circuits,
+and then remove other non- transitions in order to guarantee it executes correctly and efficiently by using
+this model to do attestation.
+   This paper mainly makes the following three contributions: (1) We give out an improved Floyd
+algorithm to find out and delete one shortest run circuit. (2) This paper also carries out one theoretical
+analysis of the time complexity and space complexity, the optimization method is better than the method
+based on the traditional algorithm of finding out all elementary circuits in directed graph. (3) Finally, this
+paper does some optimization experiments about real Windows binary program’s behavior model. The
+result shows there is a large reduction in the number of directed graph’s nodes and edges in the behavior
+model after deleting all run circuits. Either in time efficiency or space efficiency, the optimization
+method is better than the method based on the traditional algorithm of finding out all elementary circuits in
+directed graph.
+
+2. Behavior Modeling Based on Static Analysis of Binary Program
+Figure 1 is the basic framework of trusted computing dynamic attestation. First we build the model for the
+trusted behavior of each computing platform components. Then we use this model to verify platform’s real
+running behavior. The trusted behavior model is the base of trusted computing dynamic attestation.
+Because dynamic training cannot cover all running paths, the method considered by this paper is to apply
+static analysis of the binary PE file and build the program trusted behavior model. It is more consistent with
+the reality that many commercial softwares do not open the source code.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                     1438
+
+
+
+
+                            Fig.1 The Framework of Trusted Computing Dynamic Attestation
+
+  The process of constructing static analysis-based behavior model includes the following seven stages:
+  1) CFG building from binary code
+  2) FSA constructing from CFG
+  3) Deleting ε run circuit
+  4) Deleting non-circuit ε transition
+  5) Constructing Deterministic FSA
+  6) Deleting empty DFA
+  7) Building Global PDA
+  You can see the detail stages and algorithms about building trusted behavior model based on static
+analysis of PE binary file in our previous work [20].
+
+3. Searching and Deleting ε Run Circuits
+The existence of run circuits can lead the failure of trust attestation, so we need to find out and delete the
+  run circuits of FSA during the process of building trusted behavior model, in order to finish the model
+optimization.
+  Definition 1. There is a input symbol sequence on one FSA                                , the sequence is
+                                                     , whose corresponding state sequence is
+                                          ,                       . We call this state sequence is a run of
+FSA       on the input symbols , which is denoted as .
+  Definition 2.     is a run, if                               .
+  Definition 3.      is a run circuit, if                                  and                    except that
+       .
+
+3.1. Judging Whether There are ε Run Circuits
+In order to delete run circuits in the FSA, we need to judge whether there are run circuits or not
+firstly. The FSA whose all non- transitions have been deleted is denoted as                               ,
+Where             ，           ,                                           ,         ,         .
+   FSA          also is a directed graph, which is denoted as                             , where         ,
+                                  . We carry out a topological sorting for this graph:
+   1) Select one state node     from     , which has no precursor;
+   2) Delete this state node and all the edges whose head node is                , it means               ,
+                                      .
+   We repeat the two steps until           or there is no state node which has no precursor in .
+   For the FSA       that has been carried out a topological sorting, if          then there must be no run
+circuit in    ; if          then there must be some run circuits in          , and the run circuits must be
+consisted with the state nodes left in .
+ 1439                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+3.2. ε Run Circuits Searching Based on Algorithm of Generating Elementary Circuits in Directed
+     Graph
+There are a lot of algorithms of generating elementary circuits in directed graph. This paper uses one
+algorithm proposed by Wang Yuying et al. [21]. Compared with other algorithms, this algorithm need not
+search the node which has been discovered, and it is more efficient.
+   The transition FSA directed graph that has been carried out a topological sorting is denoted as
+                , where            and there are    state nodes in      . There must be run circuits in this
+FSA.
+   The algorithm of searching run circuits in FSA based on the method of generating elementary circuits
+in directed graph is denoted as Algorithm 1 (You can its detail in [21].).
+   The version of notepad.exe in the Windows XP SP1 system for simplified Chinese is 5.1.2600.0.. We
+delete all non- transitions of the FSA (Fig.2), which corresponds to sub-function “sub_1005303” in this
+notepad.exe, and carry out a topological sorting on it, the directed graph simplified is denoted as .
+
+
+
+
+                           Fig.2 The FSA of One Sub-function “Sub_1005303” in Notepad.exe
+
+  We use the algorithm of generating elementary circuits to search run circuits in the FSA of
+sub_1005303. we find out two      run circuits in sub_1005303 FSA:                        and
+                        .
+
+3.3. Searching ε Run Circuits Based on the Improved Floyd Algorithm
+The searching method based on the algorithm of generating elementary circuits will find out all circuits one
+time. The multiple run circuits in FSA may be connected with each other. It is impossible to delete all
+run circuits one time, because after one run circuit has been deleted, other circuits may haven been
+broken and new circuits also may be formed.
+   In order to increase the time and space efficiency of trusted behavior model optimization, we make some
+improvement on the Floyd algorithm. We use the improved Floyd algorithm to get the shortest distance
+between any two state nodes in the transition FSA directed graph ( ) which has been carried out a
+topological sorting, it means we get the shortest distance matrix of         ,       . If         , for every,
+                      this FSA does not have any run circuit which start and end with , otherwise it has
+the circuit. In order to further increase the efficiency of trusted behavior model optimization, we only find
+out one shortest run circuit firstly and delete it, then repeat this procedure until there is no run circuit
+in the FSA. The length of the shortest run circuit is                                  .
+   The algorithm of searching the start state node (which also is the end state node) in the shortest run
+circuit of FSA based on the improved Floyd algorithm is described as Algorithm 2.
+   Algorithm 2: Searching the start state node (which also is the end state node) in one shortest run
+circuit of FSA
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                    1440
+
+Require: One transition FSA directed graph that has been carried out a topological sorting and is
+denoted as                 , where          and there are  state nodes in
+Ensure: The starting state node of the shortest transition circuit in FSA, which is denoted as ; the
+shortest matrix path
+
+1: for           to         do                  17:           for          to           do
+2:        for          to         do            18:                if                     then
+3:             if                               19:                                        ;
+4:                           ;                  20:                             ;
+5:             else                             21:                end if
+6:                             ;                22:           end for
+7:             end if                           23:      end for
+8:        end for                               24: end for
+9: end for                                      25:             ;
+10: for         to         do                   26:         ;
+11:       for          to         do            27: for        to        do
+12:                       ;                     28:      if           then
+13:       end for                               29:                      ;
+14: end for                                     30:                   ;
+     15: for        to           do             31:      end if
+16:       for         to         do             32: end for
+  After we ascertain the start state node     on the shortest run circuit, and the shortest path matrix
+         of FSA, we could find out all nodes on the circuit by using Algorithm 3.
+  Algorithm 3:
+Require: start state ; final state node ; matrix with the shortest distance
+Ensure: a sequence of state nodes on the shortest path, denoted as
+1:
+2: if              then
+3:                  ;
+4: return
+5: else
+6:                                                  ;
+7:                                                  ;
+8:                              ;
+9:        return
+10: end if
+  We use the improved Floyd algorithm to search the shortest        run circuit in sub_1005303 FSA. The
+corresponding shortest run circuit is                     .
+
+3.4. Deleting the ε Run Circuit in FSA
+After finding out one      run circuit                              in FSA                       , we can
+delete the run circuit with the following steps:
+  1) Merging all state nodes on run circuit into one node,                                       ;
+  2) Deleting the run between state nodes on run circuit,
+                                                                                    ;
+  3) Changing all non- runs between state nodes on      run circuit, all                                    in
+  should be replaced by                  ;
+ 1441                     F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+  4) Changing non- run from state node on            run circuit to other state nodes, all                ,
+                                                       in should be replaced by                      ;
+  5) Changing non-          run from other state nodes to nodes on      run circuit, it means replacing all
+                                                                        ;
+  6) If                           , then                       ;
+  7) If                            , then                        .
+
+4. Performance Analysis
+
+4.1. Time Complexity Analysis
+There are mostly two methods to optimize the programs’ trusted behavior model. Method 1 is following
+steps 3.1, 3.2 and 3.4, which is based on traditional algorithm of generating all elementary circuits in
+directed graph Method 2 is following steps 3.1, 3.3 and 3.4, which is based on the improved Floyd
+algorithm. (In the rest paper, Method 1 and Method 2 are used to represent the two model optimization
+methods).
+   Method 1 has the same first and third steps as Method 2, so the time difference spent is mainly between
+the algorithm described in 3.2 and 3.3.
+   According to the document [21], the time that algorithm in 3.2 takes is:
+
+     is a constant,         is the number of nodes in the directed graph after topological sorting,
+                          is the number of the circuits whose smallest vertex is ,           is the number of
+circuits in the graph, expression          is the adjacency list of    ( is the number of edges).
+   The time that algorithm in 3.2 takes can be simplified as:                       .
+   For Method 2, first we use Algorithm 2 in 3.3 to find out the start node of the shortest run circuit in
+the directed graph, the time it takes is:                             ;
+   Then we recursively find out all nodes in the circuit by using the algorithm, the taken time is:
+
+
+  The calculation result of       is:
+  The total time that the algorithm in 3.3 takes is:
+
+
+
+  It is obvious that Method 2 takes less time than Method 1 by comparing               and   .
+
+4.2. Space Complexity Analysis
+Method 1 has the same first and third steps as Method 2, so the space difference the two methods need is
+mainly between the algorithm described in 3.2 and 3.3.
+  Algorithm 1 in 3.2 requires many rounds iterative calculations. And in every round it uses two matrixes,.
+The two matrixes’ elements are some path information. There are two data structures that are used in
+programs to record the path information of matrix element:
+     typedef struct {                                           typedef struct {
+          char IndexPath[STATE_MAX][INDEX_MAX];                    stuStateIndexPath * ssipaIns[PATH_MAX];
+          int iPathLen;                                            int iPathNum;
+     } stuStateIndexPath;                                       } stuFLPEiWiElement;
+
+   STATE_MAX, INDEX_MAX, PATH_MAX are constants, which can be different value in different
+situation. We suppose that the storage space taken by one structure variation of stuStateIndexPath is B,
+and the storage space of stuFLPEiWiElement is       B.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                        1442
+
+   In every round iterative calculation of the algorithm in 3.2, the path information of all elements in edge
+matrix and path matrix should be saved. In the first round calculation, edge matrix and path matrix can both
+have           elements,     is the number of nodes in the directed graph that after topological sorting. The
+biggest number of path is        among all path information. The worst situation is that all elements have
+paths in the first round calculation, and the space it takes is:                                    (B). , the
+biggest number of element path, is related to the number of run circuit.
+   There are also two matrixes used in the algorithm of 3.3: the shortest distance matrix and the shortest
+path matrix,      is the number of nodes in the directed graph after topological sorting. The element of
+distance matrix is the information of distance length, the space one element takes is         B. The element of
+path matrix is the information of nodes, the space one element takes is         B。The main space taken by the
+algorithm in 3.3 is:                               (B).
+   Comparing         and      , the space taken by structure variation of stuStateIndexPath (          B) is far
+greater than the space used to save distance length (       B), the space of stuFLPEiWiElement (       B) also is
+bigger than the space used to save the node information (         B). Besides,     has relation with the number
+of     run circuit ( ). Considering that               is far greater than       ,     can be represented as:
+                          (B).
+   We can see that, with the increasing of run circuit number, the space taken by the algorithm of 3.2
+also is increased in multiples, so it is likely that space overflow would happen. But for the algorithm of 3.3,
+the space it takes has no relation with run circuit number.
+   From the above analysis we can see that the space taken by Method 2 is far smaller than the space of
+Method 1.
+
+5. Experiment and Analysis
+We do our experiment of building the trusted behavior model of program notepad.exe in Windows XP SP2.
+On our computer for experiment, the CPU is Intel(R) Core(TM)2 Duo CPU T8100 @ 2.10GHz, and the
+RAM is DDR2 1024MB. At present, behavior model pays most attention to the behavioral feature of API
+in kernel32.dll. notepad.exe not only directly call the API of kernel32.dll, but call some other dynamic link
+libraries (DLLs). These DLLs also may call the API of kernel32.dll, and these APIs also are the behavioral
+feature of notepad.exe.
+   Building behavior model for notepad.exe also needs building the behavior models of the related DLLs.
+There are many sub functions in notepad.exe and related DLLs. We choose 8 sub functions from 3 DLLs
+for building model and optimizing. From the table we can see that after the optimization, all run circuits
+have been deleted, and the number of nodes and edges in function directed graph is greatly reduced.
+
+5.1. Time Efficiency Tests
+In order to compare the model optimization time efficiency of traditional algorithm of generating all
+elementary circuits in directed graph and the improved Floyd algorithm, we optimize the behavior model of
+every sub function in Table 1 by following the steps 3.1, 3.2(or 3.3) and 3.4, the time they take are seen in
+Table 1.
+   The number of directed graph nodes after topological sorting is the result of the first time of doing
+topological sorting. The number of deleted run circuits is equal to the times
+   From Table 1 we can see when there are only a few run circuits, the time taken by Method 1 and
+Method 2 have little difference; when there are more run circuits, the time taken by Method 2 is less
+than Method 1. Because Method 1 is based on the algorithm of generating elementary circuits in directed
+graph, every time of following step 3.2, all run circuits could be found out, it would take more time if
+there are more circuits. The experiment result is consistent with our analysis in 4.2. In Table 2 he space
+overflows when sub function sub_77D3B1DA is being optimized by using Method 1.
+ 1443                 F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+                           Table 1 The Time Taken by Model Optimization of Every Sub-function
+                                     Number of Nodes       Number of                 Time (s)
+                     Name of
+                                     after Topological    Deleted ε Run
+                   Sub-function                                             Method 1        Method 2
+                                          Sorting            Circuit
+                    tree_size_ndr            45                20           7.076274         6.733020
+                    tree_into_ndr            48                22           8.502247         9.021329
+                    data_into_ndr            51                24           10.337455       10.370068
+                  sub_77D5FAD4               81                31          32.868784        33.119412
+                   data_from_ndr             85                33          36.543700       36.862505
+                  sub_77D3B1DA              105                 4            overflow      17.867722
+                   sub_77C481F5             101                41           64.731101       61.411450
+                  sub_77D3B6AF              153                60          221.496020      221.496020
+
+
+5.2. Space Consumption Test
+In order to compare the amount of space consumed by Method 1 and Method 2, we optimize the behavior
+model of every sub function in Table 1 by following the steps 3.1, 3.2 (or 3.3) and 3.4. The peak amount of
+the space consumed during the behavior model optimization of every sub function is as Table 2 shown.
+
+         Table 2 The Peak Amount of Space Consumed during the Behavior Model Optimization of Every Sub-function
+
+                                                     the Peak Amount of Space Consumed (KB)
+                          Name of Sub-function
+                                                     Method 1               Method 2
+                               tree_size_ndr            444                    4.05
+                               tree_into_ndr            503                   4.609
+                               data_into_ndr            601                   5.202
+                             sub_77D5FAD4              1577                  13.122
+                              data_from_ndr            1751                   14.450
+                             sub_77D3B1DA            overflow                22.050
+                              sub_77C481F5             1688                  20.402
+                             sub_77D3B6AF              10141                 46.818
+
+   From Table 2 we can see the more nodes of the directed graph after topological sorting and run
+circuits in the graph is, generally the bigger peak amount of space consumed by Method 1 is. Sub-function
+“data_from_ndr” has less nodes and run circuits than “sub_77C481F5”, but the space it takes up is more
+than “sub_77C481F5”. The reason is that the amount of space consumed also has relation with the length
+of run circuits. The longer the length is, the more information need be saved, so the more space it takes
+up. During the optimization of the behavior model for sub function “sub_77D3B1DA”, the temporary paths
+are so complex that they need occupy large storage and overflow the space when the second run circuit
+is in processing. The amount of space taken up by Method 2 only is related with the node number in the
+directed graph. And Method 1 takes up great less space than Method 1. The experiment result is consistent
+with our analysis in 4.3. In order to know more about the relationship between the amount of space
+consumed and the length of run circuit, we record the amount of space consumed by Method 1 and
+Method 2 when we deal with several run circuits of some sub functions, which is shown in Figure 3.
+Figure 3 (a) is the statistics of some sub functions in gdi32.dll when doing modeling optimization, (b) is the
+statistics of some sub functions in shlwapi.dll.
+   From Figure 3 we can see the longer the length of run circuit is, the more space Method 1 will take up.
+But the space consumed by Method 1 is no relation with the length of run circuit, only is related to the
+number of nodes in directed graph. From the experiment we know the amount of space consumed by
+Method 2 is much less than Method 1.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                   1444
+
+
+
+
+                                       (a) Gdi32.dll                  (b) Shlwapi.dll
+
+                              Fig. 3 Statistics of Space Taken and Length of ε Run Circuit
+
+6. Conclusion and Future Work
+Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of
+program’s behavior verification is building program’s trusted behavior model. Static analysis based
+behavior model building can cover all running paths, but there may be many run circuits, which can lead
+to the failure of trust attestation. This paper gives out an improved Floyd algorithm to find out and delete
+one shortest run circuit. The action is repeated until there is no run circuit, which can optimize the
+trusted behavior model. This is a new application and improvement of Floyd algorithm.
+   Compared with the model optimization method based on the traditional algorithm of generating the
+elementary circuit in directed graph, the optimization method proposed in this paper only need to find out
+one shortest run circuit every time, but the method based on traditional algorithm has to find out all
+circuits, which must waste more time and space. The optimization method proposed in this paper would
+need less time and space if there are more nodes and longer run circuits in the directed graph of behavior
+model, which is confirmed by our experiment.
+   In the future, we still have much work to do. 1) We will use the trusted behavior model to dynamically
+monitor the programs’ real running behavior; 2) We will integrate static analysis and dynamic training to
+improve the efficiency and accuracy of trusted behavior model building, and consider how to add API
+arguments into the behavior model; 3) We will apply the method of program slicing, Fuzzing test, symbolic
+execution, and taint analysis into trusted computing dynamic attestation.
+
+Acknowledgement
+This work is supported by the National Natural Science Foundation of China (No. 60970115, 91018008),
+the Fundamental Research Funds for the Central Universities in China (No. 3101044), and open foundation
+of Zhejiang Key Laboratory of Information Security in China.
+
+References
+[1]   Sheng Changxiang, Zhang Huanguo, Wang Huaimin, et al. Research and development of trusted computing.
+      Science China: Information Science, 2010, 40(2): 139-166. (in Chinese)
+[2]   Sheng Changxiang, Zhang Huanguo, Feng Dengguo, et al. Survey of information security. Science China:
+      Information Science, 2007, 37(2): 1-22. (in Chinese)
+ 1445                   F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+[3]    Trusted Computing Group. TCG specification architecture overview, specification revision 1.4.
+       http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-1D09-3519-ADA026A0C05CFAC2/TC
+       G_1_4_Architecture_Overview.pdf, 2010-06-12.
+[4]    Vivek Haldar, Deepak Chandra, Michael Franz. Semantic remote attestation — a virtual machine directed
+       approach to trusted computing. Proceedings of the 3rd conference on virtual machine research and technology
+       symposium, California, USA, USENIX, San Jose, 2004: 29-41.
+[5]    Li Xiaoyong, Zuo Xiaodong, Shen Changxiang. System behavior based trustworthiness attestation for computing
+       platform. Acta Electronica Sinica, 2007, 35(7): 1234-1239. (in Chinese)
+[6]    Ahmad-Reza Sadeghi, Christian Stüble. Property-based attestation for computing platforms: Caring about
+       properties, not mechanisms. Proceedings of the 2004 workshop on new security paradigms, Nova Scotia, Canada,
+       ACM Press, 2004: 66-77.
+[7]    Feng Dengguo, Qin Yu. Research on attestation method for trusted computing environment. Chinese Journal of
+       Computers, 2008, 31(9): 1640-1652. (in Chinese)
+[8]    Wang Huaimin. Building Integration environment of trustworthy software. Communications of China Computer
+       Federation, 2009, 5(2): 56-61. (in Chinese)
+[9]    Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, et al. A sense of self for unix processes. Proceedings of
+       the 1996 IEEE Symposium on Security and Privacy, Los Alamitos, California, USA, IEEE Computer Society,
+       1996: 120-128.
+[10]   Steven A. Hofmeyr, Stephanie Forrest, Anil Somayaji. Intrusion detection using sequences of system calls.
+       Journal of Computer Security, 1998, 6(3):151-180.
+[11]   Chen Jianmin, Shu Hui, Xiong Xiaobing. Fuzzing test approach based on symbolic execution. Computer
+       Engineering, 2009, 35(21): 33-35. (in Chinese)
+[12]   Chen Kai, Feng Dengguo, Su Purui. Exploring multiple execution paths based on dynamic lazy analysis. Chinese
+       Journal of Computers, 2010, 33(3): 493-503. (in Chinese)
+[13]   Li Jiajing, Wang Tielei, Wei Tao, et al. A polynomial time path-sensitive taint analysis method. Chinese Journal
+       of Computers, 2009, 32(9): 1845-1855. (in Chinese)
+[14]   David Wagner, Drew Dean. Intrusion detection via static analysis. Proceedings of 2001 IEEE Symposium on
+       Security and Privacy, Oakland, California, USA, IEEE Computer Society Press, 2001: 156-168.
+[15]   Jonathon T. Giffin, Somesh Jha, Barton P. Miller. Detecting manipulated remote call streams. Proceedings of the
+       11th USENIX Security Symposium, Berkeley, California, USA, USENIX Association, 2002: 61-79.
+[16]   Jonathon T. Giffin, David Dagon, Somesh Jha, et al. Environment-sensitive intrusion detection. Proceedings of
+       8th International Symposium on Recent Advances in Intrusion Detection (RAID 2005), Seattle, Washington, USA,
+       LNCS3858, Springer-Verlag, 2005: 185-206.
+[17]   Henry Hanping Feng, Jonathon T. Giffin, Yong Huang, et al. Formalizing sensitivity in static analysis for
+       intrusion detection. Proceedings of 2004 IEEE Symposium on Security and Privacy. Oakland, California, USA,
+       IEEE Computer Society Press, 2004: 194-208.
+[18]   Rajeev Gopalakrishna, Eugene H. Spafford, Jan Vitek. Efficient intrusion detection using automaton inlining.
+       Proceedings of 2005 IEEE Symposium on Security and Privacy, Oakland, California, USA, IEEE Computer
+       Society Press, 2005: 18-31.
+[19]   Li Wen, Dai Yingxia, Lian Yifeng, et al. Context sensitive host-based IDS using hybrid automaton. Journal of
+       Software, 2009, 20(1): 138-151. (in Chinese)
+[20]   Yu Fajiang, Yu Yue. Static analysis-based behavior model building for trusted computing dynamic verification.
+       Wuhan University Journal of Natural Sciences, 2010, 15(3): 195-200.
+[21]   Wang Yuying, Chen Ping, Su Yang. An efficient algorithm of generating all elementary circuits in directed graph.
+       Computer Application and Software, 2009, 26(12): 27-29. (in Chinese)
+
\ No newline at end of file
diff --git a/res/paper/PaperID325-HESA.pdf b/res/paper/PaperID325-HESA.pdf
new file mode 100644
index 0000000..ba3977b
--- /dev/null
+++ b/res/paper/PaperID325-HESA.pdf
@@ -0,0 +1,493 @@
+           HESA: The Construction and Evaluation of
+            Hierarchical Software Feature Repository
+                                Yue Yu, Huaimin Wang, Gang Yin, Xiang Li, Cheng Yang
+                             National Key Laboratory for Parallel and Distributed Processing
+                         School of Computer Science, National University of Defense Technology
+                                                   Changsha, China
+                     yuyue whu@foxmail.com, whm w@163.com, {jack.nudt, shockleylee}@gmail.com
+
+
+   Abstract—Nowadays, the demand for software resources on          the activities of software development.
+different granularity is becoming prominent in software en-            As a kind of attributes which capture and identify com-
+gineering ﬁeld. However, a large quantity of heterogeneous          monalities and differences in a software domain, software
+software resources have not been organized in a reasonable and
+efﬁcient way. Software features, a kind of important knowledge      feature [4] [5] is an ideal material to characterize the software
+for software reuse, are ideal materials to characterize software    resources. Constructing a feature repository of a ﬂexible
+resources. Our preliminary study shows that the effectiveness       structure can make a great contribution to multi-grained reuse.
+of feature-related tasks, such as software resource retrieval and      However, classic feature analysis techniques, such as Fea-
+feature location, will be greatly improved, if a multi-grained
+                                                                    ture Oriented Domain Analysis (FODA) [6] and Domain
+feature repository is available. In this paper, we construct a
+Hierarchical rEpository of Software feAture (HESA), in which        Analysis and Reuse Environment (DARE) [7], are heavily
+a novel hierarchical clustering approach is proposed. For a         relied on the experience of domain experts and plenty of
+given domain, we ﬁrst aggregate a large number of feature           market survey data. Hence, the feature analysis is a labor-
+descriptions from multiple online software repositories. Then we    intensive and error-prone process.
+cluster these descriptions into a ﬂexible hierarchy by mining
+their hidden semantic structures. Finally, we implement an online
+                                                                       In recent years, more and more stakeholders develop, main-
+search engine on HESA and conduct a user study to evaluate          tain and share their software products on the Internet. In order
+our approach quantitatively. The results show that HESA can         to promote their products to users, project managers write
+organize software features in a more reasonable way compared        some market-oriented summaries, release notes and feature
+to the classic and the state-of-the-art approaches.                 descriptions on the proﬁle pages via natural language. The
+   Keywords—Software reuse; Mining Software repository;
+                                                                    large number of online software proﬁles can be treated as a
+Feature-ontology; Clustering;
+                                                                    kind of repository containing a wealth of information about
+                                                                    domain-speciﬁc features. Although researchers propose several
+                      I. I NTRODUCTION
+                                                                    automatic methods to mine features from the web repository
+   Software reuse is widely recognized as an effective way to       [8] [9] [10], the problems have not completely be solved,
+increase the quality and productivity of software [1]. With the     speciﬁcally in organizing features as ﬂexible granularity.
+development of software industry, the degree of software reuse         In this paper, we are trying to address the above problems
+is deeper than previous years and the demand for resources on       by proposing a novel approach to construct a Hierarchical
+different granularity becomes more prominent. For example,          rEpository of Software feAture (HESA). First of all, we extract
+when developing a new large software system, we may reuse           a massive number of feature descriptions from online software
+some API calls from the third party to accomplish the core          proﬁles and mine their hidden semantic structure by proba-
+functions and the mature open source software as the basic          bilistic topic model. Then, we present an improved Agglom-
+framework. Additionally, some code fragments or components          erative Hierarchical Clustering (iAHC) algorithm, seamlessly
+can be reused to meet other additional demands. The reusable        integrated with the topic model, to build the feature-ontology
+resources are multi-grained, consisting of API calls (the ﬁnest     of HESA. Finally, we implement an online search engine1
+level of granularity), code fragments, components (higher than      for HESA to help retrieve features in a multi-grained manner,
+API calls) and software systems (much higher than others).          which can support multiple reuse requirements. By conducting
+   However, considering the large-scale, heterogeneous and          a user study, we demonstrate the effectiveness of our system
+multi-grained software resources, it is a great challenge for       with quantitative evaluations comparing to the classic and the
+stakeholders to retrieve the suitable one. With the evolution of    state-of-the-art approaches.
+open source ecosystems, more than 1.5 million open source              The rest of this paper is or organized as follows. Section
+software projects are now hosted in open source communities         II introduces the overview of our work. Section III describes
+[2]. Reusable resources [3] are manifold, including code bases,     how to construct HESA in detail. Experiments and analysis
+execution traces, historical code changes, mailing lists, bug       can be found in Section IV. Finally, we present some related
+databases and so on. All of these valuable resources have not
+been reorganized in a reasonable and efﬁcient way to assist in        1 http://inﬂux.trustie.net
+                                           Figure 1. Overview of the construction and use of HESA
+
+
+
+work in Section V and draw our conclusions in Section VI.              use the Extractor component to extract feature elements. Then,
+                                                                       after running preprocessing tasks, the Synthesizer component
+                  II. A PPROACH OVERVIEW
+                                                                       will automatically located these feature elements, into a uniﬁed
+   First of all, we give the deﬁnitions of some concepts used          category. Especially, the word “domain” will be replaced by
+in this paper.                                                         “category” for they are sharing the same meaning in the rest
+   Feature element: Feature element is a kind of raw descrip-          of this paper.
+tions which can indicate a functional characteristic or concept           The second module, the Feature-Topic Modeler, is respon-
+of the software product.                                               sible for mining the semantic structure hidden in feature
+   Feature: Feature is an identiﬁer of the cluster about feature       elements. We will merge the synonymic feature elements in
+elements, where the cluster is an intermediate output of               terms of their semantic structure in the next step.
+improved Agglomerative Hierarchical Clustering (iAHC).                    The last module, the FAFO (Flexible grAnularity Feature-
+   Feature-ontology: Feature-ontology is a kind of hierarchical        Ontology) Constructor, is a critical part of the construction
+structure induced from feature elements by iAHC.                       process. In this module, we present a novel algorithm iAHC to
+   HESA: The assembly of all feature-ontologies of the dif-            construct the feature-ontology and more details can be found
+ferent categories is the Hierarchical rEpository of Software           in Section III. The major functionalities of this module are
+feAture.                                                               listed as below:
+   The objective of this paper is to build a hierarchical structure       (1) The synonymic feature elements are merged based on
+of feature as a ﬂexible granularity. In the top layers, the            the semantic structure outputted by the Feature-Topic Modeler;
+features in coarse granularity may be mapped to the cor-                  (2) For each cluster, a signiﬁcant group of feature elements
+responding software resources such as mature applications,             is selected as the medoid used to generate feature;
+design patterns, and superclasses. In the bottom layers, the              (3) A feature-ontology is learned and features can be
+features can be mapped to some related code fragments, API             retrieved in terms of ﬂexible granularity.
+calls and subclasses.                                                     After all the raw data under our category are disposed, the
+   Before describing the speciﬁc details of the underlying             construction process of HESA is ﬁnished.
+algorithms, an architectural overview of approach will be pro-            The HESA can perfectly support the multi-grained resource
+vided as below. There are actually two processes concerning            reuse. For example, when a company plans to enter a new
+the application of our method, i.e., the construction process          domain such as Antivirus, the stakeholders want to know a
+and the use process of HESA by stakeholders. In this paper,            few general features about this domain, e.g. “Anti-rootkit”,
+we only focus on the construction process owing to space               “Heuristic scanning”, and “File backup”. Inputting require-
+limitations.                                                           ments and use the search engine of HESA, the matched
+   As depicted in Figure 1, the construction process consists          features will be returned. Based on the feature in coarse
+of three primary modules and the input is software proﬁles             granularity, they can ﬁnd some mutual software systems.
+data collected and updated continuously by a web crawler.              Furthermore, to know this ﬁeld more clearly and locate some
+The ﬁrst module is called the Extractor and Synthesizer. We            reusable code fragments or packages, some ﬁne granularity
+                (a) Bullet-point lists of features in Softpedia.com             (b) Bullet-point lists of features in Sourceforge.com
+
+
+
+
+                                                             (c) Release notes in Freecode.com
+
+                                               Figure 2. Examples of feature elements in the software pages
+
+
+
+features can be retrieved from HESA, e.g., “Automatic detec-                         Hybrid Semantic-level: The problem of hybrid semantic-
+tion of downloaded ﬁles and Lock Autorun.inf, virus cannot                     level is that different feature elements describe a common
+execute.”                                                                      theme in different semantic level, such as the following
+                                                                               descriptions:
+                  III. C ONSTRUCTION OF HESA                                      (1) “Email Scanner enhanced email protection”;
+                                                                                  (2) “Email scanning for Microsoft Outlook, Outlook Ex-
+A. Feature Elements in Software proﬁles                                        press, Mozilla Thunderbird, Windows Live Mail, Windows
+                                                                               Mail, and other POP3/IMAP mail clients, ensuring your email
+   The online software proﬁles contains a wealth of in-
+                                                                               is free of viruses and other threats”;
+formation about domain-speciﬁc features. In this paper, all
+                                                                                  (3) “Blocks spam mails, phishing attack mails, junk mails
+the feature elements are extracted from software proﬁles
+                                                                               and porn mails before they reach your inbox”;
+in Softpedia.com2 , Freecode.com3 and Sourceforge.com4 . As
+                                                                                  The ﬁrst sentence describes the theme of email protection in
+depicted in Figure 2(a), there is a bullet-point list of some
+                                                                               a general level. However, the last two sentences present more
+key features about the software resource in Softpedia.com and
+                                                                               details including what type of mail clients would be supported
+Sourceforge.com. Another type of raw descriptions being used
+                                                                               and what kind of message would be ﬁltered.
+is the Release Notes in Freecode.com. A product has many
+                                                                                  According to sampling statistics of our datasets, there are
+release versions about bug ﬁxes, performance optimizations
+                                                                               25.7% feature elements in a relative high semantic-level,
+and feature enhancements. As depicted in Figure 2(b), we
+                                                                               33.9% feature elements in a relative speciﬁc semantic-level,
+extracted feature elements from the release notes about feature
+                                                                               and 40.4% in the intermediate-level.
+enhancement, which contain some related tags or key words,
+                                                                                  On one hand, the massive number of feature elements in
+such as “add”, “support for” and “new feature”.
+                                                                               different semantic-level are good materials for the construction
+   To allocate different feature elements, which extracted from
+                                                                               of ﬂexible granularity ontology. On the other hand, it is a great
+three different websites, into a uniﬁed domain category, the
+                                                                               challenge for the traditional methods to cluster and reorganize
+two categories of Softpedia.com and Sourceforge.com was
+                                                                               feature elements.
+combined into a new one. Then, all software and their feature
+                                                                                     Synonymic Feature Element: The problem of synonymic
+elements are automatically classiﬁed into the uniﬁed category
+                                                                               feature element happens when two features are used to de-
+according to softwares tags or descriptions using the method
+                                                                               scribe some common or very similar functional attributes.
+of paper [2].
+                                                                               Some feature elements are almost the same with each other,
+                                                                               such as the four feature elements below:
+B. Feature Element Analysis                                                       (1) “Kills the core of AdPower and not only symptoms”;
+   Because different people describe the functions in terms of                    (2) “Kills the core of BANCOS.D and not only symptoms”;
+their personal understanding in an open environment, feature                      (3) “Kills the core of Dyfuca and not only symptoms”;
+elements are unstructured and disordered. To illustrate these                     (4) “Kills the core of eBot and not only symptoms”;
+problem clearly, the feature elements in Antivirus category are                   The difference between these feature elements is the name
+used as examples in this paper.                                                of the malicious code, such as “AdPower”, “BANCOS.D” and
+                                                                               “Dyfuca”. However, all of them present a common functional
+ 2 http://www.softpedia.com                                                    attribute about the ability of killing various popular viruses.
+ 3 http://freecode.com                                                            Another typical problem is that each pair only shares few
+ 4 http://sourceforge.net                                                      core words, such as the following:
+    (1) “Ability to update that does not require downloading
+full package”;
+    (2) “Incremental database updates and often to include
+information about latest threats”;
+    (3) “Incremental updating system minimizes the size of
+regular update ﬁles”;
+    These three feature elements present the common attribute
+about incremental updating, but only the word “update” is
+shared by the two sentences. According to the statistics,
+there are 33.7% of synonymic feature elements in Antivirus                                 Figure 3. Feature elements mapping to topics
+category, 28.9% in File-manger category, and 41.6% in Audio-
+Player category. Thus, feature elements should be merged
+together by an effective method.                                                    Topic Modeling Technique: A topic model provides
+                                                                              a means to automatically analysis the semantic structures
+       Latent Semantic Structures: According to our observa-
+                                                                              within unstructured and unlabeled documents. In this paper,
+tion, one feature element may relate to several speciﬁc topics.
+                                                                              we choose Latent Dirichlet Allocation (LDA) [11] because it
+Take ﬁve feature elements of Mozilla Firefox5 and three topics
+                                                                              has been shown to be more effective for a variety of software
+of “Browse with Security”, “Protect your Privacy” and “Easy
+                                                                              engineering purposes [12] [13] than other topic models like
+to Use” as an example. Figure 3 illustrates the relationship
+                                                                              LSI. In LDA, each word wi in a document d is generated
+among these feature elements and topics. Each feature element
+                                                                              by sampling a topic z from document-topic distribution, and
+connects with one or two topics and this connection can be
+                                                                              then sampling a word from topic-word distribution. More
+exposed by the key words or phrases. For example, the feature
+                                                                              formally, a latent topic z = j is modeled as an unlabeled
+element “Control the level of scrutiny you’d like Firefox to give
+                                                                              topic-word distribution φ(j) = P (w|z = j), which was drawn
+a site with a variety of customized settings” is related to the
+                                                                              from a dirichlet prior distribution Dirichlet(β). The number
+topics of “Browse with Security” and “Protect your Privacy”.
+                                                                              of topics K is speciﬁed beforehand to adjust the granularity.
+The phrases “Control the level of ” and “scrutiny” reﬂects that
+                                                                              Each document d is a mixture of topics θ(d) = P (z) with
+it is possible to associate with the topic of security, and “you’d
+                                                                              a dirichlet prior distribution Dirichlet(α). The generative
+like” and “customized settings” reﬂects the relevancy with the
+                                                                              process of each word in d is an essentially draw from the joint
+topic about user experience. The relationship between topic                                              K
+                                                                              distribution: P (wi ) = i=1 P (wi |zi = j)P (zi = j). Given
+and feature element is a kind of latent semantic structures
+                                                                              the observed documents, Gibbs Sampling algorithm [14] is
+which is useful for the clustering of feature element and the
+                                                                              widely used for posterior inference. Finally, the word-topic φ
+construction of feature-ontology.
+                                                                              and topic-document θ distribution can be approximated.
+                                                                                 However, document is a generalized concept which can
+C. Feature-Topic Model
+                                                                              be any textual resource. In this paper, a feature element
+      Problem Formalization: In a speciﬁc category, such as                   fi can be viewed as a document which is preprocessed by
+Antivirus, all the feature elements in the corpus can be repre-               removing commonly occurring words and then by stemming
+sented as Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes         the remaining words to their root form. According to category,
+the ith feature elements in the corpus. Assuming that K                       we apply LDA to process the documents using the MALLET
+latent topics Tk = {t1 , t2 , . . . , tj , . . . , tk } are implicit in the   tool [15] which is an implementation of the Gibbs sampling
+feature elements, where tj denotes the jth topic. Although                    algorithm. Then, the topic-feature distribution Vm can be
+a feature element can be bound up with several topics, it                     trained, which is the same as θ.
+may put more emphasis on some topics than the others. The
+topic degree within feature element fi can be represented as                  D. iAHC : improved Agglomerative Hierarchical Clustering
+a K-dimensional vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ),        To support multi-grained reuse environment, the semantic
+where pi,j is a topic weight describing the extent to which                   similar feature elements should be merged and reorganized
+the topic tj appears in feature element fi . When pi,j = 0,                   as a ﬂexible hierarchical structure deﬁned as feature-ontology.
+fi is irrelevant to tj . Thus, the υi , i ∈ [1, m], represented by            In this paper, we present an iAHC algorithm (Algorithm 1)
+Vm , can be used to indicate the semantic structure implied                   integrated with the LDA.
+in feature elements. If the Vm can be obtained, the thematic                     Initially, every feature elements is a distinct cluster. Line 4-
+similarity measure would be induced for each pair of feature                  7 ﬁnds the closest two clusters ci and cj in the current cluster
+elements and the synonymic feature elements would be merged                   set M , and merge them into a new cluster c and update M .
+together. Because topic models answer what themes or topics                   The proximity used to measure the distance between every
+a document relates to and quantify how strong such relations                  two clusters, deﬁned as below:
+are, it is a effective way to learn Vm .
+                                                                                                                f i∈ci   similarity(f i, f j)
+                                                                                                                f j∈cj
+  5 http://www.mozilla.org/en-US/ﬁrefox/security                                    proximity(ci , cj ) =                                       (1)
+                                                                                                                         |ci | × |cj |
+Algorithm 1 improved Agglomerative Hierarchical Clustering        Where xmax is the maximum value of υ i , and k is the  ˆ
+Require:                                                          frequency when υ i not equal to zero, and pir is any value
+    Fm = {f1 , f2 , . . . , fi , . . . , fm };                    that not equals to zero in υ i .
+    feature-topic distribution Vm ;                                  Observation 1 The most probable topic reﬂects the most
+Ensure:                                                           prominent theme that the document (feature element) is about.
+    The construction of feature-ongtology;                           Observation 2 The more widely and evenly distributed its
+ 1: M ← D                                                         topics are, the higher-level the document (feature element) is.
+ 2: f eatureSet ← ∅                                                  In brief, Equation 3 can ensure the feature element in the
+ 3: repeat                                                        coarsest granularity have the highest score degreet ∈ (0, 2],
+ 4:     ci , cj = ﬁndTwoClosestClusters(M )                       where xmax ∈ (0, 1] can reﬂect the emphasis topic and the
+ 5:    merge ci and cj as c                                       formula √ k 1                  ∈ (0, 1] can reﬂect the semantic
+                                                                                ˆ             2
+ 6:    delete ci and cj from M                                             e    r=1 (xmax −wir )
+                                                                  generality.
+ 7:    add c to M
+                                                                     The scorem is used to measure the medoid calculated as
+ 8:    centroid = calculateCentroid(c)
+                                                                  the Equation of line 12, where κ and λ is the empirical
+ 9:    for ci ∈ c do
+                                                                  coefﬁcients.
+10:       values = Similarity(ci , centroid)
+11:       degreet = calculateTopicDegree(ci )                        Finally, the medoid with the highest scorem would be
+12:       scorem = κ × values + λ × degreet                       selected. Measuring the similarity for the each pair of elements
+13:       add scorem to M edoidScore                              in medoidC (line 15), the f eatureC (line 17) can be formed
+14:    end for                                                    by merging distinguished feature elements whose similarity
+15:    medoidC = ﬁndMaximumScores(M edoidScore)                   score below a threshold (set to 0.38). Each iteration in the
+16:    scoreF = Similarity(medoidC )                              repeat clause saves the M and f eatureC to HESA. On the
+17:    f eatureC = mergeMedoid(medoidC , scoreF )                 termination of the algorithm, a feature-ontology (Figure 4) for
+18:    saveFeaturetoHESA(M, f eatureC )                           the category is constructed.
+19: until |M | = 1
+                                                                  E. The Retrieval Method of HESA
+                                                                     Figure 4 depicts an example of the construction process
+                                                                  and result with 6 data nodes using the iAHC algorithm. Each
+Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the
+                                                                  cluster consists of several nodes and the top node (the red color
+divergence between any two data point. Based on LDA, the
+                                                                  one in Figure 4) is the feature of the cluster. The concept layer
+divergence can be understood as the thematic space coordinate
+                                                                  is deﬁned as below:
+distance between the two feature elements. There are several
+ways to calculate the divergence between any two feature-            (1) The layer 0 consists of the bottom nodes which are the
+topic distributions, such as Jenson-Shannon divergence, cosine    original feature elements;
+similarity and KL divergence. Taking cosine similarity as an         (2) The layer i consists of the feature node of cluster i and
+example, the Equation is shown as below:                          all nodes in layer i − 1 except those being merged in cluster
+                                                                  i.
+                                          υi · υj                    For example, the layer 3 consists of the features of cluster
+              similarity(fi , fj ) =
+                                       ||υ i || ||υ j ||          3, cluster 2 and cluster 1, because all the nodes in different
+                             k                              (2)   clusters.
+                             r=1    pir × pjr
+                 =                                                   The most important advantage of the feature-ontology is
+                         k                   k
+                         r=1   p2 ×
+                                ir           r=1   p2
+                                                    jr            that the nodes in a layer are the most representative features
+                                                                  under a given similarity threshold. If the stakeholder needs a
+Where k is the topic number and p is the probability value of     generalized feature of the category, the feature in the top layer
+υ.                                                                can be selected. Assuming that the category of Figure 4 can be
+   Line 8-14 pick out a set of feature elements from the new      covered by three features, the feature nodes of cluster 3, cluster
+cluster, deﬁned as medoid, which can be used to represent the     2 and cluster 1 would be retrieved step by step. From top
+theme of c. Two metrics, similarity value and topic degree,       down, the semantic granularity is ﬁner and ﬁner accompanying
+are used to determine the medoid. Firstly, to get the values ,    with the increasing number of features, which can satisfy the
+we calculate the similarity between ci ∈ c and the centroid       requirements of multi-grained reuse environments.
+of c through Equation 2, where the vector υ c of centroid is
+                                               ¯                     Algorithm 2 is a ﬂexible method to retrieve features in
+                       |c|
+                            υ
+calculated by υ c = i=1 i . Then, the Equation 3 is used to
+                ¯       |c|                                       terms of quantity, which demonstrates the advantages of the
+calculate the degreet based on the following two important        feature-ontology. The input is the quantity of feature you need
+observations of feature-topic distribution Vm in our datasets.    for a speciﬁc domain. Line 1-6 show the process of ﬁnding
+                                                                  the suitable layer. Then, all the nodes in the same layer are
+                                            1
+           degreet = xmax +            ˆ
+                                                            (3)   selected out in the repeat clause (line 9-20). An online search
+                                       k               2
+                                       r=1 (xmax −pir )           engine has been implemented based on it in this paper.
+                                e             ˆ
+                                              k
+                                            Figure 4. An example of the feature-ontology
+
+
+
+               IV. E MPIRICAL E VALUATION                                                     Table I
+                                                                                PREPROCESSED EXPERIMENT DATASETS
+   In this section, we present our dataset and experiment
+setting, research questions and answers, and describe some                 Category        #Softpedia   #Sourceforge   #Total   #Topic
+threats to validity.                                                       Antivirus         2919          1105        4024      50
+                                                                         Audio-Player        3714          1283        4997      60
+A. Dataset and Experimental Setting                                      File-Manager        2270          970         3240      40
+   Dataset: We have collected 187,711, 432,004 and 45,021
+projects proﬁles from Softpedia.com, Sourceforge.com and
+Freecode.com respectively. Compared with that of the other            RQ1 How the resultant feature-ontology looks like?
+two communities, the quantity of projects from Freecode.com           RQ2 Does the iAHC algorithm achieve better clustering
+is relatively small. Thus, we just adopt projects in Softpe-       results than the simple but classical method and the state-of-
+dia.com and Sourceforge.com. The feature elements have been        the-art approach?
+classiﬁed into 385 categories and we randomly choose the              RQ3 How accurate is the feature-ontology? Is the structure
+data of 3 unique categories to evaluate our method including       reasonable?
+Antivirus, Audio-Player and File-manger. Furthermore, the
+                                                                   C. Cross-Validation Design of the User Study
+feature elements are preprocessed by removing commonly
+occurring words and then by stemming the remaining words              The cross-validation limits potential threats to validity such
+to their root form. To ensure the quality of data, we omit the     as fatigue, bias towards tasks, and bias due to unrelated factor.
+preprocessed feature elements with less than 6 words. Table 1      We randomly divided the 45 students from computer school
+presents the details about our dataset.                            of NUDT into three groups to evaluate RQ2 and RQ3. The 2
+   Parameter setting: As shown in Table 1, for LDA, the            questions and the 3 categories of dataset can be composed to
+number of topics K was empirically set as different value, and     6 tasks. Each group randomly picks up 2 of them and ﬁnishes
+the hyper-parameters α and β were set with α = 50/K and            in one day, and then we summarize the result.
+β = 0.01 respectively, and the iteration of Gibbs Sampling was           RQ1: Feature-ontology: Figure 4 shows an example
+set as 1000. In addition, the coefﬁcients κ and λ of Algorithm     feature-ontology of the Antivirus category which is a very
+1 were set with κ = 0.7 and λ = 0.3.                               reasonable structure. The features (red color) in different layer
+                                                                   can be mapped to resources on different granularities. In
+B. Research Questions                                              addition, the feature is relatively representative for each cluster.
+  To demonstrate the effectiveness of the approach in this               RQ2: Clustering Results: We choose the K-Medoids
+paper, we are interested in the following research questions:      (tf-idf), a classic and widely used clustering algorithm, and
+Algorithm 2 a ﬂexible granularity retrieval method
+Require:
+    kf the quantity of feature you need;
+    T a hierarchical structure consisting of n nodes;
+Ensure:
+    f eatureSet a set of features;
+ 1: layer ← n − k
+ 2: if layer = 0 then
+ 3:    return the nodes of T [0]
+ 4: end if                                                                                  (a) the average value
+ 5: i ← 0
+ 6: f eatureSet[i] ← the node of T [layer]
+ 7: layer ← layer − 1
+ 8: i ← i + 1
+ 9: repeat
+10:    if T [layer] is a subtype of f eatureSet[i] then
+11:       layer ← layer − 1
+12:    else
+13:       f eatureSet[i] ← the node of T [layer]
+14:       i←i+1
+15:       layer ← layer − 1
+16:       if layer = 0 then                                                               (b) the standard deviation
+17:          return the rest nodes of T
+                                                                             Figure 5. The clustering results for each category
+18:       end if
+19:    end if
+                                                                                          Table II
+20: until i = kf                                                         EVALUATION OF FEATURE-ONTOLOGY QUALITY
+21: return f eatureSet
+                                                                             Category      Score-3    Score-2       Score-1   Likert
+                                                                             Antivirus     33.3%      50.0%         16.7%     2.17
+the Incremental Diffusive Clustering (IDC), the state-of-the-art           Audio-Player    39.1%      46.3%         14.6%     2.25
+                                                                           File-Manager    32.7%      52.4%         14.9%     2.18
+technique proposed in paper [8], as the baseline. Especially,                 Average      35.03%     49.57%        15.4%     2.20
+the IDC use the feature descriptions from Softpedia.com which
+is the same as our dataset. We also use the modiﬁed version
+of Cans metric [8] to compute the ideal number of clusters.        out by our approach is reasonably meaningful.
+Then, we retrieve the corresponding number of clusters from
+HESA for comparison. Precision is a percent of the reasonable      D. Threats to validity
+feature elements in a cluster. Figure 5 shows the average value       First, the participants manually judge the clustering re-
+and standard deviation of the judgments given by different         sults and their ratings could be inﬂuenced by fatigue, prior
+groups. We can see that our approach achieves the highest          knowledge and the other external factors. These threats were
+precision in all three categories and relatively low deviations.   minimized by randomly distributing participants to the various
+The precisions and deviations are comparatively stable across      groups and dividing the tasks into multiple parts. Second, due
+different categories, which shows the probability that our         to our limited datasets, parameters used in our approach, the
+approach is more generalizable in different domains. We plan       evaluation is not comprehensive enough.
+to conduct more experiments to study this issue in the future.        In the feature, with the help of our online search engine,
+     RQ3: Accuracy of the feature-ontology: According to           we plan to adopt the idea of crowdsourcing and upload a lot
+the three categories, participants randomly choose 15 clusters     of tasks about use study on the Internet with a low price, such
+in different layers from HESA using the online search engine       as 5 cent. Therefore, a comprehensive and reliable evaluation
+respectively. Each participant is randomly assigned 3 layers       result can be obtained.
+and asked to provide a 3-point Likert score for each cluster
+to indicate whether they agree if the feature is the most                                 V. R ELATED W ORK
+representative of all terms. Score 3 means very reasonable,           Recently, mining software repository has been brought into
+Score 2 means reasonable but also have better one, Score 1         focus and many outstanding studies have emerged that use
+means unreasonable.                                                this data to support various aspects of software development
+   Table 2 shows that 35.03% features are reasonable, 49.57%       [16]. However, fewer previous works have been done for
+partially reasonable and only 15.40% unreasonable. The mean        mining software feature and especially construction of feature-
+of Likert score is 2.20, which means that the feature selected     ontology (deﬁned in this paper), to the best of our knowledge.
+In this section, we review some previous works about feature                           VII. ACKNOWLEDGEMENT
+analysis and ontology learning.                                      This research is supported by the National High Technology
+   In feature analysis area, most approaches involve either the    Research and Development Program of China (Grant No.
+manual or automated extraction of feature related descriptions     2012AA011201) and the Postgraduate Innovation Fund of
+from software engineering requirements and then use the            University of Defense Technology (Grant No.S120602).
+clustering algorithm to identify associations and common
+domain entities [7] [17] [18]. Niu et al. [19] propose an on-                                   R EFERENCES
+demand clustering frame-work that provided semi-automatic           [1] W. B. Frakes and K. Kang, “Software reuse research: Status and
+support for analyzing functional requirements in a product line.        future,” IEEE Trans. Softw. Eng., vol. 31, no. 7, pp. 529–536, Jul.
+                                                                        2005. [Online]. Available: http://dx.doi.org/10.1109/TSE.2005.85
+Mathieu Acher et al. [9] introduced a semi-automated method         [2] T. Wang, G. Yin, X. Li, and H. Wang, “Labeled topic detection of open
+for easing the transition from product descriptions expressed           source software from mining mass textual project proﬁles.” in Software
+in a tabular format to feature models. A decision support               Mining, 2012, pp. 17–24.
+                                                                    [3] A. E. Hassan and T. Xie, “Mining software engineering data.” in ICSE
+platform is proposed in paper [20] to build the feature model           (2), 2010, pp. 503–504.
+by employing natural language processing techniques, external       [4] S. Apel and C. Kastner, “An overview of feature-oriented software
+ontology (such as WordNet), and MediaWiki system. However,              development.” 2009, pp. 49–84.
+                                                                    [5] K. Lee, K. C. Kang, and J. Lee, “Concepts and guidelines of feature
+the quantity of the existing documents is so limited that the           modeling for product line software engineering.” in ICSR, 2002, pp.
+brilliance of data mining techniques cannot be fully exploited.         62–77.
+To address this limitation, paper [8] and [10] proposed the         [6] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and A.S.Peterson,
+                                                                        “Feature-oriented domain analysis (foda) feasibility study. technical
+Incremental Diffusive Clustering to discover features from a            report.” 1990.
+large number of software proﬁles in Softpedia.com. Based            [7] W. B. Frakes, R. P. Dłaz, and C. J. Fox, “Dare: Domain analysis and
+on the features, a recommendations system is build by using             reuse environment.” 1998, pp. 125–141.
+                                                                    [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang, B. Mobasher,
+association rule mining and the k-Nearest-Neighbor machine              C. Castro-Herrera, and M. Mirakhorli, “On-demand feature recommen-
+learning strategy. Compared with these studies, the clustering          dations derived from mining public product descriptions.” in ICSE, 2011,
+algorithm presented in this paper is more effective by mining           pp. 181–190.
+                                                                    [9] M. Acher, A. Cleve, G. Perrouin, P. Heymans, C. Vanbeneden, P. Collet,
+the semantic structures from feature elements and especially            and P. Lahire, “On extracting feature models from product descriptions.”
+focus on the construction of feature-ontology.                          in VaMoS, 2012, pp. 45–54.
+   Ontology learning (also called ontology extraction) from        [10] C. McMillan, N. Hariri, D. Poshyvanyk, J. Cleland-Huang, and
+                                                                        B. Mobasher, “Recommending source code for use in rapid software
+text aims at extracting ontological concepts and relation from          prototypes.” in ICSE, 2012, pp. 848–858.
+plain text or Web pages. Paper [21] developed an ontology          [11] D. Blei, A. Ng, and M. Jordan, “Latent Dirichlet Allocation,” Journal
+learning framework using hierarchical cluster and associa-              of Machine Learning Research, vol. 3, pp. 993–1022, 2003. [Online].
+                                                                        Available: http://www.cs.princeton.edu/ blei/lda-c/
+tion rule for ontology extraction, merging, and management.        [12] K. Tian, M. Revelle, and D. Poshyvanyk, “Using latent dirichlet al-
+Several researches have attempted to induce an ontology-                location for automatic categorization of software.” in MSR, 2009, pp.
+like taxonomy from tags. Jie Tang et al. [22] proposed a                163–166.
+                                                                   [13] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor, “Software traceabil-
+generative probabilistic model to mine the semantic structure           ity with topic modeling.” in ICSE (1), 2010, pp. 95–104.
+between tags and their annotated documents, and then create        [14] T. Grifﬁths, “Gibbs sampling in the generative model of Latent
+an ontology based on it. Xiang Li et al. [23] enhance an                Dirichlet Allocation,” Stanford University, Tech. Rep., 2002. [Online].
+                                                                        Available: www-psych.stanford.edu/ gruffydd/cogsci02/lda.ps
+agglomerative hierarchical clustering framework by integrating     [15] A. K. McCallum, “Mallet: A machine learning for language toolkit,”
+it with a topic model to capture thematic correlations among            2002, http://mallet.cs.umass.edu.
+tags. Based on tens of thousands of software projects and their    [16] A. E. Hassan, “The road ahead for mining software repositories.” 2008.
+                                                                   [17] S. Park, M. Kim, and V. Sugumaran, “A scenario, goal and feature-
+tags, Shaowei Wang et al. [24] propose a similarity metric to           oriented domain analysis approach for developing software product
+infer semantically related terms, and build a taxonomy that             lines.” 2004, pp. 296–308.
+could further describe the relationships among these terms. In     [18] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid, P. Sawyer, P. Rayson,
+                                                                        C. Pohl, and A. Rummler, “An exploratory study of information retrieval
+this paper, to support multi-grained reuse, emphases of the             techniques in domain analysis.” in SPLC, 2008, pp. 67–76.
+feature-ontologys construction is on the measure of similarity     [19] N. Niu and S. M. Easterbrook, “On-demand cluster analysis for product
+and granularity instead of generality.                                  line functional requirements.” in SPLC, 2008, pp. 87–96.
+                                                                   [20] E. Bagheri, F. Ensan, and D. Gasevic, “Decision support for the software
+                                                                        product line domain engineering lifecycle.” 2012, pp. 335–377.
+          VI. C ONCLUSION AND F UTURE W ORK                        [21] A. Maedche and S. Staab, “Learning ontologies for the semantic web.”
+   The continuing growth of open source ecosystems creates              in SemWeb, 2001.
+                                                                   [22] J. Tang, H. fung Leung, Q. Luo, D. Chen, and J. Gong, “Towards
+ongoing opportunities for mining reusable knowledge. In this            ontology learning from folksonomies.” in IJCAI, 2009, pp. 2089–2094.
+paper, we have explored the idea of mining large scale reposi-     [23] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu, and D. Tang,
+tories and constructed the HESA to support software reuse. In           “Inducing taxonomy from tags: An agglomerative hierarchical clustering
+                                                                        framework,” in Advanced Data Mining and Applications. Springer
+the future, we plan to improve the performance of our method            Berlin Heidelberg, 2012, vol. 7713, pp. 64–77.
+and aggregate richer features from software repositories. In       [24] S. Wang, D. Lo, and L. Jiang, “Inferring semantically related software
+addition, we will design several representative applications            terms and their taxonomy by leveraging collaborative tagging.” in ICSM,
+                                                                        2012, pp. 604–607.
+based on HESA, such as software resource recommendation
+system, to support the reuse of multi-grained resources.
+
\ No newline at end of file
diff --git a/res/paper/apsec2014.pdf b/res/paper/apsec2014.pdf
new file mode 100644
index 0000000..eb96bad
--- /dev/null
+++ b/res/paper/apsec2014.pdf
@@ -0,0 +1,571 @@
+ Who Should Review This Pull-Request: Reviewer
+ Recommendation to Expedite Crowd Collaboration
+                          Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Tao Wang∗ , Charles X. Ling‡
+                                   ∗ National
+                                         Laboratory for Parallel and Distributed Processing,
+                 College of Computer, National University of Defense Technology, Changsha, 410073, China
+         ‡ Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                          {yuyue,hmwang,yingang,taowang2005}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+   Abstract—Github facilitates the pull-request mechanism as an          As a mushrooming number of developers use the pull-
+outstanding social coding paradigm by integrating with social me-     request mechanism to contribute their ideas and suggestions in
+dia. The review process of pull-requests is a typical crowdsourcing   GitHub, the efﬁciency of software evolution and maintenance
+job which needs to solicit opinions of the community. Recom-
+mending appropriate reviewers can reduce the time between the         is highly related to the crowd-based review process. However,
+submission of a pull-request and the actual review of it. In this     the discussion among reviewers is time-consuming. Some
+paper, we ﬁrstly extend the traditional Machine Learning (ML)         relevant reviewers may not notice the new pull-request in
+based approach of bug triaging to reviewer recommendation.            time. Recommending reviewer will make the review process
+Furthermore, we analyze social relations between contributors         more effective, because it can reduce the time between the
+and reviewers, and propose a novel approach to recommend
+highly relevant reviewers by mining comment networks (CN) of          submission of a pull-request and the actual review of it.
+given projects. Finally, we demonstrate the effectiveness of these       A pull-request contains a title and description summarized
+two approaches with quantitative evaluations. The results show        its contributions of bug ﬁxes or feature enhancements, so it
+that CN-based approach achieves a signiﬁcant improvement over         is similar to a bug report in bug tracking systems. To the
+the ML-based approach, and on average it reaches a precision of       best of our knowledge, there is very few studies of reviewer
+78% and 67% for top-1 and top-2 recommendation respectively,
+and a recall of 77% for top-10 recommendation.                        recommendation for pull-requests. The most similar researches
+   Keywords—Pull-request, Reviewer Recommendation, Com-               [7]–[12] are the approaches for recommending developers with
+ment Network, Social Coding                                           the right implementation expertise to ﬁx incoming bugs. For
+                                                                      a newly received bug report, these approaches ﬁrstly ﬁnd
+                       I. I NTRODUCTION                               out some similar historical reports or source code ﬁles by
+   The pull-based software development model [1], compared            measuring text similarity. Then, the expertise of a developer
+to traditional methods such as email-based patching [2] [3],          can be learned based on the bug-ﬁxing history, source revision
+makes developers contribute to software projects more ﬂexibly         commits or code authorship. If we only focus on the text
+and efﬁciently. In GitHub, the pull-request mechanism is              of pull-requests, these approaches can be extended to assign
+upgraded to a unique social coding paradigm [4] by integrating        pull-requests to appropriate developers. However, the social
+multiple social media involving follow, watch, fork and issue         relations between pull-request contributors and reviewers are
+tracker. The socialized pull-request model is pushing software        neglected. Compared to bug ﬁxing, the review process of pull-
+evolution and maintenance into crowd-based development [5].           request is a social activity depending on the discussions among
+   A typical contribution process [6] in GitHub involves fol-         reviewers in GitHub. Thus, social relation is one of key factors
+lowing steps. First of all, a contributor could ﬁnd an attractive     of reviewer recommendation.
+project by following some well-known developers and watch-               In this paper, we ﬁrstly implement the Machine Learning
+ing their projects. Secondly, by forking an interesting one,          (ML) based approach of Anvik et al. [7], which is one of
+the contributor implements a new feature or ﬁxes some bugs            the most representative work of bug triaging. Furthermore,
+based on his cloned repository. When his work is ﬁnished,             we analyze social relations among reviewers and contributors,
+the contributor sends the patches from the forked repository          and propose a novel approach of reviewer recommendation.
+to its source by a pull-request. Then, all developers in the          Central to our approach is the use of a novel type of social
+community have the chance to review that pull-request in the          network called Comment Network (CN), which can directly
+issue tracker. They can freely discuss whether the project needs      reﬂect common interests among developers. Finally, we con-
+that feature, whether the code style meets the standard or            duct an empirical study on 10 projects which have received
+how to further improve the code quality. Next, in the light           over 1000 pull-requests in GitHub. As there is no previous
+of reviewers’ suggestions, the contributor would update his           work of reviewer recommendation for pull-requests, we design
+pull-request by attaching new commits, and then reviewers             a simple and effective method as a comparison baseline in
+discuss that pull-request again. Finally, a responsible manager       experiments. The quantitative evaluations show that our CN-
+of the core team takes all the opinions of reviewers into             based approach achieves signiﬁcant improvements over the
+consideration, and then merges or rejects that pull-request.          baseline and ML-based method.
+                                     Figure 1. An example of discussion among reviewers in a pull-request
+   The remainder of this paper is structured as follows. Section        can see that a growing number of developers contribute to
+II conducts an empirical study of pull-request and depicts a            open source using the pull-request mechanism.
+motivating example for recommending reviewers to incoming                                                80000
+pull-requests. Section III present how to assign a pull-request
+                                                                                                         70000
+to reviewers using ML technique, and Section IV propose
+our CN-based recommendation approach. Experiments and                                                    60000
+                                                                               number of pull-requests
+
+
+
+
+analysis can be found in Section V. Finally, we present related                                          50000
+work in Section VI and draw our conclusions in Section VII.
+                                                                                                         40000
+           II. E MPIRICAL S TUDY OF P ULL - REQUEST                                                      30000
+  In this section, we ﬁrstly investigate the popularity of pull-                                         20000
+request model in GitHub. Then, a typical process of discussion
+among reviewers is introduced with an example.                                                           10000
+
+                                                                                                             0
+                                                                                                                2             1   2              1  2             1    2
+A. Popularity of Pull-request                                                                                1-0 1-05 1-08 1-1 2-0 2-05 2-08 2-1 3-0 3-05 3-08 3-1 4-0
+                                                                                                          201 201 201 201 201 201 201 201 201 201 201 201 201
+   Gousios et al. [1] has illustrated the popularity of pull-                                                                         time (month)
+
+based development model based on the comparison of usage                                                         Figure 2. The growth of Pull-request quantity
+between pull-request and shared repository in GitHub. They              B. Discussion among Reviewers
+draw a conclusion that pull-request is a signiﬁcant mechanism
+for distribute software development, even though only 14% of               When a new pull-request arrives, the decision-making is
+repositories are using it in GitHub until February 2013.                a crowdsourcing process which depends on the discussion
+   In the current, many competitive projects are growing fast           among reviewers. Taking a real pull-request of Ruby on Rails
+supported by pull-request such as Ruby on Rails1 which has              as an example, as shown in Figure 1, a core developer called
+received more than 10000 pull-requests. Therefore, we further           rafaelfranca is the ﬁrst reviewer to discuss this pull-request.
+investigate the usage of pull-request model among projects              As he thought that javan’s work would be relevant to this pull-
+which receive at least 100 pull-requests. There are 3587                request, he mentioned (@) javan to join the discussion. At the
+projects (exclude forked repositories) are extracted from the           second post, we see that javan indeed presented his opinion.
+latest database of GHTorrent [13]. These projects cover 53              Meanwhile, other users participated in the discussion and
+different program languages, but the distribution of the number         made some important suggestions as well. Later, the author
+of projects is highly skewed. Top-5 program languages contain           updated the pull-request by appending a new commit taking
+67% of projects (JavaScript 678, Ruby 475, Python 460, Java             into account the above suggestions, and then he mentioned
+424 and PHP 362). From June 2011 to March 2014, the                     the two key reviewers for acknowledgement. Finally, the pull-
+absolute number of new pull-requests increased dramatically             request was merged into the Ruby on Rails’ master branch.
+reaching the peak of 76673 per month (Figure 2). Thus, we                  As the example depicted above, apart from javan who
+                                                                        is informed by rafaelfranca, other three reviewers join the
+  1 https://github.com/rails/rails                                      discussion spontaneously. Because all the comments affect
+the decision-making of that pull-request, if they do not catch       generated from top-1 to top-k according to the probability
+that pull-request timely, the time of review process would be        distribution that the ML classiﬁers predicted on the labels
+longer. Beside, except for @mentioning, project managers can         using the one-against-all strategy. When the probability values
+use a label to assign a pull-request to someone. However, only       are equal, we rank the developers in terms of the number
+0.89% of pull-requests have been set that label in our dataset.      of pull-requests’ comments that they had submitted to the
+   Thus, if appropriate reviewers are automatically recom-           given project. In this paper, we choose SVM as our basis
+mended when a new pull-request is submitted, its review              classiﬁer because it has been proved to be a superior classiﬁer
+process would be greatly accelerated. It is worth mentioning         in developers recommendation [7], [12].
+that this novel application can be seamlessly integrated with
+                                                                         IV. S OCIAL N ETWORK BASED R ECOMMENDATION
+the @mention tool to take its full advantage by @mentioning
+the potential reviewers automatically.                                  ML-based recommendation focuses on the text of pull-
+                                                                     requests. However, the preprocessed text of a pull-request
+   III. M ACHINE L EARNING BASED R ECOMMENDATION                     mainly consists of the names or identiﬁers of code ﬁles,
+   We aim to recommend highly relevant reviewers for pull-           functions and variables, so the corpus of a project is not very
+requests to improve the efﬁciency of social coding. The              large. When a reviewer has commented plenty of pull-requests,
+representative existing work of automated bug triaging are           his label covers most of terms in the corpus. The ML classiﬁers
+the approaches of mining bug repositories based on Machine           would biasedly assign almost all incoming pull-requests to
+Learning (ML) [7]–[9]. All these approaches start from the           him. Thus, the workload of this reviewer continues to increase.
+bug-text, such as title, description and source code. In the            By contrast, the basic intuition of social network based
+context of ML, the bug triaging problem can be represented as        recommendation is that the developers who share common
+text categorization (i.e., classiﬁcation of text documents into a    interests with a contributor are the appropriate reviewers of
+set of categories). The text documents are the bug-text and the      his incoming pull-requests. For reviewer recommendation, the
+categories into which bug reports are classiﬁed are the names        common interests among developers can be directly reﬂected
+of developers suitable to resolve the report. In this paper, we      by comment relations between contributors and reviewers
+treat pull-requests as text documents, and then utilize the ML-      in historical pull-requests. We propose a novel approach to
+based approach to predict top-k relevant reviewers.                  construct comment networks by mining historical comment
+                                                                     traces. Then, we predict highly relevant reviewers to incoming
+A. Vector Space Model of Pull-Request
+                                                                     pull-requests based on comment network analysis.
+   Each pull-request is characterized by its title and descrip-
+tion, and labeled with a set of names about developers who           A. Comment Network Construction
+had submitted at least one comment to it. Then, all stop words          For each project, the corresponding comment network is
+and non-alphabetic tokens are removed, and remaining words           constructed individually. In a given project, the structure of
+are stemmed. We use vector space model to represent each             comment relations between contributors and reviewers is a
+pull-request as a weighted vector. Each element in the vector        many-to-many model. As shown in Figure 3, there are many
+is a term, and the value stands for its importance for the           contributors have submitted pull-requests to Project P. A
+pull-request. For a given word, the more times it appear in          developer can be a contributor submitting several pull-requests,
+a pull-request, the more important it is for that pull-request.      and he could also be a reviewer in other contributors’ pull-
+On the contrary, the more pull-requests it appears in, the less      requests. A pull-request would be commented by several
+important it is for distinguishing these pull-requests. Term         reviewers more than once. For example, reviewer R1 had
+frequency-inverse document frequency (tf-idf) is utilized to         presented 5 comments in the pull-request P R2 . In addition,
+indicate the value of a term, which can be calculated as             a reviewer would inspect multiple pull-requests, such as re-
+Equation 1.                                                          viewer R1 has commented P R1 and P R2 .
+                              nt                 NPR                                     Contributor C1    Pull-request PR1     2
+                                                                                                                                          Reviewer R1
+  tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                              Np r         |pr ∈ PR : t ∈ pr |                                                                  5
+
+                                                                                                           Pull-request PR2         1
+                                                                                         Contributor C2                                   Reviewer R2
+where t is a term, pr is a pull-request, PR is the corpus
+                                                                                                                  …                 m        …
+of all pull-requests in a given project, nt is the count of             Project P
+                                                                                         Contributor C3    Pull-request PRk               Reviewer Rt
+appearance for term t in pull-request pr , and Npr and NPR
+are the total number of terms in pr and pull-requests in the                                  …                                     m+1
+                                                                                                           Pull-request PRk+1
+corpus respectively.                                                                     Contributor Cn
+
+
+B. Training ML Classiﬁers                                                 Figure 3. Comment relations between contributors & reviewers
+
+   In general, a pull-request would be reviewed by several             The comment network is deﬁned as a weighted directed
+developers, so ML classiﬁers should provide more than one            graph Gcn = V, E, W , where the set of developers is
+label for a pull-request testing instance. It means that they        indicated as vertices V and the set of relations between nodes
+should be able to deal with the multi-label classiﬁcation            as edges E. If node vj has reviewed at least one of vi ’s pull-
+problem [14]. A ranked list of recommended candidates is             requests, there is a edge eij from vi to vj . The set of weights
+W reﬂects the importance degree of edges, and the weight wij                     impact of one user in the same pull-request, so w(12,1) can
+of eij can be evaluated by Equation 2.                                           be calculated as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24.
+                k                              k   m                             Similarly, the weight w12 = w(12,1) + w(12,2) = 2.19, and
+       wij =         w(ij,r) = Pc ×                     λn−1 × t(ij,r,n)   (2)   w13 = 0.95. Thus, we can predict that reviewer v2 share more
+               r=1                          r=1 n=1                              common interests with contributor v1 compared to v3 , which
+where k is the total number of pull-request submitted by vi ,                    has been quantiﬁed by the corresponding weights of edges.
+and w(ij,r) is a component weight related to an individual pull-                   The comment network has several desirable qualities.
+request r. Pc is an empirical default value2 (set to 1.0), which                   •   Firstly, the global collaboration structure is revealed
+is reserved to estimate the inﬂuence of each comment on the                            between contributors and reviewers in a given project,
+pull-request, and m is the sum of comments submitted by vj in                          which can be used for mining reviewer candidates of
+the same pull-request r. When reviewer vj published multiple                           incoming pull-requests.
+comments (m = 1) in the same pull-request, his inﬂuence                            •   Secondly, the time-sensitive factor t is introduced to
+is controlled by a decay factor λ (set to 0.8). The element                            guarantee that the recent comments are more valuable
+t(ij,r,n) is a time-sensitive factor of corresponding comment                          for the weights of edges than the old comments.
+which can be calculated as below:                                                  •   Thirdly, the decay factor λ is introduced to guarantee
+                    timestamp(ij,r,n) − baseline                                       the difference values between the comments submitted to
+        t(ij,r,n) =                                 ∈ (0, 1] (3)                       multiple pull-requests or single pull-request. For example,
+                       deadline − baseline
+                                                                                       if reviewer vj commented 5 different pull-requests of vi
+where timestamp(ij,r,n) is the date that reviewer vj presented
+                                                                                       and meanwhile vq commented one of vi ’s pull-requests
+the comment n in pull-request r which is reported by contrib-
+                                                                                       5 times, the weight of wij is larger than wiq .
+utor vi . The baseline and deadline are highly related to the
+selection of training set. If we use the data of the last one and a
+                                                                                 B. Reviewers Recommendation
+half years from 2012-01-01 to 2013-05-31 to learn the weights
+of comment network, the parameters baseline and deadline                            Based on the comment networks, new pull-requests are
+are set to 2011-12-31 and 2013-05-31 respectively.                               divided into two parts according to their submitters. The ﬁrst
+                                          v3                   v4                part are the Pull-requests from Acquaintance Contributors
+                                                                                 denoted as PAC. For a PAC, starting from the node of its
+                                                                                 submitter, we can ﬁnd at least one neighbor in the directed
+                                                                                 graph. For example, in Figure 4, when v1 submits a new
+                                            =?                                   pull-request, this pull-request is a PAC because we ﬁnd two
+                              95
+
+
+
+
+                                        w 41
+                           0.
+
+
+
+
+                                                            w42=?                neighbors starting from v1 . The other part are Pull-Requests
+                         13
+                            =
+                     w
+
+
+
+
+                                                                                 from New Contributors denoted as PNC. For a PNC, the
+                                                                                 submitter used to be a reviewer but has not submitted any pull-
+                                w12=2.19
+                                                                                 request, or it is a newcomer excluded from the training set,
+                                                       v2                        so there is no neighbor starting from it in the corresponding
+                    v1
+                                   v2 commented v1's PR_1 on 2012-12-03
+                                                                                 comment network. Hence, we can further divide reviewer
+                                   v2 commented v1's PR_1 on 2013-01-12          recommendation into two different tasks.
+                                   v2 commented v1's PR_2 on 2013-05-07
+            Project:
+                                   v3 commented v1's PR_2 on 2013-05-06          Algorithm 1 Top-k recommendation for PAC
+          Ruby on Rails
+                                         v1 commented v4's PR……
+                                         v2 commented v4's PR……
+                                                                                 Require: Gcn is the comment network of a given project; vs
+                                         v4 commented v1's PR……                      is the contributor of a new pull-request; topk is the number
+                                                                                     of reviewers of requirement;
+             Figure 4. An example of the comment network
+                                                                                 Ensure: recSet is a set of sorted reviewers;
+   Figure 4 shows an example of a part of comment network                         1: Q.enqueue(vs ) and recSet ← ∅
+about Ruby on Rails. Two different pull-requests (PR_1 and                        2: repeat
+PR_2) reported by v1 have been commented by v2 and v3 , so                        3:    v ← Q.dequeue and Gcn .RankEdges(v)
+there are two edges from v1 to v2 and v1 to v3 . Evaluating                       4:    repeat
+the relation between v1 and v2 , k of Equation 2 equals 2,                        5:       if topk = 0 then
+because v2 reviewed both two pull-requests. For PR_1, v2                          6:          return recSet
+commented it twice, so we set m = 2. The ﬁrst time-sensitive                      7:       end if
+factor of the date 2013-12-03 can be computed by Equation 3                       8:       vnb ← Gcn .BestN eighbor(v)
+that t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12                    9:       Q.enqueue(vnb ) and Gcn .mark(vnb )
+(t12,1,2 ≈ 0.731), another review published by v2 in PR_1                        10:       recSet ∪ {vnb } and topk = topk − 1
+should be controlled by λ (set to 0.8) due to the diminishing                    11:    until Gcn .N eighors(v) all marked
+                                                                                 12: until Q is empty
+  2 User comments can be found in pull-requests, issue posts and commit
+                                                                                 13: return recSet
+ﬁles. Here, we just use the comments of pull-request.
+   Recommendation for PAC: For a PAC, it is natural to              multiple communities, instead of always recommending from
+recommend the user who has previously interacted with the           the biggest communities. In our implementation, we extract the
+contributor directly, i.e., the node that is a connected neighbor   community structure from the comment network using Gephi
+starting from the contributor node in the comment network. If       [16] which integrates and optimizes a famous algorithm of
+there are more than one neighbor, the node with the highest         community detection purposed by Blondel et al. [17]. The size
+weights get selected ﬁrst. Hence, reviewer recommendation           of the communities is depicted by the number of developers
+can be treated as a kind of directed graph traversal problem.       it has, and the activeness of a reviewer is measured by the
+In this paper, we improve the classical method of Breadth-First     number of pull-requests he has reviewed in history, in other
+Search to recommend top-k reviewers for new pull-requests as        words, the in-degree of a node in the comment network. The
+shown in Algorithm 1. First of all, we initialize a queue and       recommendation set is generated by following steps:
+put the source node vs onto this queue. Then, starting from            1) Rank the communities by their size (number of nodes);
+the unvisited edge with the highest weight (RankNeighors)              2) calculate the in-degree of nodes in top-k community;
+every time, we loop to select (BestNeighbor) and marked the            3) Select the top-k nodes based on their in-degree from top-
+nearest neighbor as a candidate. If the number of contributor’s     k communities one by one.
+neighbors is less than top-k, we further visit the child nodes
+until top-k nodes are selected out.                                                  V. E XPERIMENTS E VALUATION
+   Recommendation for PNC: For a PNC, since there is                A. Experiment Questions
+no prior knowledge of which developers used to review the              RQ1: How effective is the SVM-based approach applied to
+submitter’s pull-request, we want to predict the candidates who     pull-request assignment?
+share common interests with this contributor by analyzing the
+                                                                       RQ2: Does the CN-based approach have signiﬁcant im-
+overall structure of comment network.
+                                                                    provement compared to the SVM-based approach?
+   Firstly, for a contributor who is a node but without any
+                                                                       RQ3: Do SVM-based approach and CN-based approach
+connected neighbor in the comment network, we mine the
+                                                                    have consistent performance on projects of different charac-
+reviewers based on patterns of co-occurrence across pull-
+                                                                    teristics?
+requests. For example, if v2 and v3 have reviewed plenty of
+                                                                       For experiment question RQ1, we explore whether highly
+pull-requests together, we can assume that they would share
+                                                                    relevant reviewers can be identiﬁed using the machine learn-
+more common interests than others. Thus, when v3 submitted
+                                                                    ing approach described in section III. For experiment RQ2,
+a new pull-request (PNC), we recommend v2 to review his
+                                                                    we illustrate whether social relations are more effective for
+pull-request, and vice versa. We use Apriori algorithm of as-
+                                                                    reviewer recommendation. For RQ3, we aim to know are there
+sociation rule mining [15] to generate top-k frequent itemsets,
+                                                                    any distinct results of applying these approaches on different
+and then rank the candidates according to their supports.
+                                                                    projects and why.
+             C1
+                                                      C2
+                                                                                                   Table I
+                                                                                     P REPROCESSED EXPERIMENT DATASET
+                                                                                                  #Pull-requests       #Comments
+             B
+             B                                                            Project   Language                                         #Candidates
+                                                                                                 Training    Test   Training  Test
+                                                     C
+                                                     C                     akka       Scala        1112       34     10640    467        16
+                                                                           scala      Scala        2028       64     13475    944        32
+                                                                          bitcoin   TypeScript     1067       63      5446    688        21
+             A
+             A                                                             node     JavaScript     1196       14      3497    220        73
+                                                                          jquery    JavaScript      512       14      2967    196        27
+                                   C3
+                                                                         symfony       PHP         2029       29      9601    419        79
+                                                                        phantomjs      C++          677       53      2866    728        20
+                                                                           xbmc         C          1629       81      8493   1094        73
+                                                                            rails     Ruby         3158       59     13060    583       168
+                                   D                                    homebrew      Ruby         4307       51     12255    842        22
+                                   D
+                                                                           Sum                    17715      462     82300   6181       479
+
+
+                                                                    B. Experiment Design
+          Figure 5. Community structure of comment network             Data Selection: Gousios et al. [18] [13] provide a compre-
+   In addition, for a newcomer who is a node excluded               hensive dataset to study the pull-request development model
+from the comment network, the most active reviewers in              of GitHub. Our approach is evaluated on 10 projects which
+different kinds of communities become the most probable             have received over 1000 pull-requests. We use the data of last
+candidates. We assume that developers with common interests         one and a half years from 2012-01-01 to 2013-05-31 as our
+will spontaneously form a community in the comment network.         training set and the data from 2013-06-01 to 2013-10-01 as
+However, the structure of the comment network shows that            our test set. The descriptions and titles are used to learn SVM
+developers are not always uniformly dispersed, as shown in          classiﬁers and comment relations are used to build comment
+ﬁgure 5. It is probable that these most active reviewers could      networks. In order to learn the valid classiﬁers, we ﬁrst do stop
+belong to the biggest community, such as the top-2 most             words removal and stemming over the descriptions and titles.
+active nodes A and B belong to the same community C1.               Then, we retain those pull-request with more than 10 words.
+Therefore, we would like our recommendation list to cover           The test set includes some simple pull-requests which need not
+be reviewed, so this kind of pull-requests which received less                                Furthermore, we present the following null hypotheses to
+than 4 comments are omitted. After that, there are 17715 pull-                             evaluate the improvement of our CN-based approach compared
+requests in the training set and 462 in the test set, as shown                             with the baseline and the SVM-based approach:
+in Table I. For each project, we recommend top-1 to top-10                                    H0 1 : There is no statistically signiﬁcant difference between
+reviewers to a new pull-request from Candidates in Table I.                                the precisions of the baseline and CN-based approach.
+   Evaluation Metrics: We evaluate the performances of our                                    H0 2 : There is no statistically signiﬁcant difference between
+approaches over each project by precision and recall which                                 the precisions of the SVM-based and CN-based approach.
+are widely used as standard metrics in previous work. The                                     H0 3 : There is no statistically signiﬁcant difference between
+formulae for our metrics are listed below:                                                 the recalls of the baseline and CN-based approach.
+               | Rec Reviewers ∩ Actual Reviewers |                                           H0 4 : There is no statistically signiﬁcant difference between
+  P recision =                                                                             the recalls of the SVM-based and CN-based approach.
+                         | Rec Reviewers |
+           | Rec Reviewers ∩ Actual Reviewers |                                               The results of Student’s t-test are listed in Table II. For H0 1
+  Recall =                                                                                 and H0 2 of precision, one-sided p-value p < 0.05 and t-test
+                    | Actual Reviewers |
+                                                   (4)                                     value t < tcrit . Thus, we reject these hypotheses. It means
+                                                                                           that CN-based approach achieve a signiﬁcant improvement
+C. Experiment Results and Analysis                                                         in precision compared to the baseline and the SVM-based
+                                                                                           approach. Similarly, we reject H0 3 and H0 4 of recall, but
+   Baseline: Most Active Recommendation                                                    the t-test result of H0 4 is remarkably close to the critical
+   It is common for some projects that most of pull-requests are                           values. It means CN-based approach achieves nearly the same
+reviewed by a few core developers. Thus, to demonstrate the                                performance in recall but greatly exceeds the baseline method.
+effectiveness of our approaches based on machine learning and                                 Especially, high precision of top-k recommendation is sig-
+social network analyzing, we design a baseline method that                                 niﬁcant for pull-request assignment. As the example of Figure
+every new pull-request is assigned to the top-k most active                                1, if our approach assigns that pull-request to rafaelfranca, he
+developers ranked according to the number of pull-requests                                 would remind javan to join the discussion by the @mention
+they have reviewed in the past.                                                            tool, even if javan is left out by the algorithm.
+   RQ1 & RQ2: Recommendation Performances
+                                                                                                                                 Table II
+   We use a chart of precision vs. recall to show the perfor-                                                   R ESULTS OF T-T EST FOR OUR HYPOTHESES
+mances of different approaches in detail. In Figure 6, each                                   H         Var         Approach        µ       σ2         p         t      tcrit    Decision
+curve has a point for each recommendation from top-1 to                                     H0        Precision
+                                                                                                                   CN -based       0.53    0.031
+                                                                                                                                                    0.0002     3.67     1.66      Reject
+                                                                                                  1
+                                                                                                                    baseline       0.50    0.029
+top-10. There is a trade-off between precision and recall for                                                      CN -based       0.53    0.031
+                                                                                            H0    2   Precision                                      0.016     2.18     1.66      Reject
+classiﬁcation. Hence, the precisions are gradual decreasing                                                        SVM-based       0.51    0.030
+                                                                                                                   CN -based       0.56    0.057
+with the increase of recalls.                                                               H0    3    Recall
+                                                                                                                    baseline       0.54    0.063
+                                                                                                                                                    0.0003     3.60     1.66      Reject
+
+                      0.8                                                                                          CN -based       0.56    0.057
+                                                                                            H0    4    Recall                                        0.040     1.77     1.66      Reject
+                                                                CN-based approach                                  SVM-based       0.55    0.063
+                                                                SVM-based approach            Means µ, Variance σ 2 , statistical signiﬁcance p-value p, t-test results t and critical value
+                      0.7                                       Baseline                      tcrit , signiﬁcance level α = 0.05. In this paper, we do not list alternative hypotheses,
+                                                                                              because they are easy to derive from these null hypotheses respectively.
+
+                                                                                              RQ3: Discussion of different approaches
+                      0.6
+     Avg. Precision
+
+
+
+
+                                                                                              We run our approaches on each project to evaluate their
+                                                                                           detailed performances and discuss the results. As most of pull-
+                      0.5                                                                  request in GitHub received less than 4 comments [1], we only
+                                                                                           depict part of our results from top-1 recommendation to top-5.
+                      0.4                                                                     Firstly, running on bitcoin, akka and rails, our novel CN-
+                                                                                           based approach can achieve a signiﬁcant improvement over the
+                      0.3
+                                                                                           baseline and SVM-based method. As shown in Table III, the
+                        0.1    0.2     0.3     0.4        0.5    0.6      0.7        0.8   improvement of CN-based approach running on each project is
+                                                 Avg. Recall
+                        Figure 6. Precision vs. Recall of different approaches
+                                                                                           on average over 10% in precision and 6% in recall. In addition,
+                                                                                           CN-based approach can get remarkable performance for top-
+   Both SVM-based approach and CN-based approach are su-                                   1 recommendation. For example, the precision of CN-based
+perior to the baseline. Our novel approach based on Comment                                approach can reach 92% running on bitcoin. Compared to the
+Network (CN-based approach) achieves obvious improvement                                   baseline and SVM-based method, our approach achieves great
+in precision from top-1 to top-4, especially at the point of                               improvement of 51% and 31% respectively.
+top-1 (78%) and top-2 (67%). However, the curve of SVM-                                       In these three projects, the social activities and contributions
+based approach is in the middle from top-1 to top 4, and                                   between core and external developers are balanced and well-
+takes the leading position at the points of top-5 and top-8 in                             distributed. For example, for bitcoin, the number of core
+precision. When we recommend top-10 reviewers, the recall                                  developers and external developers are equal in the history of
+of each method can reach the level of 77%.                                                 top-10 active reviewers list. In addition, 64% of pull-requests
+                                                                                 Table III
+                                P RECISIONS /R ECALLS OF BASELINE (BL), CN- BASED AND SVM- BASED RECOMMENDATION FROM TOP -1 TO TOP -5
+                                       Number of                      bitcoin                                  akka                                rails
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.41/0.08       0.92/0.19   0.61/0.12      0.61/0.14   0.84/0.20   0.87/0.20   0.61/0.13   0.75/0.18   0.62/0.13
+                                         top-2       0.69/0.28       0.77/0.31   0.69/0.28      0.69/0.32   0.84/0.39   0.69/0.32   0.46/0.20   0.65/0.32   0.45/0.20
+                                         top-3       0.69/0.42       0.73/0.44   0.69/0.42      0.61/0.43   0.70/0.50   0.69/0.49   0.47/0.31   0.57/0.42   0.46/0.30
+                                         top-4       0.61/0.48       0.67/0.54   0.65/0.51      0.67/0.63   0.73/0.69   0.75/0.70   0.40/0.35   0.46/0.45   0.41/0.36
+                                         top-5       0.60/0.58       0.63/0.62   0.61/0.59      0.72/0.84   0.78/0.92   0.80/0.93   0.35/0.38   0.38/0.47   0.36/0.39
+                                         Avg.        0.60/0.36       0.74/0.42   0.65/0.38      0.66/0.47   0.78/0.54   0.76/0.53   0.46/0.27   0.56/0.36   0.46/0.28
+                                       Number of                      jquery                                phantomjs                           homebrew
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.82/0.17       0.82/0.17   0.82/0.17      0.92/0.20   0.92/0.19   0.94/0.20   0.91/0.21   0.88/0.20   0.88/0.21
+                                         top-2       0.66/0.27       0.70/0.29   0.68/0.28      0.86/0.37   0.74/0.31   0.88/0.37   0.76/0.35   0.77/0.35   0.77/0.35
+                                         top-3       0.53/0.33       0.56/0.35   0.55/0.34      0.73/0.46   0.75/0.48   0.75/0.48   0.81/0.56   0.80/0.55   0.80/0.56
+                                         top-4       0.45/0.37       0.55/0.46   0.48/0.39      0.75/0.64   0.74/0.62   0.75/0.64   0.79/0.72   0.75/0.68   0.79/0.73
+                                         top-5       0.46/0.48       0.50/0.53   0.48/0.51      0.65/0.68   0.65/0.68   0.66/0.69   0.74/0.84   0.62/0.71   0.73/0.84
+                                         Avg.        0.59/0.32       0.63/0.36   0.60/0.34      0.78/0.47    0.7/0.46   0.80/0.48   0.80/0.54   0.76/0.50   0.80/0.54
+
+submitted by external contributors and 60% of them have been                                                   •   For RQ1, the SVM-based recommendation is an effective
+merged. By contrast, 36% of pull-requests are originating from                                                     approach for pull-request assignment which achieves 73%
+core developers but 84% of them have been merged.                                                                  precision of top-1 recommendation and 77% recall of top-
+   The second group includes jquery, phantomjs and home-                                                           10 recommendation.
+brew, where both our approaches and the baseline method                                                        •   For RQ2, the CN-based approach achieve signiﬁcant
+can achieve high precision and recall. The the second part                                                         improvement compared to other methods. Analyzing the
+of Table III lists the results. For phantomjs and homebrew,                                                        social network is a novel and effective way for reviewer
+the precisions and recalls of all methods on average reach                                                         recommendation.
+approximately 80% and 50% respectively.                                                                        •   For RQ3, the CN-based recommendation show much
+   In these projects, a few developers seems to dominate the                                                       more improvement for the projects where the social
+pull-request review activity. As they have submitted comments                                                      activities are balanced between core developers and exter-
+too frequently, it is easy to assign pull-requests of test set to                                                  nal developers. If developers have reviewed pull-requests
+them. Thus, the improvement of CN-based approach is not                                                            actively, the performance of our approach is remarkable.
+obvious. Taking phantomjs as an example, the most active user
+                                                                                                            E. Threats to Validity
+(ID 136322) has reviewed 77% of pull-requests and interacted
+with 83% of contributors in training set. All algorithms tend                                                  In this section, we discuss some threats to validity which
+to assign the new pull-requests to him ﬁrst.                                                                may affect the experiment results of our approaches. Firstly,
+                      0.55                                                                                  there is a small part of the core developers who are in charge of
+                                                                      CN-based approach
+                                                                      SVM-based approach                    the ﬁnal decision of pull-requests. They joined so many pull-
+                      0.50                                            Baseline                              requests’ discussions in training set that all the approaches
+                                                                      PAC recommendation
+                                                                                                            tend to assign the new pull-request to these active developers
+                                                                                                            ﬁrst. Hence, the workload of these active reviewers may not
+                      0.45
+     Avg. Precision
+
+
+
+
+                                                                                                            be reduced. However, with more and more external contributor
+                                                                                                            presenting their suggestions to pull-requests, the social net-
+                      0.40
+                                                                                                            work based approach can refresh the weights of corresponding
+                                                                                                            edges, so new pull-requests would be assigned more balanced
+                      0.35                                                                                  than before. Besides, because some pull-requests have not been
+                                                                                                            closed when we dumped the test set, so a part of following
+                      0.30
+                         0.05   0.10     0.15      0.20       0.25      0.30     0.35        0.40
+                                                                                                            reviewers have not been taken into consider which may affect
+                                                      Avg. Recall                                           our recommendation results.
+            Figure 7. Precision vs. Recall of different methods for xbmc
+                                                                                                                                       VI. R ELATED W ORK
+   However, all approaches do not perform well for xbmc.
+Except that SVM-based approach gets 43% precision for top-                                                     Gousios et al. [1] show that the pull-request model offers
+1 recommendation, the precisions of all methods ranged from                                                 fast turnaround, increased opportunities for community en-
+39% to 32%. In the test set of xbmc, 65% of pull-requests                                                   gagement and decreased time to incorporate contributions. To
+are originating from newcomers, so CN-based approach do                                                     the best of our knowledge, this paper is the ﬁrst one to study
+much work of PNC recommendation (PAC and PNC have been                                                      pull-request assignment. We review previous work about bug
+deﬁned in section IV-B). As shown in Figure 7, if we only                                                   triaging and collaboration network analysis of social coding.
+consider to recommend reviewer for PAC, the performance of                                                     There are a number of researches based on Machine Learn-
+CN-based recommendation is greatly superior to others.                                                      ing (ML) [7]–[9] and Information Retrieval (IR) [10]–[12]
+                                                                                                            techniques to triage incoming bug reports or change requests.
+D. Conclusions of Experiments                                                                               Anvik et al. [7] apply a machine learning algorithm to learn
+  Based on the experiment’s results and analysis above, we                                                  the kinds of reports each developer resolves and recommend
+can draw our conclusions as follows:                                                                        developers for a new bug report. Jeong et al. [8] ﬁnd that
+many bugs have been reassigned to other developers, so they                                      R EFERENCES
+combined classiﬁers with tossing graphs to mine potential           [1] G. Gousios, M. Pinzger, and A. van Deursen, “An exploration of the
+ﬁxers. Based on that, Bhattacharya et al. [9] introduce an              pull-based software development model,” in Proceedings of the 36th
+approach adding ﬁne-grained incremental learning and multi-             International Conference on Software Engineering, Jun. 2014, to appear.
+                                                                    [2] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and A. Swaminathan, “Min-
+feature tossing graphs to reduce tossing path lengths and               ing email social networks,” in Proceedings of the 2006 International
+improve prediction accuracy. Other researchers use IR for               Workshop on Mining Software Repositories, 2006, pp. 137–143.
+automatic bug triaging. Canfora and Cerulo [10] use the textual     [3] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies of
+                                                                        open source software development: Apache and mozilla,” ACM Trans.
+descriptions to index developers and source ﬁles as documents           Softw. Eng. Methodol., vol. 11, no. 3, pp. 309–346, Jul. 2002.
+in an information retrieval system. Kagdi [11] and Linares-         [4] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in
+Vasquez [12] extract the comments and identiﬁers from the               github: transparency and collaboration in an open software repository,”
+                                                                        in Proceedings of the ACM 2012 conference on Computer Supported
+source code and index these data by Latent Semantic Indexing.           Cooperative Work. New York, NY, USA: ACM, 2012, pp. 1277–1286.
+For a new bug report, such indexes can be useful to identify        [5] T. LaToza, W. Ben Towne, A. van der Hoek, and J. Herbsleb, “Crowd
+the most appropriate developers to resolve it.                          development,” in Cooperative and Human Aspects of Software Engi-
+                                                                        neering, 2013 6th International Workshop on, May 2013, pp. 85–88.
+   In this paper, we not only expand the ML-based methods           [6] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets software
+to recommend reviewers for incoming pull-request, but also              development: Perspectives from github, msdn, stack exchange, and
+propose a novel social network based approach focusing on               topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+                                                                    [7] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+mining social relations betweens reviewer and contributors              ceedings of the 28th International Conference on Software Engineering,
+which achieves a signiﬁcant improvement.                                ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+   The social coding paradigm is reshaping the distributed          [8] G. Jeong, S. Kim, and T. Zimmermann, “Improving bug triage with
+                                                                        bug tossing graphs,” in Proceedings of the the 7th Joint Meeting of
+software development in recent years with a surprising speed            the European Software Engineering Conference and the ACM SIGSOFT
+and wide range. Dabbish et al. [4] explore the value of social          Symposium on The Foundations of Software Engineering, ser. ESEC/FSE
+mechanisms of GitHub. They ﬁnd that the transparency in                 ’09. New York, NY, USA: ACM, 2009, pp. 111–120.
+                                                                    [9] P. Bhattacharya, I. Neamtiu, and C. R. Shelton, “Automated, highly-
+collaboration is improved by social mechanisms which is                 accurate, bug assignment using machine learning and tossing graphs,”
+signiﬁcant for innovation, knowledge sharing and community              Journal of Systems and Software, vol. 85, no. 10, pp. 2275–2292, 2012.
+building. Zhou et al. [19] measure the behavior of a contributor   [10] G. Canfora and L. Cerulo, “Supporting change request assignment in
+                                                                        open source development,” in Proceedings of the 2006 ACM Symposium
+using workﬂow network. Zanetti et al. [20] categorize bugs              on Applied Computing, ser. SAC ’06. New York, NY, USA: ACM,
+based on nine measures to quantify the social embeddedness              2006, pp. 1767–1772.
+of bug reporters in the collaboration network. Thung et al.        [11] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                                                                        request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+[21] investigate the developer-developer and project-project            International Conference on, May 2009, pp. 273–277.
+networks of GitHub. They use PageRank to identify the most         [12] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+inﬂuential developers and projects in Github.                           D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                        history, or code authorship?” in Software Maintenance, 28th IEEE
+   These previous researches inspire us to mining the comment           International Conference on, Sept 2012, pp. 451–460.
+networks for pull-request automatic assignment.                    [13] G. Gousios, “The ghtorrent dataset and tool suite,” in Proceedings of the
+                                                                        10th Working Conference on Mining Software Repositories, ser. MSR
+          VII. C ONCLUSION AND F UTURE W ORK                            ’13. Piscataway, NJ, USA: IEEE Press, 2013, pp. 233–236.
+                                                                   [14] G. Tsoumakas and I. Katakis, “Multi-label classiﬁcation: An overview.”
+   The review process of pull-request is important for social           IJDWM, vol. 3, no. 3, pp. 1–13, 2007.
+coding. In this paper, we ﬁrstly extend the machine learning       [15] R. Agrawal and R. Srikant, “Fast algorithms for mining association rules
+                                                                        in large databases,” in Proceedings of the 20th International Conference
+based approach for bug triaging to assign reviewers to new              on Very Large Data Bases, ser. VLDB ’94. San Francisco, CA, USA:
+pull-requests. Furthermore, introducing social relations, we            Morgan Kaufmann Publishers Inc., 1994, pp. 487–499.
+propose a novel social network based approach for reviewer         [16] M. Bastian, S. Heymann, and M. Jacomy, “Gephi: an open source
+                                                                        software for exploring and manipulating networks.” in ICWSM, 2009.
+recommendation by mining a new type of social network              [17] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
+called comment network. Finally, we demonstrate the effective-          unfolding of communities in large networks,” Journal of Statistical
+ness of these two approaches with quantitative evaluations. In          Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
+                                                                   [18] G. Gousios and A. Zaidman, “A dataset for pull request research,”
+the future, we plan to use the information retrieval approaches         in MSR ’14: Proceedings of the 11th Working Conference on Mining
+to pull-request assignment, and then combine these traditional          Software Repositories, may 2014, to appear.
+methods with the social network based approach. Besides, we        [19] M. Zhou and A. Mockus, “What make long term contributors: Will-
+                                                                        ingness and opportunity in oss community,” in Proceedings of the
+will explore how to add other types of social relations into our        34th International Conference on Software Engineering, ser. ICSE ’12.
+framework.                                                              Piscataway, NJ, USA: IEEE Press, 2012, pp. 518–528.
+                                                                   [20] M. S. Zanetti, I. Scholtes, C. J. Tessone, and F. Schweitzer, “Cat-
+                VIII. ACKNOWLEDGEMENT                                   egorizing bugs with social networks: A case study on four open
+                                                                        source software communities,” in Proceedings of the 2013 International
+  This research is supported by the National High Technol-              Conference on Software Engineering, ser. ICSE ’13. Piscataway, NJ,
+ogy Research and Development Program of China (Grant                    USA: IEEE Press, 2013, pp. 1032–1041.
+                                                                   [21] F. Thung, T. F. Bissyande, D. Lo, and L. Jiang, “Network structure of
+No.2012AA011201), the National Science Foundation of                    social coding in github,” in Proceedings of the 2013 17th European
+China (Grant No.61432020 and No.61472430) and the Post-                 Conference on Software Maintenance and Reengineering, ser. CSMR
+graduate Innovation Fund of University of Defense Technol-              ’13. Washington, DC, USA: IEEE Press, 2013, pp. 323–326.
+ogy (Grant No.B130607).
+
\ No newline at end of file
diff --git a/res/paper/crowdsoft2014.pdf b/res/paper/crowdsoft2014.pdf
new file mode 100644
index 0000000..5c69218
--- /dev/null
+++ b/res/paper/crowdsoft2014.pdf
@@ -0,0 +1,344 @@
+          Exploring the Patterns of Social Behavior in GitHub
+
+                                              Yue Yu, Gang Yin, Huaimin Wang, Tao Wang
+                               National Laboratory for Parallel and Distributed Processing
+            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
+                                     {yuyue, yingang, hmwang, taowang2005}@nudt.edu.cn
+
+
+
+ABSTRACT                                                                            1. INTRODUCTION
+Social coding paradigm is reshaping the distributed soft-                              In recent years, social coding paradigm has been brought
+ware development with a surprising speed in recent years.                           into focus in distributed software development for the de-
+Github, a remarkable social coding community, attracts a                            velopers from all over the world. Various kinds of social
+huge number of developers in a short time. Various kinds of                         media [10, 11] are employed in software development, which
+social networks are formed based on social activities among                         help building social ties among developers and form diﬀer-
+developers. Why this new paradigm can achieve such a great                          ent types of social networks. Such social mechanisms can
+success in attracting external developers, and how they are                         achieve transparency [5] within social coding ecosystem and
+connected in such a massive community, are interesting ques-                        improve the degree of collaboration in software development.
+tions for revealing power of social coding paradigm. In this                           GitHub1 , a typical social coding community, attracts a
+paper, we ﬁrstly compare the growth curves of project and                           large number of users and projects in a short period of time.
+user in GitHub with three traditional open source software                          When launched in 2008, there were only four users [2]. But
+communities to explore diﬀerences of their growth modes.                            it seems to rise to fame overnight and increases to more
+We ﬁnd an explosive growth of the users in GitHub and                               than 3.5 million developers now. GitHub employs several
+introduce the Diﬀusion of Innovation theory to illustrate                           social media such as follow, watch and fork. The developers
+intrinsic sociological basis of this phenomenon. Secondly,                          can track the activities of others and be aware of changes
+we construct follow-networks according to the follow behav-                         in project using these tools in the community. Many in-
+iors among developers in GitHub. Finally, we present four                           teresting social networks of developers can be constructed.
+typical social behavior patterns by mining follow-networks                          For example, the follow relation is created when a developer
+containing independence-pattern, group-pattern, star-pattern                        click the “follow ” button in the proﬁle of another developer,
+and hub-pattern. This study can provide several instructions                        and then the follow relations among developers can form a
+of crowd collaboration to newcomers. According to the typi-                         social network which is called follow-network in this paper.
+cal behavior patterns, the community manager could design                           Why this new paradigm can achieve such a great success
+corresponding assistive tools for developers.                                       in attracting a large number of developers, and how they
+                                                                                    are connected in such a massive community, are important
+                                                                                    questions for understanding such a new paradigm. Many re-
+Categories and Subject Descriptors                                                  searches are conducted on analyzing the inﬂuence of social
+D.2.8 [Software Engineering]: Metrics - Process metrics;                            network in Open Source Software (OSS) communities (see
+D.2.9 [Software Engineering]: Management - Program-                                 Section 7). However, these work study the network structure
+ming teams                                                                          [13] of collaboration-oriented social network and collabora-
+                                                                                    tion pattern [12] in traditional OSS communities. However,
+                                                                                    none of them has explored the growth modes of communities
+General Terms                                                                       and social behavior patterns of developers.
+Human Factors, Measurement, Management                                                 In this paper, we ﬁrstly explore the growth curves of GitHub
+                                                                                    compared to three traditional OSS communities. Then, we
+                                                                                    construct follow-networks from the follow behaviors among
+Keywords                                                                            developers, which is a typical interest-oriented social net-
+Behavior pattern, Social network, Social coding, Distributed                        work. Finally, we analyze the social behavior patterns among
+software development                                                                developers by mining the follow-networks.
+                                                                                       In summary, the following research questions would be
+                                                                                    answered in this paper:
+                                                                                       RQ1: What are the diﬀerences between the growth modes
+Permission to make digital or hard copies of all or part of this work for           of GitHub and traditional OSS communities, and is there
+personal or classroom use is granted without fee provided that copies are           any sociological theory that supports the special growth
+not made or distributed for proﬁt or commercial advantage and that copies
+                                                                                    mode of GitHub?
+bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
+republish, to post on servers or to redistribute to lists, requires prior speciﬁc      RQ2: Whether or not the social connections among de-
+permission and/or a fee.                                                            velopers form some distinctive behavior patterns in GitHub,
+CrowdSoft 2014                                                                      1
+Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                        https://github.com
+                              (a) User-growth curve                      (b) Project-growth curve
+
+                                              Figure 1: The growth ﬁgure of Github
+
+
+
+
+                       (a) Freecode                         (b) Alioth                     (c) Savannah
+
+                                    Figure 2: The growth ﬁgure of tranditional OSS community
+
+and if it is true, what are these patterns?                        in a short time, which seems to make GitHub rise to fame
+   To the best of our knowledge, this is the ﬁrst research         overnight. In this paper, we deﬁned the explosive growth
+combining the high level analysis of the growth mode and           mode of GitHub as “outburst-type”. The outburst-type is
+the speciﬁc level of pattern mining in GitHub. We try to           quite diﬀerent from the growth mode of the traditional OSS
+make some interesting observations at these two levels. The        communities, such as Freecode2 , Alioth3 and Savannah4 . As
+remainder of this paper is structured as follows. Section 2        shown in Figure 2, the traditional OSS communities often
+introduces the statistics of raw data entities in our dataset.     grow smoothly and stably. After a period of rising, the
+Section 3 analyzes the growth mode of GitHub and Section 4         growth curves gradually slow down. We use Gini coeﬃcient
+illustrates the method of constructing the follow-networks.        to measure the skewness of outburst-type. The Gini index of
+Section 5 depicts the typical behavior patterns hidden in          three traditional OSS communities is on average 24.5%. By
+the follow-networks. We discuss threats in Section 6 and           contrast, the Gini index of GitHub is over 58.1%. It means
+related work in Section 7. Finally, we draw our conclusions        that the growth of GitHub is too imbalanced that the ma-
+in Section 8.                                                      jority of developers join this community in a short period of
+                                                                   time.
+2. DATASET                                                            The core service of these three traditional OSS commu-
+                                                                   nities is to support project (code) hosting. In these com-
+   Our study is based on the data from the GHTorrent project       munities, the main services such as version control system,
+[8, 6], which keeps on creating a scalable oﬀ-line mirror of       bug tracking and release management are strongly related
+event streams and provides persistent data of GitHub for           to project management. Around the main service, there are
+research. We use the Mysql dump update until 2013-05-29,           some classic communication tools such as mailing lists and
+which contains detailed information of social coding activ-        forum used to assist developers in distributed development.
+ities about 1,838,805 users. Among all these users, about          Thus, users do not have direct experiences and strong feel-
+55.46% of them (1,019,839 users), joined this community            ings about its strengths.
+during a short period of time from 2012-07-01 to 2013-05-             However, the human factor is the core factor in the so-
+29. Since then, the number of users keeps on growing by            cial coding paradigm. The innovative services in GitHub,
+over ﬁfty thousand per month.                                      such as the follow-based social networking, fork-based shar-
+                                                                   ing system and the pull-based software development model
+3. GROWTH MODE                                                     [7], catapult users into a new software develop experiences.
+  As a popular social coding community, GitHub draws               According to the Diﬀusion of Innovations theory[9], if there
+widespread attention from all over the world hosting a huge        were 2.5% innovators and 13.5% early adopters hosting their
+number of software projects. However, the growth mode of           projects on GitHub and promoting to others, the “tipping
+GitHub has a huge diﬀerence during two periods of time.            point” would be achieved. Then, the majority customers
+  Figure 1 shows the monthly growth trajectory of user and
+                                                                   2
+project in GitHub. As can be seen from this chart, after             http://freecode.com
+                                                                   3
+a relatively long time of accumulation till the early 2012,          http://alioth.debian.org
+                                                                   4
+the number of users and projects experienced a big leap              http://savannah.gnu.org
+                             (a) 2012-08 subset                                   (b) 2012-09 subset
+
+                                             Figure 3: Two examples of follow-network
+
+
+would join GitHub community. When GitHub leaps the                  developers’ registration time, and then construct the follow-
+chasm, it grows dramatically. Thus, GitHub grows as the             networks separately. Table 1 lists the monthly statistics of
+outburst-type.                                                      corresponding follow-networks. There are over 85,000 of new
+   Furthermore, we hold two viewpoints of the reason why            users join GitHub each month.
+majorities are involved in GitHub.                                                  Table 1: Statistics of Dataset
+   Eﬀect of leader: There is a part of developers enjoying              Month      #User    #Node #Edge Average Degree
+a high reputation such as Linus Torvalds 5 who have been
+                                                                       2012-08    150,851    32,796    31,677      0.966
+followed by 13,267 users on GitHub. Similarly, some out-
+                                                                       2012-09    102,056    40,401    40,793      1.010
+standing projects have a lot of eyes on them such as Rails6            2012-11     88,857    28,665    26,232      0.915
+stared by 19,915 users. When these people or projects are              2013-01     89,004    23,463    19,562      0.834
+active in GitHub, a lot of developers are involved because             2013-02    142,358    27,064    21,970      0.812
+they want to join the projects or study with the experts.              2013-03     95,087    23,650    19,161      0.810
+   Herd behavior: A large number of users join GitHub                  2013-05     90,413    13,160     9,704      0.737
+just for the reason that he ﬁnd so many developers around
+him talk about GitHub frequently. However, for himself, he
+may not know the advantages of GitHub clearly.                      5. SOCIAL BEHAVIOR PATTERNS
+                                                                      The quantity of registered users is over one hundred thou-
+                                                                    sand in 2012-08 and 2012-09 subsets. Those developers have
+4. FOLLOW-NETWORK                                                   formed rich social relations after a period of time. There-
+   We aim to understand the social behavior patterns of the         fore, we choose these two subsets to demonstrate the follow-
+developers who join GitHub during the outburst period. We           networks. The follow-network is so complex that we delete
+ﬁrstly construct follow-networks from the follow behaviors          the nodes whose degrees are less than 5. There are nearly
+among developers, which can directly reﬂect users’ relation-        90% useless links that can be ﬁltered. It means that most of
+ships in social activities.                                         users program in GitHub without the help of follow-based
+   If a user U1 has followed U2 , we consider that the collab-      social service. Thus, it is possible to show that a large num-
+oration activities of U1 would be inﬂuenced by U2 ’s. The           ber of developers are involved in GitHub because of Herd
+follow-network can be deﬁned as a directed graph Gf n =             behavior. In the Figure 3, we show the preprocessed follow-
+ V, E . The set of vertices is all users in our dataset de-         networks visualized by Gephi [1]. In general, the follow-
+noted by V . The set of edges in Gf n denoted by E is a             networks can be divided into two parts, i.e. isolated part
+set of node pairs E(V ) = {(u, v)|u, v ∈ V }. If the node vj        and interlaced part.
+is followed by vi , then there is a edge from vi to vj . For          In isolated part, we can ﬁnd two typical patterns, contain-
+a node vi , the number of edges pointing to it is called the        ing the independence-pattern and the group-pattern. Figure
+indegree deg − (vi ) and the number of edges starting from it       4 shows some typical examples of them. The independence-
+represents its outdegree deg + (vi ). And the degree is the sum     pattern indicates that a developer use Github as a traditional
+of indegree and outdegree deg(vi ) = deg − (vi ) + deg + (vi ).     way and he always only link up with acquaintances. He just
+   In this paper, we focus on the social behavior of developers     hosts his code or watches an interesting project but rarely
+who join GitHub during the period of fast growing. Thus, we         makes a contribution to it. According to our statistics, in
+divide the dataset into several monthly subsets according to        the 2012-08 subset, 30.33% nodes are isolated and 13.80%
+                                                                    nodes only connect with one node. The group-pattern is of-
+5
+    https://github.com/torvalds                                     ten formed by a group developers who collaborate with each
+6
+    https://github.com/rails/rails                                  other to develop the same project.
+                 (a) Independence-pattern
+
+
+
+
+                     (b) Group-pattern
+
+      Figure 4: The typical patterns in the isolated part
+
+  To show the features of the group-pattern more clearly, we
+use two diﬀerent force-directed graph drawing algorithms to
+redraw the follow network, as shown in Figure 5. We present
+three observations as follows:
+
+   • Observation 1: For a given group, the number of
+     links between this group and the interlaced part presents
+     the degree of social collaboration among the group’s
+     members and community. If a group has few link
+     with the core network, the projects developed by them
+     would be hard to attract public attentions. Besides,
+     the distance between the group and the centre of the
+     network reﬂects the degree of correlation between them.       (a) The Network redrawn by Force Atlas algorithm
+     For example, the group in the bottom right corner,
+     which is far from the core network, hosts a industrial
+     design project on GitHub. This project has no corre-
+     lation to software development.
+
+   • Observation 2: In a group, there is a relatively small
+     number of users who follow the external developers
+     and there are not many internal users following them
+     as well. In addition, these developers always follow
+     the external developers with high indegree who are the
+     leaders of a well-known project. Thus, they are not
+     the core programmer of their project, but they import
+     some novel idea from the community into the group.
+
+   • Observation 3: In general, the more developers are
+     followed by external users, the faster their project grow-
+     ing. When their project is popular enough in the spe-
+     ciﬁc domain, the group-pattern would be merged into
+     the interlaced part of follow-network, because more
+     and more developers follow the group’s members and
+     contribute to their project.
+
+  In the interlaced part of follow-networks, we extract the
+community structures using a popular algorithm of commu-
+nity detection purposed by Blondel et al. [4]. As shown
+in Figure 6, there are 4 large communities in the network
+which have been painted in diﬀerent colors. The size of a
+node represent its indegree. We can ﬁnd that diﬀerent com-
+munities represent diﬀerent groups of developers who focus
+on diﬀerent kinds of projects. There is a leader in each com-
+munity. For example, the pink community is about Ruby on
+Rails development and the orange community is related to
+Linux project. Furthermore, we extract two typical social         (b) The Network redrawn by Force Atlas 2 algorithm
+behavior patterns from the interlaced part of follow-network,      Figure 5: The redrawn follow-network of 2012-08 subset
+including star-pattern and hub-pattern.
+                                                                  such as the developer b in the green community and e in the
+                                                                  red community. The core developers just have connections
+                                                                  with internal users. The hub-node, such as d and g , not only
+                                                                  follow internal users, but also make a connection with other
+                                                                  communities. In this pattern, we ﬁnd that the projects de-
+                                                                  veloped by diﬀerent communities always have something in
+                                                                  common. For example, they use the same programming lan-
+                                                                  guage or frameworks. The quantity of hub-nodes is highly
+                                                                  related to the commonality and similarity of the projects.
+
+                                                                  6. THREATS TO VALIDITY
+                                                                     In this section, we discuss some threats to validity which
+                                                                  may aﬀect the results of our observations. Firstly, the num-
+                                                                  ber of projects hosted in GitHub is still growing fast, so
+                                                                  GitHub may be still in the early or middle phases of growth.
+                                                                  Thus, we cannot ensure the majority of users joint GitHub
+                                                                  during one outburst period. That is to say, GitHub may
+Figure 6: Community structures in the follow-network of 2012-08   have two or three outburst periods of growth. However, as
+subset                                                            the market becomes saturated, the growth curve would be
+                                                                  slow down. Secendly, a part of users have been included to
+                                                                  compensate for users committing to Github without having
+  As shown in ﬁgure 7(a), there are two distinct structures of    a GitHub account or shared an account with other devel-
+the star-pattern. The ﬁrst structure indicates that a famous      opers. In this paper, we do not take these developers into
+man (or a team) is followed by a large number of users but        consideration in the preprocessing stage. Thirdly, the follow
+he almost never pay any attention to others, which exactly        relations of some users are dynamic. They would follow an
+reﬂects the inﬂuence about the Eﬀect of leader described          expert at the beginning. However, they disengage from the
+in Section 3. The other one indicates that a user follow          follow relationship at some time for personal reasons.
+many irrelevant developers but almost never be followed by
+others. This kind of structure can be used to ﬁnd crawler’s
+IDs or advertiser’s IDs. For example, we ﬁnd KBishop 7 is a       7. RELATED WORK
+advertiser’s account in GitHub.                                      With the development of social coding paradigm, many
+                                                                  studies have been conducted on analyzing the mechanisms
+                                                                  and the value of social network in software development.
+                                                                  Begel et al. [2] conduct semistructured interviews with the
+                                                                  leader of GitHub to understand the role social network plays
+                                                                  in the software development process. Dabbish et al. [5]
+                                                                  explore the value of the social media in GitHub and found
+                                                                  that the transparency in collaboration brought in by such
+                                                                  mechanisms can support innovation, knowledge sharing and
+                                                                  community building. Tsay et al. [14] further above study
+                                                                  to evaluate the inﬂuence of social signals. They ﬁnd that
+                        (a) Star-pattern                          developers use both technical and social information when
+                                                                  evaluating potential contributions to open source software
+                                                                  projects.
+                                                                     In addition, collaboration network in social coding has at-
+                                                                  tracted many interests among researchers. Thung et al. [13]
+                                                                  investigate the developer-developer and project-project net-
+                                                                  works in Github. They use PageRank to identify the most
+                                                                  inﬂuential developers and projects by exploring these two
+                                                                  types of network. Surian et al. [12] employ a novel com-
+                                                                  bination of graph mining and graph matching to discover
+                                                                  the collaboration patterns in SourceForge. Begel et al. [3]
+                                                                  present a framework of social network for connecting devel-
+                        (b) Hub-pattern                           opers and their work artifacts together. By analyzing the
+                                                                  social network, software engineers can keep track on activ-
+       Figure 7: The typical patterns in the interlaced part      ities of colleagues and developing status of work artifacts.
+   To depict the hub-pattern clearly, Figure 7(b) show a typ-     Vasilescu et al. [15] analyze the interplay between Stack-
+ical example of the hub-pattern with eight labeled nodes.         overﬂow activities and the commit behaviors in Github, and
+Each node represents a developer of GitHub. The eight de-         they ﬁnd that the developers’ activities in the two platforms
+velopers develop their projects in two diﬀerent communities.      are positively associated.
+There is a core developer in the corresponding community,            Diﬀerent from above researches, our work focus on the
+                                                                  follow-network and analyze the social behavior patterns of
+7
+    https://github.com/KbishopSTC                                 crowd developers using sociological theory, which is a brand
+new perspective.                                                        Mining Software Repositories, MSR ’13, pages
+                                                                        233–236, Piscataway, NJ, USA, 2013. IEEE Press.
+8.    CONCLUSION AND FUTURE WORK                                  [7]   G. Gousios, M. Pinzger, and A. v. Deursen. An
+   Social coding paradigm exert a tremendous impact on the              exploratory study of the pull-based software
+software engineering activities. In the current, hosting more           development model. In Proceedings of the 36th
+than 5 million software repositories and attracting over 2              International Conference on Software Engineering,
+million users, GitHub is one of the most signiﬁcant open                ICSE 2014, pages 345–355, 2014.
+source software communities which is fundamentally chang-         [8]   G. Gousios and D. Spinellis. Ghtorrent: Github’s data
+ing the traditional paradigms of distributed software devel-            from a ﬁrehose. In Mining Software Repositories
+opment.                                                                 (MSR), 2012 9th IEEE Working Conference on, pages
+   In this paper, we analyze the growth curves of Github                12–21, June 2012.
+compared with the curves of traditional OSS communities,          [9]   E. M. Rogers. Diﬀusion of innovations. Simon and
+we answer the research question that why does GitHub grow               Schuster, 2010.
+in a explosive way. We draw an important conclusion that         [10]   L. Singer and K. Schneider. Inﬂuencing the adoption
+the Eﬀect of leader and Herd Behavior are the intrinsic so-             of software engineering methods using social software.
+ciological basis of this phenomenon. Furthermore, by min-               In ICSE, pages 1325–1328, 2012.
+ing the follow-network of the developers who get GitHub          [11]   M.-A. Storey, C. Treude, A. van Deursen, and L.-T.
+account during the rapid growth period, we illustrate four              Cheng. The impact of social media on software
+typical social behavior patterns.                                       engineering practices and tools. In Proceedings of the
+   In the future, we plan to study more social behavior pat-            FSE/SDP workshop on Future of software engineering
+terns about fork-network, pull request-network and watch-               research, FoSER ’10, pages 359–364, New York, NY,
+network of GitHub. Based on these social behavior patterns,             USA, 2010. ACM.
+we can develop some novel collaboration tools integrated         [12]   D. Surian, D. Lo, and E.-P. Lim. Mining collaboration
+with the social mechanisms. For example, we can design                  patterns from a large developer network. In Reverse
+a recommender system which can push the most relevant                   Engineering (WCRE), 2010 17th Working Conference
+projects to users. In addition, we also plan to combine social          on, pages 269–273. IEEE, 2010.
+behavior patterns with our previous work [16, 17] of social      [13]   F. Thung, T. F. Bissyande, D. Lo, and L. Jiang.
+software feature mining. According to the social features,              Network structure of social coding in github. In
+we can choose the corresponding collaboration patterns to               Proceedings of the 2013 17th European Conference on
+design prototype system.                                                Software Maintenance and Reengineering, CSMR ’13,
+                                                                        pages 323–326, Washington, DC, USA, 2013. IEEE
+9. ACKNOWLEDGEMENT                                                      Computer Society.
+   This research is supported by the National High Technol-      [14]   J. Tsay, L. Dabbish, and J. Herbsleb. Inﬂuence of
+ogy Research and Development Program of China (Grant                    social and technical factors for evaluating contribution
+No. 2012AA011201)and the Postgraduate Innovation Fund                   in github. In Proceedings of the 36th International
+of University of Defense Technology (Grant No.B130607).                 Conference on Software Engineering, ICSE ’14, pages
+                                                                        356–366, 2014.
+10.   REFERENCES                                                 [15]   B. Vasilescu, V. Filkov, and A. Serebrenik.
+ [1] M. Bastian, S. Heymann, and M. Jacomy. Gephi: an                   Stackoverﬂow and github: Associations between
+     open source software for exploring and manipulating                software development and crowdsourced knowledge. In
+     networks. In ICWSM, 2009.                                          Proceedings of the 2013 International Conference on
+ [2] A. Begel, J. Bosch, and M.-A. Storey. Social                       Social Computing, SOCIALCOM ’13, pages 188–195,
+     networking meets software development: Perspectives                2013.
+     from github, msdn, stack exchange, and topcoder.            [16]   Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
+     IEEE Software, 30(1):52–66, 2013.                                  The construction and evaluation of hierarchical
+ [3] A. Begel, Y. P. Khoo, and T. Zimmermann.                           software feature repository. In SEKE, pages 624–631,
+     Codebook: Discovering and exploiting relationships in              2013.
+     software repositories. In Proceedings of the 32Nd           [17]   Y. Yu, H. Wang, G. Yin, and B. Liu. Mining and
+     ACM/IEEE International Conference on Software                      recommending software features across multiple web
+     Engineering - Volume 1, ICSE ’10, pages 125–134,                   repositories. In Proceedings of the 5th Asia-Paciﬁc
+     2010.                                                              Symposium on Internetware, Internetware ’13, pages
+ [4] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and                  9:1–9:9, 2013.
+     E. Lefebvre. Fast unfolding of communities in large
+     networks. Journal of Statistical Mechanics: Theory
+     and Experiment, 2008(10):P10008, 2008.
+ [5] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb. Social
+     coding in github: transparency and collaboration in an
+     open software repository. In Proceedings of the ACM
+     2012 conference on Computer Supported Cooperative
+     Work, CSCW ’12, pages 1277–1286, 2012.
+ [6] G. Gousios. The ghtorent dataset and tool suite. In
+     Proceedings of the 10th Working Conference on
+
\ No newline at end of file
diff --git a/res/paper/pr-assignment-demo-final.pdf b/res/paper/pr-assignment-demo-final.pdf
new file mode 100644
index 0000000..0626b15
--- /dev/null
+++ b/res/paper/pr-assignment-demo-final.pdf
@@ -0,0 +1,299 @@
+Reviewer Recommender of Pull-Requests in GitHub
+                                                             Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling†
+                                                             ∗ National
+                                                 Laboratory for Parallel and Distributed Processing,
+                         College of Computer, National University of Defense Technology, Changsha, 410073, China
+                 † Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                                       {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+   Abstract—Pull-Request (PR) is the primary method for code                                               traditional review process is transformed into a crowdsourcing
+contributions from thousands of developers in GitHub. To main-                                             job. Not only core developers but also external developers in
+tain the quality of software projects, PR review is an essential                                           the community can act as reviewers. The reviewers can freely
+part of distributed software development. Assigning new PRs
+to appropriate reviewers will make the review process more                                                 discuss the PR with the contributor and core developers in
+effective which can reduce the time between the submission of a                                            terms of their interests and expertise. Next, in the light of
+PR and the actual review of it. However, reviewer assignment                                               reviewers’ suggestions, the contributor would update his pull-
+is now organized manually in GitHub. To reduce this cost,                                                  request by attaching new commits, and then reviewers discuss
+we propose a reviewer recommender to predict highly relevant                                               that PR again. Finally, the responsible mangers of the core
+reviewers of incoming PRs. Combining information retrieval with
+social network analyzing, our approach takes full advantage                                                team take all the opinions of reviewers into consideration, and
+of the textual semantic of PRs and the social relations of                                                 then merges or rejects that PR. Thus, we can see PR review
+developers. We implement an online system to show how the                                                  is an important way to maintain the quality of the software.
+reviewer recommender helps project managers to ﬁnd potential                                                  Assigning incoming PRs to appropriate reviewers will make
+reviewers from crowds. Our approach can reach a precision of
+74% for top-1 recommendation, and a recall of 71% for top-10
+                                                                                                           PR review more effective, because it can reduce the time
+recommendation. http://rrp.trustie.net/                                                                    between the submission of a PR and the actual review of
+   Keywords—Pull-request, Reviewer Recommendation, Social                                                  it. We refer to the period between the time when a PR is
+Network Analysis, Distributed Software Development                                                         submitted into issue tracker and the time when it begins to
+                                                                                                           be discussed by reviewers as review latency. The PRs which
+                                      I. I NTRODUCTION                                                     have been assigned to reviewers have lower review latency
+                  1
+   GitHub , a popular social coding community [1], attracts a                                              than those without assignment. According to our analysis,
+large number of software projects hosted on it. Pull-Request                                               the time of the recommended reviewer submitting his ﬁrst
+(PR) is the primary method [2], [3] for code contributions                                                 comment on PR is on average 40.8 hours shorter than those
+from thousands of developers. Currently, it is not uncommon                                                without recommendation. However, reviewer assignment is
+in the popular projects to receive tens of PRs daily covering                                              now organized manually in GitHub. As each developer in
+nearly 60% of code commits from contributors.                                                              community has the chance to join the review discussions, the
+                                Issue Tracker                                                              project managers may not completely ﬁnd out all potential
+      Pull
+    Request
+                                                                        Core Team                          reviewers from crowds.
+                  Submits                                     Discuss
+                  Discuss                Discuss
+                                                                                                              To reduce this cost, we designed a reviewer recommender
+                               PR
+                                    PR
+                                              PR
+                                                   PR
+                                                                                                           to predict appropriate reviewers for incoming PRs in Github.
+                                         PR             PR
+              Update
+                                                                                                           The two key intuitions of our approach focus on the textual
+                                                                                      Merge    Project
+                                                                                                           semantic of PRs and the social relations of contributors.
+                                                                         Judge
+                                                                                              Repository
+   Contributor               Review Comments                                                                 •   The expertise of a reviewer can be learned from his
+                                                                             Reject
+                              Pull
+                            Request
+                                                                                                                 PR-commenting history. For a newly received PR, the
+      Clone                                                              Closed
+                                                                                                                 developers who have commented similar PR frequently
+    Repository
+                                                                                                                 in the past are the suitable candidates to review the new
+                                                                                                                 one.
+                   Figure 1. The overview of pull-request mechanism
+                                                                                                             •   The common interests among developers can be measured
+   The overview of PR mechanism is presented as Figure 1.                                                        by social relations between contributors and reviewers in
+Firstly, a contributor implements some new features or ﬁxes                                                      historical PRs. The developers who share more common
+bugs based on his personal repository cloned from the latest                                                     interests with the contributor are the appropriate review-
+version of project repository. When his work is ﬁnished, the                                                     ers of his incoming PRs.
+patches are packaged as a PR submitted to the issue tracker.
+The system open a new issue for this PR, and then add                                                         Thus, we propose a novel approach combining information
+the issue to an awaiting list to be reviewed. In GitHub, the                                               retrieval with social network analyzing to recommend highly
+                                                                                                           relevant reviewers. We demonstrated the efﬁciency of our
+  1 https://github.com/                                                                                    approach on 10 popular projects which have received over
+1000 PRs in GitHub. On average, our reviewer recommender                 integrated with the social media of peer-to-peer notiﬁcation,
+can reach a precision of 74% on the top-1 recommendation                 such as the @mention tool in GitHub that adds the @ tags
+and a recall of 71% on top-10 recommendation.                            to the potential reviewers automatically. Actually, we also
+                                                                         can provide an independent service for each OSS community,
+          II. E XITING T OOLS AND R ELATED WORK                          when the enough data has been shared and collected.
+A. Exiting Tools and Motivation
+                                                                         B. Related Work
+   Notiﬁcations in Github are based on the repositories you
+are watching. Each project watcher will mechanically receive                We review the similar researches of reviewer recommenda-
+notiﬁcations of all newly received PRs. In this way, the PRs             tion in bug triaging and code (patch) review in this section.
+which the developer really cares about would be drowned out                 The most representative researches are based on machine
+by a massive amount of noise.                                            learning and information retrieval techniques to triage incom-
+   To triage PRs, the project managers can use a label to assign         ing bug reports. For example, Anvik et al. [4] apply a machine
+a new PR to one of core developer. The assignee is in charge of          learning algorithm to learn the kinds of reports each developer
+the review process. However, only 0.89% of PRs have been set             resolves and recommend developers for a new bug report.
+that label in our dataset. Besides, the @mention tool is widely          Kagdi and Poshyvanyk [5], [6] extract the comments and
+used in the discussion of PR review. If a @ symbol placed in             identiﬁers from the source code and index these data by Latent
+front of a user’s ID, the corresponding developer will receive           Semantic Indexing (LSI). For a new bug report, such indexes
+a special notiﬁcation that he has been mentioned in the PR               can be useful to identify the most appropriate developers to
+and his ID would be highlighted.                                         resolve it. To support code review, Balachandran [7] designs
+                                                                         a tool called Review Bot to predict the developers who
+                                                                         have modiﬁed related code sections frequently as appropriate
+                                                                         reviewers. Compared to the Review Bot, Thongtanunam et al.
+                                                                         [8] recommends code reviewers from developers who have
+                                                                         examined ﬁles with similar directory paths.
+                                                                            All these approaches focus on mining the related text, such
+                                                                         as bug descriptions and code ﬁles, but the social relations
+                                                                         among developers are ignored. However, the process of PR
+                                                                         review is more likely to rely on the discussions among review-
+                                                                         ers to be resolved. These discussions occurred over artifacts
+                                                                         may imply reviewers common interests in social activities and
+                                                                         division of work in projects. Thus, we consider the relations
+                                                                         reﬂected by the artifact-mediated communication is a key
+                                                                         factor of recommendation. Begel et al. [9] present a framework
+                                                                         for connecting developers and their work artifacts together. In
+                                                                         this paper, we propose a novel and lightweight approach that
+                                                                         combines information retrieval with social network analyzing
+                                                                         to recommend appropriate reviewers for new PRs.
+
+                                                                                             III. M ETHODOLOGY
+                                                                            Firstly, the titles and descriptions of PRs are extracted and
+                                                                         indexed using the Vector Space Model. Then, we measure
+  Figure 2. An example of discussion among reviewers in a pull-request
+                                                                         semantic similarity between the new PR and each one of
+   Taking a real PR of Ruby on Rails as an example, as shown             historical PRs, and predict the expertise score of a developer
+in Figure 2, no one is assigned to this PR. A core developer             according to the number of comments he has submitted.
+called rafaelfranca is the ﬁrst reviewer to comment the PR. As           Furthermore, we construct a comment network for each project
+he considers that javan’s work would be relevant, he mentions            separately by analyzing the comment relations among devel-
+(@) javan to join the discussion. At the second post, we                 opers. In a speciﬁc project, we can predict the common interest
+can see that javan indeed presents his opinion. Apart from               of each reviewer shared with the PR contributor based on the
+javan who is informed by rafaelfranca, other three reviewers             comment network. Finally, we synthesize the expertise scores
+comment that PR spontaneously. Because all the comments                  and the common interests to rank all candidates.
+affect the decision-making of that PR, if they do not catch it
+timely, it is possible that some vital opinions would be lost.           A. Vector Space Model of Pull-Request
+   Thus, if appropriate reviewers are automatically recom-                  Each PR is characterized by its title and description, and
+mended when a new pull-request is submitted, the review                  labeled with a set of names about developers who had sub-
+process would be more efﬁcient. It is worth mentioning that the          mitted at least one comment to it. Then, all stop words and
+novel application of reviewer recommender can be seamlessly              non-alphabetic tokens are removed, and remaining words are
+stemmed. We use the vector space model to represent each PR                where timestamp(ij,r,n) is the date that reviewer vj presented
+as a weighted vector. Each element in the vector is a term, and            the comment n in the PR r which is reported by contributor vi .
+the value stands for its importance for the PR. Term frequency-            The baseline and deadline are highly related to the selection
+inverse document frequency (tf-idf) is utilized to indicate the            of training set. If we use the data from 2012-01-01 to 2013-05-
+value of a term, which can be calculated as Equation 1.                    31 to learn the weights, the parameters baseline and deadline
+                             nt                 NPR                        are set to 2011-12-31 and 2013-05-31 respectively.
+ tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                             Np r         |pr ∈ PR : t ∈ pr |                                                         v3                   v4
+where t is a term, pr is a pull-request, PR is the corpus of all
+pull-requests in a given project, nt is the count of appearance
+                                                                                                                        =?
+
+
+
+
+                                                                                                          95
+for term t in pr , and Npr and NPR are the total number of                                                          w 41
+
+
+
+
+                                                                                                       0.
+                                                                                                                                        w42=?
+
+
+
+
+                                                                                                      =
+terms in pr and pull-requests in corpus respectively.
+
+
+
+
+                                                                                                   13
+                                                                                                w
+B. Semantic Similarity and Expertise Score                                                                 w12=2.19
+   For a newly recieved PR, we ﬁrstly retrieve top-k relevant                                 v1                                 v2
+PRs from our corpus. We use cosine similarity to measure                                                       v2 commented v1's PR_1 on 2012-12-03
+the semantic similarity between a new PR and each of the re-                                                   v2 commented v1's PR_1 on 2013-01-12
+                                                                                                               v2 commented v1's PR_2 on 2013-05-07
+solved PRs. We consider that the more frequency the reviewer                             Project:
+                                                                                                               v3 commented v1's PR_2 on 2013-05-06
+                                                                                       Ruby on Rails
+has commented relevant PRs, the more knowledgeable that                                                              v1 commented v4's PR……
+                                                                                                                     v2 commented v4's PR……
+reviewer is in handling the new PR. Therefore, the expertise                                                         v4 commented v1's PR……
+score of a reviewer can be predicted based on the number of                            Figure 4. An example of the comment network
+comments which they has published in the top-k relevant PRs                   Figure 4 shows an example of a part of comment network
+(i.e., cosine similarity score times the number of comments).              about Ruby on Rails. Two different PRs (PR_1 and PR_2)
+C. Comment Network and Common Interest                                     reported by v1 have been commented by v2 and v3 , so there
+                                                                           are two edges from v1 to v2 and v1 to v3 . Evaluating the
+   We consider that common interests among developers are
+                                                                           relation between v1 and v2 , k of Equation 2 equals 2, because
+project-speciﬁc, so we build a comment network for each
+                                                                           v2 reviewed both two pull-requests. For PR_1, v2 commented
+project separately. In a given project, the structure of comment
+                                                                           it twice, so we set m = 2. The ﬁrst time-sensitive factor of
+relations is a many-to-many model. There are many contribu-
+                                                                           the date 2013-12-03 can be computed by Equation 3 that
+tors have submitted PRs to a project, and a contributor can be
+                                                                           t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12
+a reviewer to comment other contributors’ PRs. A PR would
+                                                                           (t12,1,2 ≈ 0.731), another review published by v2 in PR_1
+be commented by several reviewers more than once.
+                                                                           should be controlled by λ (set to 0.8) due to the diminishing
+   The comment network is deﬁned as a weighted directed                    impact of one user in the same PR, so w(12,1) can be calculated
+graph Gcn = V, E, W , where the set of developers is                       as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24. Similarly, the
+indicated as vertices V and the set of relations between nodes             weight w12 = w(12,1) + w(12,2) = 2.19, and w13 = 0.95.
+as edges E. If node vj has reviewed at least one of vi ’s PRs,             Thus, we can predict that reviewer v2 share more common
+there is a edge eij from vi to vj . The set of weights W reﬂects           interests with contributor v1 compared with v3 , which has been
+the importance degree of edges, and the weight wij of eij can              quantiﬁed by the corresponding weights of edges.
+be evaluated by Equation 2.                                                   The comment network has several desirable qualities.
+                   k                     k   m
+                                                                              • The global collaboration structure is revealed between
+       wij =           w(ij,r) = Pc ×             λn−1 × t(ij,r,n)   (2)
+                                                                                 contributors and reviewers in a given project.
+               r=1                      r=1 n=1
+                                                                              • The time-sensitive factor t is introduced to guarantee that
+where k is the total number of PR submitted by vi , and w(ij,r)                  the recent comments are more valuable for the weights
+is a component weight related to an individual PR r. Pc is                       of edges than the old comments.
+an empirical default value2 (set to 1.0), which is reserved to                • The decay factor λ is introduced to guarantee the differ-
+estimate the inﬂuence of each comment on the PR, and m                           ence values between the comments submitted to multiple
+is the sum of comments submitted by vj in the same PR r.                         PRs or single PR. For example, if reviewer vj commented
+When reviewer vj published multiple comments (m = 1) in                          5 different PRs of vi and meanwhile vq commented one
+the same PR, his inﬂuence is controlled by a decay factor λ                      of vi ’s PRs 5 times, the weight of wij is larger than wiq .
+(set to 0.8). The element t(ij,r,n) is a time-sensitive factor of
+corresponding comment which can be calculated as below:                    D. Reviewer Recommendation
+
+                     timestamp(ij,r,n) − baseline                             When a contributor submits a new PR, we use the PR text to
+       t(ij,r,n)   =                              ∈ (0, 1]           (3)   calculate expertise scores of candidates. Then, their common
+                        deadline − baseline                                interests can be calculated by starting from the contributor in
+  2 User comments can be found in pull-requests, issue posts and commit    the comment network. In this paper, we regard that the factor
+ﬁles. Here, we just use the comments of pull-request.                      of common interest is as important as the factor of expertise
+                            (a) Homepage of a project                                             (b) Summary of a PR                          (c) Recommendation Result
+                                                                         Figure 3. The online system of reviewer recommender
+
+in each project. Thus, we standardize the factors, and then                                                   top-10 recommendation. It means we can successfully hit
+add them together to recommend top-k reviewers to the new                                                     a majority of reviewer. Especially, high precision of top-1
+PR. In future, we plan to deeply analyze the inﬂuence of each                                                 recommendation is signiﬁcant. As the example of Figure 2,
+factor exerted on different projects.                                                                         if the ﬁrst reviewer can be predicted, he would remind other
+                                                                                                              reviewers to joint the discussion with @mentioning.
+    IV. R EVIEWER R ECOMMENDER AND E XPERIMENT
+   We implement an online system of reviewer recommender                                                                    V. C ONCLUSION AND F UTURE W ORK
+with B/S architecture. It consists of two parts: a backend server                                                For a new PR, recommending reviewers will make the
+that processes data and a web interface that interacts with the                                               review process more effective. In this paper, we propose a
+user. In practice, our application would be the most effectively                                              novel approach that combine information retrieval with social
+used as a plug-in for social coding communities.                                                              network analyzing. In the future, we plan to explore how to use
+   On the backend, the server can continuously collect and                                                    other types of social networks, such as the watcher network,
+analyze new PRs from GitHub. When a project receives a new                                                    to improve the performance of our method.
+PR, it will be listed in its homepage (Figure 3 (a)). We extract
+                                                                                                                                   VI. ACKNOWLEDGEMENT
+the key information of a PR such as the ID, description and
+submitter, as shown in Figure 3 (b). Project managers can pick                                                  This research is supported by the National High Technology
+an new PR from the awaiting list or submit a query for speciﬁc                                                Research and Development Program of China (Grant No.
+PR by typing in the issue ID. The number of recommendation                                                    2012AA011201).
+can be set as required. Then, in Figure 3 (c), the predicted                                                                                R EFERENCES
+result will be shown together with the measures. We evaluate
+                                                                                                              [1] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets soft-
+the performances of our approaches using precision and recall                                                     ware development: Perspectives from github, msdn, stack exchange, and
+which are widely used as standard metrics in previous work.                                                       topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+In that case, top-5 reviewers have been recommended, and 4                                                    [2] J. Tsay, L. Dabbish, and J. Herbsleb, “Inﬂuence of social and technical
+                                                                                                                  factors for evaluating contribution in github,” in Proceedings of the 36th
+of them have actually commented that PR in reality. Hence,                                                        International Conference on Software Engineering, ser. ICSE ’14, 2014,
+the precision is 80% and the recall is 100%.                                                                      pp. 356–366.
+                      0.8                                                                                     [3] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
+                                                                                                                  the pull-based software development model,” in Proceedings of the 36th
+                      0.7                                                                                         International Conference on Software Engineering, ser. ICSE ’14. New
+                                                                                                                  York, NY, USA: ACM, 2014, pp. 345–355.
+                      0.6                                                                                     [4] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+                                                                                                                  ceedings of the 28th International Conference on Software Engineering,
+                      0.5
+         Percentage
+
+
+
+
+                                                                                                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+                                                                                                              [5] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                      0.4
+                                                                                                                  request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+                      0.3
+                                                                                                                  International Conference on, May 2009, pp. 273–277.
+                                                                                                              [6] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+                      0.2                                                                                         D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                                 Precision                        history, or code authorship?” in Software Maintenance, 28th IEEE In-
+                                                                                 Recall
+                      0.1                                                                                         ternational Conference on, Sept 2012, pp. 451–460.
+                         1       2    3      4        5     6        7       8     9         10
+                                       The Number of Recommendation Reviewers                                 [7] V. Balachandran, “Reducing human effort and improving quality in peer
+                                                                                                                  code reviews using automatic static analysis and reviewer recommenda-
+        Figure 5. Precision vs. Recall of reviewer recommender                                                    tion,” in Proceedings of the 2013 International Conference on Software
+   In this paper, we demonstrate the performances of our                                                          Engineering, ser. ICSE ’13, 2013, pp. 931–940.
+approach on 10 popular projects which have received over                                                      [8] P. Thongtanunam, R. G. Kula, A. E. C. Cruz, N. Yoshida, and H. Iida,
+                                                                                                                  “Improving code review effectiveness through reviewer recommenda-
+1000 pull-requests. We use the data from 2012-01-01 to                                                            tions,” in Proceedings of the 7th International Workshop on Cooperative
+2013-05-31 as the training set and the data from 2013-06-                                                         and Human Aspects of Software Engineering, ser. CHASE ’14, 2014, pp.
+01 to 2013-10-01 as the test set. Figure 5 clearly exhibits the                                                   119–122.
+                                                                                                              [9] A. Begel, Y. P. Khoo, and T. Zimmermann, “Codebook: Discovering and
+overall performance of our approach. On average, the precision                                                    exploiting relationships in software repositories,” in Proceedings of the
+reaches the highest point of 0.74 for top-1 recommendation                                                        32Nd ACM/IEEE International Conference on Software Engineering -
+and the recall considerably ascends to 0.71 at the point of                                                       Volume 1, ser. ICSE ’10, 2010, pp. 125–134.
+
\ No newline at end of file
diff --git a/res/paper/trustcom2013_EI.pdf b/res/paper/trustcom2013_EI.pdf
new file mode 100644
index 0000000..dcc3e3a
--- /dev/null
+++ b/res/paper/trustcom2013_EI.pdf
@@ -0,0 +1,402 @@
+          2013 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications
+
+
+
+
+           A Trusted Remote Attestation Model based on
+                       Trusted Computing
+
+                                            Yue Yu, Huaimin Wang, Bo Liu, Gang Yin
+                                     National Laboratory for Parallel and Distributed Processing
+                                            National University of Defense Technology
+                                                         Changsha, China
+                                yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@gmail.com
+
+
+ Abstract—Traditional security protocols can not be trusted in               channel to an end-point of unknown integrity is ultimately
+ some application scenarios of high security level because the               futile. In the words of Gene Spafford [1], “using encryption on
+ endpoints integrity is ignored. In this paper, we propose a novel           the Internet is the equivalent of arranging an armored car to
+ trusted remote attestation model which combines the secure                  deliver credit card information from someone living in a
+ channel and the integrity measurement architecture of trusted               cardboard box to someone living on a park bench.”
+ computing. We design and implement a prototype system based
+ on a mature security protocol, Transport Layer Security (TLS)                   People have realized that in the face of existing security
+ protocol, integrated with integrity report provided by trusted              risks and threats, we not only need a top-down security system
+ platform module (TPM). The TLS protocol guarantees the                      design, but also need to bottom up ensure the credibility of
+ security of data exchange process and the integrity report of               computing systems from the terminal. Thus the technology of
+ TPM provides the evidence about the trustworthiness and the                 trusted computing (TC) developed rapidly and has also become
+ security state of the communication endpoints. Compared by                  a hotspot in academia [2][3]. Reporting integrity information to
+ traditional approaches, our method is more efficient and can be             a remote platform is one of the main goals of TC as proposed
+ deployed in large scale systems easily.                                     by the TCG. There is one security chip named Trusted Platform
+                                                                             Module (TPM) integrated into mother board of computing
+     Keywords—remote attestation; secure channel; integrity report;
+                                                                             platform [6]. Before every component taking control of main
+ trusted computing
+                                                                             CPU, such as BIOS, MBR, OS Kernel, Application and so on,
+                        I.    INTRODUCTION                                   its characteristic code and configure data must be measured,
+                                                                             and the measured value is stored into TPM Platform
+     Modern era, people are more dependent on the Internet than              Configuration Registers (PCR). When the computing platform
+ before, and have increasing demand for service provided by the              wants to access some resources in remote entity, remote entity
+ Internet. Some confidential information requires transmitting in            can ask the computing platform to give a security status report.
+ secure channel. The traditional security network protocols,                 Report data includes computing platform’s TPM-based identity
+ such as Security Socket Layer (SSL) protocol and Transport                  information and PCR value. Remote entity evaluates the report
+ Layer Security (TLS) protocol, just set up a secure channel in              data and makes decision to allow computing platform to access
+ which attackers cannot steal or distort transmitting data[4][5].            the resource or not, which is illustrated in Figure 1.
+     However, this kind of secure channel is not integrity
+ because of the exclusion of the endpoints secure state. As a
+ result, if the endpoint is invaded by malicious software, it is
+ possible to appear such embarrassing situation that after
+ terminal identity authentication passing through, establishing
+ connection and secure transmission, data is stolen by malicious
+ codes on the terminal. Take the once wide spread virus,
+ Win32.Huhk.d.7607 called “E-band hiding robber”, as an
+ example. The virus can infect the main program of IE browser
+ in the system, IEXPLORER.EXE, after into the system through
+ web Trojan. In this way, when the user using IE browser log in
+ the E-bank and trade, the virus can automatically intercept a lot
+ of related information, including the user’s payment card                             Figure 1. Trusted Computing Platform integrity report
+ number, password, payee name and other sensitive information.                  This mechanism has some serious limitations. It has many
+ The virus invades user terminal, thus bypassing the secure                  shortcomings such as inconvenient software upgrading, not
+ communication channel established by both sides, which bring                adapting to dynamic changes of the system configuration, easy
+ the great danger to E-bank users. Therefore, using a secure                 to bind to a special products, and easy to leak platform
+
+978-0-7695-5022-0/13 $26.00 © 2013 IEEE                               1504
+DOI 10.1109/TrustCom.2013.183
+configuration [7]. Moreover, network security protocols which              relevant mending or upgrade. TNC is a method to realize the
+support the TCG remote report are less and combine is not                  network access control and that to implement initiative
+close enough.                                                              protection which can restrain most of the potential attack
+                                                                           before their outburst.
+    The main contribution of this paper is to illustrate how to
+combine the security channel with integrity measurement                       However, there are three relatively pivotal problems of the
+architecture of trusted computing. A trusted remote attestation            remote attestation under current TNC architecture which this
+model is proposed and the implementation is given in detail                paper focuses on:
+including: (1) TPM integrity report mechanism and related
+functions; (2) The steps to obtain Platform Identity Key (PIK)                 1) One-way trustworthiness evaluation. Before the terminal
+of TPM; (3) How to make the integrity policy and                           accessing network, besides providing its own trusted evidence
+configuration of platform; (4) The approach of TLS Handshake               of platform, it should also assess the network, otherwise it can
+Protocol extensions.                                                       not guarantee credibility of the service acquired from network.
+
+    The article structure is as follow: Section II analysis some               2) Relatively independent of current security system. To
+related work; Section III introduces the overall structure and             realize the access control, TNC devised a set of independent
+basic framework of the model proposed in this paper; Section               mechanism. As shown in Figure 2, the TNC framework is
+IV presents specific implementation of each component of the               divided into three entities, three levels and several interface
+model. We summarize this paper and make the future research                components. The realization of every part is relatively complex
+plan in Section V.                                                         and lacks the support of secure protocol. For example there
+                                                                           require a mass of information exchange between TNCC and
+                      II.   RELATE WORK                                    TNCS or TNCC and IMC, however the TNC framework itself
+                                                                           has not provided relevant secure protocols.
+A. Research of TNC
+                                                                               3) Lacking the good combination with the secure channel.
+    With the development of Internet, trusted computing should
+                                                                           Although TNC framework considers the process that platform
+not only guarantee the trustworthiness of terminal computing
+                                                                           reports its integrality to remote entity, it does not combine with
+environment, but also extend to network, making it become a
+                                                                           existing secure channel to guarantee confidentiality or
+trusted computing environment [8]. In May 2004, TCG
+                                                                           integrality of platform and etc.
+founded the Trusted Network Connection Sub Group [9]
+(TNC-SG) which mainly takes charge of the research and                     B. Research of TPM-based Remote Attestation
+setting of Trusted Network Connection (TNC) framework as                       There are many different previous works in the area of
+well as some relevant Standards. Construction of trusted                   remote attestation or access control based on TPM or TC. In
+network is extremely tough owing to the complexity of                      [12], a Property-Based Attestation (PBA) mechanism is
+network itself, so TCG firstly takes the relatively elementary             proposed, which extends the architecture of TC remote report
+problem into account. TNC is the expansion of TPM as well as               model and includes the property values of the remote side in an
+the combination between mechanism of trusted computing and                 attestation. A Trusted Third Party (TTP) translates the actual
+that of network access control. The TNC architecture [10][11]              system configuration into a set of properties and issues
+with trusted computing platform is shown in Figure 2.                      certificates for those properties. During the attestation process a
+                                                                           remote challenger can decide whether or not the platform
+                                                                           security properties meet the requirements of the respective use
+                                                                           case. Similarly, Semantic Remote Attestation (SRA) [13] uses
+                                                                           language-based techniques to attest high level properties of an
+                                                                           application. The proposal is based on the Java Virtual Machine
+                                                                           (JVM) environment which is attested by binary attestation itself.
+                                                                           Paper [14] presents a Peer-to-Peer access control architecture
+                                                                           using TC technology. A trusted reference monitor (TRM) is
+                                                                           introduced beyond the trusted hardware. This architecture can
+                                                                           enforce an object owner’s policy in a client platform by
+                                                                           attesting the authenticity of the platform and the integrity and
+                                                                           possible properties of the requesting application.
+                                                                               Another kind of related works [15] aims at linking end-
+                                                                           point configuration information to secure channels. It combines
+                  Figure 2. TNC architecture with TPM                      the TLS and IPSec protocols with the platform integrity
+                                                                           measurement and reporting features of TCG Trusted
+    Its main idea is as follow. The identity of users is verified          Computing functionalities. However, none of the solutions so
+before terminal accessing network. If the information of users             far addresses the problem fully [19]. Some are specified in
+identify gets through, the identify of terminal platform should            insufficient detail, e.g., [16] do not explain how they exactly
+be verified. Then, TNC will measure the terminal platform                  establish the linkage to TLS. Others have deficiencies
+trusted states and if the result of measurement meet the secure            regarding security or trust assumptions that we do not achieve.
+policies, it allows terminal to access network, otherwise it will          e.g., [17] aims to prevent “relay attacks” or “MitM attacks”, but
+connect the terminal to appointed isolation area and make                  as shown in [18], these attacks seem still possible. The
+
+
+
+                                                                    1505
+approach given by [18] overcomes most of the shortcomings                   introduced in the part A of Section IV. Part B will detail the
+identified in related work, but it required costly acquisitions of          process of PIK and the way how to make the platform integrity
+specific cryptographic hardware and some features of the                    authentication policy will be referred to in part C. Part D will
+protocol do not conform to the TLS specification [5], e.g.,                 show the way that how ISP builds integrity channel with ISR
+sending attestation data within the key exchange messages, or               and it will also details the way to extend the TLS protocol.
+including integrity data in session key computation. Changing
+central message formats or computations of the TLS protocol                                     IV.   IMPLEMENTATION
+would result in that the TLS specification must be redefined                A. Integrity Report Mechanism of TPM
+and backward the compatibility of TLS. The solution in [19]
+conform the TLS specification better than other works and                       There is a group of PCRs (Platform Configuration Register)
+elaborate the trusted channel in detail.                                    in the TPM [6]. One PCR is only relevant with one type of
+                                                                            system special event of computing platform. The integrity
+        III.   TRUSTED REMOTE ATTESTATION MODEL                             value of a trusted computing platform component is stored in
+                                                                            PCR. The length of PCR is related to the Hash algorithm used
+   Carrying out the trusted remote attestation model which the
+                                                                            by trusted computing platform. Its length is as long as the
+paper refers to is also based on the PKI, and the model is
+                                                                            length of the calculation of Hash. It needs to compute the
+shown as Figure 3. This model consists of three parts: Privacy
+                                                                            integrity value of the component again, when the integrity of
+Certificate Authority (PCA) Server, Internet Service Requestor
+                                                                            this component changes. The computing expression is shown
+(ISR) and Internet Service Provider (ISP).
+                                                                            as follow:
+                                                                                      expresses as a new Hash value of nth PCR,
+                                                                            is the original value of nth PCR before measuring, and
+                                                                                        is the value of the component measured this time.
+                                                                            Obviously, the integrity value stored in PCR is able to reflect
+                                                                            the change of components integrity and not just reflect one
+                                                                            state of the component. If the measured value of several
+                                                                            components is stored in the same PCR, it needs to split the
+                                                                            integrity measured value of the component joint the value
+                                                                            stored in PCR, do the Hash computing and restore the result
+                                                                            got in the PCR one by one in the special sequence. When the
+                                                                            integrity measured value of the last component is stored, the
+           Figure 3. Remote attestation model based on TPM                  value in the PCR is the integrity measured value of this
+                                                                            component.
+   PCA Server is used to authorize the Platform Identity Key
+(PIK) to ISQ and ISS and authenticate the mutual identity. The                  Trusted Computing Platform records the information of
+content on the principle of PKI, the reason why we use the PIK,             measurement in the Stored Measurement Log (SML). From the
+and the way how to apply the PIK will be details in the next                start of platform powering up, the trusted chain
+Section. In the Figure 3, the application and authentication of                                                         is recorded.
+PCA Server are both two-way. ISR and ISP use the mutual
+authentication, and they are both related to certificate request                In the process of remote attestation, the integrity report
+and certificate validation. The Figure only shows the single                provided by platform is the SML and its corresponding PCR
+authentication for convenience.                                             value. It includes the static configuration of terminal, such as
+                                                                            system version, hardware condition. It also includes the
+    ISR with TPM guarantees the integrity in the hardware                   dynamic configuration of terminal, such as process condition,
+layer and provides the serve of integrity measurement and                   network flow information and so on. In that way, the two sides
+storage. By using Trusted Software Stack (TSS), ISR provides                of communication can use this integrity report to verify the
+the interface to call the relevant function of TPM. And then                static and dynamic integrity of each terminal.
+according to extended TLS protocol, build the integrity channel
+to provide the identification and the report of platform integrity          B. PIK certificate for remote attestation
+for ISP and testify the ISP platform identity and its platform                  One of the easiest ways to identify a TPM is to verify the
+integrity. The paper calls this layer as Software Service Layer.            serial number which is one-to-one relationship between a TPM.
+When the platform integrity authentication succeeds, ISR uses               However, the problems of user’s privacy should be considered.
+ISR Client Application to request Internet serve to ISP, such as            For example, if a TPM user always accesses some shopping
+FTP, HTTP and so on.                                                        website, his hobbies can be analyzed by his shopping history
+                                                                            records.
+    The process of ISP is similar to ISR, and the difference
+between them is that ISP provides the Internet source and                       PKI-based TCM key architecture has been give out in paper
+serves in the application layer by ISP Server Application.                  [20]. The manufacture generates an endorsement key (EK)
+                                                                            during manufacturing stage of TCM. EK is a pair of
+    Obviously, compared with the distributed network model                  asymmetric key which is stored in the non-volatile protected
+this model changes little in the network layer and has no                   storage area in the TCM. One TCM can own only one EK
+additional system component. It has a better usability and                  during its life cycle. In order to protect privacy of users, the
+compatibility. The integrity report mechanism of TPM will be
+
+
+
+                                                                     1506
+platform doesn’t directly use EK to sign for identity                             Finally,      ,                and           are sent to PCA
+authentication. Users have to request the TCM to generate a                   to apply PIK certificate.
+PIK for every special Web application, and apply for PIK
+certificate from PCA based on EK. The privacy of the                                4) PCA verifies data integrity by         and use the private
+corresponding relationship between EK and PIK is protected                    key            to decrypt                     to get              ,
+by PCA. A TCM and its host platform can have multiple PIKs.                                                             .
+Thus, users can use different PIK for identity authentication in                            can be decrypted as         the follow formula:
+different situations in order to achieve the purpose of the
+platform identity privacy protection.
+    In this paper, the handshake protocol of TLS needs to be
+                                                                                                             .
+expanded which PIK certificate should be used. The process of
+applying a traditional X509.v3 certificate must change to bind                    Furthermore, PCA verifies               ,               and
+with TPM. The generating of PIK, applying for, procedure of                          , then         will be verified by PCA using           .
+signature and activation PIK certificate are shown as Figure 4.               After these verifications, PCA signs PIK certificate, then
+                                                                              generates randomly a symmetric key       and use it to encrypt
+                                                                                      to get                                . At last, it use
+                                                                              the public key of EK to encrypt                  to get the
+                                                                                                         and compute hash value of
+                                                                              and            ,                                . PCA sends
+                                                                              the data of      ,          and        to TCP.
+                                                                                   5) TCP User verifies data integrity by    and sends a
+                                                                              command                    to TCM via TSM. TCM can use the
+                                                                              private key of EK to decrypt       ,                     ,
+                                                                              while only the valid TCP can get the correct    so we can
+                                                                              confirm the relationship of PIK and TCP User. TCM returns
+    Figure 4. Procedures of generating of PIK, applying for, signing and         .
+                        activating a PIK certificate
+                                                                                  (6) TCP User sends a request                           to TSM,
+    1) Trusted computing platform (TCP) User sends a                          TSM uses       , returned by TCM, to decrypt                   and
+command                   to Trusted Cryptography Module                      gets PIK certificate                                   .
+(TCM) via TCM Service Module (TSM). The TCM generate a
+PIK and encrypt the private key of PIK with SRK for                              From what has been discussed above, a TCP User can get a
+protection. Then the TCM use the private key of PIK to sign                   PIK certificate. In this paper, ISR and ISP can apply different
+the public key of private CA and the message digest value of                  kinds of PIKs certificates for various specific situations.
+the     public     key   of     PIK,    the   signature   is
+                                             . The TCM                        C. Platform Integrity Policy Specification
+return the public key       and       .                                           If ISR and ISP, in Figure 3, want to verify whether the
+                                                                              integrality of each other can accord with the their own
+   2) TCP User sends a request                                 to             requirement, firstly they need to define their own configuration
+TSM for getting EK certificate          and property certificates             requirement of integrity, that is platform integrity policy,
+            and             which are signed to TCM and its                   afterwards they ask for and verify relevant integrity reports
+host platform by evaluation institute and manufacturer.                       each other. Owing to the possibility that both sides of
+                                                                              communication may use inconsistent operating system, the
+    3) TCP User uses the TPM as source for random values to                   manifestation of integrity policy must consider the otherness
+generate a symmetric            , because the Random Number                   and compatibility of heterogeneous computing environment
+Generator (RNG) is considered as true random generator.                       which seems more important especially under the environment
+Meanwhile, User makes out his information              for a                  of distributed computation. The Figure 5 shows an example of
+traditional X509.v3 digital certificate request. Then,                        platform integrity policy based on XML.
+can be achieved by using symmetric encryption algorithm, e.g.
+3DES, and                 . The formula of                is:                     In Figure 5, subject and object match strictly and default
+                                                                              action ="deny" indicates under the state of default any request
+                                                                              will be refused except for the below regulation. Considering the
+                                                                              fact that remote attestation is bidirectional, subject may be ISR
+   TCP User uses asymmetric encryption algorithm to encrypt                   or ISP and the configuration and match method are surely
+                                                                              different in those two situations. So subject is identified by
+             by      the   public     key      of     PCA,
+                                                                              "ID", "role" is a changeable element which use to indicate web
+                                           .        is the
+                                                                              service requester or web service server. If the platform is
+message   digest    of                    and             ,                   Windows System, the first subject is IE. There are two integrity
+                                 .                                            rules about IE. The first one is version which must be above 6.0.
+                                                                              This rule can guarantee the stability for IE. Because generally
+
+
+
+                                                                           1507
+speaking, higher version software is accompanied by fewer                is that random number              of           created by TPM
+bugs and it can run more steadily. The second rule is the hash           Random number generator is to boycott replay attack. The
+value of IE. We can choose different hash algorithm according            Attestation Extension Demand                  of the client is
+to the different strength here. IE has different hash value for          contained in                              .              is used
+different version, a simple is shown in Figure 5 which is a hash         to transfer the configuration strategy of the client’s platform,
+value for IE6.0 in experiment computer computed by SHA-1.                and rule the integrity of the other platforms should have, the
+This rule ensures data integrity for IE. Because when malicious          structure has been stated in Section C.
+code infects IE, the hash value will change. The second object
+is a file which is in the folder “secret”. Its integrity rule is an          The expression of                                is as follow:
+action configuration which define that the access privilege of
+this file is read only.                                                      The second step, Internet Service Provider (ISP) Server
+                                                                         sends              to Internet Service Requestor (ISR) Client
+                                                                         and informs ISR Client the evidence of integrity needed to be
+                                                                         provided. At the same time, ISP Server starts to adjust the
+                                                                         configuration of the platform dynamically according to the
+                                                                                      received from ISR Client. In fact, the server should
+                                                                         have the capability to work for several clients, but requirements
+                                                                         of clients may cause conflicts. For example, Client_01 just
+                                                                         allow the server to open the Port 8080, however Client_02 may
+                                                                         want to get service from the server via the Port 3389. In this
+                                                                         case, the server virtualizes the resources and environment that
+                                                                         can meet the client requirements and provide the corresponding
+                                                                         services by taking advantage of virtualization technology.
+                                                                             The expression of                                is as follow:
+
+              Figure 5. Example for platform integrity policy
+                                                                             The third step, ISP Server sends its digital certificate (DC),
+    According to the description above, the representation of                                 and                      messages to ISR
+the integrity policy in this paper is flexible. Users can extend         Client, which is similar to the traditional TLS protocol.
+their own integrity policies according to different web                  However,                     message is necessary in this step
+applications and access control requirements.                            which is different from traditional TLS protocol. The digital
+D. Handshake Protocol extensions of TLS                                  certificate (DC) is the PIK certificate which is applied as the
+                                                                         step described in Section B. Then ISP Server sends platform
+    The fundamental method of remote attestation is to expend            integrity report                to ISR Client to prove that it
+trusted chain to network and one outstanding implementation              meets requirements. The structure of                           is:
+of the model is provided in paper [19]. The protocol of remote
+attestation in this paper is based on it. With the Handshake
+Protocol extensions of TLS, besides the execution of the                           and       are matched by the measurement of TPM
+traditional function, the terminal integrity verification is             for which the virtual environment serve. ISP Server uses the
+involved, as shown in the Figure 6.                                      private key of PIK to sign the Hash value of        and        .
+                                                                         After the transmission of                      to ISR Client,
+                                                                         message                  would be sent as the end signal of this
+                                                                         stage.
+                                                                             The forth step, which is similar to the traditional TLS
+                                                                         protocol. Here we mainly point the differences. ISR Client
+                                                                         firstly checks the validity of the PIK Certificate of ISP Server,
+                                                                         and then checks the authenticity and integrity of
+                                                                                          using the public key of PIK certificate to make
+                                                                         sure the data comes from ISP Server instead of being modified
+                                                                         by attacker. After that, check the validity of the congruent
+                                                                         relationship between          and       . At last, decide whether
+                                                                         the contents of        are accorded with integrity policy defined
+                                                                         by itself. If an error or authentication failure comes up during
+                                                                         the above steps, a fatal error messages would be returned to
+                                                                         opposite side and the connection will be cut off. After all the
+      Figure 6. The process of Handshake Protocol extensions of TLS      authentications get through, ISR Client sends its
+                                                                                          to ISP Server and then the message            as
+    The first step, the difference between the Hello message,            the end. The structure of                                  is
+the ISR Client sends to the ISP Server, and the traditional one
+
+
+
+
+                                                                      1508
+    After that, the identity authentication and the integrity                                          REFERENCES
+authentication of platform of ISR Client are similar to the forth      [1]    G. Spafford, Attributed to in Risks Digest 19.37 review of @LARGE, by
+step, and the protocol it used accords to the traditional TLS                 David H. Freedman and Charles C. Mann, Sept. 1997.
+protocol. Here will not give unnecessary details. Finally, there       [2]    Sheng C X, Zhang H G, Wang H M, et al, “Research and development
+is some need to point that the transportation of the integrity                of trusted computing,” Science China: Information Science, vol. 40, pp.
+reports are in plaintext, and what’s more, both sides have made               139-166, 2010. (In Chinese)
+autograph using their private key of PIK. When attackers               [3]    Shen C X, Zhang H G, Feng D G, et al. Survey of information security
+intercept and capture these messages, it is possible to dig out               [J]. Science China: Information Science, vol. 50, pp. 273–298, 2007.
+the private information of the platform. Such as which kind of         [4]    T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol
+                                                                              Version 1.1. IETF RFC 4346, Apr. 2006.
+web service ISR Client with           often requires and how is
+                                                                       [5]    S. B.-W. et al, Transport Layer Security (TLS) Extensions, IETF RFC
+the configuration of platform integrity and so on. To sum up,                 3546, June. 2003.
+the platform should ask for different PIK certificates according       [6]    Trusted Computing Group. TCG specification architecture overview,
+to different applications, and update the certificate in time to              specification             revision              1.4            [EB/OL],
+make sure the lifetime of each PIK certificate is reasonable.                 http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-
+                                                                              1D09-3519-
+         V.    CONCLUSION AND FUTURE WORK                                     ADA026A0C05CFAC2/TCG_1_4_Architecture_Overview.pdf, 2010-
+                                                                              06-12.
+    In this paper, a trusted remote attestation model has been         [7]    E Shi, A Perrig, L van Doorn. Bind, “A fine-grained attestation service
+proposed. The model combines the secure channel and the                       for secure distributed systems,” in Proc. the IEEE Symposium on
+integrity measurement architecture of trusted computing. The                  Security and Privacy, Oakland, CA, USA, 2005.
+secure channel guarantees the security of data exchange                [8]    Zhang H G, Chen L, Zhang L Q, “Research on Trusted Network
+process and the integrity report of Trusted Platform Module                   Connection,” Chinese Journal of Computers, vol. 33, pp. 706-717, Mar.
+provides the evidence about the trustworthiness of the                        2010. (In Chinese)
+communication endpoints. The implementation is described in            [9]    TNC           Web         Site.       [Online].                Available:
+detail including: (1) TPM integrity report mechanism and                      https://www.trustedcomputinggroup.org/network/
+related functions; (2) The steps to obtain PIK certificate of          [10]   TCG Specification Trusted Network Connect -TNC Architecture for
+                                                                              Interoperability Revision 1.1 [EB/OL], Trusted Computing Group, May.
+TPM; (3) How to make the integrity policy and configuration                   2006.
+of platform; (4) The approach of TLS Handshake Protocol                [11]   TCG Trusted Network Connect TNC Architecture for Interoperability
+extensions. The approach according with the trusted computing                 Specification      Version       1.4     [EB/OL],        May.      2009.
+technology conforms to the specification of TLS. Thus, the                    http://www.trustedcomputinggroup.org/resources/tcg_architecture_overv
+paper assumed that a TPM is only vulnerable to hardware                       iew_version_14.pdf.
+attacks.                                                               [12]   A. Sadeghi and C. Stuble, Property-based attestation for computing
+                                                                              platforms: Caring about properties, not mechanisms, in Proc. NSPW,
+    In a next step, we plan to give a formalization security                  2004.
+analysis of our method and test the experiment system by               [13]   V. Haldar, D. Chandra, and M. Franz, Semantic remote attestation - a
+prevalent malicious codes in the Internet. Then, we consider                  virtual machine directed approach to trusted computing, in Proc.
+adjusting the model to the requirements of distributed                        USENIX, 2004.
+computing and clouding computing. Moreover, with the                   [14]   Sandhu R, Xinwen Z, Peer-to-Peer Access Control Architecture Using
+                                                                              Trusted Computing Technology, in Proc. SACMAT’05, 2005.
+development of Trusted Computing technology, the model
+should be extended by runtime integrity measurement and                [15]   Goldman K, Perez R, Sailer R, Linking remote attestation to secure
+                                                                              tunnel endpoints, in Proc. STC ’06 Proceedings of the first ACM
+dynamic attestation agents. In addition, how to combine                       workshop on Scalable trusted computing, Nov. 2006.
+Trusted Computing technology and other security protocols,             [16]   Sadeghi A-R, Stuble C, Wolf M, et al. Enabling Fairer Digital Rights
+e.g. SSH and IPSec, is a challenge research work as well. Last                Management with Trusted Computing, in Proc. Information Security
+but not least, we plan to demonstrate the effectiveness of our                Conference, 2007.
+method with quantitative evaluation.                                   [17]   Stumpf F, Tafreschi O, Roder P, et al, A robust Integrity Reporting
+                                                                              Protocol for Remote Attestation, in Proc. WATC ’06, Dec. 2006.
+                     ACKNOWLEDGMENT                                    [18]   Gasmi Y, Sadeghi A-R, Stewin P, et al, Beyond Secure Channels, in
+                                                                              Proc. STC ’07, 2007.
+   This research is supported by the National High
+Technology Research and Development Program of China                   [19]   Armknecht F, Gasmi Y, Sadeghi A-R, et al, An Efficient
+                                                                              Implementation of Trusted Channels based on OpenSSL, in Proc.
+(Grant No. 2012AA011201) and the Postgraduate Innovation                      STC ’08, Oct. 2008.
+Fund of University of Defense Technology (Grant                        [20]   Fajiang Yu, Tong Li, Yang Lin, et al, Hierarchical-CPK-Based Trusted
+No.S120602). Many thanks to Xiang Li, Tao Wang, Tianzuo                       Computing Cryptography Scheme, in Proc. ATC 2011, LNCS 6906: 149-
+Wang, and Zhefeng Xiao for discussion and their suggestion                    163, 2011.
+and works on data collecting.
+
+
+
+
+                                                                    1509
+
\ No newline at end of file

commit 205ff7c9c41b2e0939bbda8acf203e8c361ae287
Author: Yuyue <yyuu51888@163.com>
Date:   Fri Jan 23 13:00:33 2015 -0800

    Create README.md
---
 README.md | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..72f0a59
--- /dev/null
+++ b/README.md
@@ -0,0 +1,2 @@
+# yueyu.github.io
+my homepage

commit 5ddb715341d71a93f3b2c21db5e8814ecd10909e
Author: fisher <yyuu51888@163.com>
Date:   Fri Jan 23 12:15:48 2015 -0800

    test 2
    
    Signed-off-by: fisher <yyuu51888@163.com>
---
 res/CV_Yu.pdf                                        | Bin 105648 -> 0 bytes
 res/EI Num.txt                                       |  14 --------------
 res/Yy.jpg                                           | Bin 449185 -> 0 bytes
 res/paper/20130122-Frecom-slide.pdf                  | Bin 1974699 -> 0 bytes
 res/paper/325-HESA-slide.pdf                         | Bin 1739438 -> 0 bytes
 res/paper/ADMA12-camera-ready.pdf                    | Bin 987055 -> 0 bytes
 res/paper/F-recommendation-CameraReady.pdf           | Bin 2158730 -> 0 bytes
 res/paper/ISPDPAW.pdf                                | Bin 449152 -> 0 bytes
 ...del for Trusted Computing Dynamic Attestation.pdf | Bin 484487 -> 0 bytes
 res/paper/PaperID325-HESA.pdf                        | Bin 2026644 -> 0 bytes
 res/paper/apsec2014.pdf                              | Bin 2080794 -> 0 bytes
 res/paper/crowdsoft2014.pdf                          | Bin 2010181 -> 0 bytes
 res/paper/pr-assignment-demo-final.pdf               | Bin 11153344 -> 0 bytes
 res/paper/trustcom2013_EI.pdf                        | Bin 723204 -> 0 bytes
 14 files changed, 14 deletions(-)

diff --git a/res/CV_Yu.pdf b/res/CV_Yu.pdf
deleted file mode 100644
index 22fb33e..0000000
--- a/res/CV_Yu.pdf
+++ /dev/null
@@ -1,86 +0,0 @@
-Yue Yu（余跃）http://fisher.trustie.net/
-National Laboratory for Parallel and Distributed Processing
-Computer School, National University of Defense Technology
-Changsha, Hunan Province, 410073, P.R.C
-Phone: (86)13627319266
-Email: yuyue_whu@foxmail.com
-
-
-EDUCATION
-National Laboratory for Parallel and Distributed Processing (PDL), National University of
-Defense Technology (NUDT), China.
-2013.3--present Ph.D. in Software Engineering. Advisor: Huaimin Wang
-Computer School, National University of Defense Technology, China (Rank: top 5)
-2011.9--2013.3 M.S. in Computer Science. Advisor: Huaimin Wang
-Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
-2007.9--2011.6 B.E. in Information Security.
-School of Journalism and Communication, Wuhan University, China.
-2009.03-2010.06 Minor in Journalism and Communication.
-
-
-AWARDS AND HONORS
-2013 OW2 International Programming Contest                        Special Prize (Only One)
-2012 OW2 International Programming Contest                         First Prize (Top 1)
-2011 National Information Security Competition                     Third Prize (17%)
-2010 National Information Security Competition                     First Prize (2.3%)
-Awarded “Yungui Ci” Scholarship in NUDT                            2011-2012 (Top 2)
-Awarded First-class Scholarship in Wuhan University                2010-2011 (Top 5%)
-Awarded National Scholarship of China                              2009-2010 (Top 2)
-Honored as Outstanding Graduates of Wuhan University               2007-2011 (20%)
-Honored as Excellent Student Leader of Wuhan University (Twice)
-
-
-SKILLS
-   Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
-   System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene
-    OpenSSL, Geni, Weka.
-
-
-TEACHING & RESEARCH EXPERIENCE
-   Teaching Assistant, National University of Defense Technology          2012.8-2013.8
-     Network Program Design
-     Distributed Computing Environment
-   Research Intern, Trustie Group, PDL, NUDT                              2011.9-present
-       National High Technology Research and Development Program of China (Grant No.
-        2012AA010101)
-     National Science Foundation of China (Grant No.60903043)
-   Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
-     Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
-     Research on Feature Detection and Location of OSS Repository           2012.3-2013.3
-   Vice-Chairman of Student Union, Wuhan University                       2009.10-2010.10
-     Awarded Excellent Student Union
-
-
-PUBILCATIONS
-2013
-   Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of
-    Hierarchical Software Feature Repository. The 25th International Conference on Software
-    Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%
-    acceptance Rate)
-   Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software
-    Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on
-    Internetware, Changsha, China, 2013. (28.8% acceptance Rate)
-   Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on
-    Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy
-    in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
-2011
-   Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using
-    Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium
-    on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
-   Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted
-    Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5):
-    1436-1445, 2011.
-2010
-   Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted
-    Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3):
-    195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
-   Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform
-    Module. The International Conference on Computer Application and System Modeling,
-    Taiyuan, China, 2010.
-   Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted
-    Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20):
-    169-173, 2010. (in Chinese)
-
-
-ACTIVITES          Football, Table tennis, Swimming.
-
\ No newline at end of file
diff --git a/res/EI Num.txt b/res/EI Num.txt
deleted file mode 100644
index c94aef6..0000000
--- a/res/EI Num.txt	
+++ /dev/null
@@ -1,14 +0,0 @@
-A Trusted Remote Attestation Model based on Trusted Computing
-Accession number:  20140617288556
-
-Mining and recommending software features across multiple web repositories 
-Accession number:  20135217132788
-
-Expand the SSL/TLS protocol on trusted platform module
-Accession number:  20104913453439
-
-Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model
-Accession number:  20113514267201
-
-Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation
-Accession number:  20112214022490
\ No newline at end of file
diff --git a/res/Yy.jpg b/res/Yy.jpg
deleted file mode 100644
index 68a4ced..0000000
Binary files a/res/Yy.jpg and /dev/null differ
diff --git a/res/paper/20130122-Frecom-slide.pdf b/res/paper/20130122-Frecom-slide.pdf
deleted file mode 100644
index 5935f55..0000000
--- a/res/paper/20130122-Frecom-slide.pdf
+++ /dev/null
@@ -1,217 +0,0 @@
-Mining and Recommending Software 
-Mining and Recommending Software
-          Features across
-     Multiple Web Repositories
-     Multiple Web Repositories
-
-
-                           Yu Yue
-                     Trustie Group of NUDT
-Introduction
-
-
-
-
-          Begin with an example
-          Begin with an example
- Introduction                       Community                   Time                Scale
-                                    Freecode                1998               45,021+
-                                    SourceForge             1999               432,004+
-
-                                    Rubyforge               2003               9,349+
-
-1. Massive number of OSS 
-1. Massive number of OSS 
-1 M    i        b   f OSS           Ohloh                   2004               500,000+
-
-projects in open source 
-projects in open source             Google Code
-                                    …
-                                                            2006               250,000+
-
-
-communities
-
-2 OSS projects are utilized for
-2. OSS projects are utilized for 
-2. OSS projects are utilized for 
-industry wildly
-
-                                            [Actuate09] 4th Actuate Annual Open Source Survey
-Introduction
-
-
-
-
-         Software Resource 
-         Software Resource
-    Reorganized in a efficient way
-        g                        y
-Introduction
-Introduction
-Introduction
-
-
-
-
-               for stakeholders to
-     challenge for stakeholders to
-       retrieve the suitable one
-Introduction
-
-
-
-
-                     Stakeholders
-               What are you seeking for？
-               What are you seeking for？
-Challenge
-
-
-                  Mature Software
-
-
-
-
-              large-
-              large-scale, uncategorized 
-        There are 39.8% uncategorized software in SourceForge
-        There are 39.8% uncategorized software in SourceForge
-                          and 61.68% in Ohloh
-                          and 61.68% in Ohloh
-Challenge
-
-
-
-    Reusable Module and Component
-    R    bl M d l     dC        t
-
-
-
-
-            manually ， difficultly
-                 ll
-            manually ， diffi ltl
-Challenge
-
-
-
-            Reusable Code Snippet
-            Reusable Code Snippet
-
-
-
-
-                     inaccuracy 
-                     Google Code Search
-                            Krugle
-               Codase Source Code Search Engine
-Feature
-
-
-
-
-          Software Feature
-          Software Feature
-   capture and identify commonalities and differences in
-                    a software domain
-Feature
-
-
-
-  F t                   i    t d di ti ti
-  Features are any prominent and distinctive
-  concepts or characteristics that are visible to
-  various stakeholders.
-     i     t k h ld
-  a) Features are externally visible characteristics that can
-     differentiate one product from the others.
-
-     Functions, objects, and aspects have been mainly used to
-  b) F    ti      bj t      d       t h     b    i l     dt
-     specify the internal details of a system.
-Feature
-
-
-
-
-          Social Feature
-          Social Feature
-          Social
-Challenge
-
-
-1 Synonymic Feature Element:
-1. Synonymic Feature Element:
-Challenge
-
-
-2. Hybrid Semantic-
-2 Hybrid Semantic
-          Semantic-
-2. Hybrid Semantic-level:
-             Doc Topic
-             Doc-Topic
-
-
-
-
-Topic-Word
-Topic Word
-Topic Model
-
-
-
-
-ID1000：Real-time windows registry monitor utility.
-Topic structure
-
-
-
-
-            1. Email S       h    d    il    t ti
-            1 E il Scanner enhanced email protection;
-            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
-            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
-               il li t         i           il i f      f i         d th th t
-            mail clients, ensuring your email is free of viruses and other threats;
-            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
-            before they reach your inbox;
-Ontology
-资源定位
- Overview
-Evaluation
-Evaluation
-Evaluation
-
-
-
-
-      (a) the average value
-                                                (b) the standard deviation
-
-
-                 The clustering results for each category
-Recommend
-Recommend
-Recommend
-Conclusion
-
-
-
-
-1. Build a Hierarchical rEpository of Software feAture
-1. Build a Hierarchical rEpository of Software feAture (HESA)
-
-2. Induce the Feature-
-2. Induce the Feature-Pattern base on association rule mining
-
-
-3. Recommend  the most relevant features to users
-      You！
-Thank You！
-                      Yu Yue
-                  INFLUX Group
-                  I FL X G
-     National University of Defense Technology
-
\ No newline at end of file
diff --git a/res/paper/325-HESA-slide.pdf b/res/paper/325-HESA-slide.pdf
deleted file mode 100644
index c6a7348..0000000
--- a/res/paper/325-HESA-slide.pdf
+++ /dev/null
@@ -1,185 +0,0 @@
-            HESA
-The Construction and Evaluation of 
-The Construction and Evaluation of 
-  Hierarchical Software Feature
-  Hierarchical Software Feature 
-           Repository
-
-                                   Yu Yue
-                               INFLUX Group
-                  National University of Defense Technology
-Introduction
-
-
-
-
-          Begin with an example
-          Begin with an example
- Introduction                       Community                   Time                Scale
-                                    Freecode                1998               45,021+
-                                    SourceForge             1999               432,004+
-
-                                    Rubyforge               2003               9,349+
-
-1. Massive number of OSS
-1. Massive number of OSS 
-1 M    i        b   f OSS           Ohloh                   2004               500,000+
-
-projects in open source 
-projects in open source             Google Code
-                                    …
-                                                            2006               250,000+
-
-
-communities
-
-2 OSS projects are utilized for
-2. OSS projects are utilized for 
-2. OSS projects are utilized for 
-industry wildly
-
-                                            [Actuate09] 4th Actuate Annual Open Source Survey
-Introduction
-
-
-
-
-                     Stakeholders
-               What are you seeking for？
-               What are you seeking for？
-Challenge
-
-
-                  Mature Software
-
-
-
-
-              large-
-              large-scale, uncategorized 
-        There are 39.8% uncategorized software in SourceForge
-        There are 39.8% uncategorized software in SourceForge
-                          and 61.68% in Ohloh
-                          and 61.68% in Ohloh
-Challenge
-
-
-
-    R
-    Reusable Module and Component
-         bl M d l     dC        t
-    Reusable Module and Component
-
-
-
-
-            manually ， difficultly
-                 ll
-            manually ， diffi ltl
-Challenge
-
-
-
-            Reusable Code Snippet
-            Reusable Code Snippet
-
-
-
-
-                     inaccuracy 
-                     Google Code Search
-                     Google Code Search
-                            Krugle
-               Codase Source Code Search Engine
-Feature
-
-
-
-
-          Software Feature
-          Software Feature
-   capture and identify commonalities and differences in
-                    a software domain
-Feature
-
-
-
-  F t                   i    t d di ti ti
-  Features are any prominent and distinctive
-  concepts or characteristics that are visible to
-  various stakeholders.
-     i     t k h ld
-  a) Features are externally visible characteristics that can
-     differentiate one product from the others.
-
-     Functions, objects, and aspects have been mainly used to
-  b) F    ti      bj t      d       t h     b    i l     dt
-     specify the internal details of a system.
-Feature
-
-
-
-
-          Social Feature
-          Social Feature
-          Social
-Challenge
-
-
-1 Synonymic Feature Element:
-1. Synonymic Feature Element:
-Challenge
-
-
-2. Hybrid Semantic-
-2 Hybrid Semantic
-          Semantic-
-2. Hybrid Semantic-level:
-             Doc Topic
-             Doc-Topic
-
-
-
-
-Topic-Word
-Topic Word
-Topic Model
-
-
-
-
-ID1000：Real-time windows registry monitor utility.
-Topic structure
-
-
-
-
-            1. Email S       h    d    il    t ti
-            1 E il Scanner enhanced email protection;
-            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
-            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
-               il li t         i           il i f      f i         d th th t
-            mail clients, ensuring your email is free of viruses and other threats;
-            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
-            before they reach your inbox;
-Ontology
-资源定位
- Overview
-Evaluation
-Evaluation
-
-
-
-
-      (a) the average value
-                                                (b) the standard deviation
-
-
-                 The clustering results for each category
-      You！
-Thank You！
-                      Yu Yue
-                  INFLUX Group
-                  I FL X G
-     National University of Defense Technology
-
\ No newline at end of file
diff --git a/res/paper/ADMA12-camera-ready.pdf b/res/paper/ADMA12-camera-ready.pdf
deleted file mode 100644
index 39b4231..0000000
--- a/res/paper/ADMA12-camera-ready.pdf
+++ /dev/null
@@ -1,709 +0,0 @@
-           Inducing Taxonomy from Tags :
-       An Agglomerative Hierarchical Clustering
-                     Framework
-
-    Xiang Li1 , Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, Yue Yu, and
-                                Dengqing Tang2
-            1
-                 National Laboratory for Parallel and Distributed Processing,
-                                 School of Computer Science,
-                National University of Defense Technology, Changsha, China
-                    {shockleylee,jack.nudt,taowang.2005}@gmail.com
-                  2
-                     College of Mechatronics Engineering and Automation,
-                National University of Defense Technology, Changsha, China
-                                  http://www.nudt.edu.cn
-
-
-        Abstract. By amassing ‘wisdom of the crowd’, social tagging systems
-        draw more and more academic attention in interpreting Internet folk
-        knowledge. In order to uncover their hidden semantics, several researches
-        have attempted to induce an ontology-like taxonomy from tags. As far
-        as we know, these methods all need to compute an overall or relative
-        generality for each tag, which is diﬃcult and error-prone. In this paper,
-        we propose an agglomerative hierarchical clustering framework which
-        relies only on how similar every two tags are. We enhance our framework
-        by integrating it with a topic model to capture thematic correlations
-        among tags. By experimenting on a designated online tagging system,
-        we show that our method can disclose new semantic structures that
-        supplement the output of previous approaches. Finally, we demonstrate
-        the eﬀectiveness of our method with quantitative evaluations.
-
-        Keywords: social tagging; semantics; tag taxonomy; tag generality; ag-
-        glomerative hierarchical clustering; topic model
-
-
-
-
-1     Introduction
-Social tagging websites like Delicious3 and Flickr4 are becoming popular, wit-
-nessing a soaring click rate during recent years. By annotating web contents
-with free-form tags that they feel appropriate, users of social tagging websites
-are enabled to play the dual role of visitors and contributors simultaneously.
-Speciﬁcally, a user is allowed to search and browse resources (documents, im-
-ages, URLs, etc.) through tags annotated by others and is free to add or delete
-tags whenever he or she wants.
-3
-    http://www.delicious.com/
-4
-    http://www.ﬂickr.com/
-2       Inducing Taxonomy from Tags: An AHC Framework
-
-
-
-
-       (a) tag cloud in Freecode.com           (b) taxonomy in Amazon.com
-
-                      Fig. 1. diﬀerent navigation mechanisms
-
-
-
-
-    For computer programs, tags are merely character strings with no meaningful
-relationships among them, which makes it hard to organize them into an infor-
-mative structure. As depicted in Fig.1(a), most tagging websites manage tags in
-a ﬂat tag cloud, where the font size of a tag is proportional to its frequency of
-usage, so users can have easy access to buzzword tags. Sometimes however, the
-desired tags are vague in users’ head and may go beyond what is popular. A tag
-cloud could do little help in this situation, and tags should be better arranged and
-managed to satisfy the requirement. In retail websites, a user usually navigates
-through hierarchical taxonomy (as in Fig.1(b)) when her requirement is only a
-vague notion rather than a concrete keyword. So promisingly, taxonomy of tags
-will analogously facilitates navigation and searching in the now-booming social
-tagging websites. Besides, in the view of online data analysts, generating tag
-taxonomy is crucial for representing and understanding Internet folk knowledge.
-An ontology-like taxonomy is intrinsically a good knowledge structure which
-captures semantics of terms in a machine understandable way[1].
-
-    Previous literature[2][3] has addressed on how to generate tag taxonomy ef-
-fectively. By using machine learning techniques, these researches achieved auto-
-mated taxonomy generation, which could bootstrap and alleviate manual con-
-struction. However, new methods[4][5] keep emerging because resultant taxon-
-omy never seemed satisfying enough. In an attempt to detect the bottleneck,
-we ﬁnd that to deduce semantic generality of each tag is the most diﬃcult and
-error prone (see Chapter 2 Related Work). To meet such challenge, we propose
-a novel approach of tag taxonomy construction. Our innovation lies in: i) By
-using an Agglomerative Hierarchical Clustering (AHC) framework, we only need
-to compute how similar two tags are and deliberately skip the calculation of tag
-generality. ii) We seamlessly integrate a topic model into the framework, so it
-is able to capture thematic correlations among tags. iii) We make comparative
-evaluation with existing approaches, the results demonstrate the usefulness and
-eﬀectiveness of our method.
-                        Inducing Taxonomy from Tags: An AHC Framework             3
-
-2   Related Work
-Because of the convention of constructing taxonomies with the general tags at
-the top and the more speciﬁc tags below them[6], a key step in existing taxonomy
-construction methods is extracting generality of each tag, either by computing
-a generality score[2][7] or by pair-wise comparison[3][4]. As far as we know, two
-types of techniques are used to achieve this step.
-    Some research works[2][7] use set theory techniques to compute a tag gener-
-ality. In such works, each tagged resource is treated as a distinct data item with
-their textual contents ignored. Each tag is presented as the collection of item-
-s it annotates. For example, Heymann et al.[7] proposed a simple yet eﬀective
-way to learn a tag taxonomy. They ﬁrst model each tag as a vector, with each
-entry being the number of times the tag annotates a corresponding resource.
-Cosine metric is then used to measure tag similarity. They come up with the tag
-similarity graph by connecting suﬃciently similar (controlled with a threshold)
-tags. The graph centrality metric, which is originally proposed in social network
-analysis literature, is used to measure the generality of each tag. Finally, tags of
-higher generality are greedily placed at the upper levels of the resultant taxon-
-omy. Liu et al.[2] used association rule mining which takes each tagged resource
-as a transaction and tags as items. The rules are in the form of “for an unknown
-resource X, if tag A appears then probably tag B will also appear”, which they
-call “tag B subsumes tag A”. The likelihood of such subsumption is naturally
-modeled as the conﬁdence and support of the corresponding rule. Based on sub-
-sumption likelihood between each pair of tags they calculate an overall generality
-score for each tag by using a random walk process. Eventually, a taxonomy is
-constructed using a top-down manner.
-    However, such set theory based approaches share a common ﬂaw. They only
-distinguish one resource from another and do not exploit tagged web documents.
-In light of this, some researches apply topic models to do the job. Such methods
-learn a latent topic distribution for each tag from web documents they anno-
-tate, tag relations are measured based on pair-wise comparison among topic
-distributions. Tang et al.[3] designed the Tag-Topic model based on the classic
-LDA(Latent Dirichlet Allocation) model[8]. They treat each word as a draw from
-a topic-speciﬁc word distribution, and a latent topic is in turn a draw from a
-tag-speciﬁc topic distribution. Based on such a generative model, Gibbs sam-
-pling is used to infer distribution parameters. They use Kullback-Leibler (KL)
-divergence to measure the diﬀerence between two distributions, and have pro-
-posed a relative generality score metric based on the intuition “if one tag has
-higher posterior probabilities on the latent topics, then it has a relatively higher
-generality”. Wang et al.[4] merge documents annotated by the same tag (they
-use ‘keyword’ instead) as a new document which they believe can explain that
-tag. They learn a standard LDA model out of the underlying corpus. Those new
-documents are folded-in thereafter. Thus, topic distribution of each tag (new
-document) is obtained. Their measurement of relative generality is based on the
-“surprise” theory[9] plus an intuitive law that “given an anticipated tag A, the
-appear of a document on a more general tag B will cause less ‘surprise’ than if
-4       Inducing Taxonomy from Tags: An AHC Framework
-
-A and B are switched”. It is really diﬃcult to come up with a tag generality
-score that both [3] and [4] resort to intuitions.
-
-
-3   AHCTC: Agglomerative Hierarchical Clustering for
-    Taxonomy Construction
-In order to avoid computing tag generality, we borrow the idea from the classic
-agglomerative hierarchical clustering which only relies on how similar/distant
-two points are in building a hierarchy.
-    The term agglomerative hierarchical clustering is not new in the ﬁeld of tax-
-onomy construction. Brooks and Montanez[10] adopted such methods to orga-
-nizing tags into a hierarchy, yet their hierarchy is not a taxonomy for lack of
-supertype-subtype relationships. In Liu et al.[2], authors also mention the use
-of agglomerative hierarchical clustering. However, their strategy is to iteratively
-place the most general tag remained, which is diﬀerent from the classic meaning
-of the agglomerative hierarchical clustering framework. The brilliance of agglom-
-erative hierarchical clustering is yet to be fully exploited in the ﬁeld of taxonomy
-construction.
-
-
-
-               0.9
-
-              0.85
-
-               0.8
-
-              0.75
-
-               0.7
-
-              0.65
-
-               0.6
-
-              0.55
-
-               0.5
-
-              0.45
-
-               0.4
-                           2       6       5      3       1      4
-
-
-
-
-                     Fig. 2. dendrogram of a typical clustering process
-
-
-
-   To illustrate the AHCTC framework in a broader picture, we eliminate any
-presumption on how the proximity scores are calculated, but rather assume
-they are known a-priori. In the next chapter, we will describe how to get a
-meaningful proximity score. With each data point being an initial cluster, classic
-agglomerative hierarchical clustering merges two closest clusters each time until
-only one all-inclusive cluster is left. The dendrogram of a typical AHC process
-consisting of 6 points are depicted in Fig.2. Sadly, the result is not a taxonomy for
-                       Inducing Taxonomy from Tags: An AHC Framework                5
-
-
-                                       Animals
-
-
-
-
-                        Mammals          Fish        Birds
-
-
- Fig. 3. a hierarchy of the cluster {Birds, Mammals, Fish, Animals} after promote
-
-
-
-the absence of supertype-subtype relationships. In the dendrogram, for example,
-a supertype should be there to overarch the cluster consisting of point 2 and 6.
-Now that data points are tags in our problem, a tag cluster should have a direct
-supertype (parent tag) or the resultant tag tree is not technically a taxonomy.
-    Of course, a tag cluster’s direct supertype should have high semantic proxim-
-ity to each tag in the cluster. For the cluster {Birds, Mammals, Fish Animals},
-a tag like Animals is more suitable to be the supertype than a Living Things
-tag. During the clustering process, tags with high proximity are assigned to the
-same cluster, so the supertype should better be selected from within a given clus-
-ter. Speciﬁcally, we choose the medoid of a cluster, i.e., the most central point.
-This medoid upgrades as the supertype of all other cluster members. We call
-this change as a promote operation. Now suppose the original cluster is {Birds,
-Mammals, Fish, Animals}, and Animals happens to be the medoid according
-to some proximity measure, the resultant hierarchy after promote is depicted in
-Fig.3.
-    In a hierarchical clustering scenario, a new cluster is merged from two old
-clusters each with a hierarchy itself, it forces the promote operation to be able
-to combine these two old hierarchies into a new one. With such requirements, we
-devise a promote mechanism and append it to each merge operation of classic
-AHC, the new taxonomy construction algorithm is illustrated in Algorithm 1.
-Two building blocks of the algorithm, proximity(i, j) and sup(m) are assumed
-known a-priori. We will illustrate how to get them later. The algorithm uses
-an adjacent matrix T to store resultant taxonomy. Initially, every data point is
-a distinct cluster. Each iteration in the while clause executes a merge and a
-promote operation. Line 4-7 ﬁnds the closest two clusters in the current cluster
-set to merge.
-    Line 8-21 is the promote operation, which is also the only operation edits
-T . Diﬀerent from the basic promote operation we have described in Fig.3, the
-promote operation here will be much more intricate since a hierarchical scenario
-is concerned. For ease of illustration, we call the the two supertypes over the
-clusters being merged as old supertypes. Line 8-11 says if the new supertype
-sup(m) happens to be one of the two old supertypes, an directed edge is added
-from it to the other old supertype (see Fig.4(a) and Fig.4(b)).
-    Otherwise, if sup(m) comes from the public, the procedure will have to go
-through the intricacies of line 13-20. Fig.4(c) and Fig.4(d) displays them in de-
-6      Inducing Taxonomy from Tags: An AHC Framework
-
-Algorithm 1 AHCTC
-Require: Data points D = {d1 , d2 , ..., dn }.
-Require: T = [tij ]n×n the adjacent matrix for the resultant taxonomy, tij = 1 when
-    di is a direct supertype of dj .
-Require: M = {m1 , m2 , ...}, the set of all remaining clusters.
-Require: sup(m), index of the supertype data point for a given cluster m.
-Require: proximity(i, j), the proximity score between data points di and dj .
-Ensure: construct the resultant taxonomy T .
- 1: T ← (0)n×n
- 2: M ← D
- 3: while |M | > 1 do
- 4:    ﬁnd mi and mj in M with maximum proximity(sup(mi ), sup(mj ))
- 5:    merge mi and mj as m
- 6:    add m to M
- 7:    delete mi and mj from M
- 8:    if sup(m) equals sup(mi ) then
- 9:       tsup(m),sup(mj ) ← 1
-10:    else if sup(m) equals sup(mj ) then
-11:       tsup(m),sup(mi ) ← 1
-12:    else
-13:       ﬁnd k that tk,sup(m) equals 1
-14:       tk,sup(m) ← 0
-15:       for all g that tsup(m),g equals 1 do
-16:          tsup(m),g ← 0
-17:          tk,g ← 1
-18:       end for
-19:       tsup(m),sup(mi ) ← 1
-20:       tsup(m),sup(mj ) ← 1
-21:    end if
-22: end while
-
-
-
-
-tails. Simply speaking, former subtypes of point B (the newly elected supertype),
-i.e. D and E, should now be A’s subtypes after B’s promote operation. This is
-because A is formerly their nearest ancestor besides B, and we want to maintain
-the relation that A be more general than either D or E after B’s promote. To
-implement this process, the algorithm detaches sup(m) from its direct supertype
-k (line 13-14), attaches all children of sup(m) to k (line 15-18) and ﬁnally the
-two old supertypes are attached to sup(m) (line 19-20).
-
-    If n is the number of data points, the basic AHC algorithm requires O(n2 log n)
-time[11]. The only extra step of our algorithm is the promote operation (line 8-
-21), which at worst induces O(n2 ). The while loop will iterates for n − 1 times,
-because after each iteration the number of clusters only reduces one. At the
-worst case, all n − 1 iterations undergo line 13-20, each needs to look up and
-edit at most n − 1 edges in T . Totally speaking, our algorithm has the same time
-complexity as the basic AHC, O(n2 log n).
-                             Inducing Taxonomy from Tags: An AHC Framework                     7
-
-                                                                   A
-                     A              F
-
-
-
-                                                       B           C           F
-                 B       C     G    H    I
-
-
-
-
-             D       E                         D       E           G           H       I
-
-
-            (a) Type 1: before promote         (b) Type 1: after promote
-                     A              F
-                                                                   B
-
-
-
-                 B       C     G    H    I
-                                                           A               F
-
-
-
-
-             D       E                        D    E           C       G           H       I
-
-
-
-            (c) Type 2: before promote         (d) Type 2: after promote
-
-Fig. 4. Two types of promote operation during hierarchical clustering. The selected
-supertype and newly added edges are in red, edges to be removed are in dashed lines.
-
-
-4     Integration with Topic Models
-In order to get AHCTC running, we have to mount its assemblies. Notice that
-sup(m) ﬁnds the most central points based on proximity(i, j). So essentially, we
-only have to implement proximity(i, j) which quantiﬁes the similarity measure
-between tags.
-    Web documents annotated by a certain tag usually contain semantic informa-
-tion of that tag. It will be a great loss for a tag taxonomy construction method to
-overlook latent semantics in tagged web documents. Recent years have witnessed
-drastic methodology evolution in the ﬁeld of information retrieval, towards the
-unchanging goal of uncovering semantic information in unstructured text data.
-Since the publish of LDA[8], a family of algorithms[12][13] known as Probabilis-
-tic Topic Models emerge and quickly win massive adoptions. Probabilistic Topic
-Models are skilled at discovering hidden thematic structure of text documents.
-In a real corpus like New York Times, a document may be tightly related to
-topics like Foreign Policy and Economics, while only mentions a little on Sports.
-Topic models answer what themes or topics a document relates to and quantify
-how strong such relations are. Thus, a thematic similarity measure could be in-
-duced for each pair of documents. Wang et al.[4] and Tang et al.[3] each design
-a variant of the basic topic model able to learn thematic structure of tags from
-tagged corpus. Our proximity(i, j) measure is built on top of Wang’s model.
-Chapter 4.1 brieﬂy introduces stantard LDA and Wang’s topic model.
-
-4.1   Probabilistic Topic Model
-LDA is the basic Probabilistic Topic Model. In LDA, a latent topic z = j is
-modeled as an unlabeled corpus-wide word distribution φ(j) = P (w|z = j),
-which was drawn from a dirichlet prior distribution Dirichlet(β). The number
-8        Inducing Taxonomy from Tags: An AHC Framework
-
-of topics T is speciﬁed beforehand to adjust the granularity. Each document d is
-a mixture of topics θ(d) = P (z) with a dirichlet prior distribution Dirichlet(α).
-The generative process of each word in d is essentially a draw from the joint
-                         T
-distribution P (wi ) =         P (wi |zi = j)P (zi = j). Given the observed documents,
-                         j=1
-Gibbs Sampling algorithm[14] is usually used for posterior inference.
-    [4] modiﬁes LDA to deal with tags (keywords). Their assumption is that
-documents annotated by a tag usually have thematic information of that tag.
-For a given tag, they merge documents annotated with it into a new document,
-removing those words occurred only once. After the standard LDA training,
-new documents are folded-in to the trained model by an extra run of Gibbs
-Sampling algorithm. Finally, a tag-topic distribution for each new document is
-estimated. Jenson-Shannon divergence or cosine similarity measure could be used
-to calculate the divergence between any two tag-topic distributions.
-
-4.2    Tag Proximity Measure
-Based on the above model, our tag proximity measure is chosen just as the diver-
-gence between tag-topic distributions: if we think a tag-topic distribution over T
-topics as the tag’s coordinate in a T -dimensional thematic space. The divergence
-between two tag-topic distributions can be understood as the thematic space co-
-ordinate distance between the two tags. So it becomes clear that such a proximi-
-ty measure exploits semantic (thematic) correlation among tags. Based on that,
-sup(m) is deﬁned as the most central point of cluster m in the thematic space,
-which ensures that a supertype can thematically represents the whole cluster. In
-other words, sup(m) ﬁnds the data point index arg min{ dj ∈m proximity(i, j)}.
-                                                        i
-After integrating with the topic model, AHCTC can hierarchically cluster tags
-that are thematically similar and pick the most central tag in the thematic space
-as the supertype for each cluster. Notice the diﬀerence between our method and
-[3][4] is that we don’t have to tell which tag is more general from the topic model,
-which is not what a topic model good at.
-
-
-5     Experiment
-Ohloh5 is a popular online open source software directory and community plat-
-form whose user number has exceeded 1,500,000. It provides information on
-more than 500,000 open source software projects. In the proﬁle of each project,
-there is a brief description along with other valuable information like develop-
-ment history and technical features. Being a social tagging website, its users are
-given the freedom to edit this information and to tag the projects. A typical
-project proﬁle in Ohloh is depicted in Fig.5. To browse projects by tags, users
-can either pick from the ﬂat tag list or use keyword search for sifting. However,
-such a ﬂat list does not give the conceptual scope of each tag nor the possible
-5
-    http://www.ohloh.net/
-                       Inducing Taxonomy from Tags: An AHC Framework           9
-
-
-
-
-           Fig. 5. Part of project proﬁle of the Mozilla Firefox in Ohloh
-
-
-relationships among several tags. A tag taxonomy will apparently do a better
-job. Based on such a requirement, we choose Ohloh as our dataset to validate
-our tag taxonomy construction algorithm.
-    Dataset and Parameter Setting. From Ohloh, we have crawled 10,000
-open source software project proﬁles and extracted their descriptions and tags.
-Suﬀering from the common ﬂaws of all folk knowledge, tags might be poor
-phrased or too esoteric and some are even meaningless. We omit tags with less
-than 300 references and manually delete the meaningless tags ‘1’, ‘???’, ‘????’,
-‘?????’ which somehow are widely adopted in Ohloh. The result after prepro-
-cessing is a set of 267 tags. For topic modeling, we set the number of topics at
-60 and iterate 2000 times in the Gibbs Sampling process.
-    Baseline methods. We compare AHCTC with two of the published meth-
-ods on the same dataset. For comparison with set theory based methods, we
-choose the ontology induction algorithm proposed in [2] as our baseline. Since
-their method is based on tag subsumption, we use the shorthand SUBSUME to
-stand for their method. Ohloh does not provide author information of each tag,
-so we use KR = (G = R, M = T, I) as the projection from a folksonomy onto a
-formal context, details are given in the original paper. We set the parameters at
-the best setting given by the authors, i.e.,λ = 0.95, θs = 0.00001, θc = 0.15 and
-the maximum number of random walk iteration equals 1000.
-    For comparison with topic model based methods, we choose the LSHL al-
-gorithm proposed in [4] as the baseline. The other algorithm in [4], GSHL, is
-just a modiﬁed version of LSHL aiming at a diﬀerent goal. Their experiment
-use keywords of academic paper abstracts as Concepts while here we use the
-267 Ohloh tags to take their places. Parameters are also set at what the original
-paper suggests, T Hs = 0.6, T Hd = 0.35, T Hn = 0.4 and the number of topics
-for topic modeling is set to 60.
-    Experiment result. The resultant taxonomies are shown in Fig.6. Since
-the space is limited, only the framework subtree of our result is depicted. For
-result of LSHL algorithm, the library subtree is chosen since it has suﬃcien-
-10             Inducing Taxonomy from Tags: An AHC Framework
-
-                                                                                                                                         c#
-
-
-                                                                                                             library                   haskell
-
-
-                                                                                                                                    development
-
-
-                                                       j2ee                       jsf                                                  module
-
-
-                     api                               jpa                                                                              cms
-                                                                                                             struts
-
-                   python                              jsp                      workflow                                           dynamic_content
-                                                                                                           framework
-
-                   source                              orm                                                                           application
-
-                                  hibernate                                                                 apache
-                                                                                                                                   object_oriented
-                 visualization                        spring
-                                                                                                              mvc
-                                                                                                                                        oop
-                  windows                              sql
-                                                                                                           opensource
-     library
-                                                                                               java                                   template
-                     xml                              struts
-                                                                                                            hibernate
-                                                                                                                                        free
-                     java          eclipse           groovy
-                                                                                                              j2ee
-
-
-                    code          general            maven
-                                                                                                            database                    orm
-
-
-                 development        ide                                                                      spring
-
-
-                  framework         ajax            component                                                oracle
-
-
-                                 opensource                                                                   rest
-
-
-                 (a) part of LSHL java subtree                                              (b) SUBSUME library subtree
-                                                                                                jsf                       jsp
-
-
-                                                                   j2ee                       spring
-
-
-                                                                   java                       general
-
-
-                                                                    jpa                        xml
-                                      hibernate
-                                                                   json                         xslt
-                                                                                                                          sql
-                                                                   orm                        oracle
-                                                                                                                        database
-                                                                  groovy
-
-
-                                                                opensocial
-
-
-                                                                    rest                    webservices
-
-
-                                       apache                      atom
-
-
-                                           mvc                 authentication
-
-
-                    framework              oop                  webservice
-
-
-                                     opensource                    php5                    zendframework
-
-
-                                           rails                rubyonrails
-
-
-                                           struts
-
-
-                                           (c) AHCTC framework subtree
-
-                                 Fig. 6. Part of the resultant taxonomies
-                        Inducing Taxonomy from Tags: An AHC Framework           11
-
-t overlapped tags with AHCTC framework subtree. We can see from Fig.6(a)
-and Fig.6(c) that despite some parts, the two trees are diﬀerent in their struc-
-tures. The AHCTC framework subtree apparently classiﬁes the tags according
-to the technical framework they belong. In the LSHL library subtree, tags are
-ﬁrst classiﬁed by diﬀerent types of programming libraries. For example, in the
-AHCTC framework subtree hibernate is classiﬁed as a kind of framework but in
-LSHL it is deemed as a java library. The two taxonomies are of diﬀerent facades.
-They complement one another and are both valuable in disclosing tag seman-
-tic structure. If these machine-learned taxonomies are to be used as prototypes
-helping ontology engineers to build a well-deﬁned taxonomy, both the resultant
-taxonomies will be needed in order to provide a comprehensive picture.
-    The SUBSUME taxonomy seems rather ﬂat, many tags appear as the root’s
-children. This coincides with experiment results and illustrations given in the
-original paper. In fact, this taxonomy takes 91 out of 267 tags as the children of
-root java, including most of the tags in AHCTC framework subtree. To make a
-visual comparison with the other two subtrees, we can only render an excerpt of
-the java tree consisting of only pertinent tags. In Fig.6(b) the induced edges seem
-reasonable individually, but the whole taxonomy is too ﬂat to be informative. We
-believe the cause is that SUBSUME algorithm does not exploit text of tagged
-documents.
-   Quantitative Evaluation. In order to make a convincing quantitative e-
-valuation, we have to do multiple experiments for each of the three algorithms.
-We conduct 3 AHCTC experiments each time with a diﬀerent tag similarity
-measure, Jenson-Shannon divergence (JS), cosine similarity (COS) and KL di-
-vergence. For the LSHL taxonomy which also needs to calculate a tag similarity
-score, JS and COS as the only measures proposed in the original paper are e-
-valuated respectively. We fail to conduct multiple versions of the SUBSUME
-experiment since the algorithm do not have any replaceable building block.
-    To evaluate a tag taxonomy is diﬃcult, because several complementary tax-
-onomies might exist. However, several related works have tried in designing ef-
-fective taxonomy evaluation methods. [2] uses the concept hierarchy from Open
-Directory Project as the ground truth to validate their learned ontology. In com-
-paring the two hierarchies, both lexical and taxonomical precision and recall are
-evaluated. [4] asks domain experts to evaluate the correctness of each edge in-
-dividually, and precision is deﬁned as the proportion of correct edges in all the
-learned edges.
-    Our quantitative evaluation considers both these techniques. First, we ask 20
-students to judge the correctness of each edge in a taxonomy. They are given 3
-days to ﬁnish this task, and are encouraged to consult any accessible knowledge
-source for tags they don’t understand. We use the precision measure proposed
-in [4] to calculate edge correctness. We calculate the average value and standard
-deviation of the edge correctness. The results are given in TABLE 1. All AHCTC
-taxonomies have high average edge correctness compared to other results, and
-the AHCTC-KL taxonomy has the highest. AHCTC-JS and LSHL-COS tax-
-12      Inducing Taxonomy from Tags: An AHC Framework
-
-onomies have relatively higher standard deviations, which means many of the
-edges are indeterminate so judges make quite diﬀerent judgements.
-
-
-               Table 1. Edge Correctness Judged by Human Experts
-
-                                            Avg.        S.d.
-                             LSHL-JS        0.7319 0.0935
-                            LSHL-COS        0.6888 0.1313
-                            SUBSUME         0.6897 0.0639
-                            AHCTC-KL 0.7940 0.0432
-                            AHCTC-JS        0.7895 0.1213
-                           AHCTC-COS 0.7519 0.0879
-
-
-
-     To consider the correctness of each edge individually is not fully appropriate.
-We refer to the taxonomical precision measurement proposed in [2]. The golden
-truth is chosen as the sof tware subtree of the Open Directory Project concept
-hierarchy. This subtree covers 179 out of 267 tags we are concerning, which is
-a 67.29% lexical precision. We also apply the taxonomical metrics deﬁned in
-[2]. The taxonomical precision, recall and F-measure (T P , T R, T F ) for diﬀerent
-experiments are given in TABLE 2. AHCTC with KL divergence gets the highest
-value on all three metrics.
-
-
-                  Table 2. Taxonomical Quantitative Evaluation
-
-                                       TR          TP          TF
-                        LSHL-JS      0.0194    0.0235      0.0212
-                       LSHL-COS      0.0244    0.0296      0.0268
-                       SUBSUME       0.0267    0.0393      0.0318
-                      AHCTC-KL 0.0525 0.0514 0.0519
-                       AHCTC-JS      0.0370    0.0334      0.0351
-                      AHCTC-COS 0.0306         0.0328      0.0317
-
-
-
-    Discussion The above experiments and evaluations demonstrate the useful-
-ness and eﬀectiveness of AHCTC algorithm, given the existence of similar meth-
-ods: through qualitative evaluation, we show that AHCTC discovers valuable
-tag structures that are diﬀerent from those discovered by any existing algorith-
-m. Quantitative metrics suggest that AHCTC can construct better taxonomies.
-    As we have mentioned, parameters in SUBSUME and LSHL experiment are
-set at the practical best settings suggested by original papers. However, au-
-thors didn’t guarantee that those settings are always the best regardless of what
-                         Inducing Taxonomy from Tags: An AHC Framework              13
-
-dataset being used. For this reason, we have actually tested several other com-
-binations of parameter values. It turns out that the best settings still practically
-outrun other settings in our dataset in terms of the quality of resultant tax-
-onomies.
-    It shall be noted that evidence given by our quantitative evaluations is still
-weak in measuring how ‘good’ a taxonomy is: edge correctness considers whether
-each individual edge is correct and can not measure the correctness of an entire
-taxonomy. Taxonomical metrics gained by comparing against a gold taxonomy
-is not persuasive, given that several complementary taxonomies might exist. It is
-also the reason why metrics in TABLE 2 are quite small. Taxonomy evaluation
-is still an open issue to be investigated in the future.
-
-
-6   Conclusion
-Many research eﬀorts have been spent on inducing a taxonomy from a set of
-tags. This paper proposes a novel approach based on agglomerative hierarchical
-clustering, which can eﬀectively skip the error prone step of calculating each
-tag’s generality. A topic model is integrated into the AHC framework to disclose
-thematic correlations among tags. The experiment is built on top of data from
-Ohloh, an online social network software directory. With qualitative and quanti-
-tative evaluations, we demonstrate usefulness and eﬀectiveness of the proposed
-method, after comparing with two representative previous works.
-
-
-7   Acknowledgement
-This research is supported by the National Science Foundation of China (Grant
-No.60903043), the National High Technology Research and Development Pro-
-gram of China (Grant No. 2012AA010101) and the Postgraduate Innovation
-Fund of University of Defence Technology (Grant No.120602). Our gratitude
-goes to authors of [4], Wang Wei and Payam Barnaghi, for their help in provid-
-ing us the details of LSHL algorithm.
-
-
-References
- 1. Staab, S., Studer, R., eds.: Handbook on Ontologies. 2. edn. Springer, Berlin
-    (2009)
- 2. Liu, K., Fang, B., Zhang, W.: Ontology emergence from folksonomies. In Huang,
-    J., Koudas, N., Jones, G.J.F., Wu, X., Collins-Thompson, K., An, A., eds.: CIKM,
-    ACM (2010) 1109–1118
- 3. Tang, J., fung Leung, H., Luo, Q., Chen, D., Gong, J.: Towards ontology learning
-    from folksonomies. In Boutilier, C., ed.: IJCAI. (2009) 2089–2094
- 4. Wang, W., Barnaghi, P.M., Bargiela, A.: Probabilistic topic models for learning
-    terminological ontologies. IEEE Trans. Knowl. Data Eng. 22(7) (2010) 1028–1040
- 5. Navigli, R., Velardi, P., Faralli, S.: A graph-based algorithm for inducing lexical
-    taxonomies from scratch. In Walsh, T., ed.: IJCAI, IJCAI/AAAI (2011) 1872–1877
-14      Inducing Taxonomy from Tags: An AHC Framework
-
- 6. Russell, S.J., Norvig, P.: Artiﬁcial Intelligence - A Modern Approach (3. internat.
-    ed.). Pearson Education (2010)
- 7. Heymann, P., Garcia-Molina, H.: Collaborative creation of communal hierarchical
-    taxonomies in social tagging systems. Technical report, Computer Science Depart-
-    ment, Standford University (April 2006)
- 8. Blei, D.M., Ng, A.Y., Jordan, M.I.: Latent dirichlet allocation. Journal of Machine
-    Learning Research 3 (2003) 993–1022
- 9. Itti, L., Baldi, P.: Bayesian surprise attracts human attention. In: NIPS. (2005)
-10. Brooks, C.H., Montanez, N.: Improved annotation of the blogosphere via auto-
-    tagging and hierarchical clustering. In Carr, L., Roure, D.D., Iyengar, A., Goble,
-    C.A., Dahlin, M., eds.: WWW, ACM (2006) 625–632
-11. Tan, P.N., Steinbach, M., Kumar, V.: Introduction to Data Mining. Addison-
-    Wesley (2005)
-12. Blei, D.M., McAuliﬀe, J.D.: Supervised topic models. In Platt, J.C., Koller, D.,
-    Singer, Y., Roweis, S.T., eds.: NIPS, Curran Associates, Inc. (2007)
-13. Blei, D.M., Griﬃths, T.L., Jordan, M.I.: The nested chinese restaurant process
-    and bayesian nonparametric inference of topic hierarchies. J. ACM 57(2) (2010)
-14. Griﬃths, T.L., Steyvers, M.: Finding scientiﬁc topics. Proceedings of the National
-    Academy of Science 101 (2004) 5228–5235
-
\ No newline at end of file
diff --git a/res/paper/F-recommendation-CameraReady.pdf b/res/paper/F-recommendation-CameraReady.pdf
deleted file mode 100644
index 671b8dd..0000000
--- a/res/paper/F-recommendation-CameraReady.pdf
+++ /dev/null
@@ -1,622 +0,0 @@
-       Mining and Recommending Software Features across
-                   Multiple Web Repositories
-
-                                                 Yue Yu, Huaimin Wang, Gang Yin, Bo Liu
-                               National Laboratory for Parallel and Distributed Processing
-            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
-                          yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@163.com
-
-
-ABSTRACT                                                                            of “Internet as computer”[21][23], more and more software
-The “Internetware” paradigm is fundamentally changing the                           projects are developed, maintained and diﬀused through the
-traditional way of software development. More and more                              Internet computing environment. The Internet-based soft-
-software projects are developed, maintained and shared on                           ware repositories, such as Sourceforge.net1 , Freecode.com2 ,
-the Internet. However, a large quantity of heterogeneous                            Ohloh.com3 and Softpedia.com4 , have hosted large amounts
-software resources have not been organized in a reasonable                          of software projects, which are fundamentally changing the
-and eﬃcient way. Software feature is an ideal material to                           traditional paradigms of software development. Around the
-characterize software resources. The eﬀectiveness of feature-                       repositories, manifold reusable software resources[13] have
-related tasks will be greatly improved, if a multi-grained                          been accumulated, including code bases, execution traces,
-feature repository is available. In this paper, we propose a                        historical code changes, mailing lists, bug databases, soft-
-novel approach for organizing, analyzing and recommend-                             ware descriptions, social tags, user evaluations and so on.
-ing software features. Firstly, we construct a Hierarchical                            However, all of these valuable resources have not been
-rEpository of Software feAture (HESA). Then, we mine the                            reorganized in a reasonable and eﬃcient way to assist in
-hidden aﬃnities among the features and recommend relevant                           the activities of software development[30]. For example, a
-and high-quality features to stakeholders based on HESA.                            large proportion of projects in the above repositories have
-Finally, we conduct a user study to evaluate our approach                           not been categorized or marked with some eﬀective tags. In
-quantitatively. The results show that HESA can organize                             Sourceforge.net, there are 39.8% software projects have no
-software features in a more reasonable way compared to the                          category label and in Ohloh.com 61.68% projects have not
-traditional and the state-of-the-art approaches. The result                         tagged by users. Table 1 (according to data in mid-2011)
-of feature recommendation is eﬀective and interesting.                              presents the details about our statistical results. Consid-
-                                                                                    ering the large-scale, heterogeneous and multi-grained soft-
-                                                                                    ware resources, it is a great challenge for stakeholders to
-Categories and Subject Descriptors                                                  retrieve the suitable one.
-D.2.9 [Software Engineering]: Mining Software Reposi-                                         Table 1: Labels in open source communities
-tory; H.3.3 [Information Storage and retrieval]: Fea-                                     Repository
-                                                                                                          total    unique       ratio         ratio
-ture Model, Clustering, Query formulation                                                               projects    labels   (#label=0)   (#label=0,1)
-                                                                                          SourceForge   298,402      363       39.80%       77.00%
-                                                                                          Ohloh         417,344    102,298     61.68%       69.89%
-General Terms                                                                             Freecode       43,864     6,432      8.61%        20.60%
-                                                                                      As a kind of visible attributes which capture and identify
-Algorithms, Human Factors
-                                                                                    commonalities and diﬀerences in a software domain, Fea-
-                                                                                    ture[3][15] is an ideal material to represent the software re-
-Keywords                                                                            sources. For example, when a company wants to develop a
-Mining Software Repository, Domain Analysis, Feature On-                            new commercial software product about Video-Player, do-
-tology, Recommender System                                                          main analysts might evaluate user comments to pick out
-                                                                                    outstanding competing products, analyze and extract the
-                                                                                    reusable feature assets, combine the related function points
-1. INTRODUCTION                                                                     and design a novel feature model. Based on the feature
-  The Internet is undergoing a tremendous change towards                            model, developers match the features with corresponding
-the globalized computing environment. With the vision                               software resources including code fragments, components
-                                                                                    and mature open source software.
-                                                                                      However, classic feature analysis techniques, such as Fea-
-                                                                                    ture Oriented Domain Analysis (FODA)[14] and Domain
-                                                                                    Analysis and Reuse Environment (DARE)[9], are heavily
-Permission to make digital or hard copies of all or part of this work for
-personal or classroom use is granted without fee provided that copies are
-                                                                                    relied on the experience of domain experts and plenty of
-not made or distributed for proﬁt or commercial advantage and that copies           1
-                                                                                      http://sourceforge.net
-bear this notice and the full citation on the ﬁrst page. To copy otherwise, to      2
-                                                                                      http://freecode.com
-republish, to post on servers or to redistribute to lists, requires prior speciﬁc   3
-permission and/or a fee.                                                              http://www.ohloh.net
-                                                                                    4
-Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                      http://www.softpedia.com
-                             Figure 1: The overview of HESA construction and feature recommendation
-
-market survey data. Hence, the feature analysis is a labor-       input limited information for the initial idea about an in-
-intensive and error-prone process. Nowadays, in order to          novative software product. When stakeholders accept some
-promote software products to users, stakeholders write some       recommended features or provide more requirements, our
-marketing-like summaries, release notes and feature descrip-      system would reﬁne the recommendations in the next stage.
-tions on the proﬁle pages via natural language, as shown in          Before describing the speciﬁc details of the underlying al-
-Figure 2. The massive number of software proﬁles can be           gorithms, an architectural overview of approach will be pro-
-treated as a kind of repository contains a wealth of informa-     vided as below. There are actually two processes concerning
-tion about social software features.                              the application of our method, i.e., the construction pro-
-   In this paper, we propose a novel approach for organizing,     cess of HESA and the process of feature recommendation to
-analyzing and recommending software features to reduce the        stakeholders. As depicted in Figure 1, the construction pro-
-costs of domain analysis. First of all, mining the hidden         cess consists of three primary modules and the input data
-semantic structure, we construct a Hierarchical rEpository        are software proﬁles collected and updated continuously by a
-of Software feAture (HESA) using an improved agglomera-           web crawler. There is a wealth of information on a software
-tive hierarchical clustering algorithm. The features are orga-    proﬁle page as shown in Figure 2. Our system can automat-
-nized as a kind of hierarchical structure in HESA. From top       ically extract social feature elements (blue boxes), softsware
-down, the semantic granularity is ﬁner and ﬁner accompa-          categories (green box) and the user evaluations (red boxes).
-nying with the increasing number of features, which can sat-         The Feature-Topic Modeler is responsible for mining the
-isfy the requirements of multi-grained reuse environments.        semantic structures hidden in social feature elements. Then,
-Then, utilizing the search engine for HESA, features in the       the HESA Constructor will merge the synonymic elements
-speciﬁc layers are retrieved and tied together to mine the        and build the feature ontology based on the semantic struc-
-aﬃnities among them. Finally, we design a novel strategy          tures. After all the raw data under our category are dis-
-to evaluate the popularity and quality of software products       posed, the construction process of HESA is ﬁnished.
-and circularly recommend features to stakeholders.                   In terms of user evaluations, the Popularity Evaluator and
-   The rest of this paper is or organized as follows. Section 2   Resource Selector can classify the software resources into
-introduces the overview of our work. Section 3 describes the      diﬀerent groups such as popular and high-quality group and
-construction of HESA in detail. We mine the hidden rela-          unpopular and low-quality group. When stakeholders input
-tionship of software features and present the novel approach      their requirements of a speciﬁc domain, the HESA Search
-of feature recommendation in Section 4. Experiments and           Engine can retrieve the features in the corresponding gran-
-analysis can be found in Section 5. Finally, we review related    ularity. Combining the feature and the diﬀerent group of
-work in Section 6 and draw conclusions in Section 7.              software resources, the system can mine the Feature-Pattern
-                                                                  based on the resource-by-feature matrix. The last module,
-                                                                  Feature Recommender, outputs a set of features to stake-
-2. OVERVIEW                                                       holders and gather their feedback. Then, according to the
-  The objective of this paper is to recommend a set of the        feedback, it will circulate the mining process and recommend
-most relevant and high-quality software features to stake-        more relevant features to stakeholders.
-holders. We have collected a massive number of social soft-
-ware features to build a Hierarchical rEpository of Software
-feAture (HESA). At the beginning, stakeholders can just           3. THE CONSTRUCTION OF HESA
-                                            Figure 2: An example of the software proﬁle
-
-  In this section, we present the key algorithms of the HESA        formation about latest threats”;
-construction. You can ﬁnd more details about our stages,               (3) “Incremental updating system minimizes the size of
-algorithms and data analysis in our previous work[30].              regular update ﬁles”;
-                                                                       These three elements present the common attribute about
-3.1    Social Feature Elements in Proﬁles                           incremental updating database, but only the word “update”
-   Social feature element is a kind of raw descriptions written     is shared by the two sentences. Thus, social feature elements
-by diﬀerent users of web repositories, which can indicate a         should be merged together by an eﬀective method.
-functional characteristic or concept of a software product.
-In this paper, all the social feature elements are extracted
-from Softpedia.com, Freecode.com and Sourceforge.net.               3.2 Feature-Topic Model
-   Due to the open, dynamic and uncontrollable natures of              According to the observation in our previous work[30], the
-the Internet[22], diﬀerent people describe the functions in         probabilistic topic model can be used to mine the semantic
-terms of their personal understanding. We face two main             structures hidden in the massive number of social feature
-challenges of the unstructured social feature elements.             elements.
-   Hybrid Semantic level: The problem of hybrid seman-                 In a speciﬁc category, such as Video-Player, all the so-
-tic level is that diﬀerent social feature elements describe a       cial feature elements in the corpus can be represented as
-common theme in diﬀerent semantic level, such as the fol-           Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes the ith ele-
-lowing descriptions:                                                ments in the corpus. Assuming that K latent topics Tk =
-   (1) “Internationalized GUI”;                                     {t1 , t2 , . . . , tj , . . . , tk } are implicit in the social feature ele-
-   (2) “Various language packs are available”;                      ments, where tj denotes the jth topic. Although a social
-   (3) “Multi-language supported: including English, Simpli-        feature element can be bound up with several topics, it may
-ﬁed Chinese, Traditional Chinese, Japanese, Korean, Ger-            put more emphasis on some topics than the others. The
-man, French, Spanish, Italian, Russian etc”;                        topic degree within fi can be represented as a K -dimensional
-   The ﬁrst two sentence describes the theme of multilingual        vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ), where pi,j is a topic
-setting in a general level. However, the last sentence present      weight describing the extent to which the topic tj appears
-more details including what kind of languages would be sup-         in fi . When pi,j = 0, fi is irrelevant to tj . Thus, the
-ported. On the one hand, the massive number of social fea-          υi , i ∈ [1, m], represented by Vm , can be used to indicate
-ture elements in diﬀerent semantic-level are good materials         the semantic structure implied in social feature elements.
-for the construction of ﬂexible granularity ontology. On the        If the Vm can be obtained, the thematic similarity measure
-other hand, it is a great challenge for the traditional meth-       would be induced for each pair of social feature elements and
-ods to cluster and reorganize these social feature elements.        the synonymic elements would be merged together. Because
-   Synonymic Element: The problem of synonymic ele-                 topic models answer what themes or topics a document re-
-ment happens when two features are used to describe some            lates to and quantify how strong such relations are, it is a
-common or very similar functional attributes.                       eﬀective way to learn Vm .
-   Some social feature elements are almost the same with               In this paper, we choose Latent Dirichlet Allocation (LDA)
-each other, such as the three elements below:                       [6] to learn Vm , because it has been shown to be more ef-
-   (1) “Simple user interface”;                                     fective for a variety of software engineering purposes[28][4]
-   (2) “User-friendly interface”;                                   than other topic models. A social feature element fi can
-   (3) “Easy and friendly user interface”;                          be viewed as a document which is preprocessed by remov-
-   Another typical problem is that each pair only shares few        ing commonly occurring words and then by stemming the
-core words, such as the following:                                  remaining words to their root form. According to category,
-   (1) “Ability to update that does not require downloading         we apply LDA to process the documents using the MALLET
-full package”;                                                      tool[19] which is an implementation of the Gibbs sampling
-   (2) “Incremental database updates and often to include in-       algorithm[10].
-3.3    iAHC: improved Agglomerative Hierarchi-                       represent the theme of c. Two metrics, similarity value and
-       cal Clustering                                                topic degree, are used to determine the medoid. Firstly, to
-  To support multi-grained reuse environment, the semantic           get the values , we calculate the similarity between ci ∈ c and
-similar social feature elements should be merged and reorga-         the centroid of c through Equation 2, where the vector υc of¯
-                                                                                                        |c|
-                                                                                                               υ
-nized as a ﬂexible hierarchical structure deﬁned as feature-         centroid is calculated by υc = i=1 i . Then, the Equation
-                                                                                                 ¯      |c|
-ontology. In this paper, we present the iAHC algorithm               3 is used to calculate the degreet based on the following two
-(Algorithm 1) integrated with the LDA.                               important observations of feature-topic distribution Vm in
-                                                                     our datasets.
-Algorithm 1 improved Agglomerative Hierarchical Clus-                                                        1
-tering                                                                           degreet = xmax +                               (3)
-                                                                                                          ˆ
-                                                                                                          k                2
-                                                                                                          r=1 (xmax −pir )
-Require:                                                                                            e            ˆ
-                                                                                                                 k
-    Fm = {f1 , f2 , . . . , fi , . . . , fm };
-                                                                                                                       ˆ
-                                                                     Where xmax is the maximum value of υi , and k is the fre-
-    feature-topic distribution Vm ;
-Ensure:                                                              quency when υi not equal to zero, and pir is any value that
-    The construction of feature-ongtology;                           not equals to zero in υi .
- 1: M ← D                                                               Observation 1 The most probable topic reﬂects the most
- 2: f eatureSet ← ∅                                                  prominent theme that the document (social feature element)
- 3: repeat                                                           is about.
- 4:     ci , cj = ﬁndTwoClosestClusters(M )                             Observation 2 The more widely and evenly distributed
- 5:    merge ci and cj as c                                          its topics are, the higher-level the document (social feature
- 6:    delete ci and cj from M                                       element) is.
- 7:    add c to M                                                       In brief, Equation 3 can ensure the social feature element
- 8:    centroid = calculateCentroid(c)                               in the coarsest granularity have the highest score degreet ∈
- 9:    for ci ∈ c do                                                 (0, 2], where xmax ∈ (0, 1] can reﬂect the emphasis topic
-                                                                                                 1
-10:       values = Similarity(ci , centroid)                         and the formula        ˆ
-                                                                                                            ∈ (0, 1] can reﬂect the
-                                                                                           k               2
-                                                                                       e   r=1 (xmax −wir )
-11:       degreet = calculateTopicDegree(ci )
-                                                                     semantic generality.
-12:       scorem = κ · values + λ · degreet
-                                                                        The scorem is used to measure the medoid calculated as
-13:       add scorem to M edoidScore
-                                                                     the Equation of line 12, where κ and λ is the empirical co-
-14:    end for
-                                                                     eﬃcients.
-15:    medoidC = ﬁndMaximumScores(M edoidScore)
-                                                                        Finally, the medoid with the highest scorem would be se-
-16:    scoreF = Similarity(medoidC )
-                                                                     lected. Measuring the similarity for the each pair of elements
-17:    f eatureC = mergeMedoid(medoidC , scoreF )
-                                                                     in medoidC (line 15), the f eatureC (line 17) can be formed
-18:    saveFeaturetoHESA(M, f eatureC )
-                                                                     by merging distinguished social feature elements whose sim-
-19: until |M | = 1
-                                                                     ilarity score below a threshold (set to 0.38). Each iteration
-                                                                     in the repeat clause saves the M and f eatureC to HESA.
-  Initially, every social feature elements is a distinct cluster.    On the termination of the algorithm, a feature-ontology for
-Line 4-7 ﬁnds the closest two clusters ci and cj in the current      the category is constructed.
-cluster set M , and merge them into a new cluster c and                 After all the feature-ontologies under diﬀerent categories
-update M . The proximity used to measure the distance                are generated, the construction process of HESA is ﬁnished.
-between every two clusters, deﬁned as below:
-                               f i∈ci   similarity(f i, f j)         4. FEATURE RECOMMENDATION
-                               f j∈cj
-       proximity(ci , cj ) =                                   (1)     In this section, mining the hidden relationship between
-                                        |ci | × |cj |                software features, we present a novel strategy of feature rec-
-Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the      ommendation. Firstly, we classify software resources into
-divergence between any two data point. Based on LDA,                 diﬀerent groups. Then, combining the feature with the pop-
-the divergence can be understood as the thematic space               ular and high-quality resources, we use association rules to
-coordinate distance between the two elements. There are              mine the feature-patterns. Finally, analyzing the hidden as-
-several ways to calculate the divergence between any two             sociations between the features, we can recommend relevant
-feature-topic distributions, such as cosine similarity, Jenson-      features to stakeholders.
-Shannon divergence and Kullback-Leibler divergence. Tak-
-ing cosine similarity as an example, the Equation is shown
-                                                                     4.1 Software Resource Evaluation
-as below:                                                              When users try out a kind of software resource from web
-                                         υi · υj                     repositories, they may give evaluations according to their ex-
-               similarity(fi , fj ) =                                perience. Taking software projects in Sourceforge.net, Soft-
-                                      ||υi || ||υj ||
-                              k
-                                                                     pedia.com, Ohloh.com and Freecode.com as an example, we
-                                                            (2)
-                              r=1 pir × pjr                          have extracted a large number of user’s evaluations from
-                  =
-                          k     2          k     2                   the software proﬁles including rating, vote, downloads, and
-                          r=1 pir ×        r=1 pjr
-                                                                     subscriptions as shown in table 2.
-Where k is the topic number and p is the probability value             Because the core services of the web repository are diﬀer-
-of υ.                                                                ent, there are diﬀerent types of user evaluation to measure
-   Line 8-14 pick out a set of social feature elements from          the popularity and quality. Some giant forges like Source-
-the new cluster, deﬁned as medoid, which can be used to              forge.net host a massive amount of software source code,
-                                                  Table 2: User evaluation in software proﬁles
-                         Project Name         Repository    Rating (#Raters)    Vote (#Voters)    #Downloads   #Subscriptions
-                         Hard Disk Sentinel    Softpedia      3.7 Stars (42)                        19,347
-                         Mozilla Firefox      Sourceforge     4.0 Stars (60)                         332
-                         Mozilla Firefox        Ohloh       4.4 Stars (3,492)                                      12,227
-                         Chromium               Ohloh        4.5 Stars (538)                                        1,883
-                         PostgreSQL            Freecode                         145 Score (153)                      755
-                         phpMyAdmin            Freecode                         202 Score (213)                      956
-
-so the code #Downloads is adopted to quantify the project
-popularity. However, the core service of some repositories
-is providing social directories such as Ohloh.com. Thus, the
-#Subscriptions is used to measure the project popularity.
-   In addition, the Rating and Vote can reﬂect the quality of
-the software project. Most of the repositories use the Rating
-from 1 to 5 stars to measure the project quality. Hence,
-we convert the Vote into a ﬁve-point scale by the following
-formula, where is the reliability of the web repository.
-                                   Vote
-                   Rating = ·             ×5                        (4)
-                                  #Voters
-  For example, if sets to 1, the Vote of PostgreSQL in
-Freecode.com can convert to 4.74 points Rating by the for-
-           145
-mula: 1 × 153 × 5 ≈ 4.74.
-  Moreover, a project may have several diﬀerent ratings
-when it is hosted across multiple repositories. In this case,                     Figure 3: Part of the feature-pattern in Video-Player domain
-to lower the users’ personal bias, we choose the rating based
-                                                                                generate the feature-pattern based on the association rule
-on most users’ records. As depicted in Table 2, our system
-                                                                                learning[11][29].
-automatically select 4.4 Stars in Ohloh.com to represent the
-                                                                                   Let F = f1 , f2 , . . . , fm be a set of item in the resource-
-quality of Mozilla Firefox 56 , because it is rated by more
-                                                                                by-feature matrix. An association rule is an implication of
-users (3,492) than the rating in Sourceforge.net (60).
-                                                                                the form {X ⇒ Y }, where X ⊂ F , Y ⊂ F and X ∩ Y = ∅.
-                        #Downloads                                              The σ(X), called support count, is used to get the is the
-    Rankingpq = α ·                   × β · Rating                  (5)
-                      MAX(#Downloads)                                           number of transactions that contain the X itemset. There-
-                                                                                fore, support can indicate the frequency and the association
-  Then, synthesizing the popularity and the quality, we use                     degree of the itemsets, deﬁned as below:
-the Equation 5 to rank the software projects, where α and
-β (α · β = 1) are the empirical coeﬃcients used to balance                                                                  σ(X ∪ Y )
-                                                                                                   support(X ⇒ Y ) =                         (6)
-the popularity with the quality. The #Downloads can be                                                                         |F |
-replaced by the #Subscriptions and the Rankingpq ∈ (1, 5].
-                                                                                   The feature-pattern is a kind of directed graph, which can
-  In this paper, we pick up the software projects over a
-                                                                                be represented as GF P = V, E , where V is a set of feature
-Rankingpq threshold. Actually, the software resources can
-                                                                                itemsets and E is a sub set of E(V ), E(V ) = {(u, v)|u, v ∈
-be divided into any number of groups, such as popular group,
-                                                                                V }. The element e of E is the a pair of vertices and the
-high-quality group, unpopular group and low-quality group.
-                                                                                conf idence is the weight assigned to the arcs. As shown in
-Combining with the features and diﬀerent groups of soft-
-                                                                                Equation 7, conf idence indicate the percentage of transac-
-ware resources, we can mine the hidden feature pattern and
-                                                                                tions containing a given itemset that also contain the other
-recommend relevant features more accurately. Furthermore,
-                                                                                speciﬁc itemset.
-the software resources are manifold, such as software com-
-ponents, code fragments, bug reports and so on. Based on
-the feature location technique, we can recommend these re-                                                      σ(X ∪ Y )   support(X ∪ Y )
-                                                                                  conf idence(X ⇒ Y ) =                   =                 (7)
-sources to stakeholders. We really expect to do this research                                                     σ(X)        support(X)
-in future work.
-                                                                                   For example, in Table 3, the support(N o.21 ⇒ N o.41) =
-4.2      Feature Pattern Mining                                                 1/4 and the conf idence(N o.21 ⇒ N o.41) = 1/3. In Figure
-                                                                                3, the edge e = {(21), (21, 67)} represent the association rule
-   We merge the software projects and the software features
-                                                                                {N o.21 ⇒ N o.67} and the weight 0.3429 is the conf idence
-into a resource-by-feature matrix and a series of implicit fea-
-                                                                                of this rule.
-ture rules can be discovered. As illustrated in Table 3, the
-                                                                                   Firstly, we use Apriori algorithm [11] to generate the fre-
-features about Video-Codec and Customizable Option are es-
-                                                                                quent itemsets (support satisﬁes a threshold 0.35) as the ini-
-sential for a new products in the Video-Play domain, because
-                                                                                tial value of V . Then, we add the infrequent itemsets except
-the most of competing software implement these functional-
-                                                                                the item within frequent itemsets (support below a thresh-
-ities. The No.35 may be the latest and novel feature in this
-                                                                                old 0.05) to the V . Finally, we connect the nodes together
-domain, because only a few of high-quality products own this
-                                                                                based on the association rules and allocate the weights of
-functionality. In this paper, we deﬁne the Feature-Pattern
-                                                                                the edges in terms of their conf idence values.
-to represent the relationship between software features and
-                                                                                   Figure 3 illustrates a part of feature-pattern in the Video-
-5
-    http://www.ohloh.net/p/ﬁrefox                                               Player domain. The solid lines show the connections of the
-6
-    http://sourceforge.net/projects/ﬁrefox.mirror/                              frequent itemsets. We discover that the subgraphs about
-some fundamental features always have the homogeneous                             is (21,41,63,67). Similarly, if we set the minconf to 0.75,
-weights and they are much ﬂatter than the subgraphs of                            the feature No.35, No.63, No.67, No.13 would be selected
-common features. In a speciﬁc domain, the fundamental                             out one by one.
-features is implemented by the most of software such as                              Feature recommadtion is a iterative process. Once users
-the feature No.21 about video-codec in the Video-Player do-                       choose the recommended features or give their feedback, our
-main, so it have the high support and widely co-occur with                        system will reﬁne the recommendations in the next stage.
-other features, which leads the subgraph to become ﬂat. If a
-connection contains a element of the infrequent itemsets, we                      Algorithm 2 a breadth-ﬁrst recommendation algorithm
-use the dotted lines to represent it. We ﬁnd that the infre-
-quent features may be some innovative functionalities, such                       Require:
-as the feature No.13 about displaying video in customized                             req the feature set of you need;
-multiple screens. Thus, the connections between infrequent                            minconf the threshold of the conf ident; GF P the fea-
-and fundamental features are signiﬁcant to the feature rec-                           ture pattern graph;
-ommendation.                                                                      Ensure:
-       Table 3: An example of resource-by-feature matrix                              recSet a set of features recommended to users;
-                 Feature
-                                                                                   1: reqItem ← matchItemsets(req)
-                            No.211 No.352 No.373 No.414 No.635 No.676              2: recSet ← reqItem
- Software
-          nDVD                 0       0       1        1       1         0        3: if reqItem = f undSet then
-       FLV Player              1       0       1        1       1         0        4:    maxconftmp ← getMaxWeight(E(reqItem))
-  Aviosoft DTV Player          1       1       0        0       1         1
-   Mac Blu-ray Player          1       0       0        1       1         1        5:    updateConﬁdences(E(reqItem), maxconftmp )
- 1
-   Support multi-formats of video ﬁles such as FLV, MPEG4, DIVX, HD-               6:    addConnections(req, inf reqSet)
-   MOV, M2TS, MKA, 3GPP and so on.                                                 7: end if
- 2
-   Smart stretch lets video smart ﬁt on all monitor with diﬀerent aspect ratio,
-   avoid video loss or distortion.                                                 8: T set ← getInitialRecSet(GF P (reqItems), minconf )
- 3
-   Title repeat, chapter repeat, AB repeat function that lets you set your         9: repeat
-   favorite scenes for instant repeat.
- 4
-   Fast Forwards and Backwards with Customizable Speeds.                          10:    recSet ← recSet ∪ searchNextDepthSet(T set)
- 5
-   You can easily conﬁgure every option of the Player by using a nice pref-       11: until GF P END
-   erences dialog.
- 6
-   Brightness, contrast, hue, saturation and gamma settings.
-                                                                                  12: return recSet
-
-4.3     Feature Recommendation Algorithm
-   When a user input his requirements, the system convert
-the requirements to a set of features which is the same as                        5. EMPIRICAL EVALUATION
-the preprocessing of raw social feature elements. If it can                         In this section, we present our dataset and experiment
-be matched with the any one of the itemsets in the feature-                       setting, research questions and answers, and describe some
-pattern, the system begin the process of feature recommen-                        threats to validity.
-dation. Algorithm 2 present a breadth-ﬁrst recommenda-
-tion algorithm, where the input are user requirements, the                        5.1 Dataset and Experimental Setting
-minimum conf idence and the feature-pattern. The output
-                                                                                     Dataset: We have collected 187,711, 432,004 and 45,021
-recSet is a set of relevant feautres for recommendation.
-                                                                                  projects’ proﬁles from Softpedia.com, Sourceforge.net and
-   We ﬁrstly initialize the recSet with the matched itemset
-                                                                                  Freecode.com respectively. Compared with the other two
-(Line 1-2). If the matched itemset equals a fundamental
-                                                                                  repositories, the quantity of projects from Freecode.com is
-feature or feature set, we should update the feature-pattern
-                                                                                  relatively small. Thus, we just adopt projects in Softpe-
-GF P . Line 4-5 ﬁnd the maximum weight maxconftmp within
-                                                                                  dia.com and Sourceforge.net for the experiment.
-the edges E(reqItem) and update the weight wi by using
-                                                                                     The social feature elements have been classiﬁed into 385
-blew formula:
-                                                                                  categories and we randomly choose the data of 6 unique cat-
-                                 wi
-             weightnew =                  ∈ (0, 1]       (8)                      egories to evaluate our method including Antivirus, Audio-
-                            maxconftmp                                            Player, Browser, File-manger, Email and Video-Player. Fur-
-   For example, as shown in Figure 3, when we matched                             thermore, the social feature elements are preprocessed by
-the feature No.21, we can ﬁnd 0.4571 is the maxconftmp of                         removing commonly occurring words and then by stemming
-E(reqItem) and update the weight(0.3714) of {(21), (21,41)}                       the remaining words to their root form. To ensure the qual-
-              0.3714
-to 0.8125 = 0.4571 . Therefore, although user set the minconf                     ity of data, we omit the preprocessed data with less than
-over 0.75, the feature No.41 also can be recommended.                             6 words. In each category, we choose hundreds of candi-
-   In addtion, Line 6 associate the E(reqItem) with the in-                       date projects to ﬁnd the popular and high-quality software
-frequent itemsets, which make some interesting features can                       in the two repositories. Table 4 presents the details about
-be recommended to users. Then, we merge the itemsets                              our experiment dataset.
-into the recSet, whose the conf idence values are over the                           Parameter Setting: As shown in Table 4, for LDA, the
-minconf and use the breadth-ﬁrst search strategy to ﬁnd                           number of topics K was empirically set as diﬀerent value,
-all relevant features (Line 8-12).                                                and the hyper-parameters α and β were set with α = 50/K
-   For example, supposing we begin with {21}, we would up-                        and β = 0.01 respectively, and the iteration of Gibbs Sam-
-date the weights of {(21), (21,37)}, {(21), (21,41)}, {(21),                      pling was set as 1000. In addition, the coeﬃcients κ and λ
-(21,63)} and {(21), (21,67)} and the subgraph of the fea-                         of Algorithm 1 were set as κ = 0.7 and λ = 0.3. We treat
-ture No.35 is added. Then, if we set the minconf to 0.8, we                       the popularity is as important as the quality for a software
-would retrive (21,41), (21,63), (21,63,67) step by step. Fi-                      project, so we set α = 1 and β = 1 (Equation 5). The
-nally, we merge them together and the recommendation set                          Rankingpq threshold is set as 3.0.
-                                                Table 4: Preprocessed experiment datasets
-
-                                Category      #Feature sp     #Feature sf   #Project sp   #Project sf   #Topic
-                              Antivirus          2919            1105           667          435          40
-                            Audio-Player         3714            1283           379          530          60
-                               Browser           3010             831           344          177          40
-                            File-Manager         2270             970           330          177          40
-                                Email            8511            1050           823          204          80
-                            Video-Player         3318            2697           379          530          60
-
-5.2    Research Questions
-   To demonstrate the eﬀectiveness of the approach in this
-paper, we are interested in the following research questions:
-   RQ1 How accurate is the clustering result of iAHC? Are
-the hierarchical structures of HESA reasonable?
-   RQ2 What the popular and high-quality projects look
-like? What rules can be mined based on the feature-pattern?
-   RQ3 Are the recommendations from our approach are
-reasonable and eﬀective?
-                                                                                                (a) the average value
-5.3    Cross-Validation Design of the User Study
-  The cross-validation limits potential threats to validity
-such as fatigue, bias towards tasks, and bias due to unrelated
-factor. We randomly divided the 30 students from computer
-school of NUDT into three groups to evaluate the questions.
-Each group randomly picks up 2 categories and ﬁnishes the
-evaluations in one day, and then we summarize the result.
-
-RQ1: Clustering Result and HESA Structure. We
-choose the K-Medoids (tf-idf), a traditional and widely used
-clustering algorithm, and the Incremental Diﬀusive Cluster-
-ing (IDC), the state-of-the-art technique proposed in paper
-[8], as the baseline. Especially, the IDC use the feature
-descriptions from Softpedia.com which is the same as our                                     (b) the standard deviation
-dataset. We also use the modiﬁed version of Can’s metric[8]                                 Figure 4: The clustering results
-to compute the ideal number of clusters. Then, we retrieve
-the corresponding number of clusters from HESA for com-                       Table 5 shows that 37.58% features are reasonable, 47.48%
-parison. Precision is a percent of the reasonable elements                  partially reasonable and only 14.93% unreasonable. The
-in a cluster. Figure 4 shows the average value and standard                 mean of Likert score is 2.23, which means that the feature
-deviation of the judgments given by diﬀerent groups under                   selected out by our approach is reasonably meaningful.
-the Antivirus, Audio-Player and File-Manger categories.
-   We can see that our approach achieves the highest preci-                 RQ2: Project Evaluation and Feature-pattern. As
-sion in all three categories and relatively low deviations. The             shown in Table 6, we use our evaluation method to select out
-precisions and deviations are comparatively stable across dif-              a fraction of project synthesizing the software popularity and
-ferent categories, which shows the probability that our ap-                 the quality. We can get a reasonable number of candidate
-proach is more generalizable in diﬀerent domains. We plan                   features. Specially, to illustrate the importance of project
-to conduct more quantitative experiments in future work.                    evaluation for feature pattern mining, we lower the threshold
-   According to the six categories, participants randomly                   (1.0) in File-Manager category. Hence, we get a unnormal
-choose 30 clusters in diﬀerent layers from HESA using the                   number of itemsets which exert a negative impact on feature-
-search engine respectively. Each participant is randomly as-                pattern mining and feature recommendation.
-signed 10 layers and asked to provide a 3-point Likert score                   Figure 3 shows an example of feature-pattern under the
-for each cluster to indicate whether they agree if the feature              Video-Player, where the feature No.21 (about video-codec)
-is the most representative of all terms. Score 3 means “very                and No.63 (about user interface) is the fundamental features.
-reasonable”, Score 2 means “reasonable but also have better                 Similarly, we ﬁnd the feature about virus database updating
-one”, Score 1 means “unreasonable”.                                         is one of essential functionalities for an antivirus software.
-            Table 5: Evaluation of HESA structure
-                                                                            RQ3: Feature Recommendation. We show some mean-
-         Category     Score-3   Score-2    Score-1   Likert                 ingful and interesting case in Table 7. In the Email category,
-         Antivirus    33.3%     50.0%       16.7%    2.17                   if you input “High level ﬁlter system for spam”, our system
-       Audio-Player   39.1%     46.3%       14.6%    2.25                   can recommend 5 relevant features. The ﬁrst three features
-          Browser     36.8%      41.9%      21.3%    2.16                   are directly related to the input, but the third feature about
-       File-Manager   32.7%     52.4%      14.9%     2.18
-           Email       36.4%     52.8%      10.8%    2.26                   privacy protection is very easy to leave out. The last two
-       Video-Player    47.2%     41.5%      11.3%    2.36                   features represent the fundamental abilities under the Email
-          Average     37.58%    47.48%     14.93%    2.23                   category. From these examples, we can demonstrate our ap-
-                                                Table 6: Project Evaluation and Feature-pattern
-                               Category       #Project total      #Project ranking     Ratio     #|Itemsets|    #Feature fund
-                              Antivirus            1,082                  63            5.82%        75               7
-                             Audio-Player           909                  65            7.15%         68               13
-                               Browser              521                   57           10.94%        64                8
-                            *File-Manager           447                  192           42.95%        187              46
-                                Email              1,027                 39            3.80%          53               4
-                             Video-Player           523                   91           17.40%        68                5
-
-
-                                                         Table 7: Feature recommandations
-             Category                       Input                                                    Recommendations
-              Email          -High level ﬁlter system for spam.                 -Automatically start spam process when Windows starts.
-                                                                                           -Attachment and keyword ﬁltering.
-                                                                               -Privacy guaranteed-your emails never leave your network.
-                                                                                       -Full support for international characters.
-                                                                                        -Automatic import of local address book.
-           Video-Player       -Support multi-formats of video.              -Smart stretch lets video smart ﬁt on all monitor with diﬀerent
-                                                                                       aspect ratio, avoid video loss or distortion.
-                                                                              -Customized player supports multiple windows and screens.
-                                                                            -Play anything including movie, video, audio, music and photo.
-                                                                      -Video desktop lets you view video in true background mode like wallpaper.
-           Audio-Player              -Radio streaming.                                         -Free Lossless Audio Codec.
-                          -Easy to use and friendly User Interface.                      -Playlists for each day of week or date.
-                                                                                          -Flexible XML based skinning engine,
-                                                                              Create your own skins, or choose one of the available skins.
-                                                                                                -Contextual Help System.
-
-proach is highly signiﬁcant of the software development.                          tions system is build by using association rule mining and
-                                                                                  the k-Nearest-Neighbor machine learning strategy. Com-
-5.4   Threats to validity                                                         pared with these studies, the clustering algorithm presented
-  First, the participants manually judge the clustering re-                       in this paper is more eﬀective by mining the semantic struc-
-sults and their ratings could be inﬂuenced by fatigue, prior                      tures from social feature elements and especially focus on
-knowledge and the other external factors. These threats                           the construction of feature-ontology.
-were minimized by randomly distributing participants to the                          Ontology learning from text aims at extracting ontological
-various groups and dividing the tasks into multiple parts.                        concepts and relation from plain text or Web pages. Paper
-Second, the clustering error may exert a negative inﬂuence                        [18] developed an ontology learning framework using hierar-
-on the recommendation. Third, due to our limited datasets,                        chical cluster and association rule for ontology extraction,
-parameters used in our approach, the evaluation is not com-                       merging, and management. Jie Tang et al.[27] proposed a
-prehensive enough.                                                                generative probabilistic model to mine the semantic struc-
-                                                                                  ture between tags and their annotated documents, and then
-                                                                                  create an ontology based on it. Xiang Li et al.[16] enhance an
-6.    RELATED WORK                                                                agglomerative hierarchical clustering framework by integrat-
-   Recently, mining software repository has been brought                          ing it with a topic model to capture thematic correlations
-into focus and many outstanding studies have emerged to                           among tags. In this paper, to support multi-grained reuse,
-support various aspects of software development[12]. How-                         emphases of the feature-ontology’s construction is on the
-ever, to the best of our knowledge, fewer previous works have                     measure of similarity and granularity instead of generality.
-been done for mining software feature and especially con-                            As an indispensable type of information ﬁltering tech-
-struction of feature-ontology to manage software resources.                       nique, recommender systems have attracted a lot of atten-
-In this section, we review some previous works about feature                      tion in the past decade[17]. In the ﬁeld of collaborative
-analysis, ontology learning and recommender system.                               ﬁltering, two traditional types of methods are widely stud-
-   In feature analysis area, most approaches extract feature                      ied: neighborhood-based approaches and model-based ap-
-related descriptions from software engineering requirements                       proaches. Based on the co-occurrence matrix, neighborhood-
-and then use the clustering algorithm to identify associa-                        based[7] methods mainly focus on ﬁnding the similar items
-tions and common domain entities[2][9][25]. Mathieu Acher                         for recommendations. However, model-based approaches
-et al.[1] introduced a semi-automated method for easing the                       train a compect model to explain the data ﬁrstly, and then
-transition from product descriptions expressed in a tabu-                         predict the hidden values. Recently, the low-dimensional
-lar format to feature models. Niu et al.[24] propose an on-                       matrix approximation methods[26] are used widely in deal-
-demand clustering framework that provided semi-automatic                          ing with large scale datasets. In future work, we will design
-support for analyzing functional requirements in a product                        some comparative studies by using diﬀerent methods and it
-line. A decision support platform is proposed in paper [5] to                     is possible to help us mining much more feature patterns.
-build the feature model by employing natural language pro-
-cessing techniques, external ontology and MediaWiki sys-
-tem. However, the quantity of the existing documents is so                        7. CONCLUSION AND FUTURE WORK
-limited that the brilliance of data mining techniques can-                          The continuing growth of open source ecosystems creates
-not be fully exploited. To address this limitation, paper [8]                     ongoing opportunities for mining reusable knowledge. In
-and [20] proposed the Incremental Diﬀusive Clustering to                          this paper, we have explored the idea of mining large scale
-discover features from a large number of software proﬁles                         repositories and constructed the Hierarchical rEpository of
-in Softpedia.com. Based on the features, a recommenda-                            Software feAture (HESA) to support software reuse. Then,
-we generate the co-occurrence matrix by the features and the     [13] A. E. Hassan and T. Xie. Mining software engineering
-software projects across multiple web repositories. Finally,          data. In ICSE (2), pages 503–504, 2010.
-our approach induced the feature-pattern and circularly rec-     [14] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and
-ommend the most relevant features to stakeholders.                    A.S.Peterson. Feature-oriented domain analysis (foda)
-   In the future, we plan to improve the performance of our           feasibility study. technical report. 1990.
-method and aggregate richer software resources from soft-        [15] K. Lee, K. C. Kang, and J. Lee. Concepts and
-ware repositories. For example, Stack Overﬂow community7              guidelines of feature modeling for product line
-which is a programming question and answer websites, con-             software engineering. In ICSR, pages 62–77, 2002.
-tains abundant knowledge of software development. In addi-       [16] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu,
-tion, we will design several representative applications based        and D. Tang. Inducing taxonomy from tags: An
-on HESA, such as software resource recommender system,                agglomerative hierarchical clustering framework. In
-to support the reuse of multi-grained resources.                      Advanced Data Mining and Applications, volume 7713,
-                                                                      pages 64–77. Springer Berlin Heidelberg, 2012.
-8. ACKNOWLEDGEMENT                                               [17] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King.
-   This research is supported by the National High Technol-           Recommender systems with social regularization. In
-ogy Research and Development Program of China (Grant                  Proceedings of the fourth ACM international
-No. 2012AA011201) and the Postgraduate Innovation Fund                conference on Web search and data mining, pages
-of University of Defense Technology (Grant No.B130607).               287–296. ACM, 2011.
-                                                                 [18] A. Maedche and S. Staab. Learning ontologies for the
-9. REFERENCES                                                         semantic web. In SemWeb, 2001.
- [1] M. Acher, A. Cleve, G. Perrouin, P. Heymans,                [19] A. K. McCallum. Mallet: A machine learning for
-     C. Vanbeneden, P. Collet, and P. Lahire. On                      language toolkit. http://mallet.cs.umass.edu, 2002.
-     extracting feature models from product descriptions.        [20] C. McMillan, N. Hariri, D. Poshyvanyk,
-     In VaMoS, pages 45–54, 2012.                                     J. Cleland-Huang, and B. Mobasher. Recommending
- [2] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid,                source code for use in rapid software prototypes. In
-     P. Sawyer, P. Rayson, C. Pohl, and A. Rummler. An                ICSE, pages 848–858, 2012.
-     exploratory study of information retrieval techniques       [21] H. Mei, G. Huang, and T. Xie. Internetware: A
-     in domain analysis. In SPLC, pages 67–76, 2008.                  software paradigm for internet computing. Computer,
- [3] S. Apel and C. Kastner. An overview of                           45(6):26–31, June 2012.
-     feature-oriented software development. pages 49–84,         [22] H. Mei, G. Huang, H. Zhao, and W. Jiao. A software
-     2009.                                                            architecture centric engineering approach for
- [4] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor.                internetware. Science in China Series F: Information
-     Software traceability with topic modeling. In ICSE               Sciences, 49(6):702–730, 2006.
-     (1), pages 95–104, 2010.                                    [23] H. Mei and X. Liu. Internetware: An emerging
- [5] E. Bagheri, F. Ensan, and D. Gasevic. Decision                   software paradigm for internet computing. J. Comput.
-     support for the software product line domain                     Sci. Technol., 26(4):588–599, 2011.
-     engineering lifecycle. pages 335–377, 2012.                 [24] N. Niu and S. M. Easterbrook. On-demand cluster
- [6] D. Blei, A. Ng, and M. Jordan. Latent Dirichlet                  analysis for product line functional requirements. In
-     Allocation. Journal of Machine Learning Research,                SPLC, pages 87–96, 2008.
-     3:993–1022, 2003.                                           [25] S. Park, M. Kim, and V. Sugumaran. A scenario, goal
- [7] J. S. Breese, D. Heckerman, and C. Kadie. Empirical              and feature-oriented domain analysis approach for
-     analysis of predictive algorithms for collaborative              developing software product lines. pages 296–308,
-     ﬁltering. In Proceedings of the Fourteenth conference            2004.
-     on Uncertainty in artiﬁcial intelligence, pages 43–52.      [26] J. D. Rennie and N. Srebro. Fast maximum margin
-     Morgan Kaufmann Publishers Inc., 1998.                           matrix factorization for collaborative prediction. In
- [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang,              Proceedings of the 22nd international conference on
-     B. Mobasher, C. Castro-Herrera, and M. Mirakhorli.               Machine learning, pages 713–719. ACM, 2005.
-     On-demand feature recommendations derived from              [27] J. Tang, H. fung Leung, Q. Luo, D. Chen, and
-     mining public product descriptions. In ICSE, pages               J. Gong. Towards ontology learning from
-     181–190, 2011.                                                   folksonomies. In IJCAI, pages 2089–2094, 2009.
- [9] W. B. Frakes, R. P. D´  llaz, and C. J. Fox. Dare:          [28] K. Tian, M. Revelle, and D. Poshyvanyk. Using latent
-     Domain analysis and reuse environment. pages                     dirichlet allocation for automatic categorization of
-     125–141, 1998.                                                   software. In MSR, pages 163–166, 2009.
-[10] T. Griﬃths. Gibbs sampling in the generative model          [29] X. Wu, V. Kumar, J. R. Quinlan, J. Ghosh, Q. Yang,
-     of Latent Dirichlet Allocation. Technical report,                H. Motoda, G. J. McLachlan, A. Ng, B. Liu, S. Y.
-     Stanford University, 2002.                                       Philip, et al. Top 10 algorithms in data mining.
-[11] J. Han, M. Kamber, and J. Pei. Data mining: concepts             Knowledge and Information Systems, 14(1):1–37, 2008.
-     and techniques. Morgan kaufmann, 2006.                      [30] Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
-[12] A. E. Hassan. The road ahead for mining software                 The construction and evaluation of hierarchical
-     repositories. 2008.                                              software feature repository. In SEKE, pages 624–631,
-                                                                      2013.
-7
-    http://stackoverﬂow.com
-
\ No newline at end of file
diff --git a/res/paper/ISPDPAW.pdf b/res/paper/ISPDPAW.pdf
deleted file mode 100644
index 0105a51..0000000
--- a/res/paper/ISPDPAW.pdf
+++ /dev/null
@@ -1,460 +0,0 @@
-           Ninth IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops
-
-
-                                  Trusted Computing Dynamic Attestation
-                               by Using Static Analysis based Behavior Model
-
-
-                               Fajiang Yu               Tang‡ , Yue Yu∗ , Tong Li∗ and Tong Yang∗
-                                            ∗ † , Xianglei
-                                              ∗ School of
-                                                        Computer, Wuhan University,
-                                                  Wuhan, Hubei, P.R.C. 430072
-                                                    Email: qshxyu@126.com
-                          † Key Laboratory of Aerospace Information Security and Trusted Computing,
-                                                 Ministry of Education in China
-                                  ‡ Zhejiang Provincial Testing Institute of Electronic Products,
-                                               Hangzhou, Zhejiang, P.R.C. 310012
-
-
-
-    Abstract—Current technology of trusted computing can not           and generates formal safety proofs, which is based on the
- comply with the requirement of trusted behavior. One method           consumer’s policy. The proofs are bounded in addition to
- for trusted computing dynamic attestation was proposed in this        source code, which usually is implemented by the compiler.
- paper. This method uses the behavior model based on static
- analysis of binary code. One same source code may have several        The consumer uses type based logic to check the program
- different binary versions, this paper proposed one method of          automatically. The implementation of PCC also needs know
- building almost the same core function model for different            program’s source code.
- binary versions. This paper also overcame the difﬁculty that             Document [7] proposed one semantic remote attestation
- some dynamic behaviors can not be obtained by static analysis.
-                                                                       (SRA) framework . SRA is based on trusted Java virtual
- The paper also gave out some solutions of dynamic attestation
- for some complex programs, such as recursion program, library         machine (Trusted VM) on client, and server attests Java
- link program and multi threads program.                               program’s hierarchies, restricted interfaces, runtime state,
-   Keywords-trusted computing; dynamic attestation; behavior
-                                                                       input information, and etc. But there is no good solutions of
- model; static analysis                                                building the semantic model of one program.
-                                                                          This paper mainly makes the following contributions: 1)
-                       I. I NTRODUCTION                                Behavior model is built based on static analysis of binary
-    Trusted computing is an information system security solu-          code. 2) This paper proposed one method of building almost
- tion for the basic computing security problem [1]. The tech-          the same core function model for different binary versions
- nology which trusted computing platforms currently adopted            of same code. 3) This paper also overcame the difﬁculty
- guarantees the integrity of its feature code and conﬁguration         that some dynamic behaviors can not be obtained by static
- data is the same as expected, before the components of the            analysis. 4) The paper also gave out the solutions of dynamic
- computing platform take control of the main CPU, which                attestation for some complex programs.
- is called trusted computing static attestation, but it does not
- comply with the requirements that the behaviors are trusted.             II. S TATIC A NALYSIS BASED P ROGRAM B EHAVIOR
- We need to verify the dynamic behavior of components as                                  M ODEL B UILDING
- well, which is called trusted computing dynamic attestation.
-                                                                         Program runtime behavior attestation is the main part
-    The related researches mainly include MCC (Model Car-
-                                                                       of trusted computing dynamic attestation. The ﬁrst step of
- rying Code), PCC (Proof Carrying Code), semantic remote
-                                                                       program behavior attestation is building program behavior
- attestation, and etc.
-                                                                       model. You can see the detail stages and algorithms about
-    MCC [2] [3] was proposed by R. Sekar et al., its key
-                                                                       building trusted behavior model based on static analysis of
- idea is: Code producer generates behavior information about
-                                                                       PE binary ﬁle in our previous work [8].
- program security (Model), a consumer receives both the
- model and the program from the producer. The consumer
-                                                                       A. Variance between Debug and Release Version
- checks whether the model satisﬁes the consumer’s security
- policy by formal reasoning. Document [4] and [5] have                   The same code is compiled with same compiler but choos-
- done some implementations of MCC on JVM (Java Virtual                 ing different compiling options, different binary versions
- Machine). The MCC developer should know program’s                     could be obtained, among which the most typical is Debug
- source code, but this assumption does not always be true.             and Release version. Program behavior model constructing
-    PCC [6] was proposed by George C. Necula et al.,                   should not only support static analysis of Release version,
- its key idea is: The producer carries analysis on code                but also the Debug version.
-
-
-978-0-7695-4429-8/11 $26.00 © 2011 IEEE                            1
-DOI 10.1109/ISPAW.2011.14
-  We use Visual C++ 6.0 for compiling one instance                  lead to the variance of sub function number in dif-
-to a Debug version, and then disassemble it by using                ferent binary versions’ behavior models. For example,
-IDA. It can be observed that the program entry point is             VS2010 invokes HeapSetInformation to set stack infor-
-_mainCRTStratup, and the forms of API calling in some               mation, while VS2005 and VC6 do not. VS2005 invokes
-sub-functions are like:                                             __security_init_cookie to initialize Cookie for pre-
-call     ds :    imp     GetVersion@0 ;
-                                                                    venting buffer overﬂow. VS2010 wraps the following API
-call     ds :    imp     OpenFile@12 ;                              sequence in a sub function sub_40250F, to accomplish
-                                                                    the same initialization of __security_init_cookie. But
-  And we use Visual C++ 6.0 for the same code to a Release          VC6 does not carry this work.
-version. It can be observed that the disassembled code’s            G e t S y s t e m T i m e A s F i l e T i m e− e t C u r r e n t P r o c e s s I d −
-                                                                                                                  >G                                    >
-entry point is start, and the API calling in some sub-                      G e t C u r r e n t T h r e a d I d − e t T i c k C o u n t−
-                                                                                                                 >G                      >
-functions is very direct:                                                   QueryPerformanceCounter
-
-call     ds : GetVersion ;                                             Besides, there are some different API callings in dif-
-call     d s : GetCommandLineA ;
-call     e s i : OpenFile ;                                         ferent program versions from different compilers. This is
-                                                                    because some same functions are implemented by different
-   So when we start constructing program behavior model             APIs. Such as VC6 and VS2005 use GetStartupInfoA to
-for Debug version, we need do some preprocessing, such as           gain the information in initiating stage, while VS2010 uses
-removing preﬁxes like __imp__ and sufﬁxes like @*.                  GetStartupInfoW. Some new compilers use extended API
-   In addition, there is also a big difference in the number        to replace the old ones, such as GetVersion used by VC6
-of sub-function between Debug and Release version.                  has already been replaced by GetVersionEx.
-   Both Debug and Release Version have a quite large                C. Modeling Management for Different Binary Versions
-number of sub functions in the disassembled result of cor-
-responding binary program. The main cause is the compiler              Although there is big variance between different binary
-will add some essential additional codes. The reason why            versions of one same code, they should have fairly same
-Debug version has more sub functions than Release is                core function behavior model.
-                                                                                                                           cdr
-that Debug version contains plenty of debug information,               We obtain the corresponding binary program (Bϕ ) with
-and must include more API calling, such as DebugBreak,              a speciﬁc compiler and compiling options to compiler
-InterlockedIncrement, and etc.
-                                                                    “empty program” (Pϕ , see Example 1), its program behavior
-                                                                                               cdr
-                                                                    model is denoted as Mϕ , which can act as a reference
-   Although there is big difference, the core function behav-
-                                                                    template when we construct model for other normal program
-ior model based on Debug version should be fairly consistent
-                                                                    with the same compiler and compiling options.
-with Release version.
-                                                                       At the time of behavioral modeling of a certain normal
-B. Variance between Different Compilers                             binary program (Bn ), we can get the speciﬁc compiler name
-                                                                    and determine Bn is a Release version or Debug version by
-   The same code is compiled with different compiler, dif-          performing a static analysis of Bn , and then Bn can be
-ferent binary versions could be obtained. We use one empty                           cdr
-                                                                    speciﬁed as Bn . We get the optimized model of Bn ,        cdr
-Win32 console program as an instance (Example 1). This                              cdr
-                                                                    denoted as Mn . Referring to the corresponding “empty
-program is compiled with Visual C++ 6.0, Visual Studio                                             cdr
-                                                                    program” behavior model Mϕ , we can remove the relevant
-2005 and Visual Studio 2010 respectively. And then we                                                                  cdr
-                                                                    parts about initialization and exit operation in Mn , the core
-disassemble these versions, the sub function numbers in the         function behavior model Mnc = Mn − Mϕ . Then the
-                                                                                                   cdr      cdr      cdr
-disassembled results of corresponding binary versions are           different binary versions of the same Pn could have fairly
-different.                                                          same core function behavior model.
-   Example 1: empty.c
-                                                                        III. P ROGRAM DYNAMIC B EHAVIOR ATTESTATION
-v o i d main ( i n t a r g c , char ∗ a r g v [ ] )
-{ return ; }                                                           After building the model of the program expected behav-
-                                                                    ior, we also need to monitor the program’s running behavior.
-   Different compilers cover API in different wraps. VS2010         We use the library of Microsoft Detours to monitor the
-covers most API in wraps as sub functions, all implementa-          program behavior, and monitor 311 core API functions in
-tions are based on sub function calling, such as sub_401E83         Ntdll.dll.
-only wrap one API EncodePointer, sub_401E83 only
-wrap one API TlsAlloc. So the behavior models of differ-            A. Preprocessing Program Behavior
-ent binary versions have different number of sub functions.            When one program runs on the operating system, some
-   To make sure program running safely, some com-                   Win32 APIs called by the program can not be obtained by
-pilers lay more emphases on initialization, which also              static analysis of the program self. We need to do some
-
-
-                                                                2
-program behaviors preprocessing, then we can use the static                      behavior model to verify w, just see whether the constructed
-analysis based program behavior model to do attestation.                         global PDA MG = (QG , ΣG , ΓG , δG , qG0 , ZG0 , FG )
-   1) Preprocessing program initialization and exit behavior                     (ZG0 = ε) can accept w.
-   When running the console program which is compiled                              Whether MG can accept w depends on whether MG can
-from Example 1 on Windows XP SP3, we can monitor the                             be transformed from the initial Instantaneous Description
-following API sequence:                                                          ID(qG0 , w, ε) to ID(pG , ε, ε) (pG ∈ FG ) by making some
-G e t F i l e T y p e − o c k R e s o u r c e−
-                       >L                     >GetCommandLineA                   moves, which is denoted as:
-
-  And the API LockResource can not be obtained by static                                            (qG0 , w, ε) ⊢∗ G (pG , ε, ε), pG ∈ FG
-                                                                                                                  M
-analysis of the corresponding binary program self.                                 ⊢MG denotes that MG make a move, including ε move
-  When we run the same program on Windows 7, the                                 and non-ε move.
-monitored API sequence is:
-GetFileType− etHandleCount−
-            >S             >GetCommandLineA                                      C. Single Thread Program Attestation
-                                                                                    On Window XP SP3, we use VC6 to compile the code
-   Obviously, the same program runs on different operating                       in Example 2, and then build the behavior model of the
-systems, some Win32 APIs called by the program are also                          corresponding binary program. After being simpliﬁed by
-different.                                                                       following the procedures described in subsection II-C, we
-   We take the API sequence called by “empty program” as                         get the core function model of Example 2’s program, Ms =
-a standard, which is used to verify the program’s actual API                     (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ), which is shown as Figure 1.
-sequence during the process of initialization and exit. And                         Example 2: ﬁle.c
-then the other API sequences left can be veriﬁed by using
-static analysis based program behavior model.                                    v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
-                                                                                   ... ...
-   2) Preprocessing complicated Win32 API behavior                                 p f 1 = (HANDLE) O p e n F i l e ( fn1 ,& of , OF READWRITE) ;
-   When one program calls some complicated Win32 APIs,                             i f ( pf1 ) {
-the system will call some other relevant APIs to complete                            r t = R e a d F i l e ( pf1 , bf1 , s i z e o f ( b f 1 ) ,& r s i z e , NULL) ;
-                                                                                     if ( rt ) {
-the complicated function. These relevant APIs also can not                             p f 2 = (HANDLE) O p e n F i l e ( fn2 ,& of , OF READWRITE) ;
-be obtained by static analysis of the program self.                                    i f ( pf2 ) {
-   For example, when running the console program which                                   r t = W r i t e F i l e ( pf2 , bf2 , s t r l e n ( b f 2 ) ,& w s i z e , NULL) ;
-                                                                                         CloseHandle ( pf2 ) ;
-is compiled from Example 1, we can monitor the following                               }
-API sequence:                                                                        }
-                                                                                     CloseHandle ( pf1 ) ;
-O p e n F i l e − e a r c h P a t h A−
-                 >S                   >SearchPathW− r e a t e F i l e A −
-                                                   >C                    >         }
-       CreateFileW− etFileTime−
-                            >G               >                                   }
-       Fil eT im e T o D o sD a t e Ti me
-
-   While carrying a static analysis of the corresponding                                                                           , Pop 0001
-binary program, we can only obtain the API of OpenFile.                                                                                   CloseHandle
-                                                                                                                               _main
-So we ﬁrstly need to preprocess the relevant APIs, then we                                                      ReadFile        -2
-can use the static analysis based program behavior model to                              Start-                     OpenFile                         _main
-                                                                                                    _main-                                                            Start-
-                                                                                           8                                                          -4
-do attestation.                                                                                       1                                                                10
-                                                                                                                _main-           CloseHandle
-   3) Preprocessing Unicode API behavior                                                                          3                             CloseHandle
-                                                                                                                                       _main-                   , Pop 0001
-   On the Windows NT-based operating system, the Win32                                                   OpenFile WriteFile
-                                                                                                                                         5
-API calling related char operation (including ANSI char                                           , Push 0001                                           _main
-                                                                                                                         _main                           -6
-and Unicode char) ultimately will call Unicode API. For                                                                   -0             CloseHandle
-
-example, if the API is GetModuleHandleA in the static
-analysis based behavior model of one program, then when                                     Figure 1.        Core function behavior model of Example 2
-running the program, we can monitor the two APIs:
-GetModuleHandleA and GetModuleHandleW. So we need                                   We run the console program which is compiled from Ex-
-to preprocess the program behavior of Unicode API, then we                       ample 2 on Windows XP SP3, and preprocess the monitored
-can use the static analysis based program behavior model to                      Win32 API sequence by following the procedures described
-do attestation.                                                                  in subsection III-A. The preprocessed API sequence (ws ) is:
-B. General Program Dynamic Attestation                                           Openfile − eadFile− penFile−
-                                                                                           >R       >O       >W r i t e F i l e −>
-                                                                                     CloseHandle− loseHandle
-                                                                                                 >C
-   The preprocessed program behavior is denoted as w =
-a1 a2 · · · an , where ai (i = 1, 2, · · · , n) is the name of Win32               The initial instantaneous description of Ms is
-API. Now we can use the static analysis based program                            ID(Start-8, ws , ε). Let us see whether Ms can accept
-
-
-                                                                             3
-ws :                                                                                           The initial instantaneous description of Mr                                        is
-                                                                                                    ′                                         ′
-             (Start-8, ws , ε) ⊢Ms ( main-0, ws , ‘0001’)                                    ID(0, wr , ε). Let us see whether Mr can accept wr :
-                                                                                                                             ′1              ′1
-             ......                                                                                         (0, ‘WriteFile’ wr , ε) ⊢Mr (1, wr , ε)
-             ( main-4, ε, ‘0001’) ⊢Ms (Start-10, ε, ε)                                                      ......
-  Start-10 is one ﬁnal state, so ws can be accepted by                                                      (3, ‘ReadFile’, ε) ⊢Mr (2, ε, ε)
-Ms . It means the program behavior during this run time                                                                  ′
-passed the dynamic attestation.                                                                 2 is one ﬁnal state, so wr can be accepted by Mr . It
-                                                                                             means the program behavior during this run time passed the
-D. Recursion Program Attestation                                                             dynamic attestation. This shows our method can solve the
-   We use one instance to illustrate how to do dynamic                                       difﬁculty of dynamic attestation for recursion program.
-attestation for a recursion program, whose source code is
-shown in Example 3.                                                                          E. Library Link Program Attestation
-   Example 3: Recursion.c                                                                       We use one link library instance (source code is in
-i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) ;                                Example 4 to illustrate how to do dynamic attestation for
-v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {                                        a library link program.
-  ... ...
-  p f i l e = (HANDLE) O p e n F i l e ( FPATH , &of , OF READWRITE) ;                          Example 4: Export function FOp in one link library
-  if ( pfile ) {
-    Recu ( i , p f i l e , r s i z e ) ;                                                     v o i d FOp ( char ∗ P a t h S , char ∗ PathD ) {
-    CloseHandle ( p f i l e ) ;                                                                ... ...
-  }                                                                                            p f S = (HANDLE) O p e n F i l e ( PathS ,& of , OF READWRITE) ;
-}                                                                                              i f ( pfS ) {
-i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) {                                    r t = R e a d F i l e ( pfS , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
-  i f ( i <=0) { . . . }                                                                         if ( rt ) {
-  else {                                                                                           pfD = (HANDLE) O p e n F i l e ( P a t h D t ,& of , OF READWRITE) ;
-    W r i t e F i l e ( p f i l e , buf , s t r l e n ( b u f ) ,& r s i z e , NULL) ;             i f ( pfD ) {
-    R e c u r s i o n ( i −1, p f i l e , r s i z e ) ;                                              W r i t e F i l e ( pfD , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
-    R e a d F i l e ( p f i l e , buf , s i z e o f ( b u f ) , &r s i z e , NULL) ;                 C l o s e H a n d l e ( pfD ) ;
-  }                                                                                                }
-  return 0;                                                                                      }
-}                                                                                                CloseHandle ( pfS ) ;
-                                                                                               }
-                                                                                             }
-  We build the behavior model of the corresponding binary
-program by following the procedures described in section II,
-                                                                                                One program uses one link library in two ways: static link
-and get the core function model of the recursion program,
-                                                                                             and dynamic link. The source code of one program bounded
-Mr = (Qr , Σr , Γr , δr , qr0 , Zr0 , Fr ), which is shown as
-                                                                                             with the static link library (Example 4) is shown in Example
-Figure 2.
-                                                                                             5.
-                                                                                                Example 5: Bounding with a static link library
-                       WriteFile                           ReadFile
-                                                                                             #pragma comment ( l i b , ” v e r D l l . l i b ” )
-                   0               1    ReadFile       2                3
-                                                                                               d e c l s p e c ( d l l i m p o r t ) v o i d FOp ( char ∗ ps , char ∗ pd ) ;
-                       , Push 0002                         , Pop 0002                        v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
-                                                                                                    ... ...
-                                                                                                   F i l e O p ( Src , Des ) ;
-            Figure 2.     Core function model of recursion program                                 return ;
-                                                                                             }
-   We run the recursion program which is compiled from
-Example 3, and preprocess the monitored Win32 API se-                                           We build the behavior model of the corresponding binary
-quence by following the procedures described in subsection                                   program from Example 4 and Example 5 by following the
-III-A. The preprocessed API sequence (wr ) is:                                               procedures described in section II, and get the core function
-                                                                                             model, Msl = (Qsl , Σsl , Γsl , δsl , qsl0 , Zsl0 , Fsl ), which is
-OpenFile
-−>W r i t e F i l e −>W r i t e F i l e −>W r i t e F i l e − e a d F i l e −
-                                                             >R              >               shown as Figure 3.
-      ReadFile− eadFile >R                                                                      We run the program which is compiled from Example
-−>C l o s e H a n d l e                                                                      5, and preprocess the monitored Win32 API sequence by
-                                                                                             following the procedures described in subsection III-A. The
-   The ﬁrst API OpenFile and the last API CloseHandle
-                                                                                             preprocessed API sequence (wsl ) is:
-are called by main(). We only use the model of recursion
-                                      ′
-function to verify the API sequence (wr ) between ﬁrst API                                   OpenFile− eadFile− penFile−
-                                                                                                      >R        >O       >W r i t e F i l e −>
-OpenFile and the last API CloseHandle.                                                           CloseHandle− loseHandle
-                                                                                                             >C
-
-
-
-                                                                                         4
-                                                       CloseHandle
-           , Push 0001
-                                                      FOp                                                          IV. A NTI - ATTACK E XPERIMENT
-                                         OpenFile      -3        CloseHandle
-        Start-     _main       FOp            WriteFile                               FOp             We use two typical attacking experiments to prove that
-          8         -0          -2                           FOp-                      -4
-                                               CloseHandle    6
-                                                                        CloseHandle                the method of dynamic attestation proposed in this paper is
-        , Push 0002        ReadFile     FOp                              , Pop 0002
-                                         -5
-                                                                                      Start-
-                                                                                                   effective.
-  FOp                    FOp
-           OpenFile                                 _main           , Pop 0001
-                          -1          , Pop 0002                                       10
-   -0                                                -1
-                                                                                                   A. DLL Hijacking
-
-         Figure 3.       Behavior model of static link library program
-                                                                                                     When one Windows program calls the API in one system
-                                                                                                   DLL, the system will search the corresponding DLL in the
-                                                                                                   system directory. This experiment uses one pseudo DLL in
-  The initial instantaneous description of Msl is                                                  system directory to launch the attack.
-ID(Start-8, wsl , ε). Let us see whether Msl can accept                                              The object being attacked is a socket program (Ps ). We
-wsl :                                                                                              build the behavior model of the corresponding binary ﬁle of
-          (Start-8, wsl , ε) ⊢Msl ( main-0, wsl , ‘0001’)                                          Ps by following the procedures described in section II, and
-                                                                                                   get its function model, Ms = (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ).
-          ......                                                                                   There has the following valid API sequence in Ms :
-          ( main-1, ε, ‘0001’) ⊢Msl (Start-10, ε, ε)
-                                                                                                   WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
-                                                                                                              >s          >h         >b    >l          >a          >
-  Start-10 is one ﬁnal state, so wsl can be accepted by                                               send− e c v − l o s e s o c k e t
-                                                                                                            >r     >c
-Msl . This shows our method can solve the difﬁculty of
-dynamic attestation for static link library program.                                                 Because the socket program has to call the APIs from
-   When one program is bounded with the dynamic link                                               ws2_32.dll, we use one “malicious” DLL to replace
-library, due to that the link library is dynamically loaded                                        the original ws2_32.dll. Except for send(), all other
-to program space, the actual address of export functions in                                        functions in the pseudo DLL are completely in the same way
-library can not be obtained by static analysis. In our future                                      like original ws2_32.dll. send() is modiﬁed as using the
-work, we will get the name of export function in link library                                      following API sequence to stole sensitive information.
-by carrying analysis of Win32 API arguments, and complete                                          OpenFile−>W r i t e F i l e − l o s e H a n d l e − e n d
-                                                                                                                                >C                    >s
-the attestation for dynamic link library program.
-                                                                                                      We run the program (Ps ) on the platform with the mali-
-F. Multi-thread Program Attestation                                                                cious ws2_32.dll, and preprocess the monitored Win32
-   We build the behavior model of one multi-thread bi-                                             API sequence by following the procedures described in
-nary program by following the procedures described in                                              subsection III-A. The preprocessed API sequence (ws ) is:
-section II, and get the core function model, Mm =                                                  WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
-                                                                                                              >s           >h         >b        >l            >a       >
-(Qm , Σm , Γm , δm , qm0 , Zm0 , Fm ).                                                                OpenFile−  >W r i t e F i l e − l o s e H a n d l e −
-                                                                                                                                     >C                    >send− e c v −
-                                                                                                                                                                 >r      >
-   The current behavioral model does not include API ar-                                              closesocket
-gument value, so there is no way to embed the automaton
-                                                                                                      Let us see whether Ms can accept ws . When Ms reads
-of each sub-thread into that of the main thread, and form a
-                                                                                                   in OpenFile, there is no path to complete the transition,
-complete global automaton.
-   Due to the irregularity of parallel programs execution                                          denoted as:
-in operating system, the API calls of each thread appear                                                                     ′                     ′
-                                                                                                            (ps , ‘OpenFile’ws , Zs β) ⊬∗ s (qs , ws , γβ)
-                                                                                                                                        M
-alternately, and the appearance order of API also is different
-                                                                                                                                           ′
-at each run-time. In addition to record the API name, we                                              At this time, ps ∈ Qs , ‘OpenFile’ws ̸= ε, Zs β ̸= ε.
-                                                                                                                       /
-should also record the thread ID who calls the corresponding                                       This means Ms can not accept ws , and Ps ’s running
-API when monitoring the dynamic behavior of multi-thread                                           behavior can not pass the dynamic attestation. We can see
-program.                                                                                           our method can protect the system against DLL Hijacking
-   We do the dynamic attestation for every sub-thread’s                                            attack.
-behavior independently. The speciﬁc method is similar to                                           B. Buffer Overﬂow
-singe thread program attestation (see III-C). The difference
-from the single thread program is that we need try to                                                 The object being attacked is a program (Pb ) for ﬁle con-
-determine the correspondence relation between the actual                                           tent copy. Pb reads some data from the ﬁrst ﬁle, and writes
-behavior and sub-function’s behavioral model of a certain                                          the data into the second ﬁle. We build the behavior model of
-thread by making multi attempts.                                                                   Pb by following the procedures described in section II, and
-   In our future work, we will get the name of sub-                                                get its function model, Mb = (Qb , Σb , Γb , δb , qb0 , Zb0 , Fb ).
-thread function by carrying analysis of the arguments in                                           There has the following valid API sequence in Mb :
-CreateThread, and then the behavior model of sub-thread                                            Openfile − eadFile− penFile− p r i n t f − t r c p y −
-                                                                                                                >R            >O       >s      >s        >
-function can be embedded into the model of main thread.                                                W r i t e F i l e − loseHandle− loseHandle
-                                                                                                                          >C          >C
-
-
-
-                                                                                               5
-  We build a piece of Shell Code, which will call                                            R EFERENCES
-MessageBox, and then write the Shell Code into the ﬁrst             [1] Shen Changxiang, Zhang Huanguo, Wang Huaimin and et
-ﬁle. When Pb uses strcpy, the Shell Code will be called.                al. Research and development of trusted computing. Science
-We run the program (Pb ) on the platform with the Shell Code            China: Information Science, 2010, 40(2): 139-166. (in Chi-
-ﬁle, and preprocess the monitored Win32 API sequence by                 nese)
-following the procedures described in subsection III-A. The
-                                                                    [2] R. Sekar, V. N. Venkatakrishnan, Samik Basu, et al. Model-
-preprocessed API sequence (wb ) is:                                     Carrying Code: A Practical Approach for Safe Execution of
-Openfile − eadFile− penFile− p r i n t f − t r c p y −
-          >R       >O                >s               >s    >           Untrusted Applications. Proceedings of the nineteenth ACM
-    MessageBoxA−>W r i t e F i l e − l o s e H a n d l e −
-                                    >C                    >             symposium on Operating systems principles (SOSP’03), Bolton
-    CloseHandle                                                         Landing, New York, USA, ACM Press, 2003: 15-28.
-
-  Let us see whether Mb can accept wb . When Mb reads in            [3] R. Sekar, C. R. Ramakrishnan, I.V. Ramakrishnan, and et
-MessageBoxA, there is no path to complete the transition,               al. Model-Carrying Code (MCC): A New Paradigm for
-                                                                        Mobile-Code Security. Proceedings of the 2001 New Security
-denoted as:                                                             Paradigms Workshop (NSPW’01), Cloudcroft, New Mexico,
-                                                                        USA, ACM Press, 2001: 23-30.
-                          ′                     ′
-      (pb , ‘MessageBoxA’wb , Zb β) ⊬∗ b (qb , wb , γβ)
-                                     M
-
-                    /                       ′
-   At this time, pb ∈ Fb , ‘MessageBoxA’wb ̸= ε, Zb β ̸=            [4] Wei Da, Jin Ying, Zhang Jing,and et al. Enforcing Security
-                                                                        Policie s in Open Source JVM. ACTA ELECTRONICA SINICA,
-ε.This means Mb can not accept wb , and Pb ’s running                   2009, 37 (4A): 36-41. (in Chinese)
-behavior can not pass the dynamic attestation. We can see
-our method can protect the system against buffer overﬂow            [5] Jin Ying, Li Zepeng, Zhang Jing, and et al. Static Checking
-attack.                                                                 of Security Related Behavior Model for Multithreaded Java
-                                                                        Programs. Chinese Journal of Computers, 2009, 32 (9): 1856-
-   Our methods are also effective against other unknown
-                                                                        1868. (in Chinese)
-attacks.
-                                                                    [6] George C. Necula. Proof-Carrying Code. Proceedings of 24th
-          V. C ONCLUSION AND F UTURE W ORK                              ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
-   Our method for trusted computing dynamic attestation                 gramming Languages (POPL’97), Paris, France, ACM Press,
-                                                                        1997: 106-119.
-uses the behavior model based on static analysis of binary
-code. This paper proposed one method of building almost             [7] Vivek Haldar, Deepak Chandra, Michael Franz. Semantic Re-
-the same core function model for different versions of                  mote attestation: A Virtual Machine Directed Approach to
-same code. This paper also overcame the difﬁculty that                  Trusted Computing. Proceedings of the 3rd conference on
-some dynamic behaviors can not be obtained by static                    USENIX Virtual Machine Research and Technology Sympo-
-                                                                        sium, San Jose, California, USA, USENIX Association, 2004:
-analysis. The paper also gave out some solutions of dynamic             29-41.
-attestation for some complex programs.
-   Our current method can not protect programs against              [8] Yu Fajiang, Yu Yue. Static analysis-based behavior model
-mimicry attack [9] [10]. Some researchers have proposed                 building for trusted computing dynamic veriﬁcation. Wuhan
-some methods to protect program against mimicry attack.                 University Journal of Natural Sciences, 2010, 15(3): 195-200.
-Based on these researches, we will build program behav-             [9] David Wagner, Paolo Soto. Mimicry attacks on host based
-ior model by using EFSA (Extended FSA) to describe                      intrusion detection systems. Proceedings of the 9th ACM
-arguments value. The behavior model including arguments                 conference on Computer and Communications Security, Wash-
-also can help solve the difﬁculty of dynamic link library               ington, DC, USA, ACM Press, 2002: 255-264.
-programs’ behavior attestation.
-                                                                    [10] Li Wen, Dai Yingxia, Lian Yifeng, and et al. Context sensitive
-   The method in this paper can not ensure security of                  host-based IDS using hybrid automaton. Journal of Software,
-mobile code program (such as Web script), which only can                2009, 20(1): 138-151. (in Chinese)
-ensure the security of script execution host program (such
-as Browser). We will carry further research on the dynamic
-attestation of mobile code program and parallel program.
-
-                    ACKNOWLEDGMENT
-   This work is supported by the National Natural Sci-
-ence Foundation of China (Grant No. 60673071, 60970115,
-91018008), the Fundamental Research Funds for the Central
-Universities in China (Grant No. 3101044), and open foun-
-dation of Zhejiang Key Laboratory of Information Security
-in China.
-
-
-                                                                6
-
\ No newline at end of file
diff --git a/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf b/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf
deleted file mode 100644
index 44eef7d..0000000
--- a/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf	
+++ /dev/null
@@ -1,482 +0,0 @@
-Journal of Computational Information Systems 7:5 (2011) 1436-1445
-Available at http://www.Jofcis.com
-
-
-
-
-        Optimization of Program Behavior Model for Trusted Computing
-                             Dynamic Attestation
-
-                              Fajiang YU1,2,†, Yuewei XU3, Yue YU1, Yang LIN1, Yaohui WANG1
-                                        1
-                                          School of Computer, Wuhan University, Wuhan 430072, China
-                   2
-                       Key Laboratory of Aerospace Information Security and Trusted Computing, Wuhan 430072, China
-                       3
-                         Zhejiang Provincial Testing Institute of Electronic Products, Hangzhou, Zhejiang 310012, China
-
-
-                                                                 Abstract
-       Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of program’s behavior
-       verification is building program’s trusted behavior model. Static analysis based behavior model building can cover all
-       running paths, but there may be many        run circuits, which can lead to the failure of dynamic attestation execution. This
-       paper gives out an improved Floyd algorithm to find out and remove one          run circuit with shortest length. The action is
-       repeated until there is no     run circuit, which can optimize the trusted behavior model. This paper also carries out one
-       theoretical analysis of the time complexity and space complexity, the optimization method is better than the method based
-       on the traditional algorithm of finding out all elementary circuits in directed graph. Finally, this paper does some
-       optimization experiments about real Windows binary program’s behavior model. The result shows there is a large
-       reduction in the number of directed graph’s nodes and edges in the behavior model after deleting all       run circuits.
-
-       Keywords: Trusted Computing; Dynamic Attestation; Behavior Model;           Run Circuit
-
-1. Introduction
-Trusted Computing is an information system security solution for the basic computing security problem. It
-has become one of hot subjects in the information security research field [1, 2]. From the angle of behavior,
-Trusted Computing Group (TCG) gives us a standard to verify the computing platform whether is trusted or
-not: “an entity can be trusted if it always behaves in the expected manner for the intended purpose” [3]. The
-technology which the trusted computing platforms currently adopted does not comply with the
-requirements that the behaviors are trusted. We need to verify the dynamic behavior of components as well.
-   Currently, there are few researches on the theory and method of trusted computing dynamic verification.
-The related researches are focus on extended trusted network connection and remote attestation,
-trustworthy software, host-based intrusion detection, malicious software detection based on behavior
-analysis, and etc.
-   In the aspect of extended trusted network connection and remote attestation, Vivek Haldar et al. have
-given us a basic framework on the semantic remote attestation for the trustworthiness of a Java program
-running behavior [4]. Xiaoyong Li et al. have proposed one model of system behavior based
-trustworthiness attestation for computing platform [5]. Ahmad-Reza Sadeghi et al. have presented a method
-of property-based attestation for computing platforms [6]. Dengguo Feng et al. have proposed a complete
-dynamic update attestation scheme for multiple remote attestation instance in trusted computing
-environment [7]. These researches have improved some disadvantages of TCG trusted network connection,
-but it does not verify the dynamic behavior of the components.
-
-†
-    Corresponding author.
-    Email addresses: qshxyu@126.com (Fajiang YU)
-
-1553-9105/ Copyright © 2011 Binary Information Press
-May, 2011
- 1437                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
-
-   Current research on trustworthy software are mainly concentrated on the fields of model building and
-verification, software trustworthiness design, the analysis and test on software trustworthiness, the
-evolution of software trustworthiness [8], and etc. The research covers every software lifecycle stage. The
-trusted computing dynamic verification pays more attention to verify the dynamic behavior.
-   Since Stephanie Forrest et al. started to use the sequence of Linux system call to describe the program
-behavior and conduct host-based intrusion detection system [9, 10], many researchers have done a lot of
-work in this area. But the behavioral characteristic of trusted computing dynamic verification is not limited
-to the sequence of system call.
-   To improve the ability of detecting metamorphic viruses and unknown viruses, the detecting method
-based on behavior analysis has been proposed [11-13]. At present, the main behavioral characteristic for
-malicious code detection is API, but for trusted computing dynamic verification, it is not limited to API.
-   The first step of trusted computing dynamic attestation is building the behavior model of all platform
-components. Generally, there are two methods for model building: dynamic training and static analysis.
-Dynamic training always faces the classic problem of machine learning. It is hard to build a training set
-which can cover all possible program execution paths. In order to solve this problem of dynamic training,
-David Wagner et al. started using static analysis to build a Finite State Automata (FSA) model for the
-program behavior [14]. Jonathon T. Giffin et al. inserted one “null call” before and after calling one sub
-function for building one context-sensitive model to guarantee the high efficiency of FSA model and
-remove impossible paths [15, 16]. Henry Hanping Feng et al. built a stack-deterministic Push down
-Automata (sDPDA) model to improve the efficiency [17]. Rajeev Gopalakrishna et al. directly embedded
-the sub functions for building global FSA to improve the efficiency [18]. LI Wen et al. connected every sub
-function only when the application is running to reduce stack size [19].
-   These methods which use static analysis to build the FSA program model mainly focus on the
-characteristic of system call or API. It is regarded as the input alphabet symbol of FSA state transition. But
-there may be no code of the system call or the API call in many program blocks. This will cause that the
-generated FSA has a lot of transitions. It means that there is no need of inputting any alphabet symbol
-when the state of FSA shifts. These transitions may form run circuits in the FSA, which can cause the
-FSA falls into endless loop and can not stop when it is used to do trusted computing dynamic attestation.
-So when we build the FSA behavior model for the program, we need to find out and delete run circuits,
-and then remove other non- transitions in order to guarantee it executes correctly and efficiently by using
-this model to do attestation.
-   This paper mainly makes the following three contributions: (1) We give out an improved Floyd
-algorithm to find out and delete one shortest run circuit. (2) This paper also carries out one theoretical
-analysis of the time complexity and space complexity, the optimization method is better than the method
-based on the traditional algorithm of finding out all elementary circuits in directed graph. (3) Finally, this
-paper does some optimization experiments about real Windows binary program’s behavior model. The
-result shows there is a large reduction in the number of directed graph’s nodes and edges in the behavior
-model after deleting all run circuits. Either in time efficiency or space efficiency, the optimization
-method is better than the method based on the traditional algorithm of finding out all elementary circuits in
-directed graph.
-
-2. Behavior Modeling Based on Static Analysis of Binary Program
-Figure 1 is the basic framework of trusted computing dynamic attestation. First we build the model for the
-trusted behavior of each computing platform components. Then we use this model to verify platform’s real
-running behavior. The trusted behavior model is the base of trusted computing dynamic attestation.
-Because dynamic training cannot cover all running paths, the method considered by this paper is to apply
-static analysis of the binary PE file and build the program trusted behavior model. It is more consistent with
-the reality that many commercial softwares do not open the source code.
-  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                     1438
-
-
-
-
-                            Fig.1 The Framework of Trusted Computing Dynamic Attestation
-
-  The process of constructing static analysis-based behavior model includes the following seven stages:
-  1) CFG building from binary code
-  2) FSA constructing from CFG
-  3) Deleting ε run circuit
-  4) Deleting non-circuit ε transition
-  5) Constructing Deterministic FSA
-  6) Deleting empty DFA
-  7) Building Global PDA
-  You can see the detail stages and algorithms about building trusted behavior model based on static
-analysis of PE binary file in our previous work [20].
-
-3. Searching and Deleting ε Run Circuits
-The existence of run circuits can lead the failure of trust attestation, so we need to find out and delete the
-  run circuits of FSA during the process of building trusted behavior model, in order to finish the model
-optimization.
-  Definition 1. There is a input symbol sequence on one FSA                                , the sequence is
-                                                     , whose corresponding state sequence is
-                                          ,                       . We call this state sequence is a run of
-FSA       on the input symbols , which is denoted as .
-  Definition 2.     is a run, if                               .
-  Definition 3.      is a run circuit, if                                  and                    except that
-       .
-
-3.1. Judging Whether There are ε Run Circuits
-In order to delete run circuits in the FSA, we need to judge whether there are run circuits or not
-firstly. The FSA whose all non- transitions have been deleted is denoted as                               ,
-Where             ，           ,                                           ,         ,         .
-   FSA          also is a directed graph, which is denoted as                             , where         ,
-                                  . We carry out a topological sorting for this graph:
-   1) Select one state node     from     , which has no precursor;
-   2) Delete this state node and all the edges whose head node is                , it means               ,
-                                      .
-   We repeat the two steps until           or there is no state node which has no precursor in .
-   For the FSA       that has been carried out a topological sorting, if          then there must be no run
-circuit in    ; if          then there must be some run circuits in          , and the run circuits must be
-consisted with the state nodes left in .
- 1439                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
-
-3.2. ε Run Circuits Searching Based on Algorithm of Generating Elementary Circuits in Directed
-     Graph
-There are a lot of algorithms of generating elementary circuits in directed graph. This paper uses one
-algorithm proposed by Wang Yuying et al. [21]. Compared with other algorithms, this algorithm need not
-search the node which has been discovered, and it is more efficient.
-   The transition FSA directed graph that has been carried out a topological sorting is denoted as
-                , where            and there are    state nodes in      . There must be run circuits in this
-FSA.
-   The algorithm of searching run circuits in FSA based on the method of generating elementary circuits
-in directed graph is denoted as Algorithm 1 (You can its detail in [21].).
-   The version of notepad.exe in the Windows XP SP1 system for simplified Chinese is 5.1.2600.0.. We
-delete all non- transitions of the FSA (Fig.2), which corresponds to sub-function “sub_1005303” in this
-notepad.exe, and carry out a topological sorting on it, the directed graph simplified is denoted as .
-
-
-
-
-                           Fig.2 The FSA of One Sub-function “Sub_1005303” in Notepad.exe
-
-  We use the algorithm of generating elementary circuits to search run circuits in the FSA of
-sub_1005303. we find out two      run circuits in sub_1005303 FSA:                        and
-                        .
-
-3.3. Searching ε Run Circuits Based on the Improved Floyd Algorithm
-The searching method based on the algorithm of generating elementary circuits will find out all circuits one
-time. The multiple run circuits in FSA may be connected with each other. It is impossible to delete all
-run circuits one time, because after one run circuit has been deleted, other circuits may haven been
-broken and new circuits also may be formed.
-   In order to increase the time and space efficiency of trusted behavior model optimization, we make some
-improvement on the Floyd algorithm. We use the improved Floyd algorithm to get the shortest distance
-between any two state nodes in the transition FSA directed graph ( ) which has been carried out a
-topological sorting, it means we get the shortest distance matrix of         ,       . If         , for every,
-                      this FSA does not have any run circuit which start and end with , otherwise it has
-the circuit. In order to further increase the efficiency of trusted behavior model optimization, we only find
-out one shortest run circuit firstly and delete it, then repeat this procedure until there is no run circuit
-in the FSA. The length of the shortest run circuit is                                  .
-   The algorithm of searching the start state node (which also is the end state node) in the shortest run
-circuit of FSA based on the improved Floyd algorithm is described as Algorithm 2.
-   Algorithm 2: Searching the start state node (which also is the end state node) in one shortest run
-circuit of FSA
-  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                    1440
-
-Require: One transition FSA directed graph that has been carried out a topological sorting and is
-denoted as                 , where          and there are  state nodes in
-Ensure: The starting state node of the shortest transition circuit in FSA, which is denoted as ; the
-shortest matrix path
-
-1: for           to         do                  17:           for          to           do
-2:        for          to         do            18:                if                     then
-3:             if                               19:                                        ;
-4:                           ;                  20:                             ;
-5:             else                             21:                end if
-6:                             ;                22:           end for
-7:             end if                           23:      end for
-8:        end for                               24: end for
-9: end for                                      25:             ;
-10: for         to         do                   26:         ;
-11:       for          to         do            27: for        to        do
-12:                       ;                     28:      if           then
-13:       end for                               29:                      ;
-14: end for                                     30:                   ;
-     15: for        to           do             31:      end if
-16:       for         to         do             32: end for
-  After we ascertain the start state node     on the shortest run circuit, and the shortest path matrix
-         of FSA, we could find out all nodes on the circuit by using Algorithm 3.
-  Algorithm 3:
-Require: start state ; final state node ; matrix with the shortest distance
-Ensure: a sequence of state nodes on the shortest path, denoted as
-1:
-2: if              then
-3:                  ;
-4: return
-5: else
-6:                                                  ;
-7:                                                  ;
-8:                              ;
-9:        return
-10: end if
-  We use the improved Floyd algorithm to search the shortest        run circuit in sub_1005303 FSA. The
-corresponding shortest run circuit is                     .
-
-3.4. Deleting the ε Run Circuit in FSA
-After finding out one      run circuit                              in FSA                       , we can
-delete the run circuit with the following steps:
-  1) Merging all state nodes on run circuit into one node,                                       ;
-  2) Deleting the run between state nodes on run circuit,
-                                                                                    ;
-  3) Changing all non- runs between state nodes on      run circuit, all                                    in
-  should be replaced by                  ;
- 1441                     F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
-
-  4) Changing non- run from state node on            run circuit to other state nodes, all                ,
-                                                       in should be replaced by                      ;
-  5) Changing non-          run from other state nodes to nodes on      run circuit, it means replacing all
-                                                                        ;
-  6) If                           , then                       ;
-  7) If                            , then                        .
-
-4. Performance Analysis
-
-4.1. Time Complexity Analysis
-There are mostly two methods to optimize the programs’ trusted behavior model. Method 1 is following
-steps 3.1, 3.2 and 3.4, which is based on traditional algorithm of generating all elementary circuits in
-directed graph Method 2 is following steps 3.1, 3.3 and 3.4, which is based on the improved Floyd
-algorithm. (In the rest paper, Method 1 and Method 2 are used to represent the two model optimization
-methods).
-   Method 1 has the same first and third steps as Method 2, so the time difference spent is mainly between
-the algorithm described in 3.2 and 3.3.
-   According to the document [21], the time that algorithm in 3.2 takes is:
-
-     is a constant,         is the number of nodes in the directed graph after topological sorting,
-                          is the number of the circuits whose smallest vertex is ,           is the number of
-circuits in the graph, expression          is the adjacency list of    ( is the number of edges).
-   The time that algorithm in 3.2 takes can be simplified as:                       .
-   For Method 2, first we use Algorithm 2 in 3.3 to find out the start node of the shortest run circuit in
-the directed graph, the time it takes is:                             ;
-   Then we recursively find out all nodes in the circuit by using the algorithm, the taken time is:
-
-
-  The calculation result of       is:
-  The total time that the algorithm in 3.3 takes is:
-
-
-
-  It is obvious that Method 2 takes less time than Method 1 by comparing               and   .
-
-4.2. Space Complexity Analysis
-Method 1 has the same first and third steps as Method 2, so the space difference the two methods need is
-mainly between the algorithm described in 3.2 and 3.3.
-  Algorithm 1 in 3.2 requires many rounds iterative calculations. And in every round it uses two matrixes,.
-The two matrixes’ elements are some path information. There are two data structures that are used in
-programs to record the path information of matrix element:
-     typedef struct {                                           typedef struct {
-          char IndexPath[STATE_MAX][INDEX_MAX];                    stuStateIndexPath * ssipaIns[PATH_MAX];
-          int iPathLen;                                            int iPathNum;
-     } stuStateIndexPath;                                       } stuFLPEiWiElement;
-
-   STATE_MAX, INDEX_MAX, PATH_MAX are constants, which can be different value in different
-situation. We suppose that the storage space taken by one structure variation of stuStateIndexPath is B,
-and the storage space of stuFLPEiWiElement is       B.
-  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                        1442
-
-   In every round iterative calculation of the algorithm in 3.2, the path information of all elements in edge
-matrix and path matrix should be saved. In the first round calculation, edge matrix and path matrix can both
-have           elements,     is the number of nodes in the directed graph that after topological sorting. The
-biggest number of path is        among all path information. The worst situation is that all elements have
-paths in the first round calculation, and the space it takes is:                                    (B). , the
-biggest number of element path, is related to the number of run circuit.
-   There are also two matrixes used in the algorithm of 3.3: the shortest distance matrix and the shortest
-path matrix,      is the number of nodes in the directed graph after topological sorting. The element of
-distance matrix is the information of distance length, the space one element takes is         B. The element of
-path matrix is the information of nodes, the space one element takes is         B。The main space taken by the
-algorithm in 3.3 is:                               (B).
-   Comparing         and      , the space taken by structure variation of stuStateIndexPath (          B) is far
-greater than the space used to save distance length (       B), the space of stuFLPEiWiElement (       B) also is
-bigger than the space used to save the node information (         B). Besides,     has relation with the number
-of     run circuit ( ). Considering that               is far greater than       ,     can be represented as:
-                          (B).
-   We can see that, with the increasing of run circuit number, the space taken by the algorithm of 3.2
-also is increased in multiples, so it is likely that space overflow would happen. But for the algorithm of 3.3,
-the space it takes has no relation with run circuit number.
-   From the above analysis we can see that the space taken by Method 2 is far smaller than the space of
-Method 1.
-
-5. Experiment and Analysis
-We do our experiment of building the trusted behavior model of program notepad.exe in Windows XP SP2.
-On our computer for experiment, the CPU is Intel(R) Core(TM)2 Duo CPU T8100 @ 2.10GHz, and the
-RAM is DDR2 1024MB. At present, behavior model pays most attention to the behavioral feature of API
-in kernel32.dll. notepad.exe not only directly call the API of kernel32.dll, but call some other dynamic link
-libraries (DLLs). These DLLs also may call the API of kernel32.dll, and these APIs also are the behavioral
-feature of notepad.exe.
-   Building behavior model for notepad.exe also needs building the behavior models of the related DLLs.
-There are many sub functions in notepad.exe and related DLLs. We choose 8 sub functions from 3 DLLs
-for building model and optimizing. From the table we can see that after the optimization, all run circuits
-have been deleted, and the number of nodes and edges in function directed graph is greatly reduced.
-
-5.1. Time Efficiency Tests
-In order to compare the model optimization time efficiency of traditional algorithm of generating all
-elementary circuits in directed graph and the improved Floyd algorithm, we optimize the behavior model of
-every sub function in Table 1 by following the steps 3.1, 3.2(or 3.3) and 3.4, the time they take are seen in
-Table 1.
-   The number of directed graph nodes after topological sorting is the result of the first time of doing
-topological sorting. The number of deleted run circuits is equal to the times
-   From Table 1 we can see when there are only a few run circuits, the time taken by Method 1 and
-Method 2 have little difference; when there are more run circuits, the time taken by Method 2 is less
-than Method 1. Because Method 1 is based on the algorithm of generating elementary circuits in directed
-graph, every time of following step 3.2, all run circuits could be found out, it would take more time if
-there are more circuits. The experiment result is consistent with our analysis in 4.2. In Table 2 he space
-overflows when sub function sub_77D3B1DA is being optimized by using Method 1.
- 1443                 F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
-
-                           Table 1 The Time Taken by Model Optimization of Every Sub-function
-                                     Number of Nodes       Number of                 Time (s)
-                     Name of
-                                     after Topological    Deleted ε Run
-                   Sub-function                                             Method 1        Method 2
-                                          Sorting            Circuit
-                    tree_size_ndr            45                20           7.076274         6.733020
-                    tree_into_ndr            48                22           8.502247         9.021329
-                    data_into_ndr            51                24           10.337455       10.370068
-                  sub_77D5FAD4               81                31          32.868784        33.119412
-                   data_from_ndr             85                33          36.543700       36.862505
-                  sub_77D3B1DA              105                 4            overflow      17.867722
-                   sub_77C481F5             101                41           64.731101       61.411450
-                  sub_77D3B6AF              153                60          221.496020      221.496020
-
-
-5.2. Space Consumption Test
-In order to compare the amount of space consumed by Method 1 and Method 2, we optimize the behavior
-model of every sub function in Table 1 by following the steps 3.1, 3.2 (or 3.3) and 3.4. The peak amount of
-the space consumed during the behavior model optimization of every sub function is as Table 2 shown.
-
-         Table 2 The Peak Amount of Space Consumed during the Behavior Model Optimization of Every Sub-function
-
-                                                     the Peak Amount of Space Consumed (KB)
-                          Name of Sub-function
-                                                     Method 1               Method 2
-                               tree_size_ndr            444                    4.05
-                               tree_into_ndr            503                   4.609
-                               data_into_ndr            601                   5.202
-                             sub_77D5FAD4              1577                  13.122
-                              data_from_ndr            1751                   14.450
-                             sub_77D3B1DA            overflow                22.050
-                              sub_77C481F5             1688                  20.402
-                             sub_77D3B6AF              10141                 46.818
-
-   From Table 2 we can see the more nodes of the directed graph after topological sorting and run
-circuits in the graph is, generally the bigger peak amount of space consumed by Method 1 is. Sub-function
-“data_from_ndr” has less nodes and run circuits than “sub_77C481F5”, but the space it takes up is more
-than “sub_77C481F5”. The reason is that the amount of space consumed also has relation with the length
-of run circuits. The longer the length is, the more information need be saved, so the more space it takes
-up. During the optimization of the behavior model for sub function “sub_77D3B1DA”, the temporary paths
-are so complex that they need occupy large storage and overflow the space when the second run circuit
-is in processing. The amount of space taken up by Method 2 only is related with the node number in the
-directed graph. And Method 1 takes up great less space than Method 1. The experiment result is consistent
-with our analysis in 4.3. In order to know more about the relationship between the amount of space
-consumed and the length of run circuit, we record the amount of space consumed by Method 1 and
-Method 2 when we deal with several run circuits of some sub functions, which is shown in Figure 3.
-Figure 3 (a) is the statistics of some sub functions in gdi32.dll when doing modeling optimization, (b) is the
-statistics of some sub functions in shlwapi.dll.
-   From Figure 3 we can see the longer the length of run circuit is, the more space Method 1 will take up.
-But the space consumed by Method 1 is no relation with the length of run circuit, only is related to the
-number of nodes in directed graph. From the experiment we know the amount of space consumed by
-Method 2 is much less than Method 1.
-  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                   1444
-
-
-
-
-                                       (a) Gdi32.dll                  (b) Shlwapi.dll
-
-                              Fig. 3 Statistics of Space Taken and Length of ε Run Circuit
-
-6. Conclusion and Future Work
-Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of
-program’s behavior verification is building program’s trusted behavior model. Static analysis based
-behavior model building can cover all running paths, but there may be many run circuits, which can lead
-to the failure of trust attestation. This paper gives out an improved Floyd algorithm to find out and delete
-one shortest run circuit. The action is repeated until there is no run circuit, which can optimize the
-trusted behavior model. This is a new application and improvement of Floyd algorithm.
-   Compared with the model optimization method based on the traditional algorithm of generating the
-elementary circuit in directed graph, the optimization method proposed in this paper only need to find out
-one shortest run circuit every time, but the method based on traditional algorithm has to find out all
-circuits, which must waste more time and space. The optimization method proposed in this paper would
-need less time and space if there are more nodes and longer run circuits in the directed graph of behavior
-model, which is confirmed by our experiment.
-   In the future, we still have much work to do. 1) We will use the trusted behavior model to dynamically
-monitor the programs’ real running behavior; 2) We will integrate static analysis and dynamic training to
-improve the efficiency and accuracy of trusted behavior model building, and consider how to add API
-arguments into the behavior model; 3) We will apply the method of program slicing, Fuzzing test, symbolic
-execution, and taint analysis into trusted computing dynamic attestation.
-
-Acknowledgement
-This work is supported by the National Natural Science Foundation of China (No. 60970115, 91018008),
-the Fundamental Research Funds for the Central Universities in China (No. 3101044), and open foundation
-of Zhejiang Key Laboratory of Information Security in China.
-
-References
-[1]   Sheng Changxiang, Zhang Huanguo, Wang Huaimin, et al. Research and development of trusted computing.
-      Science China: Information Science, 2010, 40(2): 139-166. (in Chinese)
-[2]   Sheng Changxiang, Zhang Huanguo, Feng Dengguo, et al. Survey of information security. Science China:
-      Information Science, 2007, 37(2): 1-22. (in Chinese)
- 1445                   F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
-
-[3]    Trusted Computing Group. TCG specification architecture overview, specification revision 1.4.
-       http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-1D09-3519-ADA026A0C05CFAC2/TC
-       G_1_4_Architecture_Overview.pdf, 2010-06-12.
-[4]    Vivek Haldar, Deepak Chandra, Michael Franz. Semantic remote attestation — a virtual machine directed
-       approach to trusted computing. Proceedings of the 3rd conference on virtual machine research and technology
-       symposium, California, USA, USENIX, San Jose, 2004: 29-41.
-[5]    Li Xiaoyong, Zuo Xiaodong, Shen Changxiang. System behavior based trustworthiness attestation for computing
-       platform. Acta Electronica Sinica, 2007, 35(7): 1234-1239. (in Chinese)
-[6]    Ahmad-Reza Sadeghi, Christian Stüble. Property-based attestation for computing platforms: Caring about
-       properties, not mechanisms. Proceedings of the 2004 workshop on new security paradigms, Nova Scotia, Canada,
-       ACM Press, 2004: 66-77.
-[7]    Feng Dengguo, Qin Yu. Research on attestation method for trusted computing environment. Chinese Journal of
-       Computers, 2008, 31(9): 1640-1652. (in Chinese)
-[8]    Wang Huaimin. Building Integration environment of trustworthy software. Communications of China Computer
-       Federation, 2009, 5(2): 56-61. (in Chinese)
-[9]    Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, et al. A sense of self for unix processes. Proceedings of
-       the 1996 IEEE Symposium on Security and Privacy, Los Alamitos, California, USA, IEEE Computer Society,
-       1996: 120-128.
-[10]   Steven A. Hofmeyr, Stephanie Forrest, Anil Somayaji. Intrusion detection using sequences of system calls.
-       Journal of Computer Security, 1998, 6(3):151-180.
-[11]   Chen Jianmin, Shu Hui, Xiong Xiaobing. Fuzzing test approach based on symbolic execution. Computer
-       Engineering, 2009, 35(21): 33-35. (in Chinese)
-[12]   Chen Kai, Feng Dengguo, Su Purui. Exploring multiple execution paths based on dynamic lazy analysis. Chinese
-       Journal of Computers, 2010, 33(3): 493-503. (in Chinese)
-[13]   Li Jiajing, Wang Tielei, Wei Tao, et al. A polynomial time path-sensitive taint analysis method. Chinese Journal
-       of Computers, 2009, 32(9): 1845-1855. (in Chinese)
-[14]   David Wagner, Drew Dean. Intrusion detection via static analysis. Proceedings of 2001 IEEE Symposium on
-       Security and Privacy, Oakland, California, USA, IEEE Computer Society Press, 2001: 156-168.
-[15]   Jonathon T. Giffin, Somesh Jha, Barton P. Miller. Detecting manipulated remote call streams. Proceedings of the
-       11th USENIX Security Symposium, Berkeley, California, USA, USENIX Association, 2002: 61-79.
-[16]   Jonathon T. Giffin, David Dagon, Somesh Jha, et al. Environment-sensitive intrusion detection. Proceedings of
-       8th International Symposium on Recent Advances in Intrusion Detection (RAID 2005), Seattle, Washington, USA,
-       LNCS3858, Springer-Verlag, 2005: 185-206.
-[17]   Henry Hanping Feng, Jonathon T. Giffin, Yong Huang, et al. Formalizing sensitivity in static analysis for
-       intrusion detection. Proceedings of 2004 IEEE Symposium on Security and Privacy. Oakland, California, USA,
-       IEEE Computer Society Press, 2004: 194-208.
-[18]   Rajeev Gopalakrishna, Eugene H. Spafford, Jan Vitek. Efficient intrusion detection using automaton inlining.
-       Proceedings of 2005 IEEE Symposium on Security and Privacy, Oakland, California, USA, IEEE Computer
-       Society Press, 2005: 18-31.
-[19]   Li Wen, Dai Yingxia, Lian Yifeng, et al. Context sensitive host-based IDS using hybrid automaton. Journal of
-       Software, 2009, 20(1): 138-151. (in Chinese)
-[20]   Yu Fajiang, Yu Yue. Static analysis-based behavior model building for trusted computing dynamic verification.
-       Wuhan University Journal of Natural Sciences, 2010, 15(3): 195-200.
-[21]   Wang Yuying, Chen Ping, Su Yang. An efficient algorithm of generating all elementary circuits in directed graph.
-       Computer Application and Software, 2009, 26(12): 27-29. (in Chinese)
-
\ No newline at end of file
diff --git a/res/paper/PaperID325-HESA.pdf b/res/paper/PaperID325-HESA.pdf
deleted file mode 100644
index ba3977b..0000000
--- a/res/paper/PaperID325-HESA.pdf
+++ /dev/null
@@ -1,493 +0,0 @@
-           HESA: The Construction and Evaluation of
-            Hierarchical Software Feature Repository
-                                Yue Yu, Huaimin Wang, Gang Yin, Xiang Li, Cheng Yang
-                             National Key Laboratory for Parallel and Distributed Processing
-                         School of Computer Science, National University of Defense Technology
-                                                   Changsha, China
-                     yuyue whu@foxmail.com, whm w@163.com, {jack.nudt, shockleylee}@gmail.com
-
-
-   Abstract—Nowadays, the demand for software resources on          the activities of software development.
-different granularity is becoming prominent in software en-            As a kind of attributes which capture and identify com-
-gineering ﬁeld. However, a large quantity of heterogeneous          monalities and differences in a software domain, software
-software resources have not been organized in a reasonable and
-efﬁcient way. Software features, a kind of important knowledge      feature [4] [5] is an ideal material to characterize the software
-for software reuse, are ideal materials to characterize software    resources. Constructing a feature repository of a ﬂexible
-resources. Our preliminary study shows that the effectiveness       structure can make a great contribution to multi-grained reuse.
-of feature-related tasks, such as software resource retrieval and      However, classic feature analysis techniques, such as Fea-
-feature location, will be greatly improved, if a multi-grained
-                                                                    ture Oriented Domain Analysis (FODA) [6] and Domain
-feature repository is available. In this paper, we construct a
-Hierarchical rEpository of Software feAture (HESA), in which        Analysis and Reuse Environment (DARE) [7], are heavily
-a novel hierarchical clustering approach is proposed. For a         relied on the experience of domain experts and plenty of
-given domain, we ﬁrst aggregate a large number of feature           market survey data. Hence, the feature analysis is a labor-
-descriptions from multiple online software repositories. Then we    intensive and error-prone process.
-cluster these descriptions into a ﬂexible hierarchy by mining
-their hidden semantic structures. Finally, we implement an online
-                                                                       In recent years, more and more stakeholders develop, main-
-search engine on HESA and conduct a user study to evaluate          tain and share their software products on the Internet. In order
-our approach quantitatively. The results show that HESA can         to promote their products to users, project managers write
-organize software features in a more reasonable way compared        some market-oriented summaries, release notes and feature
-to the classic and the state-of-the-art approaches.                 descriptions on the proﬁle pages via natural language. The
-   Keywords—Software reuse; Mining Software repository;
-                                                                    large number of online software proﬁles can be treated as a
-Feature-ontology; Clustering;
-                                                                    kind of repository containing a wealth of information about
-                                                                    domain-speciﬁc features. Although researchers propose several
-                      I. I NTRODUCTION
-                                                                    automatic methods to mine features from the web repository
-   Software reuse is widely recognized as an effective way to       [8] [9] [10], the problems have not completely be solved,
-increase the quality and productivity of software [1]. With the     speciﬁcally in organizing features as ﬂexible granularity.
-development of software industry, the degree of software reuse         In this paper, we are trying to address the above problems
-is deeper than previous years and the demand for resources on       by proposing a novel approach to construct a Hierarchical
-different granularity becomes more prominent. For example,          rEpository of Software feAture (HESA). First of all, we extract
-when developing a new large software system, we may reuse           a massive number of feature descriptions from online software
-some API calls from the third party to accomplish the core          proﬁles and mine their hidden semantic structure by proba-
-functions and the mature open source software as the basic          bilistic topic model. Then, we present an improved Agglom-
-framework. Additionally, some code fragments or components          erative Hierarchical Clustering (iAHC) algorithm, seamlessly
-can be reused to meet other additional demands. The reusable        integrated with the topic model, to build the feature-ontology
-resources are multi-grained, consisting of API calls (the ﬁnest     of HESA. Finally, we implement an online search engine1
-level of granularity), code fragments, components (higher than      for HESA to help retrieve features in a multi-grained manner,
-API calls) and software systems (much higher than others).          which can support multiple reuse requirements. By conducting
-   However, considering the large-scale, heterogeneous and          a user study, we demonstrate the effectiveness of our system
-multi-grained software resources, it is a great challenge for       with quantitative evaluations comparing to the classic and the
-stakeholders to retrieve the suitable one. With the evolution of    state-of-the-art approaches.
-open source ecosystems, more than 1.5 million open source              The rest of this paper is or organized as follows. Section
-software projects are now hosted in open source communities         II introduces the overview of our work. Section III describes
-[2]. Reusable resources [3] are manifold, including code bases,     how to construct HESA in detail. Experiments and analysis
-execution traces, historical code changes, mailing lists, bug       can be found in Section IV. Finally, we present some related
-databases and so on. All of these valuable resources have not
-been reorganized in a reasonable and efﬁcient way to assist in        1 http://inﬂux.trustie.net
-                                           Figure 1. Overview of the construction and use of HESA
-
-
-
-work in Section V and draw our conclusions in Section VI.              use the Extractor component to extract feature elements. Then,
-                                                                       after running preprocessing tasks, the Synthesizer component
-                  II. A PPROACH OVERVIEW
-                                                                       will automatically located these feature elements, into a uniﬁed
-   First of all, we give the deﬁnitions of some concepts used          category. Especially, the word “domain” will be replaced by
-in this paper.                                                         “category” for they are sharing the same meaning in the rest
-   Feature element: Feature element is a kind of raw descrip-          of this paper.
-tions which can indicate a functional characteristic or concept           The second module, the Feature-Topic Modeler, is respon-
-of the software product.                                               sible for mining the semantic structure hidden in feature
-   Feature: Feature is an identiﬁer of the cluster about feature       elements. We will merge the synonymic feature elements in
-elements, where the cluster is an intermediate output of               terms of their semantic structure in the next step.
-improved Agglomerative Hierarchical Clustering (iAHC).                    The last module, the FAFO (Flexible grAnularity Feature-
-   Feature-ontology: Feature-ontology is a kind of hierarchical        Ontology) Constructor, is a critical part of the construction
-structure induced from feature elements by iAHC.                       process. In this module, we present a novel algorithm iAHC to
-   HESA: The assembly of all feature-ontologies of the dif-            construct the feature-ontology and more details can be found
-ferent categories is the Hierarchical rEpository of Software           in Section III. The major functionalities of this module are
-feAture.                                                               listed as below:
-   The objective of this paper is to build a hierarchical structure       (1) The synonymic feature elements are merged based on
-of feature as a ﬂexible granularity. In the top layers, the            the semantic structure outputted by the Feature-Topic Modeler;
-features in coarse granularity may be mapped to the cor-                  (2) For each cluster, a signiﬁcant group of feature elements
-responding software resources such as mature applications,             is selected as the medoid used to generate feature;
-design patterns, and superclasses. In the bottom layers, the              (3) A feature-ontology is learned and features can be
-features can be mapped to some related code fragments, API             retrieved in terms of ﬂexible granularity.
-calls and subclasses.                                                     After all the raw data under our category are disposed, the
-   Before describing the speciﬁc details of the underlying             construction process of HESA is ﬁnished.
-algorithms, an architectural overview of approach will be pro-            The HESA can perfectly support the multi-grained resource
-vided as below. There are actually two processes concerning            reuse. For example, when a company plans to enter a new
-the application of our method, i.e., the construction process          domain such as Antivirus, the stakeholders want to know a
-and the use process of HESA by stakeholders. In this paper,            few general features about this domain, e.g. “Anti-rootkit”,
-we only focus on the construction process owing to space               “Heuristic scanning”, and “File backup”. Inputting require-
-limitations.                                                           ments and use the search engine of HESA, the matched
-   As depicted in Figure 1, the construction process consists          features will be returned. Based on the feature in coarse
-of three primary modules and the input is software proﬁles             granularity, they can ﬁnd some mutual software systems.
-data collected and updated continuously by a web crawler.              Furthermore, to know this ﬁeld more clearly and locate some
-The ﬁrst module is called the Extractor and Synthesizer. We            reusable code fragments or packages, some ﬁne granularity
-                (a) Bullet-point lists of features in Softpedia.com             (b) Bullet-point lists of features in Sourceforge.com
-
-
-
-
-                                                             (c) Release notes in Freecode.com
-
-                                               Figure 2. Examples of feature elements in the software pages
-
-
-
-features can be retrieved from HESA, e.g., “Automatic detec-                         Hybrid Semantic-level: The problem of hybrid semantic-
-tion of downloaded ﬁles and Lock Autorun.inf, virus cannot                     level is that different feature elements describe a common
-execute.”                                                                      theme in different semantic level, such as the following
-                                                                               descriptions:
-                  III. C ONSTRUCTION OF HESA                                      (1) “Email Scanner enhanced email protection”;
-                                                                                  (2) “Email scanning for Microsoft Outlook, Outlook Ex-
-A. Feature Elements in Software proﬁles                                        press, Mozilla Thunderbird, Windows Live Mail, Windows
-                                                                               Mail, and other POP3/IMAP mail clients, ensuring your email
-   The online software proﬁles contains a wealth of in-
-                                                                               is free of viruses and other threats”;
-formation about domain-speciﬁc features. In this paper, all
-                                                                                  (3) “Blocks spam mails, phishing attack mails, junk mails
-the feature elements are extracted from software proﬁles
-                                                                               and porn mails before they reach your inbox”;
-in Softpedia.com2 , Freecode.com3 and Sourceforge.com4 . As
-                                                                                  The ﬁrst sentence describes the theme of email protection in
-depicted in Figure 2(a), there is a bullet-point list of some
-                                                                               a general level. However, the last two sentences present more
-key features about the software resource in Softpedia.com and
-                                                                               details including what type of mail clients would be supported
-Sourceforge.com. Another type of raw descriptions being used
-                                                                               and what kind of message would be ﬁltered.
-is the Release Notes in Freecode.com. A product has many
-                                                                                  According to sampling statistics of our datasets, there are
-release versions about bug ﬁxes, performance optimizations
-                                                                               25.7% feature elements in a relative high semantic-level,
-and feature enhancements. As depicted in Figure 2(b), we
-                                                                               33.9% feature elements in a relative speciﬁc semantic-level,
-extracted feature elements from the release notes about feature
-                                                                               and 40.4% in the intermediate-level.
-enhancement, which contain some related tags or key words,
-                                                                                  On one hand, the massive number of feature elements in
-such as “add”, “support for” and “new feature”.
-                                                                               different semantic-level are good materials for the construction
-   To allocate different feature elements, which extracted from
-                                                                               of ﬂexible granularity ontology. On the other hand, it is a great
-three different websites, into a uniﬁed domain category, the
-                                                                               challenge for the traditional methods to cluster and reorganize
-two categories of Softpedia.com and Sourceforge.com was
-                                                                               feature elements.
-combined into a new one. Then, all software and their feature
-                                                                                     Synonymic Feature Element: The problem of synonymic
-elements are automatically classiﬁed into the uniﬁed category
-                                                                               feature element happens when two features are used to de-
-according to softwares tags or descriptions using the method
-                                                                               scribe some common or very similar functional attributes.
-of paper [2].
-                                                                               Some feature elements are almost the same with each other,
-                                                                               such as the four feature elements below:
-B. Feature Element Analysis                                                       (1) “Kills the core of AdPower and not only symptoms”;
-   Because different people describe the functions in terms of                    (2) “Kills the core of BANCOS.D and not only symptoms”;
-their personal understanding in an open environment, feature                      (3) “Kills the core of Dyfuca and not only symptoms”;
-elements are unstructured and disordered. To illustrate these                     (4) “Kills the core of eBot and not only symptoms”;
-problem clearly, the feature elements in Antivirus category are                   The difference between these feature elements is the name
-used as examples in this paper.                                                of the malicious code, such as “AdPower”, “BANCOS.D” and
-                                                                               “Dyfuca”. However, all of them present a common functional
- 2 http://www.softpedia.com                                                    attribute about the ability of killing various popular viruses.
- 3 http://freecode.com                                                            Another typical problem is that each pair only shares few
- 4 http://sourceforge.net                                                      core words, such as the following:
-    (1) “Ability to update that does not require downloading
-full package”;
-    (2) “Incremental database updates and often to include
-information about latest threats”;
-    (3) “Incremental updating system minimizes the size of
-regular update ﬁles”;
-    These three feature elements present the common attribute
-about incremental updating, but only the word “update” is
-shared by the two sentences. According to the statistics,
-there are 33.7% of synonymic feature elements in Antivirus                                 Figure 3. Feature elements mapping to topics
-category, 28.9% in File-manger category, and 41.6% in Audio-
-Player category. Thus, feature elements should be merged
-together by an effective method.                                                    Topic Modeling Technique: A topic model provides
-                                                                              a means to automatically analysis the semantic structures
-       Latent Semantic Structures: According to our observa-
-                                                                              within unstructured and unlabeled documents. In this paper,
-tion, one feature element may relate to several speciﬁc topics.
-                                                                              we choose Latent Dirichlet Allocation (LDA) [11] because it
-Take ﬁve feature elements of Mozilla Firefox5 and three topics
-                                                                              has been shown to be more effective for a variety of software
-of “Browse with Security”, “Protect your Privacy” and “Easy
-                                                                              engineering purposes [12] [13] than other topic models like
-to Use” as an example. Figure 3 illustrates the relationship
-                                                                              LSI. In LDA, each word wi in a document d is generated
-among these feature elements and topics. Each feature element
-                                                                              by sampling a topic z from document-topic distribution, and
-connects with one or two topics and this connection can be
-                                                                              then sampling a word from topic-word distribution. More
-exposed by the key words or phrases. For example, the feature
-                                                                              formally, a latent topic z = j is modeled as an unlabeled
-element “Control the level of scrutiny you’d like Firefox to give
-                                                                              topic-word distribution φ(j) = P (w|z = j), which was drawn
-a site with a variety of customized settings” is related to the
-                                                                              from a dirichlet prior distribution Dirichlet(β). The number
-topics of “Browse with Security” and “Protect your Privacy”.
-                                                                              of topics K is speciﬁed beforehand to adjust the granularity.
-The phrases “Control the level of ” and “scrutiny” reﬂects that
-                                                                              Each document d is a mixture of topics θ(d) = P (z) with
-it is possible to associate with the topic of security, and “you’d
-                                                                              a dirichlet prior distribution Dirichlet(α). The generative
-like” and “customized settings” reﬂects the relevancy with the
-                                                                              process of each word in d is an essentially draw from the joint
-topic about user experience. The relationship between topic                                              K
-                                                                              distribution: P (wi ) = i=1 P (wi |zi = j)P (zi = j). Given
-and feature element is a kind of latent semantic structures
-                                                                              the observed documents, Gibbs Sampling algorithm [14] is
-which is useful for the clustering of feature element and the
-                                                                              widely used for posterior inference. Finally, the word-topic φ
-construction of feature-ontology.
-                                                                              and topic-document θ distribution can be approximated.
-                                                                                 However, document is a generalized concept which can
-C. Feature-Topic Model
-                                                                              be any textual resource. In this paper, a feature element
-      Problem Formalization: In a speciﬁc category, such as                   fi can be viewed as a document which is preprocessed by
-Antivirus, all the feature elements in the corpus can be repre-               removing commonly occurring words and then by stemming
-sented as Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes         the remaining words to their root form. According to category,
-the ith feature elements in the corpus. Assuming that K                       we apply LDA to process the documents using the MALLET
-latent topics Tk = {t1 , t2 , . . . , tj , . . . , tk } are implicit in the   tool [15] which is an implementation of the Gibbs sampling
-feature elements, where tj denotes the jth topic. Although                    algorithm. Then, the topic-feature distribution Vm can be
-a feature element can be bound up with several topics, it                     trained, which is the same as θ.
-may put more emphasis on some topics than the others. The
-topic degree within feature element fi can be represented as                  D. iAHC : improved Agglomerative Hierarchical Clustering
-a K-dimensional vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ),        To support multi-grained reuse environment, the semantic
-where pi,j is a topic weight describing the extent to which                   similar feature elements should be merged and reorganized
-the topic tj appears in feature element fi . When pi,j = 0,                   as a ﬂexible hierarchical structure deﬁned as feature-ontology.
-fi is irrelevant to tj . Thus, the υi , i ∈ [1, m], represented by            In this paper, we present an iAHC algorithm (Algorithm 1)
-Vm , can be used to indicate the semantic structure implied                   integrated with the LDA.
-in feature elements. If the Vm can be obtained, the thematic                     Initially, every feature elements is a distinct cluster. Line 4-
-similarity measure would be induced for each pair of feature                  7 ﬁnds the closest two clusters ci and cj in the current cluster
-elements and the synonymic feature elements would be merged                   set M , and merge them into a new cluster c and update M .
-together. Because topic models answer what themes or topics                   The proximity used to measure the distance between every
-a document relates to and quantify how strong such relations                  two clusters, deﬁned as below:
-are, it is a effective way to learn Vm .
-                                                                                                                f i∈ci   similarity(f i, f j)
-                                                                                                                f j∈cj
-  5 http://www.mozilla.org/en-US/ﬁrefox/security                                    proximity(ci , cj ) =                                       (1)
-                                                                                                                         |ci | × |cj |
-Algorithm 1 improved Agglomerative Hierarchical Clustering        Where xmax is the maximum value of υ i , and k is the  ˆ
-Require:                                                          frequency when υ i not equal to zero, and pir is any value
-    Fm = {f1 , f2 , . . . , fi , . . . , fm };                    that not equals to zero in υ i .
-    feature-topic distribution Vm ;                                  Observation 1 The most probable topic reﬂects the most
-Ensure:                                                           prominent theme that the document (feature element) is about.
-    The construction of feature-ongtology;                           Observation 2 The more widely and evenly distributed its
- 1: M ← D                                                         topics are, the higher-level the document (feature element) is.
- 2: f eatureSet ← ∅                                                  In brief, Equation 3 can ensure the feature element in the
- 3: repeat                                                        coarsest granularity have the highest score degreet ∈ (0, 2],
- 4:     ci , cj = ﬁndTwoClosestClusters(M )                       where xmax ∈ (0, 1] can reﬂect the emphasis topic and the
- 5:    merge ci and cj as c                                       formula √ k 1                  ∈ (0, 1] can reﬂect the semantic
-                                                                                ˆ             2
- 6:    delete ci and cj from M                                             e    r=1 (xmax −wir )
-                                                                  generality.
- 7:    add c to M
-                                                                     The scorem is used to measure the medoid calculated as
- 8:    centroid = calculateCentroid(c)
-                                                                  the Equation of line 12, where κ and λ is the empirical
- 9:    for ci ∈ c do
-                                                                  coefﬁcients.
-10:       values = Similarity(ci , centroid)
-11:       degreet = calculateTopicDegree(ci )                        Finally, the medoid with the highest scorem would be
-12:       scorem = κ × values + λ × degreet                       selected. Measuring the similarity for the each pair of elements
-13:       add scorem to M edoidScore                              in medoidC (line 15), the f eatureC (line 17) can be formed
-14:    end for                                                    by merging distinguished feature elements whose similarity
-15:    medoidC = ﬁndMaximumScores(M edoidScore)                   score below a threshold (set to 0.38). Each iteration in the
-16:    scoreF = Similarity(medoidC )                              repeat clause saves the M and f eatureC to HESA. On the
-17:    f eatureC = mergeMedoid(medoidC , scoreF )                 termination of the algorithm, a feature-ontology (Figure 4) for
-18:    saveFeaturetoHESA(M, f eatureC )                           the category is constructed.
-19: until |M | = 1
-                                                                  E. The Retrieval Method of HESA
-                                                                     Figure 4 depicts an example of the construction process
-                                                                  and result with 6 data nodes using the iAHC algorithm. Each
-Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the
-                                                                  cluster consists of several nodes and the top node (the red color
-divergence between any two data point. Based on LDA, the
-                                                                  one in Figure 4) is the feature of the cluster. The concept layer
-divergence can be understood as the thematic space coordinate
-                                                                  is deﬁned as below:
-distance between the two feature elements. There are several
-ways to calculate the divergence between any two feature-            (1) The layer 0 consists of the bottom nodes which are the
-topic distributions, such as Jenson-Shannon divergence, cosine    original feature elements;
-similarity and KL divergence. Taking cosine similarity as an         (2) The layer i consists of the feature node of cluster i and
-example, the Equation is shown as below:                          all nodes in layer i − 1 except those being merged in cluster
-                                                                  i.
-                                          υi · υj                    For example, the layer 3 consists of the features of cluster
-              similarity(fi , fj ) =
-                                       ||υ i || ||υ j ||          3, cluster 2 and cluster 1, because all the nodes in different
-                             k                              (2)   clusters.
-                             r=1    pir × pjr
-                 =                                                   The most important advantage of the feature-ontology is
-                         k                   k
-                         r=1   p2 ×
-                                ir           r=1   p2
-                                                    jr            that the nodes in a layer are the most representative features
-                                                                  under a given similarity threshold. If the stakeholder needs a
-Where k is the topic number and p is the probability value of     generalized feature of the category, the feature in the top layer
-υ.                                                                can be selected. Assuming that the category of Figure 4 can be
-   Line 8-14 pick out a set of feature elements from the new      covered by three features, the feature nodes of cluster 3, cluster
-cluster, deﬁned as medoid, which can be used to represent the     2 and cluster 1 would be retrieved step by step. From top
-theme of c. Two metrics, similarity value and topic degree,       down, the semantic granularity is ﬁner and ﬁner accompanying
-are used to determine the medoid. Firstly, to get the values ,    with the increasing number of features, which can satisfy the
-we calculate the similarity between ci ∈ c and the centroid       requirements of multi-grained reuse environments.
-of c through Equation 2, where the vector υ c of centroid is
-                                               ¯                     Algorithm 2 is a ﬂexible method to retrieve features in
-                       |c|
-                            υ
-calculated by υ c = i=1 i . Then, the Equation 3 is used to
-                ¯       |c|                                       terms of quantity, which demonstrates the advantages of the
-calculate the degreet based on the following two important        feature-ontology. The input is the quantity of feature you need
-observations of feature-topic distribution Vm in our datasets.    for a speciﬁc domain. Line 1-6 show the process of ﬁnding
-                                                                  the suitable layer. Then, all the nodes in the same layer are
-                                            1
-           degreet = xmax +            ˆ
-                                                            (3)   selected out in the repeat clause (line 9-20). An online search
-                                       k               2
-                                       r=1 (xmax −pir )           engine has been implemented based on it in this paper.
-                                e             ˆ
-                                              k
-                                            Figure 4. An example of the feature-ontology
-
-
-
-               IV. E MPIRICAL E VALUATION                                                     Table I
-                                                                                PREPROCESSED EXPERIMENT DATASETS
-   In this section, we present our dataset and experiment
-setting, research questions and answers, and describe some                 Category        #Softpedia   #Sourceforge   #Total   #Topic
-threats to validity.                                                       Antivirus         2919          1105        4024      50
-                                                                         Audio-Player        3714          1283        4997      60
-A. Dataset and Experimental Setting                                      File-Manager        2270          970         3240      40
-   Dataset: We have collected 187,711, 432,004 and 45,021
-projects proﬁles from Softpedia.com, Sourceforge.com and
-Freecode.com respectively. Compared with that of the other            RQ1 How the resultant feature-ontology looks like?
-two communities, the quantity of projects from Freecode.com           RQ2 Does the iAHC algorithm achieve better clustering
-is relatively small. Thus, we just adopt projects in Softpe-       results than the simple but classical method and the state-of-
-dia.com and Sourceforge.com. The feature elements have been        the-art approach?
-classiﬁed into 385 categories and we randomly choose the              RQ3 How accurate is the feature-ontology? Is the structure
-data of 3 unique categories to evaluate our method including       reasonable?
-Antivirus, Audio-Player and File-manger. Furthermore, the
-                                                                   C. Cross-Validation Design of the User Study
-feature elements are preprocessed by removing commonly
-occurring words and then by stemming the remaining words              The cross-validation limits potential threats to validity such
-to their root form. To ensure the quality of data, we omit the     as fatigue, bias towards tasks, and bias due to unrelated factor.
-preprocessed feature elements with less than 6 words. Table 1      We randomly divided the 45 students from computer school
-presents the details about our dataset.                            of NUDT into three groups to evaluate RQ2 and RQ3. The 2
-   Parameter setting: As shown in Table 1, for LDA, the            questions and the 3 categories of dataset can be composed to
-number of topics K was empirically set as different value, and     6 tasks. Each group randomly picks up 2 of them and ﬁnishes
-the hyper-parameters α and β were set with α = 50/K and            in one day, and then we summarize the result.
-β = 0.01 respectively, and the iteration of Gibbs Sampling was           RQ1: Feature-ontology: Figure 4 shows an example
-set as 1000. In addition, the coefﬁcients κ and λ of Algorithm     feature-ontology of the Antivirus category which is a very
-1 were set with κ = 0.7 and λ = 0.3.                               reasonable structure. The features (red color) in different layer
-                                                                   can be mapped to resources on different granularities. In
-B. Research Questions                                              addition, the feature is relatively representative for each cluster.
-  To demonstrate the effectiveness of the approach in this               RQ2: Clustering Results: We choose the K-Medoids
-paper, we are interested in the following research questions:      (tf-idf), a classic and widely used clustering algorithm, and
-Algorithm 2 a ﬂexible granularity retrieval method
-Require:
-    kf the quantity of feature you need;
-    T a hierarchical structure consisting of n nodes;
-Ensure:
-    f eatureSet a set of features;
- 1: layer ← n − k
- 2: if layer = 0 then
- 3:    return the nodes of T [0]
- 4: end if                                                                                  (a) the average value
- 5: i ← 0
- 6: f eatureSet[i] ← the node of T [layer]
- 7: layer ← layer − 1
- 8: i ← i + 1
- 9: repeat
-10:    if T [layer] is a subtype of f eatureSet[i] then
-11:       layer ← layer − 1
-12:    else
-13:       f eatureSet[i] ← the node of T [layer]
-14:       i←i+1
-15:       layer ← layer − 1
-16:       if layer = 0 then                                                               (b) the standard deviation
-17:          return the rest nodes of T
-                                                                             Figure 5. The clustering results for each category
-18:       end if
-19:    end if
-                                                                                          Table II
-20: until i = kf                                                         EVALUATION OF FEATURE-ONTOLOGY QUALITY
-21: return f eatureSet
-                                                                             Category      Score-3    Score-2       Score-1   Likert
-                                                                             Antivirus     33.3%      50.0%         16.7%     2.17
-the Incremental Diffusive Clustering (IDC), the state-of-the-art           Audio-Player    39.1%      46.3%         14.6%     2.25
-                                                                           File-Manager    32.7%      52.4%         14.9%     2.18
-technique proposed in paper [8], as the baseline. Especially,                 Average      35.03%     49.57%        15.4%     2.20
-the IDC use the feature descriptions from Softpedia.com which
-is the same as our dataset. We also use the modiﬁed version
-of Cans metric [8] to compute the ideal number of clusters.        out by our approach is reasonably meaningful.
-Then, we retrieve the corresponding number of clusters from
-HESA for comparison. Precision is a percent of the reasonable      D. Threats to validity
-feature elements in a cluster. Figure 5 shows the average value       First, the participants manually judge the clustering re-
-and standard deviation of the judgments given by different         sults and their ratings could be inﬂuenced by fatigue, prior
-groups. We can see that our approach achieves the highest          knowledge and the other external factors. These threats were
-precision in all three categories and relatively low deviations.   minimized by randomly distributing participants to the various
-The precisions and deviations are comparatively stable across      groups and dividing the tasks into multiple parts. Second, due
-different categories, which shows the probability that our         to our limited datasets, parameters used in our approach, the
-approach is more generalizable in different domains. We plan       evaluation is not comprehensive enough.
-to conduct more experiments to study this issue in the future.        In the feature, with the help of our online search engine,
-     RQ3: Accuracy of the feature-ontology: According to           we plan to adopt the idea of crowdsourcing and upload a lot
-the three categories, participants randomly choose 15 clusters     of tasks about use study on the Internet with a low price, such
-in different layers from HESA using the online search engine       as 5 cent. Therefore, a comprehensive and reliable evaluation
-respectively. Each participant is randomly assigned 3 layers       result can be obtained.
-and asked to provide a 3-point Likert score for each cluster
-to indicate whether they agree if the feature is the most                                 V. R ELATED W ORK
-representative of all terms. Score 3 means very reasonable,           Recently, mining software repository has been brought into
-Score 2 means reasonable but also have better one, Score 1         focus and many outstanding studies have emerged that use
-means unreasonable.                                                this data to support various aspects of software development
-   Table 2 shows that 35.03% features are reasonable, 49.57%       [16]. However, fewer previous works have been done for
-partially reasonable and only 15.40% unreasonable. The mean        mining software feature and especially construction of feature-
-of Likert score is 2.20, which means that the feature selected     ontology (deﬁned in this paper), to the best of our knowledge.
-In this section, we review some previous works about feature                           VII. ACKNOWLEDGEMENT
-analysis and ontology learning.                                      This research is supported by the National High Technology
-   In feature analysis area, most approaches involve either the    Research and Development Program of China (Grant No.
-manual or automated extraction of feature related descriptions     2012AA011201) and the Postgraduate Innovation Fund of
-from software engineering requirements and then use the            University of Defense Technology (Grant No.S120602).
-clustering algorithm to identify associations and common
-domain entities [7] [17] [18]. Niu et al. [19] propose an on-                                   R EFERENCES
-demand clustering frame-work that provided semi-automatic           [1] W. B. Frakes and K. Kang, “Software reuse research: Status and
-support for analyzing functional requirements in a product line.        future,” IEEE Trans. Softw. Eng., vol. 31, no. 7, pp. 529–536, Jul.
-                                                                        2005. [Online]. Available: http://dx.doi.org/10.1109/TSE.2005.85
-Mathieu Acher et al. [9] introduced a semi-automated method         [2] T. Wang, G. Yin, X. Li, and H. Wang, “Labeled topic detection of open
-for easing the transition from product descriptions expressed           source software from mining mass textual project proﬁles.” in Software
-in a tabular format to feature models. A decision support               Mining, 2012, pp. 17–24.
-                                                                    [3] A. E. Hassan and T. Xie, “Mining software engineering data.” in ICSE
-platform is proposed in paper [20] to build the feature model           (2), 2010, pp. 503–504.
-by employing natural language processing techniques, external       [4] S. Apel and C. Kastner, “An overview of feature-oriented software
-ontology (such as WordNet), and MediaWiki system. However,              development.” 2009, pp. 49–84.
-                                                                    [5] K. Lee, K. C. Kang, and J. Lee, “Concepts and guidelines of feature
-the quantity of the existing documents is so limited that the           modeling for product line software engineering.” in ICSR, 2002, pp.
-brilliance of data mining techniques cannot be fully exploited.         62–77.
-To address this limitation, paper [8] and [10] proposed the         [6] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and A.S.Peterson,
-                                                                        “Feature-oriented domain analysis (foda) feasibility study. technical
-Incremental Diffusive Clustering to discover features from a            report.” 1990.
-large number of software proﬁles in Softpedia.com. Based            [7] W. B. Frakes, R. P. Dłaz, and C. J. Fox, “Dare: Domain analysis and
-on the features, a recommendations system is build by using             reuse environment.” 1998, pp. 125–141.
-                                                                    [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang, B. Mobasher,
-association rule mining and the k-Nearest-Neighbor machine              C. Castro-Herrera, and M. Mirakhorli, “On-demand feature recommen-
-learning strategy. Compared with these studies, the clustering          dations derived from mining public product descriptions.” in ICSE, 2011,
-algorithm presented in this paper is more effective by mining           pp. 181–190.
-                                                                    [9] M. Acher, A. Cleve, G. Perrouin, P. Heymans, C. Vanbeneden, P. Collet,
-the semantic structures from feature elements and especially            and P. Lahire, “On extracting feature models from product descriptions.”
-focus on the construction of feature-ontology.                          in VaMoS, 2012, pp. 45–54.
-   Ontology learning (also called ontology extraction) from        [10] C. McMillan, N. Hariri, D. Poshyvanyk, J. Cleland-Huang, and
-                                                                        B. Mobasher, “Recommending source code for use in rapid software
-text aims at extracting ontological concepts and relation from          prototypes.” in ICSE, 2012, pp. 848–858.
-plain text or Web pages. Paper [21] developed an ontology          [11] D. Blei, A. Ng, and M. Jordan, “Latent Dirichlet Allocation,” Journal
-learning framework using hierarchical cluster and associa-              of Machine Learning Research, vol. 3, pp. 993–1022, 2003. [Online].
-                                                                        Available: http://www.cs.princeton.edu/ blei/lda-c/
-tion rule for ontology extraction, merging, and management.        [12] K. Tian, M. Revelle, and D. Poshyvanyk, “Using latent dirichlet al-
-Several researches have attempted to induce an ontology-                location for automatic categorization of software.” in MSR, 2009, pp.
-like taxonomy from tags. Jie Tang et al. [22] proposed a                163–166.
-                                                                   [13] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor, “Software traceabil-
-generative probabilistic model to mine the semantic structure           ity with topic modeling.” in ICSE (1), 2010, pp. 95–104.
-between tags and their annotated documents, and then create        [14] T. Grifﬁths, “Gibbs sampling in the generative model of Latent
-an ontology based on it. Xiang Li et al. [23] enhance an                Dirichlet Allocation,” Stanford University, Tech. Rep., 2002. [Online].
-                                                                        Available: www-psych.stanford.edu/ gruffydd/cogsci02/lda.ps
-agglomerative hierarchical clustering framework by integrating     [15] A. K. McCallum, “Mallet: A machine learning for language toolkit,”
-it with a topic model to capture thematic correlations among            2002, http://mallet.cs.umass.edu.
-tags. Based on tens of thousands of software projects and their    [16] A. E. Hassan, “The road ahead for mining software repositories.” 2008.
-                                                                   [17] S. Park, M. Kim, and V. Sugumaran, “A scenario, goal and feature-
-tags, Shaowei Wang et al. [24] propose a similarity metric to           oriented domain analysis approach for developing software product
-infer semantically related terms, and build a taxonomy that             lines.” 2004, pp. 296–308.
-could further describe the relationships among these terms. In     [18] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid, P. Sawyer, P. Rayson,
-                                                                        C. Pohl, and A. Rummler, “An exploratory study of information retrieval
-this paper, to support multi-grained reuse, emphases of the             techniques in domain analysis.” in SPLC, 2008, pp. 67–76.
-feature-ontologys construction is on the measure of similarity     [19] N. Niu and S. M. Easterbrook, “On-demand cluster analysis for product
-and granularity instead of generality.                                  line functional requirements.” in SPLC, 2008, pp. 87–96.
-                                                                   [20] E. Bagheri, F. Ensan, and D. Gasevic, “Decision support for the software
-                                                                        product line domain engineering lifecycle.” 2012, pp. 335–377.
-          VI. C ONCLUSION AND F UTURE W ORK                        [21] A. Maedche and S. Staab, “Learning ontologies for the semantic web.”
-   The continuing growth of open source ecosystems creates              in SemWeb, 2001.
-                                                                   [22] J. Tang, H. fung Leung, Q. Luo, D. Chen, and J. Gong, “Towards
-ongoing opportunities for mining reusable knowledge. In this            ontology learning from folksonomies.” in IJCAI, 2009, pp. 2089–2094.
-paper, we have explored the idea of mining large scale reposi-     [23] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu, and D. Tang,
-tories and constructed the HESA to support software reuse. In           “Inducing taxonomy from tags: An agglomerative hierarchical clustering
-                                                                        framework,” in Advanced Data Mining and Applications. Springer
-the future, we plan to improve the performance of our method            Berlin Heidelberg, 2012, vol. 7713, pp. 64–77.
-and aggregate richer features from software repositories. In       [24] S. Wang, D. Lo, and L. Jiang, “Inferring semantically related software
-addition, we will design several representative applications            terms and their taxonomy by leveraging collaborative tagging.” in ICSM,
-                                                                        2012, pp. 604–607.
-based on HESA, such as software resource recommendation
-system, to support the reuse of multi-grained resources.
-
\ No newline at end of file
diff --git a/res/paper/apsec2014.pdf b/res/paper/apsec2014.pdf
deleted file mode 100644
index eb96bad..0000000
--- a/res/paper/apsec2014.pdf
+++ /dev/null
@@ -1,571 +0,0 @@
- Who Should Review This Pull-Request: Reviewer
- Recommendation to Expedite Crowd Collaboration
-                          Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Tao Wang∗ , Charles X. Ling‡
-                                   ∗ National
-                                         Laboratory for Parallel and Distributed Processing,
-                 College of Computer, National University of Defense Technology, Changsha, 410073, China
-         ‡ Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
-
-                          {yuyue,hmwang,yingang,taowang2005}@nudt.edu.cn, cling@csd.uwo.ca
-
-
-   Abstract—Github facilitates the pull-request mechanism as an          As a mushrooming number of developers use the pull-
-outstanding social coding paradigm by integrating with social me-     request mechanism to contribute their ideas and suggestions in
-dia. The review process of pull-requests is a typical crowdsourcing   GitHub, the efﬁciency of software evolution and maintenance
-job which needs to solicit opinions of the community. Recom-
-mending appropriate reviewers can reduce the time between the         is highly related to the crowd-based review process. However,
-submission of a pull-request and the actual review of it. In this     the discussion among reviewers is time-consuming. Some
-paper, we ﬁrstly extend the traditional Machine Learning (ML)         relevant reviewers may not notice the new pull-request in
-based approach of bug triaging to reviewer recommendation.            time. Recommending reviewer will make the review process
-Furthermore, we analyze social relations between contributors         more effective, because it can reduce the time between the
-and reviewers, and propose a novel approach to recommend
-highly relevant reviewers by mining comment networks (CN) of          submission of a pull-request and the actual review of it.
-given projects. Finally, we demonstrate the effectiveness of these       A pull-request contains a title and description summarized
-two approaches with quantitative evaluations. The results show        its contributions of bug ﬁxes or feature enhancements, so it
-that CN-based approach achieves a signiﬁcant improvement over         is similar to a bug report in bug tracking systems. To the
-the ML-based approach, and on average it reaches a precision of       best of our knowledge, there is very few studies of reviewer
-78% and 67% for top-1 and top-2 recommendation respectively,
-and a recall of 77% for top-10 recommendation.                        recommendation for pull-requests. The most similar researches
-   Keywords—Pull-request, Reviewer Recommendation, Com-               [7]–[12] are the approaches for recommending developers with
-ment Network, Social Coding                                           the right implementation expertise to ﬁx incoming bugs. For
-                                                                      a newly received bug report, these approaches ﬁrstly ﬁnd
-                       I. I NTRODUCTION                               out some similar historical reports or source code ﬁles by
-   The pull-based software development model [1], compared            measuring text similarity. Then, the expertise of a developer
-to traditional methods such as email-based patching [2] [3],          can be learned based on the bug-ﬁxing history, source revision
-makes developers contribute to software projects more ﬂexibly         commits or code authorship. If we only focus on the text
-and efﬁciently. In GitHub, the pull-request mechanism is              of pull-requests, these approaches can be extended to assign
-upgraded to a unique social coding paradigm [4] by integrating        pull-requests to appropriate developers. However, the social
-multiple social media involving follow, watch, fork and issue         relations between pull-request contributors and reviewers are
-tracker. The socialized pull-request model is pushing software        neglected. Compared to bug ﬁxing, the review process of pull-
-evolution and maintenance into crowd-based development [5].           request is a social activity depending on the discussions among
-   A typical contribution process [6] in GitHub involves fol-         reviewers in GitHub. Thus, social relation is one of key factors
-lowing steps. First of all, a contributor could ﬁnd an attractive     of reviewer recommendation.
-project by following some well-known developers and watch-               In this paper, we ﬁrstly implement the Machine Learning
-ing their projects. Secondly, by forking an interesting one,          (ML) based approach of Anvik et al. [7], which is one of
-the contributor implements a new feature or ﬁxes some bugs            the most representative work of bug triaging. Furthermore,
-based on his cloned repository. When his work is ﬁnished,             we analyze social relations among reviewers and contributors,
-the contributor sends the patches from the forked repository          and propose a novel approach of reviewer recommendation.
-to its source by a pull-request. Then, all developers in the          Central to our approach is the use of a novel type of social
-community have the chance to review that pull-request in the          network called Comment Network (CN), which can directly
-issue tracker. They can freely discuss whether the project needs      reﬂect common interests among developers. Finally, we con-
-that feature, whether the code style meets the standard or            duct an empirical study on 10 projects which have received
-how to further improve the code quality. Next, in the light           over 1000 pull-requests in GitHub. As there is no previous
-of reviewers’ suggestions, the contributor would update his           work of reviewer recommendation for pull-requests, we design
-pull-request by attaching new commits, and then reviewers             a simple and effective method as a comparison baseline in
-discuss that pull-request again. Finally, a responsible manager       experiments. The quantitative evaluations show that our CN-
-of the core team takes all the opinions of reviewers into             based approach achieves signiﬁcant improvements over the
-consideration, and then merges or rejects that pull-request.          baseline and ML-based method.
-                                     Figure 1. An example of discussion among reviewers in a pull-request
-   The remainder of this paper is structured as follows. Section        can see that a growing number of developers contribute to
-II conducts an empirical study of pull-request and depicts a            open source using the pull-request mechanism.
-motivating example for recommending reviewers to incoming                                                80000
-pull-requests. Section III present how to assign a pull-request
-                                                                                                         70000
-to reviewers using ML technique, and Section IV propose
-our CN-based recommendation approach. Experiments and                                                    60000
-                                                                               number of pull-requests
-
-
-
-
-analysis can be found in Section V. Finally, we present related                                          50000
-work in Section VI and draw our conclusions in Section VII.
-                                                                                                         40000
-           II. E MPIRICAL S TUDY OF P ULL - REQUEST                                                      30000
-  In this section, we ﬁrstly investigate the popularity of pull-                                         20000
-request model in GitHub. Then, a typical process of discussion
-among reviewers is introduced with an example.                                                           10000
-
-                                                                                                             0
-                                                                                                                2             1   2              1  2             1    2
-A. Popularity of Pull-request                                                                                1-0 1-05 1-08 1-1 2-0 2-05 2-08 2-1 3-0 3-05 3-08 3-1 4-0
-                                                                                                          201 201 201 201 201 201 201 201 201 201 201 201 201
-   Gousios et al. [1] has illustrated the popularity of pull-                                                                         time (month)
-
-based development model based on the comparison of usage                                                         Figure 2. The growth of Pull-request quantity
-between pull-request and shared repository in GitHub. They              B. Discussion among Reviewers
-draw a conclusion that pull-request is a signiﬁcant mechanism
-for distribute software development, even though only 14% of               When a new pull-request arrives, the decision-making is
-repositories are using it in GitHub until February 2013.                a crowdsourcing process which depends on the discussion
-   In the current, many competitive projects are growing fast           among reviewers. Taking a real pull-request of Ruby on Rails
-supported by pull-request such as Ruby on Rails1 which has              as an example, as shown in Figure 1, a core developer called
-received more than 10000 pull-requests. Therefore, we further           rafaelfranca is the ﬁrst reviewer to discuss this pull-request.
-investigate the usage of pull-request model among projects              As he thought that javan’s work would be relevant to this pull-
-which receive at least 100 pull-requests. There are 3587                request, he mentioned (@) javan to join the discussion. At the
-projects (exclude forked repositories) are extracted from the           second post, we see that javan indeed presented his opinion.
-latest database of GHTorrent [13]. These projects cover 53              Meanwhile, other users participated in the discussion and
-different program languages, but the distribution of the number         made some important suggestions as well. Later, the author
-of projects is highly skewed. Top-5 program languages contain           updated the pull-request by appending a new commit taking
-67% of projects (JavaScript 678, Ruby 475, Python 460, Java             into account the above suggestions, and then he mentioned
-424 and PHP 362). From June 2011 to March 2014, the                     the two key reviewers for acknowledgement. Finally, the pull-
-absolute number of new pull-requests increased dramatically             request was merged into the Ruby on Rails’ master branch.
-reaching the peak of 76673 per month (Figure 2). Thus, we                  As the example depicted above, apart from javan who
-                                                                        is informed by rafaelfranca, other three reviewers join the
-  1 https://github.com/rails/rails                                      discussion spontaneously. Because all the comments affect
-the decision-making of that pull-request, if they do not catch       generated from top-1 to top-k according to the probability
-that pull-request timely, the time of review process would be        distribution that the ML classiﬁers predicted on the labels
-longer. Beside, except for @mentioning, project managers can         using the one-against-all strategy. When the probability values
-use a label to assign a pull-request to someone. However, only       are equal, we rank the developers in terms of the number
-0.89% of pull-requests have been set that label in our dataset.      of pull-requests’ comments that they had submitted to the
-   Thus, if appropriate reviewers are automatically recom-           given project. In this paper, we choose SVM as our basis
-mended when a new pull-request is submitted, its review              classiﬁer because it has been proved to be a superior classiﬁer
-process would be greatly accelerated. It is worth mentioning         in developers recommendation [7], [12].
-that this novel application can be seamlessly integrated with
-                                                                         IV. S OCIAL N ETWORK BASED R ECOMMENDATION
-the @mention tool to take its full advantage by @mentioning
-the potential reviewers automatically.                                  ML-based recommendation focuses on the text of pull-
-                                                                     requests. However, the preprocessed text of a pull-request
-   III. M ACHINE L EARNING BASED R ECOMMENDATION                     mainly consists of the names or identiﬁers of code ﬁles,
-   We aim to recommend highly relevant reviewers for pull-           functions and variables, so the corpus of a project is not very
-requests to improve the efﬁciency of social coding. The              large. When a reviewer has commented plenty of pull-requests,
-representative existing work of automated bug triaging are           his label covers most of terms in the corpus. The ML classiﬁers
-the approaches of mining bug repositories based on Machine           would biasedly assign almost all incoming pull-requests to
-Learning (ML) [7]–[9]. All these approaches start from the           him. Thus, the workload of this reviewer continues to increase.
-bug-text, such as title, description and source code. In the            By contrast, the basic intuition of social network based
-context of ML, the bug triaging problem can be represented as        recommendation is that the developers who share common
-text categorization (i.e., classiﬁcation of text documents into a    interests with a contributor are the appropriate reviewers of
-set of categories). The text documents are the bug-text and the      his incoming pull-requests. For reviewer recommendation, the
-categories into which bug reports are classiﬁed are the names        common interests among developers can be directly reﬂected
-of developers suitable to resolve the report. In this paper, we      by comment relations between contributors and reviewers
-treat pull-requests as text documents, and then utilize the ML-      in historical pull-requests. We propose a novel approach to
-based approach to predict top-k relevant reviewers.                  construct comment networks by mining historical comment
-                                                                     traces. Then, we predict highly relevant reviewers to incoming
-A. Vector Space Model of Pull-Request
-                                                                     pull-requests based on comment network analysis.
-   Each pull-request is characterized by its title and descrip-
-tion, and labeled with a set of names about developers who           A. Comment Network Construction
-had submitted at least one comment to it. Then, all stop words          For each project, the corresponding comment network is
-and non-alphabetic tokens are removed, and remaining words           constructed individually. In a given project, the structure of
-are stemmed. We use vector space model to represent each             comment relations between contributors and reviewers is a
-pull-request as a weighted vector. Each element in the vector        many-to-many model. As shown in Figure 3, there are many
-is a term, and the value stands for its importance for the           contributors have submitted pull-requests to Project P. A
-pull-request. For a given word, the more times it appear in          developer can be a contributor submitting several pull-requests,
-a pull-request, the more important it is for that pull-request.      and he could also be a reviewer in other contributors’ pull-
-On the contrary, the more pull-requests it appears in, the less      requests. A pull-request would be commented by several
-important it is for distinguishing these pull-requests. Term         reviewers more than once. For example, reviewer R1 had
-frequency-inverse document frequency (tf-idf) is utilized to         presented 5 comments in the pull-request P R2 . In addition,
-indicate the value of a term, which can be calculated as             a reviewer would inspect multiple pull-requests, such as re-
-Equation 1.                                                          viewer R1 has commented P R1 and P R2 .
-                              nt                 NPR                                     Contributor C1    Pull-request PR1     2
-                                                                                                                                          Reviewer R1
-  tf idf (t, pr , PR ) = log(      +1)×log                     (1)
-                              Np r         |pr ∈ PR : t ∈ pr |                                                                  5
-
-                                                                                                           Pull-request PR2         1
-                                                                                         Contributor C2                                   Reviewer R2
-where t is a term, pr is a pull-request, PR is the corpus
-                                                                                                                  …                 m        …
-of all pull-requests in a given project, nt is the count of             Project P
-                                                                                         Contributor C3    Pull-request PRk               Reviewer Rt
-appearance for term t in pull-request pr , and Npr and NPR
-are the total number of terms in pr and pull-requests in the                                  …                                     m+1
-                                                                                                           Pull-request PRk+1
-corpus respectively.                                                                     Contributor Cn
-
-
-B. Training ML Classiﬁers                                                 Figure 3. Comment relations between contributors & reviewers
-
-   In general, a pull-request would be reviewed by several             The comment network is deﬁned as a weighted directed
-developers, so ML classiﬁers should provide more than one            graph Gcn = V, E, W , where the set of developers is
-label for a pull-request testing instance. It means that they        indicated as vertices V and the set of relations between nodes
-should be able to deal with the multi-label classiﬁcation            as edges E. If node vj has reviewed at least one of vi ’s pull-
-problem [14]. A ranked list of recommended candidates is             requests, there is a edge eij from vi to vj . The set of weights
-W reﬂects the importance degree of edges, and the weight wij                     impact of one user in the same pull-request, so w(12,1) can
-of eij can be evaluated by Equation 2.                                           be calculated as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24.
-                k                              k   m                             Similarly, the weight w12 = w(12,1) + w(12,2) = 2.19, and
-       wij =         w(ij,r) = Pc ×                     λn−1 × t(ij,r,n)   (2)   w13 = 0.95. Thus, we can predict that reviewer v2 share more
-               r=1                          r=1 n=1                              common interests with contributor v1 compared to v3 , which
-where k is the total number of pull-request submitted by vi ,                    has been quantiﬁed by the corresponding weights of edges.
-and w(ij,r) is a component weight related to an individual pull-                   The comment network has several desirable qualities.
-request r. Pc is an empirical default value2 (set to 1.0), which                   •   Firstly, the global collaboration structure is revealed
-is reserved to estimate the inﬂuence of each comment on the                            between contributors and reviewers in a given project,
-pull-request, and m is the sum of comments submitted by vj in                          which can be used for mining reviewer candidates of
-the same pull-request r. When reviewer vj published multiple                           incoming pull-requests.
-comments (m = 1) in the same pull-request, his inﬂuence                            •   Secondly, the time-sensitive factor t is introduced to
-is controlled by a decay factor λ (set to 0.8). The element                            guarantee that the recent comments are more valuable
-t(ij,r,n) is a time-sensitive factor of corresponding comment                          for the weights of edges than the old comments.
-which can be calculated as below:                                                  •   Thirdly, the decay factor λ is introduced to guarantee
-                    timestamp(ij,r,n) − baseline                                       the difference values between the comments submitted to
-        t(ij,r,n) =                                 ∈ (0, 1] (3)                       multiple pull-requests or single pull-request. For example,
-                       deadline − baseline
-                                                                                       if reviewer vj commented 5 different pull-requests of vi
-where timestamp(ij,r,n) is the date that reviewer vj presented
-                                                                                       and meanwhile vq commented one of vi ’s pull-requests
-the comment n in pull-request r which is reported by contrib-
-                                                                                       5 times, the weight of wij is larger than wiq .
-utor vi . The baseline and deadline are highly related to the
-selection of training set. If we use the data of the last one and a
-                                                                                 B. Reviewers Recommendation
-half years from 2012-01-01 to 2013-05-31 to learn the weights
-of comment network, the parameters baseline and deadline                            Based on the comment networks, new pull-requests are
-are set to 2011-12-31 and 2013-05-31 respectively.                               divided into two parts according to their submitters. The ﬁrst
-                                          v3                   v4                part are the Pull-requests from Acquaintance Contributors
-                                                                                 denoted as PAC. For a PAC, starting from the node of its
-                                                                                 submitter, we can ﬁnd at least one neighbor in the directed
-                                                                                 graph. For example, in Figure 4, when v1 submits a new
-                                            =?                                   pull-request, this pull-request is a PAC because we ﬁnd two
-                              95
-
-
-
-
-                                        w 41
-                           0.
-
-
-
-
-                                                            w42=?                neighbors starting from v1 . The other part are Pull-Requests
-                         13
-                            =
-                     w
-
-
-
-
-                                                                                 from New Contributors denoted as PNC. For a PNC, the
-                                                                                 submitter used to be a reviewer but has not submitted any pull-
-                                w12=2.19
-                                                                                 request, or it is a newcomer excluded from the training set,
-                                                       v2                        so there is no neighbor starting from it in the corresponding
-                    v1
-                                   v2 commented v1's PR_1 on 2012-12-03
-                                                                                 comment network. Hence, we can further divide reviewer
-                                   v2 commented v1's PR_1 on 2013-01-12          recommendation into two different tasks.
-                                   v2 commented v1's PR_2 on 2013-05-07
-            Project:
-                                   v3 commented v1's PR_2 on 2013-05-06          Algorithm 1 Top-k recommendation for PAC
-          Ruby on Rails
-                                         v1 commented v4's PR……
-                                         v2 commented v4's PR……
-                                                                                 Require: Gcn is the comment network of a given project; vs
-                                         v4 commented v1's PR……                      is the contributor of a new pull-request; topk is the number
-                                                                                     of reviewers of requirement;
-             Figure 4. An example of the comment network
-                                                                                 Ensure: recSet is a set of sorted reviewers;
-   Figure 4 shows an example of a part of comment network                         1: Q.enqueue(vs ) and recSet ← ∅
-about Ruby on Rails. Two different pull-requests (PR_1 and                        2: repeat
-PR_2) reported by v1 have been commented by v2 and v3 , so                        3:    v ← Q.dequeue and Gcn .RankEdges(v)
-there are two edges from v1 to v2 and v1 to v3 . Evaluating                       4:    repeat
-the relation between v1 and v2 , k of Equation 2 equals 2,                        5:       if topk = 0 then
-because v2 reviewed both two pull-requests. For PR_1, v2                          6:          return recSet
-commented it twice, so we set m = 2. The ﬁrst time-sensitive                      7:       end if
-factor of the date 2013-12-03 can be computed by Equation 3                       8:       vnb ← Gcn .BestN eighbor(v)
-that t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12                    9:       Q.enqueue(vnb ) and Gcn .mark(vnb )
-(t12,1,2 ≈ 0.731), another review published by v2 in PR_1                        10:       recSet ∪ {vnb } and topk = topk − 1
-should be controlled by λ (set to 0.8) due to the diminishing                    11:    until Gcn .N eighors(v) all marked
-                                                                                 12: until Q is empty
-  2 User comments can be found in pull-requests, issue posts and commit
-                                                                                 13: return recSet
-ﬁles. Here, we just use the comments of pull-request.
-   Recommendation for PAC: For a PAC, it is natural to              multiple communities, instead of always recommending from
-recommend the user who has previously interacted with the           the biggest communities. In our implementation, we extract the
-contributor directly, i.e., the node that is a connected neighbor   community structure from the comment network using Gephi
-starting from the contributor node in the comment network. If       [16] which integrates and optimizes a famous algorithm of
-there are more than one neighbor, the node with the highest         community detection purposed by Blondel et al. [17]. The size
-weights get selected ﬁrst. Hence, reviewer recommendation           of the communities is depicted by the number of developers
-can be treated as a kind of directed graph traversal problem.       it has, and the activeness of a reviewer is measured by the
-In this paper, we improve the classical method of Breadth-First     number of pull-requests he has reviewed in history, in other
-Search to recommend top-k reviewers for new pull-requests as        words, the in-degree of a node in the comment network. The
-shown in Algorithm 1. First of all, we initialize a queue and       recommendation set is generated by following steps:
-put the source node vs onto this queue. Then, starting from            1) Rank the communities by their size (number of nodes);
-the unvisited edge with the highest weight (RankNeighors)              2) calculate the in-degree of nodes in top-k community;
-every time, we loop to select (BestNeighbor) and marked the            3) Select the top-k nodes based on their in-degree from top-
-nearest neighbor as a candidate. If the number of contributor’s     k communities one by one.
-neighbors is less than top-k, we further visit the child nodes
-until top-k nodes are selected out.                                                  V. E XPERIMENTS E VALUATION
-   Recommendation for PNC: For a PNC, since there is                A. Experiment Questions
-no prior knowledge of which developers used to review the              RQ1: How effective is the SVM-based approach applied to
-submitter’s pull-request, we want to predict the candidates who     pull-request assignment?
-share common interests with this contributor by analyzing the
-                                                                       RQ2: Does the CN-based approach have signiﬁcant im-
-overall structure of comment network.
-                                                                    provement compared to the SVM-based approach?
-   Firstly, for a contributor who is a node but without any
-                                                                       RQ3: Do SVM-based approach and CN-based approach
-connected neighbor in the comment network, we mine the
-                                                                    have consistent performance on projects of different charac-
-reviewers based on patterns of co-occurrence across pull-
-                                                                    teristics?
-requests. For example, if v2 and v3 have reviewed plenty of
-                                                                       For experiment question RQ1, we explore whether highly
-pull-requests together, we can assume that they would share
-                                                                    relevant reviewers can be identiﬁed using the machine learn-
-more common interests than others. Thus, when v3 submitted
-                                                                    ing approach described in section III. For experiment RQ2,
-a new pull-request (PNC), we recommend v2 to review his
-                                                                    we illustrate whether social relations are more effective for
-pull-request, and vice versa. We use Apriori algorithm of as-
-                                                                    reviewer recommendation. For RQ3, we aim to know are there
-sociation rule mining [15] to generate top-k frequent itemsets,
-                                                                    any distinct results of applying these approaches on different
-and then rank the candidates according to their supports.
-                                                                    projects and why.
-             C1
-                                                      C2
-                                                                                                   Table I
-                                                                                     P REPROCESSED EXPERIMENT DATASET
-                                                                                                  #Pull-requests       #Comments
-             B
-             B                                                            Project   Language                                         #Candidates
-                                                                                                 Training    Test   Training  Test
-                                                     C
-                                                     C                     akka       Scala        1112       34     10640    467        16
-                                                                           scala      Scala        2028       64     13475    944        32
-                                                                          bitcoin   TypeScript     1067       63      5446    688        21
-             A
-             A                                                             node     JavaScript     1196       14      3497    220        73
-                                                                          jquery    JavaScript      512       14      2967    196        27
-                                   C3
-                                                                         symfony       PHP         2029       29      9601    419        79
-                                                                        phantomjs      C++          677       53      2866    728        20
-                                                                           xbmc         C          1629       81      8493   1094        73
-                                                                            rails     Ruby         3158       59     13060    583       168
-                                   D                                    homebrew      Ruby         4307       51     12255    842        22
-                                   D
-                                                                           Sum                    17715      462     82300   6181       479
-
-
-                                                                    B. Experiment Design
-          Figure 5. Community structure of comment network             Data Selection: Gousios et al. [18] [13] provide a compre-
-   In addition, for a newcomer who is a node excluded               hensive dataset to study the pull-request development model
-from the comment network, the most active reviewers in              of GitHub. Our approach is evaluated on 10 projects which
-different kinds of communities become the most probable             have received over 1000 pull-requests. We use the data of last
-candidates. We assume that developers with common interests         one and a half years from 2012-01-01 to 2013-05-31 as our
-will spontaneously form a community in the comment network.         training set and the data from 2013-06-01 to 2013-10-01 as
-However, the structure of the comment network shows that            our test set. The descriptions and titles are used to learn SVM
-developers are not always uniformly dispersed, as shown in          classiﬁers and comment relations are used to build comment
-ﬁgure 5. It is probable that these most active reviewers could      networks. In order to learn the valid classiﬁers, we ﬁrst do stop
-belong to the biggest community, such as the top-2 most             words removal and stemming over the descriptions and titles.
-active nodes A and B belong to the same community C1.               Then, we retain those pull-request with more than 10 words.
-Therefore, we would like our recommendation list to cover           The test set includes some simple pull-requests which need not
-be reviewed, so this kind of pull-requests which received less                                Furthermore, we present the following null hypotheses to
-than 4 comments are omitted. After that, there are 17715 pull-                             evaluate the improvement of our CN-based approach compared
-requests in the training set and 462 in the test set, as shown                             with the baseline and the SVM-based approach:
-in Table I. For each project, we recommend top-1 to top-10                                    H0 1 : There is no statistically signiﬁcant difference between
-reviewers to a new pull-request from Candidates in Table I.                                the precisions of the baseline and CN-based approach.
-   Evaluation Metrics: We evaluate the performances of our                                    H0 2 : There is no statistically signiﬁcant difference between
-approaches over each project by precision and recall which                                 the precisions of the SVM-based and CN-based approach.
-are widely used as standard metrics in previous work. The                                     H0 3 : There is no statistically signiﬁcant difference between
-formulae for our metrics are listed below:                                                 the recalls of the baseline and CN-based approach.
-               | Rec Reviewers ∩ Actual Reviewers |                                           H0 4 : There is no statistically signiﬁcant difference between
-  P recision =                                                                             the recalls of the SVM-based and CN-based approach.
-                         | Rec Reviewers |
-           | Rec Reviewers ∩ Actual Reviewers |                                               The results of Student’s t-test are listed in Table II. For H0 1
-  Recall =                                                                                 and H0 2 of precision, one-sided p-value p < 0.05 and t-test
-                    | Actual Reviewers |
-                                                   (4)                                     value t < tcrit . Thus, we reject these hypotheses. It means
-                                                                                           that CN-based approach achieve a signiﬁcant improvement
-C. Experiment Results and Analysis                                                         in precision compared to the baseline and the SVM-based
-                                                                                           approach. Similarly, we reject H0 3 and H0 4 of recall, but
-   Baseline: Most Active Recommendation                                                    the t-test result of H0 4 is remarkably close to the critical
-   It is common for some projects that most of pull-requests are                           values. It means CN-based approach achieves nearly the same
-reviewed by a few core developers. Thus, to demonstrate the                                performance in recall but greatly exceeds the baseline method.
-effectiveness of our approaches based on machine learning and                                 Especially, high precision of top-k recommendation is sig-
-social network analyzing, we design a baseline method that                                 niﬁcant for pull-request assignment. As the example of Figure
-every new pull-request is assigned to the top-k most active                                1, if our approach assigns that pull-request to rafaelfranca, he
-developers ranked according to the number of pull-requests                                 would remind javan to join the discussion by the @mention
-they have reviewed in the past.                                                            tool, even if javan is left out by the algorithm.
-   RQ1 & RQ2: Recommendation Performances
-                                                                                                                                 Table II
-   We use a chart of precision vs. recall to show the perfor-                                                   R ESULTS OF T-T EST FOR OUR HYPOTHESES
-mances of different approaches in detail. In Figure 6, each                                   H         Var         Approach        µ       σ2         p         t      tcrit    Decision
-curve has a point for each recommendation from top-1 to                                     H0        Precision
-                                                                                                                   CN -based       0.53    0.031
-                                                                                                                                                    0.0002     3.67     1.66      Reject
-                                                                                                  1
-                                                                                                                    baseline       0.50    0.029
-top-10. There is a trade-off between precision and recall for                                                      CN -based       0.53    0.031
-                                                                                            H0    2   Precision                                      0.016     2.18     1.66      Reject
-classiﬁcation. Hence, the precisions are gradual decreasing                                                        SVM-based       0.51    0.030
-                                                                                                                   CN -based       0.56    0.057
-with the increase of recalls.                                                               H0    3    Recall
-                                                                                                                    baseline       0.54    0.063
-                                                                                                                                                    0.0003     3.60     1.66      Reject
-
-                      0.8                                                                                          CN -based       0.56    0.057
-                                                                                            H0    4    Recall                                        0.040     1.77     1.66      Reject
-                                                                CN-based approach                                  SVM-based       0.55    0.063
-                                                                SVM-based approach            Means µ, Variance σ 2 , statistical signiﬁcance p-value p, t-test results t and critical value
-                      0.7                                       Baseline                      tcrit , signiﬁcance level α = 0.05. In this paper, we do not list alternative hypotheses,
-                                                                                              because they are easy to derive from these null hypotheses respectively.
-
-                                                                                              RQ3: Discussion of different approaches
-                      0.6
-     Avg. Precision
-
-
-
-
-                                                                                              We run our approaches on each project to evaluate their
-                                                                                           detailed performances and discuss the results. As most of pull-
-                      0.5                                                                  request in GitHub received less than 4 comments [1], we only
-                                                                                           depict part of our results from top-1 recommendation to top-5.
-                      0.4                                                                     Firstly, running on bitcoin, akka and rails, our novel CN-
-                                                                                           based approach can achieve a signiﬁcant improvement over the
-                      0.3
-                                                                                           baseline and SVM-based method. As shown in Table III, the
-                        0.1    0.2     0.3     0.4        0.5    0.6      0.7        0.8   improvement of CN-based approach running on each project is
-                                                 Avg. Recall
-                        Figure 6. Precision vs. Recall of different approaches
-                                                                                           on average over 10% in precision and 6% in recall. In addition,
-                                                                                           CN-based approach can get remarkable performance for top-
-   Both SVM-based approach and CN-based approach are su-                                   1 recommendation. For example, the precision of CN-based
-perior to the baseline. Our novel approach based on Comment                                approach can reach 92% running on bitcoin. Compared to the
-Network (CN-based approach) achieves obvious improvement                                   baseline and SVM-based method, our approach achieves great
-in precision from top-1 to top-4, especially at the point of                               improvement of 51% and 31% respectively.
-top-1 (78%) and top-2 (67%). However, the curve of SVM-                                       In these three projects, the social activities and contributions
-based approach is in the middle from top-1 to top 4, and                                   between core and external developers are balanced and well-
-takes the leading position at the points of top-5 and top-8 in                             distributed. For example, for bitcoin, the number of core
-precision. When we recommend top-10 reviewers, the recall                                  developers and external developers are equal in the history of
-of each method can reach the level of 77%.                                                 top-10 active reviewers list. In addition, 64% of pull-requests
-                                                                                 Table III
-                                P RECISIONS /R ECALLS OF BASELINE (BL), CN- BASED AND SVM- BASED RECOMMENDATION FROM TOP -1 TO TOP -5
-                                       Number of                      bitcoin                                  akka                                rails
-                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
-                                         top-1       0.41/0.08       0.92/0.19   0.61/0.12      0.61/0.14   0.84/0.20   0.87/0.20   0.61/0.13   0.75/0.18   0.62/0.13
-                                         top-2       0.69/0.28       0.77/0.31   0.69/0.28      0.69/0.32   0.84/0.39   0.69/0.32   0.46/0.20   0.65/0.32   0.45/0.20
-                                         top-3       0.69/0.42       0.73/0.44   0.69/0.42      0.61/0.43   0.70/0.50   0.69/0.49   0.47/0.31   0.57/0.42   0.46/0.30
-                                         top-4       0.61/0.48       0.67/0.54   0.65/0.51      0.67/0.63   0.73/0.69   0.75/0.70   0.40/0.35   0.46/0.45   0.41/0.36
-                                         top-5       0.60/0.58       0.63/0.62   0.61/0.59      0.72/0.84   0.78/0.92   0.80/0.93   0.35/0.38   0.38/0.47   0.36/0.39
-                                         Avg.        0.60/0.36       0.74/0.42   0.65/0.38      0.66/0.47   0.78/0.54   0.76/0.53   0.46/0.27   0.56/0.36   0.46/0.28
-                                       Number of                      jquery                                phantomjs                           homebrew
-                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
-                                         top-1       0.82/0.17       0.82/0.17   0.82/0.17      0.92/0.20   0.92/0.19   0.94/0.20   0.91/0.21   0.88/0.20   0.88/0.21
-                                         top-2       0.66/0.27       0.70/0.29   0.68/0.28      0.86/0.37   0.74/0.31   0.88/0.37   0.76/0.35   0.77/0.35   0.77/0.35
-                                         top-3       0.53/0.33       0.56/0.35   0.55/0.34      0.73/0.46   0.75/0.48   0.75/0.48   0.81/0.56   0.80/0.55   0.80/0.56
-                                         top-4       0.45/0.37       0.55/0.46   0.48/0.39      0.75/0.64   0.74/0.62   0.75/0.64   0.79/0.72   0.75/0.68   0.79/0.73
-                                         top-5       0.46/0.48       0.50/0.53   0.48/0.51      0.65/0.68   0.65/0.68   0.66/0.69   0.74/0.84   0.62/0.71   0.73/0.84
-                                         Avg.        0.59/0.32       0.63/0.36   0.60/0.34      0.78/0.47    0.7/0.46   0.80/0.48   0.80/0.54   0.76/0.50   0.80/0.54
-
-submitted by external contributors and 60% of them have been                                                   •   For RQ1, the SVM-based recommendation is an effective
-merged. By contrast, 36% of pull-requests are originating from                                                     approach for pull-request assignment which achieves 73%
-core developers but 84% of them have been merged.                                                                  precision of top-1 recommendation and 77% recall of top-
-   The second group includes jquery, phantomjs and home-                                                           10 recommendation.
-brew, where both our approaches and the baseline method                                                        •   For RQ2, the CN-based approach achieve signiﬁcant
-can achieve high precision and recall. The the second part                                                         improvement compared to other methods. Analyzing the
-of Table III lists the results. For phantomjs and homebrew,                                                        social network is a novel and effective way for reviewer
-the precisions and recalls of all methods on average reach                                                         recommendation.
-approximately 80% and 50% respectively.                                                                        •   For RQ3, the CN-based recommendation show much
-   In these projects, a few developers seems to dominate the                                                       more improvement for the projects where the social
-pull-request review activity. As they have submitted comments                                                      activities are balanced between core developers and exter-
-too frequently, it is easy to assign pull-requests of test set to                                                  nal developers. If developers have reviewed pull-requests
-them. Thus, the improvement of CN-based approach is not                                                            actively, the performance of our approach is remarkable.
-obvious. Taking phantomjs as an example, the most active user
-                                                                                                            E. Threats to Validity
-(ID 136322) has reviewed 77% of pull-requests and interacted
-with 83% of contributors in training set. All algorithms tend                                                  In this section, we discuss some threats to validity which
-to assign the new pull-requests to him ﬁrst.                                                                may affect the experiment results of our approaches. Firstly,
-                      0.55                                                                                  there is a small part of the core developers who are in charge of
-                                                                      CN-based approach
-                                                                      SVM-based approach                    the ﬁnal decision of pull-requests. They joined so many pull-
-                      0.50                                            Baseline                              requests’ discussions in training set that all the approaches
-                                                                      PAC recommendation
-                                                                                                            tend to assign the new pull-request to these active developers
-                                                                                                            ﬁrst. Hence, the workload of these active reviewers may not
-                      0.45
-     Avg. Precision
-
-
-
-
-                                                                                                            be reduced. However, with more and more external contributor
-                                                                                                            presenting their suggestions to pull-requests, the social net-
-                      0.40
-                                                                                                            work based approach can refresh the weights of corresponding
-                                                                                                            edges, so new pull-requests would be assigned more balanced
-                      0.35                                                                                  than before. Besides, because some pull-requests have not been
-                                                                                                            closed when we dumped the test set, so a part of following
-                      0.30
-                         0.05   0.10     0.15      0.20       0.25      0.30     0.35        0.40
-                                                                                                            reviewers have not been taken into consider which may affect
-                                                      Avg. Recall                                           our recommendation results.
-            Figure 7. Precision vs. Recall of different methods for xbmc
-                                                                                                                                       VI. R ELATED W ORK
-   However, all approaches do not perform well for xbmc.
-Except that SVM-based approach gets 43% precision for top-                                                     Gousios et al. [1] show that the pull-request model offers
-1 recommendation, the precisions of all methods ranged from                                                 fast turnaround, increased opportunities for community en-
-39% to 32%. In the test set of xbmc, 65% of pull-requests                                                   gagement and decreased time to incorporate contributions. To
-are originating from newcomers, so CN-based approach do                                                     the best of our knowledge, this paper is the ﬁrst one to study
-much work of PNC recommendation (PAC and PNC have been                                                      pull-request assignment. We review previous work about bug
-deﬁned in section IV-B). As shown in Figure 7, if we only                                                   triaging and collaboration network analysis of social coding.
-consider to recommend reviewer for PAC, the performance of                                                     There are a number of researches based on Machine Learn-
-CN-based recommendation is greatly superior to others.                                                      ing (ML) [7]–[9] and Information Retrieval (IR) [10]–[12]
-                                                                                                            techniques to triage incoming bug reports or change requests.
-D. Conclusions of Experiments                                                                               Anvik et al. [7] apply a machine learning algorithm to learn
-  Based on the experiment’s results and analysis above, we                                                  the kinds of reports each developer resolves and recommend
-can draw our conclusions as follows:                                                                        developers for a new bug report. Jeong et al. [8] ﬁnd that
-many bugs have been reassigned to other developers, so they                                      R EFERENCES
-combined classiﬁers with tossing graphs to mine potential           [1] G. Gousios, M. Pinzger, and A. van Deursen, “An exploration of the
-ﬁxers. Based on that, Bhattacharya et al. [9] introduce an              pull-based software development model,” in Proceedings of the 36th
-approach adding ﬁne-grained incremental learning and multi-             International Conference on Software Engineering, Jun. 2014, to appear.
-                                                                    [2] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and A. Swaminathan, “Min-
-feature tossing graphs to reduce tossing path lengths and               ing email social networks,” in Proceedings of the 2006 International
-improve prediction accuracy. Other researchers use IR for               Workshop on Mining Software Repositories, 2006, pp. 137–143.
-automatic bug triaging. Canfora and Cerulo [10] use the textual     [3] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies of
-                                                                        open source software development: Apache and mozilla,” ACM Trans.
-descriptions to index developers and source ﬁles as documents           Softw. Eng. Methodol., vol. 11, no. 3, pp. 309–346, Jul. 2002.
-in an information retrieval system. Kagdi [11] and Linares-         [4] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in
-Vasquez [12] extract the comments and identiﬁers from the               github: transparency and collaboration in an open software repository,”
-                                                                        in Proceedings of the ACM 2012 conference on Computer Supported
-source code and index these data by Latent Semantic Indexing.           Cooperative Work. New York, NY, USA: ACM, 2012, pp. 1277–1286.
-For a new bug report, such indexes can be useful to identify        [5] T. LaToza, W. Ben Towne, A. van der Hoek, and J. Herbsleb, “Crowd
-the most appropriate developers to resolve it.                          development,” in Cooperative and Human Aspects of Software Engi-
-                                                                        neering, 2013 6th International Workshop on, May 2013, pp. 85–88.
-   In this paper, we not only expand the ML-based methods           [6] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets software
-to recommend reviewers for incoming pull-request, but also              development: Perspectives from github, msdn, stack exchange, and
-propose a novel social network based approach focusing on               topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
-                                                                    [7] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
-mining social relations betweens reviewer and contributors              ceedings of the 28th International Conference on Software Engineering,
-which achieves a signiﬁcant improvement.                                ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
-   The social coding paradigm is reshaping the distributed          [8] G. Jeong, S. Kim, and T. Zimmermann, “Improving bug triage with
-                                                                        bug tossing graphs,” in Proceedings of the the 7th Joint Meeting of
-software development in recent years with a surprising speed            the European Software Engineering Conference and the ACM SIGSOFT
-and wide range. Dabbish et al. [4] explore the value of social          Symposium on The Foundations of Software Engineering, ser. ESEC/FSE
-mechanisms of GitHub. They ﬁnd that the transparency in                 ’09. New York, NY, USA: ACM, 2009, pp. 111–120.
-                                                                    [9] P. Bhattacharya, I. Neamtiu, and C. R. Shelton, “Automated, highly-
-collaboration is improved by social mechanisms which is                 accurate, bug assignment using machine learning and tossing graphs,”
-signiﬁcant for innovation, knowledge sharing and community              Journal of Systems and Software, vol. 85, no. 10, pp. 2275–2292, 2012.
-building. Zhou et al. [19] measure the behavior of a contributor   [10] G. Canfora and L. Cerulo, “Supporting change request assignment in
-                                                                        open source development,” in Proceedings of the 2006 ACM Symposium
-using workﬂow network. Zanetti et al. [20] categorize bugs              on Applied Computing, ser. SAC ’06. New York, NY, USA: ACM,
-based on nine measures to quantify the social embeddedness              2006, pp. 1767–1772.
-of bug reporters in the collaboration network. Thung et al.        [11] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
-                                                                        request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
-[21] investigate the developer-developer and project-project            International Conference on, May 2009, pp. 273–277.
-networks of GitHub. They use PageRank to identify the most         [12] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
-inﬂuential developers and projects in Github.                           D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
-                                                                        history, or code authorship?” in Software Maintenance, 28th IEEE
-   These previous researches inspire us to mining the comment           International Conference on, Sept 2012, pp. 451–460.
-networks for pull-request automatic assignment.                    [13] G. Gousios, “The ghtorrent dataset and tool suite,” in Proceedings of the
-                                                                        10th Working Conference on Mining Software Repositories, ser. MSR
-          VII. C ONCLUSION AND F UTURE W ORK                            ’13. Piscataway, NJ, USA: IEEE Press, 2013, pp. 233–236.
-                                                                   [14] G. Tsoumakas and I. Katakis, “Multi-label classiﬁcation: An overview.”
-   The review process of pull-request is important for social           IJDWM, vol. 3, no. 3, pp. 1–13, 2007.
-coding. In this paper, we ﬁrstly extend the machine learning       [15] R. Agrawal and R. Srikant, “Fast algorithms for mining association rules
-                                                                        in large databases,” in Proceedings of the 20th International Conference
-based approach for bug triaging to assign reviewers to new              on Very Large Data Bases, ser. VLDB ’94. San Francisco, CA, USA:
-pull-requests. Furthermore, introducing social relations, we            Morgan Kaufmann Publishers Inc., 1994, pp. 487–499.
-propose a novel social network based approach for reviewer         [16] M. Bastian, S. Heymann, and M. Jacomy, “Gephi: an open source
-                                                                        software for exploring and manipulating networks.” in ICWSM, 2009.
-recommendation by mining a new type of social network              [17] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
-called comment network. Finally, we demonstrate the effective-          unfolding of communities in large networks,” Journal of Statistical
-ness of these two approaches with quantitative evaluations. In          Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
-                                                                   [18] G. Gousios and A. Zaidman, “A dataset for pull request research,”
-the future, we plan to use the information retrieval approaches         in MSR ’14: Proceedings of the 11th Working Conference on Mining
-to pull-request assignment, and then combine these traditional          Software Repositories, may 2014, to appear.
-methods with the social network based approach. Besides, we        [19] M. Zhou and A. Mockus, “What make long term contributors: Will-
-                                                                        ingness and opportunity in oss community,” in Proceedings of the
-will explore how to add other types of social relations into our        34th International Conference on Software Engineering, ser. ICSE ’12.
-framework.                                                              Piscataway, NJ, USA: IEEE Press, 2012, pp. 518–528.
-                                                                   [20] M. S. Zanetti, I. Scholtes, C. J. Tessone, and F. Schweitzer, “Cat-
-                VIII. ACKNOWLEDGEMENT                                   egorizing bugs with social networks: A case study on four open
-                                                                        source software communities,” in Proceedings of the 2013 International
-  This research is supported by the National High Technol-              Conference on Software Engineering, ser. ICSE ’13. Piscataway, NJ,
-ogy Research and Development Program of China (Grant                    USA: IEEE Press, 2013, pp. 1032–1041.
-                                                                   [21] F. Thung, T. F. Bissyande, D. Lo, and L. Jiang, “Network structure of
-No.2012AA011201), the National Science Foundation of                    social coding in github,” in Proceedings of the 2013 17th European
-China (Grant No.61432020 and No.61472430) and the Post-                 Conference on Software Maintenance and Reengineering, ser. CSMR
-graduate Innovation Fund of University of Defense Technol-              ’13. Washington, DC, USA: IEEE Press, 2013, pp. 323–326.
-ogy (Grant No.B130607).
-
\ No newline at end of file
diff --git a/res/paper/crowdsoft2014.pdf b/res/paper/crowdsoft2014.pdf
deleted file mode 100644
index 5c69218..0000000
--- a/res/paper/crowdsoft2014.pdf
+++ /dev/null
@@ -1,344 +0,0 @@
-          Exploring the Patterns of Social Behavior in GitHub
-
-                                              Yue Yu, Gang Yin, Huaimin Wang, Tao Wang
-                               National Laboratory for Parallel and Distributed Processing
-            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
-                                     {yuyue, yingang, hmwang, taowang2005}@nudt.edu.cn
-
-
-
-ABSTRACT                                                                            1. INTRODUCTION
-Social coding paradigm is reshaping the distributed soft-                              In recent years, social coding paradigm has been brought
-ware development with a surprising speed in recent years.                           into focus in distributed software development for the de-
-Github, a remarkable social coding community, attracts a                            velopers from all over the world. Various kinds of social
-huge number of developers in a short time. Various kinds of                         media [10, 11] are employed in software development, which
-social networks are formed based on social activities among                         help building social ties among developers and form diﬀer-
-developers. Why this new paradigm can achieve such a great                          ent types of social networks. Such social mechanisms can
-success in attracting external developers, and how they are                         achieve transparency [5] within social coding ecosystem and
-connected in such a massive community, are interesting ques-                        improve the degree of collaboration in software development.
-tions for revealing power of social coding paradigm. In this                           GitHub1 , a typical social coding community, attracts a
-paper, we ﬁrstly compare the growth curves of project and                           large number of users and projects in a short period of time.
-user in GitHub with three traditional open source software                          When launched in 2008, there were only four users [2]. But
-communities to explore diﬀerences of their growth modes.                            it seems to rise to fame overnight and increases to more
-We ﬁnd an explosive growth of the users in GitHub and                               than 3.5 million developers now. GitHub employs several
-introduce the Diﬀusion of Innovation theory to illustrate                           social media such as follow, watch and fork. The developers
-intrinsic sociological basis of this phenomenon. Secondly,                          can track the activities of others and be aware of changes
-we construct follow-networks according to the follow behav-                         in project using these tools in the community. Many in-
-iors among developers in GitHub. Finally, we present four                           teresting social networks of developers can be constructed.
-typical social behavior patterns by mining follow-networks                          For example, the follow relation is created when a developer
-containing independence-pattern, group-pattern, star-pattern                        click the “follow ” button in the proﬁle of another developer,
-and hub-pattern. This study can provide several instructions                        and then the follow relations among developers can form a
-of crowd collaboration to newcomers. According to the typi-                         social network which is called follow-network in this paper.
-cal behavior patterns, the community manager could design                           Why this new paradigm can achieve such a great success
-corresponding assistive tools for developers.                                       in attracting a large number of developers, and how they
-                                                                                    are connected in such a massive community, are important
-                                                                                    questions for understanding such a new paradigm. Many re-
-Categories and Subject Descriptors                                                  searches are conducted on analyzing the inﬂuence of social
-D.2.8 [Software Engineering]: Metrics - Process metrics;                            network in Open Source Software (OSS) communities (see
-D.2.9 [Software Engineering]: Management - Program-                                 Section 7). However, these work study the network structure
-ming teams                                                                          [13] of collaboration-oriented social network and collabora-
-                                                                                    tion pattern [12] in traditional OSS communities. However,
-                                                                                    none of them has explored the growth modes of communities
-General Terms                                                                       and social behavior patterns of developers.
-Human Factors, Measurement, Management                                                 In this paper, we ﬁrstly explore the growth curves of GitHub
-                                                                                    compared to three traditional OSS communities. Then, we
-                                                                                    construct follow-networks from the follow behaviors among
-Keywords                                                                            developers, which is a typical interest-oriented social net-
-Behavior pattern, Social network, Social coding, Distributed                        work. Finally, we analyze the social behavior patterns among
-software development                                                                developers by mining the follow-networks.
-                                                                                       In summary, the following research questions would be
-                                                                                    answered in this paper:
-                                                                                       RQ1: What are the diﬀerences between the growth modes
-Permission to make digital or hard copies of all or part of this work for           of GitHub and traditional OSS communities, and is there
-personal or classroom use is granted without fee provided that copies are           any sociological theory that supports the special growth
-not made or distributed for proﬁt or commercial advantage and that copies
-                                                                                    mode of GitHub?
-bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
-republish, to post on servers or to redistribute to lists, requires prior speciﬁc      RQ2: Whether or not the social connections among de-
-permission and/or a fee.                                                            velopers form some distinctive behavior patterns in GitHub,
-CrowdSoft 2014                                                                      1
-Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                        https://github.com
-                              (a) User-growth curve                      (b) Project-growth curve
-
-                                              Figure 1: The growth ﬁgure of Github
-
-
-
-
-                       (a) Freecode                         (b) Alioth                     (c) Savannah
-
-                                    Figure 2: The growth ﬁgure of tranditional OSS community
-
-and if it is true, what are these patterns?                        in a short time, which seems to make GitHub rise to fame
-   To the best of our knowledge, this is the ﬁrst research         overnight. In this paper, we deﬁned the explosive growth
-combining the high level analysis of the growth mode and           mode of GitHub as “outburst-type”. The outburst-type is
-the speciﬁc level of pattern mining in GitHub. We try to           quite diﬀerent from the growth mode of the traditional OSS
-make some interesting observations at these two levels. The        communities, such as Freecode2 , Alioth3 and Savannah4 . As
-remainder of this paper is structured as follows. Section 2        shown in Figure 2, the traditional OSS communities often
-introduces the statistics of raw data entities in our dataset.     grow smoothly and stably. After a period of rising, the
-Section 3 analyzes the growth mode of GitHub and Section 4         growth curves gradually slow down. We use Gini coeﬃcient
-illustrates the method of constructing the follow-networks.        to measure the skewness of outburst-type. The Gini index of
-Section 5 depicts the typical behavior patterns hidden in          three traditional OSS communities is on average 24.5%. By
-the follow-networks. We discuss threats in Section 6 and           contrast, the Gini index of GitHub is over 58.1%. It means
-related work in Section 7. Finally, we draw our conclusions        that the growth of GitHub is too imbalanced that the ma-
-in Section 8.                                                      jority of developers join this community in a short period of
-                                                                   time.
-2. DATASET                                                            The core service of these three traditional OSS commu-
-                                                                   nities is to support project (code) hosting. In these com-
-   Our study is based on the data from the GHTorrent project       munities, the main services such as version control system,
-[8, 6], which keeps on creating a scalable oﬀ-line mirror of       bug tracking and release management are strongly related
-event streams and provides persistent data of GitHub for           to project management. Around the main service, there are
-research. We use the Mysql dump update until 2013-05-29,           some classic communication tools such as mailing lists and
-which contains detailed information of social coding activ-        forum used to assist developers in distributed development.
-ities about 1,838,805 users. Among all these users, about          Thus, users do not have direct experiences and strong feel-
-55.46% of them (1,019,839 users), joined this community            ings about its strengths.
-during a short period of time from 2012-07-01 to 2013-05-             However, the human factor is the core factor in the so-
-29. Since then, the number of users keeps on growing by            cial coding paradigm. The innovative services in GitHub,
-over ﬁfty thousand per month.                                      such as the follow-based social networking, fork-based shar-
-                                                                   ing system and the pull-based software development model
-3. GROWTH MODE                                                     [7], catapult users into a new software develop experiences.
-  As a popular social coding community, GitHub draws               According to the Diﬀusion of Innovations theory[9], if there
-widespread attention from all over the world hosting a huge        were 2.5% innovators and 13.5% early adopters hosting their
-number of software projects. However, the growth mode of           projects on GitHub and promoting to others, the “tipping
-GitHub has a huge diﬀerence during two periods of time.            point” would be achieved. Then, the majority customers
-  Figure 1 shows the monthly growth trajectory of user and
-                                                                   2
-project in GitHub. As can be seen from this chart, after             http://freecode.com
-                                                                   3
-a relatively long time of accumulation till the early 2012,          http://alioth.debian.org
-                                                                   4
-the number of users and projects experienced a big leap              http://savannah.gnu.org
-                             (a) 2012-08 subset                                   (b) 2012-09 subset
-
-                                             Figure 3: Two examples of follow-network
-
-
-would join GitHub community. When GitHub leaps the                  developers’ registration time, and then construct the follow-
-chasm, it grows dramatically. Thus, GitHub grows as the             networks separately. Table 1 lists the monthly statistics of
-outburst-type.                                                      corresponding follow-networks. There are over 85,000 of new
-   Furthermore, we hold two viewpoints of the reason why            users join GitHub each month.
-majorities are involved in GitHub.                                                  Table 1: Statistics of Dataset
-   Eﬀect of leader: There is a part of developers enjoying              Month      #User    #Node #Edge Average Degree
-a high reputation such as Linus Torvalds 5 who have been
-                                                                       2012-08    150,851    32,796    31,677      0.966
-followed by 13,267 users on GitHub. Similarly, some out-
-                                                                       2012-09    102,056    40,401    40,793      1.010
-standing projects have a lot of eyes on them such as Rails6            2012-11     88,857    28,665    26,232      0.915
-stared by 19,915 users. When these people or projects are              2013-01     89,004    23,463    19,562      0.834
-active in GitHub, a lot of developers are involved because             2013-02    142,358    27,064    21,970      0.812
-they want to join the projects or study with the experts.              2013-03     95,087    23,650    19,161      0.810
-   Herd behavior: A large number of users join GitHub                  2013-05     90,413    13,160     9,704      0.737
-just for the reason that he ﬁnd so many developers around
-him talk about GitHub frequently. However, for himself, he
-may not know the advantages of GitHub clearly.                      5. SOCIAL BEHAVIOR PATTERNS
-                                                                      The quantity of registered users is over one hundred thou-
-                                                                    sand in 2012-08 and 2012-09 subsets. Those developers have
-4. FOLLOW-NETWORK                                                   formed rich social relations after a period of time. There-
-   We aim to understand the social behavior patterns of the         fore, we choose these two subsets to demonstrate the follow-
-developers who join GitHub during the outburst period. We           networks. The follow-network is so complex that we delete
-ﬁrstly construct follow-networks from the follow behaviors          the nodes whose degrees are less than 5. There are nearly
-among developers, which can directly reﬂect users’ relation-        90% useless links that can be ﬁltered. It means that most of
-ships in social activities.                                         users program in GitHub without the help of follow-based
-   If a user U1 has followed U2 , we consider that the collab-      social service. Thus, it is possible to show that a large num-
-oration activities of U1 would be inﬂuenced by U2 ’s. The           ber of developers are involved in GitHub because of Herd
-follow-network can be deﬁned as a directed graph Gf n =             behavior. In the Figure 3, we show the preprocessed follow-
- V, E . The set of vertices is all users in our dataset de-         networks visualized by Gephi [1]. In general, the follow-
-noted by V . The set of edges in Gf n denoted by E is a             networks can be divided into two parts, i.e. isolated part
-set of node pairs E(V ) = {(u, v)|u, v ∈ V }. If the node vj        and interlaced part.
-is followed by vi , then there is a edge from vi to vj . For          In isolated part, we can ﬁnd two typical patterns, contain-
-a node vi , the number of edges pointing to it is called the        ing the independence-pattern and the group-pattern. Figure
-indegree deg − (vi ) and the number of edges starting from it       4 shows some typical examples of them. The independence-
-represents its outdegree deg + (vi ). And the degree is the sum     pattern indicates that a developer use Github as a traditional
-of indegree and outdegree deg(vi ) = deg − (vi ) + deg + (vi ).     way and he always only link up with acquaintances. He just
-   In this paper, we focus on the social behavior of developers     hosts his code or watches an interesting project but rarely
-who join GitHub during the period of fast growing. Thus, we         makes a contribution to it. According to our statistics, in
-divide the dataset into several monthly subsets according to        the 2012-08 subset, 30.33% nodes are isolated and 13.80%
-                                                                    nodes only connect with one node. The group-pattern is of-
-5
-    https://github.com/torvalds                                     ten formed by a group developers who collaborate with each
-6
-    https://github.com/rails/rails                                  other to develop the same project.
-                 (a) Independence-pattern
-
-
-
-
-                     (b) Group-pattern
-
-      Figure 4: The typical patterns in the isolated part
-
-  To show the features of the group-pattern more clearly, we
-use two diﬀerent force-directed graph drawing algorithms to
-redraw the follow network, as shown in Figure 5. We present
-three observations as follows:
-
-   • Observation 1: For a given group, the number of
-     links between this group and the interlaced part presents
-     the degree of social collaboration among the group’s
-     members and community. If a group has few link
-     with the core network, the projects developed by them
-     would be hard to attract public attentions. Besides,
-     the distance between the group and the centre of the
-     network reﬂects the degree of correlation between them.       (a) The Network redrawn by Force Atlas algorithm
-     For example, the group in the bottom right corner,
-     which is far from the core network, hosts a industrial
-     design project on GitHub. This project has no corre-
-     lation to software development.
-
-   • Observation 2: In a group, there is a relatively small
-     number of users who follow the external developers
-     and there are not many internal users following them
-     as well. In addition, these developers always follow
-     the external developers with high indegree who are the
-     leaders of a well-known project. Thus, they are not
-     the core programmer of their project, but they import
-     some novel idea from the community into the group.
-
-   • Observation 3: In general, the more developers are
-     followed by external users, the faster their project grow-
-     ing. When their project is popular enough in the spe-
-     ciﬁc domain, the group-pattern would be merged into
-     the interlaced part of follow-network, because more
-     and more developers follow the group’s members and
-     contribute to their project.
-
-  In the interlaced part of follow-networks, we extract the
-community structures using a popular algorithm of commu-
-nity detection purposed by Blondel et al. [4]. As shown
-in Figure 6, there are 4 large communities in the network
-which have been painted in diﬀerent colors. The size of a
-node represent its indegree. We can ﬁnd that diﬀerent com-
-munities represent diﬀerent groups of developers who focus
-on diﬀerent kinds of projects. There is a leader in each com-
-munity. For example, the pink community is about Ruby on
-Rails development and the orange community is related to
-Linux project. Furthermore, we extract two typical social         (b) The Network redrawn by Force Atlas 2 algorithm
-behavior patterns from the interlaced part of follow-network,      Figure 5: The redrawn follow-network of 2012-08 subset
-including star-pattern and hub-pattern.
-                                                                  such as the developer b in the green community and e in the
-                                                                  red community. The core developers just have connections
-                                                                  with internal users. The hub-node, such as d and g , not only
-                                                                  follow internal users, but also make a connection with other
-                                                                  communities. In this pattern, we ﬁnd that the projects de-
-                                                                  veloped by diﬀerent communities always have something in
-                                                                  common. For example, they use the same programming lan-
-                                                                  guage or frameworks. The quantity of hub-nodes is highly
-                                                                  related to the commonality and similarity of the projects.
-
-                                                                  6. THREATS TO VALIDITY
-                                                                     In this section, we discuss some threats to validity which
-                                                                  may aﬀect the results of our observations. Firstly, the num-
-                                                                  ber of projects hosted in GitHub is still growing fast, so
-                                                                  GitHub may be still in the early or middle phases of growth.
-                                                                  Thus, we cannot ensure the majority of users joint GitHub
-                                                                  during one outburst period. That is to say, GitHub may
-Figure 6: Community structures in the follow-network of 2012-08   have two or three outburst periods of growth. However, as
-subset                                                            the market becomes saturated, the growth curve would be
-                                                                  slow down. Secendly, a part of users have been included to
-                                                                  compensate for users committing to Github without having
-  As shown in ﬁgure 7(a), there are two distinct structures of    a GitHub account or shared an account with other devel-
-the star-pattern. The ﬁrst structure indicates that a famous      opers. In this paper, we do not take these developers into
-man (or a team) is followed by a large number of users but        consideration in the preprocessing stage. Thirdly, the follow
-he almost never pay any attention to others, which exactly        relations of some users are dynamic. They would follow an
-reﬂects the inﬂuence about the Eﬀect of leader described          expert at the beginning. However, they disengage from the
-in Section 3. The other one indicates that a user follow          follow relationship at some time for personal reasons.
-many irrelevant developers but almost never be followed by
-others. This kind of structure can be used to ﬁnd crawler’s
-IDs or advertiser’s IDs. For example, we ﬁnd KBishop 7 is a       7. RELATED WORK
-advertiser’s account in GitHub.                                      With the development of social coding paradigm, many
-                                                                  studies have been conducted on analyzing the mechanisms
-                                                                  and the value of social network in software development.
-                                                                  Begel et al. [2] conduct semistructured interviews with the
-                                                                  leader of GitHub to understand the role social network plays
-                                                                  in the software development process. Dabbish et al. [5]
-                                                                  explore the value of the social media in GitHub and found
-                                                                  that the transparency in collaboration brought in by such
-                                                                  mechanisms can support innovation, knowledge sharing and
-                                                                  community building. Tsay et al. [14] further above study
-                                                                  to evaluate the inﬂuence of social signals. They ﬁnd that
-                        (a) Star-pattern                          developers use both technical and social information when
-                                                                  evaluating potential contributions to open source software
-                                                                  projects.
-                                                                     In addition, collaboration network in social coding has at-
-                                                                  tracted many interests among researchers. Thung et al. [13]
-                                                                  investigate the developer-developer and project-project net-
-                                                                  works in Github. They use PageRank to identify the most
-                                                                  inﬂuential developers and projects by exploring these two
-                                                                  types of network. Surian et al. [12] employ a novel com-
-                                                                  bination of graph mining and graph matching to discover
-                                                                  the collaboration patterns in SourceForge. Begel et al. [3]
-                                                                  present a framework of social network for connecting devel-
-                        (b) Hub-pattern                           opers and their work artifacts together. By analyzing the
-                                                                  social network, software engineers can keep track on activ-
-       Figure 7: The typical patterns in the interlaced part      ities of colleagues and developing status of work artifacts.
-   To depict the hub-pattern clearly, Figure 7(b) show a typ-     Vasilescu et al. [15] analyze the interplay between Stack-
-ical example of the hub-pattern with eight labeled nodes.         overﬂow activities and the commit behaviors in Github, and
-Each node represents a developer of GitHub. The eight de-         they ﬁnd that the developers’ activities in the two platforms
-velopers develop their projects in two diﬀerent communities.      are positively associated.
-There is a core developer in the corresponding community,            Diﬀerent from above researches, our work focus on the
-                                                                  follow-network and analyze the social behavior patterns of
-7
-    https://github.com/KbishopSTC                                 crowd developers using sociological theory, which is a brand
-new perspective.                                                        Mining Software Repositories, MSR ’13, pages
-                                                                        233–236, Piscataway, NJ, USA, 2013. IEEE Press.
-8.    CONCLUSION AND FUTURE WORK                                  [7]   G. Gousios, M. Pinzger, and A. v. Deursen. An
-   Social coding paradigm exert a tremendous impact on the              exploratory study of the pull-based software
-software engineering activities. In the current, hosting more           development model. In Proceedings of the 36th
-than 5 million software repositories and attracting over 2              International Conference on Software Engineering,
-million users, GitHub is one of the most signiﬁcant open                ICSE 2014, pages 345–355, 2014.
-source software communities which is fundamentally chang-         [8]   G. Gousios and D. Spinellis. Ghtorrent: Github’s data
-ing the traditional paradigms of distributed software devel-            from a ﬁrehose. In Mining Software Repositories
-opment.                                                                 (MSR), 2012 9th IEEE Working Conference on, pages
-   In this paper, we analyze the growth curves of Github                12–21, June 2012.
-compared with the curves of traditional OSS communities,          [9]   E. M. Rogers. Diﬀusion of innovations. Simon and
-we answer the research question that why does GitHub grow               Schuster, 2010.
-in a explosive way. We draw an important conclusion that         [10]   L. Singer and K. Schneider. Inﬂuencing the adoption
-the Eﬀect of leader and Herd Behavior are the intrinsic so-             of software engineering methods using social software.
-ciological basis of this phenomenon. Furthermore, by min-               In ICSE, pages 1325–1328, 2012.
-ing the follow-network of the developers who get GitHub          [11]   M.-A. Storey, C. Treude, A. van Deursen, and L.-T.
-account during the rapid growth period, we illustrate four              Cheng. The impact of social media on software
-typical social behavior patterns.                                       engineering practices and tools. In Proceedings of the
-   In the future, we plan to study more social behavior pat-            FSE/SDP workshop on Future of software engineering
-terns about fork-network, pull request-network and watch-               research, FoSER ’10, pages 359–364, New York, NY,
-network of GitHub. Based on these social behavior patterns,             USA, 2010. ACM.
-we can develop some novel collaboration tools integrated         [12]   D. Surian, D. Lo, and E.-P. Lim. Mining collaboration
-with the social mechanisms. For example, we can design                  patterns from a large developer network. In Reverse
-a recommender system which can push the most relevant                   Engineering (WCRE), 2010 17th Working Conference
-projects to users. In addition, we also plan to combine social          on, pages 269–273. IEEE, 2010.
-behavior patterns with our previous work [16, 17] of social      [13]   F. Thung, T. F. Bissyande, D. Lo, and L. Jiang.
-software feature mining. According to the social features,              Network structure of social coding in github. In
-we can choose the corresponding collaboration patterns to               Proceedings of the 2013 17th European Conference on
-design prototype system.                                                Software Maintenance and Reengineering, CSMR ’13,
-                                                                        pages 323–326, Washington, DC, USA, 2013. IEEE
-9. ACKNOWLEDGEMENT                                                      Computer Society.
-   This research is supported by the National High Technol-      [14]   J. Tsay, L. Dabbish, and J. Herbsleb. Inﬂuence of
-ogy Research and Development Program of China (Grant                    social and technical factors for evaluating contribution
-No. 2012AA011201)and the Postgraduate Innovation Fund                   in github. In Proceedings of the 36th International
-of University of Defense Technology (Grant No.B130607).                 Conference on Software Engineering, ICSE ’14, pages
-                                                                        356–366, 2014.
-10.   REFERENCES                                                 [15]   B. Vasilescu, V. Filkov, and A. Serebrenik.
- [1] M. Bastian, S. Heymann, and M. Jacomy. Gephi: an                   Stackoverﬂow and github: Associations between
-     open source software for exploring and manipulating                software development and crowdsourced knowledge. In
-     networks. In ICWSM, 2009.                                          Proceedings of the 2013 International Conference on
- [2] A. Begel, J. Bosch, and M.-A. Storey. Social                       Social Computing, SOCIALCOM ’13, pages 188–195,
-     networking meets software development: Perspectives                2013.
-     from github, msdn, stack exchange, and topcoder.            [16]   Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
-     IEEE Software, 30(1):52–66, 2013.                                  The construction and evaluation of hierarchical
- [3] A. Begel, Y. P. Khoo, and T. Zimmermann.                           software feature repository. In SEKE, pages 624–631,
-     Codebook: Discovering and exploiting relationships in              2013.
-     software repositories. In Proceedings of the 32Nd           [17]   Y. Yu, H. Wang, G. Yin, and B. Liu. Mining and
-     ACM/IEEE International Conference on Software                      recommending software features across multiple web
-     Engineering - Volume 1, ICSE ’10, pages 125–134,                   repositories. In Proceedings of the 5th Asia-Paciﬁc
-     2010.                                                              Symposium on Internetware, Internetware ’13, pages
- [4] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and                  9:1–9:9, 2013.
-     E. Lefebvre. Fast unfolding of communities in large
-     networks. Journal of Statistical Mechanics: Theory
-     and Experiment, 2008(10):P10008, 2008.
- [5] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb. Social
-     coding in github: transparency and collaboration in an
-     open software repository. In Proceedings of the ACM
-     2012 conference on Computer Supported Cooperative
-     Work, CSCW ’12, pages 1277–1286, 2012.
- [6] G. Gousios. The ghtorent dataset and tool suite. In
-     Proceedings of the 10th Working Conference on
-
\ No newline at end of file
diff --git a/res/paper/pr-assignment-demo-final.pdf b/res/paper/pr-assignment-demo-final.pdf
deleted file mode 100644
index 0626b15..0000000
--- a/res/paper/pr-assignment-demo-final.pdf
+++ /dev/null
@@ -1,299 +0,0 @@
-Reviewer Recommender of Pull-Requests in GitHub
-                                                             Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling†
-                                                             ∗ National
-                                                 Laboratory for Parallel and Distributed Processing,
-                         College of Computer, National University of Defense Technology, Changsha, 410073, China
-                 † Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
-
-                                       {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
-
-
-   Abstract—Pull-Request (PR) is the primary method for code                                               traditional review process is transformed into a crowdsourcing
-contributions from thousands of developers in GitHub. To main-                                             job. Not only core developers but also external developers in
-tain the quality of software projects, PR review is an essential                                           the community can act as reviewers. The reviewers can freely
-part of distributed software development. Assigning new PRs
-to appropriate reviewers will make the review process more                                                 discuss the PR with the contributor and core developers in
-effective which can reduce the time between the submission of a                                            terms of their interests and expertise. Next, in the light of
-PR and the actual review of it. However, reviewer assignment                                               reviewers’ suggestions, the contributor would update his pull-
-is now organized manually in GitHub. To reduce this cost,                                                  request by attaching new commits, and then reviewers discuss
-we propose a reviewer recommender to predict highly relevant                                               that PR again. Finally, the responsible mangers of the core
-reviewers of incoming PRs. Combining information retrieval with
-social network analyzing, our approach takes full advantage                                                team take all the opinions of reviewers into consideration, and
-of the textual semantic of PRs and the social relations of                                                 then merges or rejects that PR. Thus, we can see PR review
-developers. We implement an online system to show how the                                                  is an important way to maintain the quality of the software.
-reviewer recommender helps project managers to ﬁnd potential                                                  Assigning incoming PRs to appropriate reviewers will make
-reviewers from crowds. Our approach can reach a precision of
-74% for top-1 recommendation, and a recall of 71% for top-10
-                                                                                                           PR review more effective, because it can reduce the time
-recommendation. http://rrp.trustie.net/                                                                    between the submission of a PR and the actual review of
-   Keywords—Pull-request, Reviewer Recommendation, Social                                                  it. We refer to the period between the time when a PR is
-Network Analysis, Distributed Software Development                                                         submitted into issue tracker and the time when it begins to
-                                                                                                           be discussed by reviewers as review latency. The PRs which
-                                      I. I NTRODUCTION                                                     have been assigned to reviewers have lower review latency
-                  1
-   GitHub , a popular social coding community [1], attracts a                                              than those without assignment. According to our analysis,
-large number of software projects hosted on it. Pull-Request                                               the time of the recommended reviewer submitting his ﬁrst
-(PR) is the primary method [2], [3] for code contributions                                                 comment on PR is on average 40.8 hours shorter than those
-from thousands of developers. Currently, it is not uncommon                                                without recommendation. However, reviewer assignment is
-in the popular projects to receive tens of PRs daily covering                                              now organized manually in GitHub. As each developer in
-nearly 60% of code commits from contributors.                                                              community has the chance to join the review discussions, the
-                                Issue Tracker                                                              project managers may not completely ﬁnd out all potential
-      Pull
-    Request
-                                                                        Core Team                          reviewers from crowds.
-                  Submits                                     Discuss
-                  Discuss                Discuss
-                                                                                                              To reduce this cost, we designed a reviewer recommender
-                               PR
-                                    PR
-                                              PR
-                                                   PR
-                                                                                                           to predict appropriate reviewers for incoming PRs in Github.
-                                         PR             PR
-              Update
-                                                                                                           The two key intuitions of our approach focus on the textual
-                                                                                      Merge    Project
-                                                                                                           semantic of PRs and the social relations of contributors.
-                                                                         Judge
-                                                                                              Repository
-   Contributor               Review Comments                                                                 •   The expertise of a reviewer can be learned from his
-                                                                             Reject
-                              Pull
-                            Request
-                                                                                                                 PR-commenting history. For a newly received PR, the
-      Clone                                                              Closed
-                                                                                                                 developers who have commented similar PR frequently
-    Repository
-                                                                                                                 in the past are the suitable candidates to review the new
-                                                                                                                 one.
-                   Figure 1. The overview of pull-request mechanism
-                                                                                                             •   The common interests among developers can be measured
-   The overview of PR mechanism is presented as Figure 1.                                                        by social relations between contributors and reviewers in
-Firstly, a contributor implements some new features or ﬁxes                                                      historical PRs. The developers who share more common
-bugs based on his personal repository cloned from the latest                                                     interests with the contributor are the appropriate review-
-version of project repository. When his work is ﬁnished, the                                                     ers of his incoming PRs.
-patches are packaged as a PR submitted to the issue tracker.
-The system open a new issue for this PR, and then add                                                         Thus, we propose a novel approach combining information
-the issue to an awaiting list to be reviewed. In GitHub, the                                               retrieval with social network analyzing to recommend highly
-                                                                                                           relevant reviewers. We demonstrated the efﬁciency of our
-  1 https://github.com/                                                                                    approach on 10 popular projects which have received over
-1000 PRs in GitHub. On average, our reviewer recommender                 integrated with the social media of peer-to-peer notiﬁcation,
-can reach a precision of 74% on the top-1 recommendation                 such as the @mention tool in GitHub that adds the @ tags
-and a recall of 71% on top-10 recommendation.                            to the potential reviewers automatically. Actually, we also
-                                                                         can provide an independent service for each OSS community,
-          II. E XITING T OOLS AND R ELATED WORK                          when the enough data has been shared and collected.
-A. Exiting Tools and Motivation
-                                                                         B. Related Work
-   Notiﬁcations in Github are based on the repositories you
-are watching. Each project watcher will mechanically receive                We review the similar researches of reviewer recommenda-
-notiﬁcations of all newly received PRs. In this way, the PRs             tion in bug triaging and code (patch) review in this section.
-which the developer really cares about would be drowned out                 The most representative researches are based on machine
-by a massive amount of noise.                                            learning and information retrieval techniques to triage incom-
-   To triage PRs, the project managers can use a label to assign         ing bug reports. For example, Anvik et al. [4] apply a machine
-a new PR to one of core developer. The assignee is in charge of          learning algorithm to learn the kinds of reports each developer
-the review process. However, only 0.89% of PRs have been set             resolves and recommend developers for a new bug report.
-that label in our dataset. Besides, the @mention tool is widely          Kagdi and Poshyvanyk [5], [6] extract the comments and
-used in the discussion of PR review. If a @ symbol placed in             identiﬁers from the source code and index these data by Latent
-front of a user’s ID, the corresponding developer will receive           Semantic Indexing (LSI). For a new bug report, such indexes
-a special notiﬁcation that he has been mentioned in the PR               can be useful to identify the most appropriate developers to
-and his ID would be highlighted.                                         resolve it. To support code review, Balachandran [7] designs
-                                                                         a tool called Review Bot to predict the developers who
-                                                                         have modiﬁed related code sections frequently as appropriate
-                                                                         reviewers. Compared to the Review Bot, Thongtanunam et al.
-                                                                         [8] recommends code reviewers from developers who have
-                                                                         examined ﬁles with similar directory paths.
-                                                                            All these approaches focus on mining the related text, such
-                                                                         as bug descriptions and code ﬁles, but the social relations
-                                                                         among developers are ignored. However, the process of PR
-                                                                         review is more likely to rely on the discussions among review-
-                                                                         ers to be resolved. These discussions occurred over artifacts
-                                                                         may imply reviewers common interests in social activities and
-                                                                         division of work in projects. Thus, we consider the relations
-                                                                         reﬂected by the artifact-mediated communication is a key
-                                                                         factor of recommendation. Begel et al. [9] present a framework
-                                                                         for connecting developers and their work artifacts together. In
-                                                                         this paper, we propose a novel and lightweight approach that
-                                                                         combines information retrieval with social network analyzing
-                                                                         to recommend appropriate reviewers for new PRs.
-
-                                                                                             III. M ETHODOLOGY
-                                                                            Firstly, the titles and descriptions of PRs are extracted and
-                                                                         indexed using the Vector Space Model. Then, we measure
-  Figure 2. An example of discussion among reviewers in a pull-request
-                                                                         semantic similarity between the new PR and each one of
-   Taking a real PR of Ruby on Rails as an example, as shown             historical PRs, and predict the expertise score of a developer
-in Figure 2, no one is assigned to this PR. A core developer             according to the number of comments he has submitted.
-called rafaelfranca is the ﬁrst reviewer to comment the PR. As           Furthermore, we construct a comment network for each project
-he considers that javan’s work would be relevant, he mentions            separately by analyzing the comment relations among devel-
-(@) javan to join the discussion. At the second post, we                 opers. In a speciﬁc project, we can predict the common interest
-can see that javan indeed presents his opinion. Apart from               of each reviewer shared with the PR contributor based on the
-javan who is informed by rafaelfranca, other three reviewers             comment network. Finally, we synthesize the expertise scores
-comment that PR spontaneously. Because all the comments                  and the common interests to rank all candidates.
-affect the decision-making of that PR, if they do not catch it
-timely, it is possible that some vital opinions would be lost.           A. Vector Space Model of Pull-Request
-   Thus, if appropriate reviewers are automatically recom-                  Each PR is characterized by its title and description, and
-mended when a new pull-request is submitted, the review                  labeled with a set of names about developers who had sub-
-process would be more efﬁcient. It is worth mentioning that the          mitted at least one comment to it. Then, all stop words and
-novel application of reviewer recommender can be seamlessly              non-alphabetic tokens are removed, and remaining words are
-stemmed. We use the vector space model to represent each PR                where timestamp(ij,r,n) is the date that reviewer vj presented
-as a weighted vector. Each element in the vector is a term, and            the comment n in the PR r which is reported by contributor vi .
-the value stands for its importance for the PR. Term frequency-            The baseline and deadline are highly related to the selection
-inverse document frequency (tf-idf) is utilized to indicate the            of training set. If we use the data from 2012-01-01 to 2013-05-
-value of a term, which can be calculated as Equation 1.                    31 to learn the weights, the parameters baseline and deadline
-                             nt                 NPR                        are set to 2011-12-31 and 2013-05-31 respectively.
- tf idf (t, pr , PR ) = log(      +1)×log                     (1)
-                             Np r         |pr ∈ PR : t ∈ pr |                                                         v3                   v4
-where t is a term, pr is a pull-request, PR is the corpus of all
-pull-requests in a given project, nt is the count of appearance
-                                                                                                                        =?
-
-
-
-
-                                                                                                          95
-for term t in pr , and Npr and NPR are the total number of                                                          w 41
-
-
-
-
-                                                                                                       0.
-                                                                                                                                        w42=?
-
-
-
-
-                                                                                                      =
-terms in pr and pull-requests in corpus respectively.
-
-
-
-
-                                                                                                   13
-                                                                                                w
-B. Semantic Similarity and Expertise Score                                                                 w12=2.19
-   For a newly recieved PR, we ﬁrstly retrieve top-k relevant                                 v1                                 v2
-PRs from our corpus. We use cosine similarity to measure                                                       v2 commented v1's PR_1 on 2012-12-03
-the semantic similarity between a new PR and each of the re-                                                   v2 commented v1's PR_1 on 2013-01-12
-                                                                                                               v2 commented v1's PR_2 on 2013-05-07
-solved PRs. We consider that the more frequency the reviewer                             Project:
-                                                                                                               v3 commented v1's PR_2 on 2013-05-06
-                                                                                       Ruby on Rails
-has commented relevant PRs, the more knowledgeable that                                                              v1 commented v4's PR……
-                                                                                                                     v2 commented v4's PR……
-reviewer is in handling the new PR. Therefore, the expertise                                                         v4 commented v1's PR……
-score of a reviewer can be predicted based on the number of                            Figure 4. An example of the comment network
-comments which they has published in the top-k relevant PRs                   Figure 4 shows an example of a part of comment network
-(i.e., cosine similarity score times the number of comments).              about Ruby on Rails. Two different PRs (PR_1 and PR_2)
-C. Comment Network and Common Interest                                     reported by v1 have been commented by v2 and v3 , so there
-                                                                           are two edges from v1 to v2 and v1 to v3 . Evaluating the
-   We consider that common interests among developers are
-                                                                           relation between v1 and v2 , k of Equation 2 equals 2, because
-project-speciﬁc, so we build a comment network for each
-                                                                           v2 reviewed both two pull-requests. For PR_1, v2 commented
-project separately. In a given project, the structure of comment
-                                                                           it twice, so we set m = 2. The ﬁrst time-sensitive factor of
-relations is a many-to-many model. There are many contribu-
-                                                                           the date 2013-12-03 can be computed by Equation 3 that
-tors have submitted PRs to a project, and a contributor can be
-                                                                           t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12
-a reviewer to comment other contributors’ PRs. A PR would
-                                                                           (t12,1,2 ≈ 0.731), another review published by v2 in PR_1
-be commented by several reviewers more than once.
-                                                                           should be controlled by λ (set to 0.8) due to the diminishing
-   The comment network is deﬁned as a weighted directed                    impact of one user in the same PR, so w(12,1) can be calculated
-graph Gcn = V, E, W , where the set of developers is                       as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24. Similarly, the
-indicated as vertices V and the set of relations between nodes             weight w12 = w(12,1) + w(12,2) = 2.19, and w13 = 0.95.
-as edges E. If node vj has reviewed at least one of vi ’s PRs,             Thus, we can predict that reviewer v2 share more common
-there is a edge eij from vi to vj . The set of weights W reﬂects           interests with contributor v1 compared with v3 , which has been
-the importance degree of edges, and the weight wij of eij can              quantiﬁed by the corresponding weights of edges.
-be evaluated by Equation 2.                                                   The comment network has several desirable qualities.
-                   k                     k   m
-                                                                              • The global collaboration structure is revealed between
-       wij =           w(ij,r) = Pc ×             λn−1 × t(ij,r,n)   (2)
-                                                                                 contributors and reviewers in a given project.
-               r=1                      r=1 n=1
-                                                                              • The time-sensitive factor t is introduced to guarantee that
-where k is the total number of PR submitted by vi , and w(ij,r)                  the recent comments are more valuable for the weights
-is a component weight related to an individual PR r. Pc is                       of edges than the old comments.
-an empirical default value2 (set to 1.0), which is reserved to                • The decay factor λ is introduced to guarantee the differ-
-estimate the inﬂuence of each comment on the PR, and m                           ence values between the comments submitted to multiple
-is the sum of comments submitted by vj in the same PR r.                         PRs or single PR. For example, if reviewer vj commented
-When reviewer vj published multiple comments (m = 1) in                          5 different PRs of vi and meanwhile vq commented one
-the same PR, his inﬂuence is controlled by a decay factor λ                      of vi ’s PRs 5 times, the weight of wij is larger than wiq .
-(set to 0.8). The element t(ij,r,n) is a time-sensitive factor of
-corresponding comment which can be calculated as below:                    D. Reviewer Recommendation
-
-                     timestamp(ij,r,n) − baseline                             When a contributor submits a new PR, we use the PR text to
-       t(ij,r,n)   =                              ∈ (0, 1]           (3)   calculate expertise scores of candidates. Then, their common
-                        deadline − baseline                                interests can be calculated by starting from the contributor in
-  2 User comments can be found in pull-requests, issue posts and commit    the comment network. In this paper, we regard that the factor
-ﬁles. Here, we just use the comments of pull-request.                      of common interest is as important as the factor of expertise
-                            (a) Homepage of a project                                             (b) Summary of a PR                          (c) Recommendation Result
-                                                                         Figure 3. The online system of reviewer recommender
-
-in each project. Thus, we standardize the factors, and then                                                   top-10 recommendation. It means we can successfully hit
-add them together to recommend top-k reviewers to the new                                                     a majority of reviewer. Especially, high precision of top-1
-PR. In future, we plan to deeply analyze the inﬂuence of each                                                 recommendation is signiﬁcant. As the example of Figure 2,
-factor exerted on different projects.                                                                         if the ﬁrst reviewer can be predicted, he would remind other
-                                                                                                              reviewers to joint the discussion with @mentioning.
-    IV. R EVIEWER R ECOMMENDER AND E XPERIMENT
-   We implement an online system of reviewer recommender                                                                    V. C ONCLUSION AND F UTURE W ORK
-with B/S architecture. It consists of two parts: a backend server                                                For a new PR, recommending reviewers will make the
-that processes data and a web interface that interacts with the                                               review process more effective. In this paper, we propose a
-user. In practice, our application would be the most effectively                                              novel approach that combine information retrieval with social
-used as a plug-in for social coding communities.                                                              network analyzing. In the future, we plan to explore how to use
-   On the backend, the server can continuously collect and                                                    other types of social networks, such as the watcher network,
-analyze new PRs from GitHub. When a project receives a new                                                    to improve the performance of our method.
-PR, it will be listed in its homepage (Figure 3 (a)). We extract
-                                                                                                                                   VI. ACKNOWLEDGEMENT
-the key information of a PR such as the ID, description and
-submitter, as shown in Figure 3 (b). Project managers can pick                                                  This research is supported by the National High Technology
-an new PR from the awaiting list or submit a query for speciﬁc                                                Research and Development Program of China (Grant No.
-PR by typing in the issue ID. The number of recommendation                                                    2012AA011201).
-can be set as required. Then, in Figure 3 (c), the predicted                                                                                R EFERENCES
-result will be shown together with the measures. We evaluate
-                                                                                                              [1] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets soft-
-the performances of our approaches using precision and recall                                                     ware development: Perspectives from github, msdn, stack exchange, and
-which are widely used as standard metrics in previous work.                                                       topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
-In that case, top-5 reviewers have been recommended, and 4                                                    [2] J. Tsay, L. Dabbish, and J. Herbsleb, “Inﬂuence of social and technical
-                                                                                                                  factors for evaluating contribution in github,” in Proceedings of the 36th
-of them have actually commented that PR in reality. Hence,                                                        International Conference on Software Engineering, ser. ICSE ’14, 2014,
-the precision is 80% and the recall is 100%.                                                                      pp. 356–366.
-                      0.8                                                                                     [3] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
-                                                                                                                  the pull-based software development model,” in Proceedings of the 36th
-                      0.7                                                                                         International Conference on Software Engineering, ser. ICSE ’14. New
-                                                                                                                  York, NY, USA: ACM, 2014, pp. 345–355.
-                      0.6                                                                                     [4] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
-                                                                                                                  ceedings of the 28th International Conference on Software Engineering,
-                      0.5
-         Percentage
-
-
-
-
-                                                                                                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
-                                                                                                              [5] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
-                      0.4
-                                                                                                                  request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
-                      0.3
-                                                                                                                  International Conference on, May 2009, pp. 273–277.
-                                                                                                              [6] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
-                      0.2                                                                                         D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
-                                                                                 Precision                        history, or code authorship?” in Software Maintenance, 28th IEEE In-
-                                                                                 Recall
-                      0.1                                                                                         ternational Conference on, Sept 2012, pp. 451–460.
-                         1       2    3      4        5     6        7       8     9         10
-                                       The Number of Recommendation Reviewers                                 [7] V. Balachandran, “Reducing human effort and improving quality in peer
-                                                                                                                  code reviews using automatic static analysis and reviewer recommenda-
-        Figure 5. Precision vs. Recall of reviewer recommender                                                    tion,” in Proceedings of the 2013 International Conference on Software
-   In this paper, we demonstrate the performances of our                                                          Engineering, ser. ICSE ’13, 2013, pp. 931–940.
-approach on 10 popular projects which have received over                                                      [8] P. Thongtanunam, R. G. Kula, A. E. C. Cruz, N. Yoshida, and H. Iida,
-                                                                                                                  “Improving code review effectiveness through reviewer recommenda-
-1000 pull-requests. We use the data from 2012-01-01 to                                                            tions,” in Proceedings of the 7th International Workshop on Cooperative
-2013-05-31 as the training set and the data from 2013-06-                                                         and Human Aspects of Software Engineering, ser. CHASE ’14, 2014, pp.
-01 to 2013-10-01 as the test set. Figure 5 clearly exhibits the                                                   119–122.
-                                                                                                              [9] A. Begel, Y. P. Khoo, and T. Zimmermann, “Codebook: Discovering and
-overall performance of our approach. On average, the precision                                                    exploiting relationships in software repositories,” in Proceedings of the
-reaches the highest point of 0.74 for top-1 recommendation                                                        32Nd ACM/IEEE International Conference on Software Engineering -
-and the recall considerably ascends to 0.71 at the point of                                                       Volume 1, ser. ICSE ’10, 2010, pp. 125–134.
-
\ No newline at end of file
diff --git a/res/paper/trustcom2013_EI.pdf b/res/paper/trustcom2013_EI.pdf
deleted file mode 100644
index dcc3e3a..0000000
--- a/res/paper/trustcom2013_EI.pdf
+++ /dev/null
@@ -1,402 +0,0 @@
-          2013 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications
-
-
-
-
-           A Trusted Remote Attestation Model based on
-                       Trusted Computing
-
-                                            Yue Yu, Huaimin Wang, Bo Liu, Gang Yin
-                                     National Laboratory for Parallel and Distributed Processing
-                                            National University of Defense Technology
-                                                         Changsha, China
-                                yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@gmail.com
-
-
- Abstract—Traditional security protocols can not be trusted in               channel to an end-point of unknown integrity is ultimately
- some application scenarios of high security level because the               futile. In the words of Gene Spafford [1], “using encryption on
- endpoints integrity is ignored. In this paper, we propose a novel           the Internet is the equivalent of arranging an armored car to
- trusted remote attestation model which combines the secure                  deliver credit card information from someone living in a
- channel and the integrity measurement architecture of trusted               cardboard box to someone living on a park bench.”
- computing. We design and implement a prototype system based
- on a mature security protocol, Transport Layer Security (TLS)                   People have realized that in the face of existing security
- protocol, integrated with integrity report provided by trusted              risks and threats, we not only need a top-down security system
- platform module (TPM). The TLS protocol guarantees the                      design, but also need to bottom up ensure the credibility of
- security of data exchange process and the integrity report of               computing systems from the terminal. Thus the technology of
- TPM provides the evidence about the trustworthiness and the                 trusted computing (TC) developed rapidly and has also become
- security state of the communication endpoints. Compared by                  a hotspot in academia [2][3]. Reporting integrity information to
- traditional approaches, our method is more efficient and can be             a remote platform is one of the main goals of TC as proposed
- deployed in large scale systems easily.                                     by the TCG. There is one security chip named Trusted Platform
-                                                                             Module (TPM) integrated into mother board of computing
-     Keywords—remote attestation; secure channel; integrity report;
-                                                                             platform [6]. Before every component taking control of main
- trusted computing
-                                                                             CPU, such as BIOS, MBR, OS Kernel, Application and so on,
-                        I.    INTRODUCTION                                   its characteristic code and configure data must be measured,
-                                                                             and the measured value is stored into TPM Platform
-     Modern era, people are more dependent on the Internet than              Configuration Registers (PCR). When the computing platform
- before, and have increasing demand for service provided by the              wants to access some resources in remote entity, remote entity
- Internet. Some confidential information requires transmitting in            can ask the computing platform to give a security status report.
- secure channel. The traditional security network protocols,                 Report data includes computing platform’s TPM-based identity
- such as Security Socket Layer (SSL) protocol and Transport                  information and PCR value. Remote entity evaluates the report
- Layer Security (TLS) protocol, just set up a secure channel in              data and makes decision to allow computing platform to access
- which attackers cannot steal or distort transmitting data[4][5].            the resource or not, which is illustrated in Figure 1.
-     However, this kind of secure channel is not integrity
- because of the exclusion of the endpoints secure state. As a
- result, if the endpoint is invaded by malicious software, it is
- possible to appear such embarrassing situation that after
- terminal identity authentication passing through, establishing
- connection and secure transmission, data is stolen by malicious
- codes on the terminal. Take the once wide spread virus,
- Win32.Huhk.d.7607 called “E-band hiding robber”, as an
- example. The virus can infect the main program of IE browser
- in the system, IEXPLORER.EXE, after into the system through
- web Trojan. In this way, when the user using IE browser log in
- the E-bank and trade, the virus can automatically intercept a lot
- of related information, including the user’s payment card                             Figure 1. Trusted Computing Platform integrity report
- number, password, payee name and other sensitive information.                  This mechanism has some serious limitations. It has many
- The virus invades user terminal, thus bypassing the secure                  shortcomings such as inconvenient software upgrading, not
- communication channel established by both sides, which bring                adapting to dynamic changes of the system configuration, easy
- the great danger to E-bank users. Therefore, using a secure                 to bind to a special products, and easy to leak platform
-
-978-0-7695-5022-0/13 $26.00 © 2013 IEEE                               1504
-DOI 10.1109/TrustCom.2013.183
-configuration [7]. Moreover, network security protocols which              relevant mending or upgrade. TNC is a method to realize the
-support the TCG remote report are less and combine is not                  network access control and that to implement initiative
-close enough.                                                              protection which can restrain most of the potential attack
-                                                                           before their outburst.
-    The main contribution of this paper is to illustrate how to
-combine the security channel with integrity measurement                       However, there are three relatively pivotal problems of the
-architecture of trusted computing. A trusted remote attestation            remote attestation under current TNC architecture which this
-model is proposed and the implementation is given in detail                paper focuses on:
-including: (1) TPM integrity report mechanism and related
-functions; (2) The steps to obtain Platform Identity Key (PIK)                 1) One-way trustworthiness evaluation. Before the terminal
-of TPM; (3) How to make the integrity policy and                           accessing network, besides providing its own trusted evidence
-configuration of platform; (4) The approach of TLS Handshake               of platform, it should also assess the network, otherwise it can
-Protocol extensions.                                                       not guarantee credibility of the service acquired from network.
-
-    The article structure is as follow: Section II analysis some               2) Relatively independent of current security system. To
-related work; Section III introduces the overall structure and             realize the access control, TNC devised a set of independent
-basic framework of the model proposed in this paper; Section               mechanism. As shown in Figure 2, the TNC framework is
-IV presents specific implementation of each component of the               divided into three entities, three levels and several interface
-model. We summarize this paper and make the future research                components. The realization of every part is relatively complex
-plan in Section V.                                                         and lacks the support of secure protocol. For example there
-                                                                           require a mass of information exchange between TNCC and
-                      II.   RELATE WORK                                    TNCS or TNCC and IMC, however the TNC framework itself
-                                                                           has not provided relevant secure protocols.
-A. Research of TNC
-                                                                               3) Lacking the good combination with the secure channel.
-    With the development of Internet, trusted computing should
-                                                                           Although TNC framework considers the process that platform
-not only guarantee the trustworthiness of terminal computing
-                                                                           reports its integrality to remote entity, it does not combine with
-environment, but also extend to network, making it become a
-                                                                           existing secure channel to guarantee confidentiality or
-trusted computing environment [8]. In May 2004, TCG
-                                                                           integrality of platform and etc.
-founded the Trusted Network Connection Sub Group [9]
-(TNC-SG) which mainly takes charge of the research and                     B. Research of TPM-based Remote Attestation
-setting of Trusted Network Connection (TNC) framework as                       There are many different previous works in the area of
-well as some relevant Standards. Construction of trusted                   remote attestation or access control based on TPM or TC. In
-network is extremely tough owing to the complexity of                      [12], a Property-Based Attestation (PBA) mechanism is
-network itself, so TCG firstly takes the relatively elementary             proposed, which extends the architecture of TC remote report
-problem into account. TNC is the expansion of TPM as well as               model and includes the property values of the remote side in an
-the combination between mechanism of trusted computing and                 attestation. A Trusted Third Party (TTP) translates the actual
-that of network access control. The TNC architecture [10][11]              system configuration into a set of properties and issues
-with trusted computing platform is shown in Figure 2.                      certificates for those properties. During the attestation process a
-                                                                           remote challenger can decide whether or not the platform
-                                                                           security properties meet the requirements of the respective use
-                                                                           case. Similarly, Semantic Remote Attestation (SRA) [13] uses
-                                                                           language-based techniques to attest high level properties of an
-                                                                           application. The proposal is based on the Java Virtual Machine
-                                                                           (JVM) environment which is attested by binary attestation itself.
-                                                                           Paper [14] presents a Peer-to-Peer access control architecture
-                                                                           using TC technology. A trusted reference monitor (TRM) is
-                                                                           introduced beyond the trusted hardware. This architecture can
-                                                                           enforce an object owner’s policy in a client platform by
-                                                                           attesting the authenticity of the platform and the integrity and
-                                                                           possible properties of the requesting application.
-                                                                               Another kind of related works [15] aims at linking end-
-                                                                           point configuration information to secure channels. It combines
-                  Figure 2. TNC architecture with TPM                      the TLS and IPSec protocols with the platform integrity
-                                                                           measurement and reporting features of TCG Trusted
-    Its main idea is as follow. The identity of users is verified          Computing functionalities. However, none of the solutions so
-before terminal accessing network. If the information of users             far addresses the problem fully [19]. Some are specified in
-identify gets through, the identify of terminal platform should            insufficient detail, e.g., [16] do not explain how they exactly
-be verified. Then, TNC will measure the terminal platform                  establish the linkage to TLS. Others have deficiencies
-trusted states and if the result of measurement meet the secure            regarding security or trust assumptions that we do not achieve.
-policies, it allows terminal to access network, otherwise it will          e.g., [17] aims to prevent “relay attacks” or “MitM attacks”, but
-connect the terminal to appointed isolation area and make                  as shown in [18], these attacks seem still possible. The
-
-
-
-                                                                    1505
-approach given by [18] overcomes most of the shortcomings                   introduced in the part A of Section IV. Part B will detail the
-identified in related work, but it required costly acquisitions of          process of PIK and the way how to make the platform integrity
-specific cryptographic hardware and some features of the                    authentication policy will be referred to in part C. Part D will
-protocol do not conform to the TLS specification [5], e.g.,                 show the way that how ISP builds integrity channel with ISR
-sending attestation data within the key exchange messages, or               and it will also details the way to extend the TLS protocol.
-including integrity data in session key computation. Changing
-central message formats or computations of the TLS protocol                                     IV.   IMPLEMENTATION
-would result in that the TLS specification must be redefined                A. Integrity Report Mechanism of TPM
-and backward the compatibility of TLS. The solution in [19]
-conform the TLS specification better than other works and                       There is a group of PCRs (Platform Configuration Register)
-elaborate the trusted channel in detail.                                    in the TPM [6]. One PCR is only relevant with one type of
-                                                                            system special event of computing platform. The integrity
-        III.   TRUSTED REMOTE ATTESTATION MODEL                             value of a trusted computing platform component is stored in
-                                                                            PCR. The length of PCR is related to the Hash algorithm used
-   Carrying out the trusted remote attestation model which the
-                                                                            by trusted computing platform. Its length is as long as the
-paper refers to is also based on the PKI, and the model is
-                                                                            length of the calculation of Hash. It needs to compute the
-shown as Figure 3. This model consists of three parts: Privacy
-                                                                            integrity value of the component again, when the integrity of
-Certificate Authority (PCA) Server, Internet Service Requestor
-                                                                            this component changes. The computing expression is shown
-(ISR) and Internet Service Provider (ISP).
-                                                                            as follow:
-                                                                                      expresses as a new Hash value of nth PCR,
-                                                                            is the original value of nth PCR before measuring, and
-                                                                                        is the value of the component measured this time.
-                                                                            Obviously, the integrity value stored in PCR is able to reflect
-                                                                            the change of components integrity and not just reflect one
-                                                                            state of the component. If the measured value of several
-                                                                            components is stored in the same PCR, it needs to split the
-                                                                            integrity measured value of the component joint the value
-                                                                            stored in PCR, do the Hash computing and restore the result
-                                                                            got in the PCR one by one in the special sequence. When the
-                                                                            integrity measured value of the last component is stored, the
-           Figure 3. Remote attestation model based on TPM                  value in the PCR is the integrity measured value of this
-                                                                            component.
-   PCA Server is used to authorize the Platform Identity Key
-(PIK) to ISQ and ISS and authenticate the mutual identity. The                  Trusted Computing Platform records the information of
-content on the principle of PKI, the reason why we use the PIK,             measurement in the Stored Measurement Log (SML). From the
-and the way how to apply the PIK will be details in the next                start of platform powering up, the trusted chain
-Section. In the Figure 3, the application and authentication of                                                         is recorded.
-PCA Server are both two-way. ISR and ISP use the mutual
-authentication, and they are both related to certificate request                In the process of remote attestation, the integrity report
-and certificate validation. The Figure only shows the single                provided by platform is the SML and its corresponding PCR
-authentication for convenience.                                             value. It includes the static configuration of terminal, such as
-                                                                            system version, hardware condition. It also includes the
-    ISR with TPM guarantees the integrity in the hardware                   dynamic configuration of terminal, such as process condition,
-layer and provides the serve of integrity measurement and                   network flow information and so on. In that way, the two sides
-storage. By using Trusted Software Stack (TSS), ISR provides                of communication can use this integrity report to verify the
-the interface to call the relevant function of TPM. And then                static and dynamic integrity of each terminal.
-according to extended TLS protocol, build the integrity channel
-to provide the identification and the report of platform integrity          B. PIK certificate for remote attestation
-for ISP and testify the ISP platform identity and its platform                  One of the easiest ways to identify a TPM is to verify the
-integrity. The paper calls this layer as Software Service Layer.            serial number which is one-to-one relationship between a TPM.
-When the platform integrity authentication succeeds, ISR uses               However, the problems of user’s privacy should be considered.
-ISR Client Application to request Internet serve to ISP, such as            For example, if a TPM user always accesses some shopping
-FTP, HTTP and so on.                                                        website, his hobbies can be analyzed by his shopping history
-                                                                            records.
-    The process of ISP is similar to ISR, and the difference
-between them is that ISP provides the Internet source and                       PKI-based TCM key architecture has been give out in paper
-serves in the application layer by ISP Server Application.                  [20]. The manufacture generates an endorsement key (EK)
-                                                                            during manufacturing stage of TCM. EK is a pair of
-    Obviously, compared with the distributed network model                  asymmetric key which is stored in the non-volatile protected
-this model changes little in the network layer and has no                   storage area in the TCM. One TCM can own only one EK
-additional system component. It has a better usability and                  during its life cycle. In order to protect privacy of users, the
-compatibility. The integrity report mechanism of TPM will be
-
-
-
-                                                                     1506
-platform doesn’t directly use EK to sign for identity                             Finally,      ,                and           are sent to PCA
-authentication. Users have to request the TCM to generate a                   to apply PIK certificate.
-PIK for every special Web application, and apply for PIK
-certificate from PCA based on EK. The privacy of the                                4) PCA verifies data integrity by         and use the private
-corresponding relationship between EK and PIK is protected                    key            to decrypt                     to get              ,
-by PCA. A TCM and its host platform can have multiple PIKs.                                                             .
-Thus, users can use different PIK for identity authentication in                            can be decrypted as         the follow formula:
-different situations in order to achieve the purpose of the
-platform identity privacy protection.
-    In this paper, the handshake protocol of TLS needs to be
-                                                                                                             .
-expanded which PIK certificate should be used. The process of
-applying a traditional X509.v3 certificate must change to bind                    Furthermore, PCA verifies               ,               and
-with TPM. The generating of PIK, applying for, procedure of                          , then         will be verified by PCA using           .
-signature and activation PIK certificate are shown as Figure 4.               After these verifications, PCA signs PIK certificate, then
-                                                                              generates randomly a symmetric key       and use it to encrypt
-                                                                                      to get                                . At last, it use
-                                                                              the public key of EK to encrypt                  to get the
-                                                                                                         and compute hash value of
-                                                                              and            ,                                . PCA sends
-                                                                              the data of      ,          and        to TCP.
-                                                                                   5) TCP User verifies data integrity by    and sends a
-                                                                              command                    to TCM via TSM. TCM can use the
-                                                                              private key of EK to decrypt       ,                     ,
-                                                                              while only the valid TCP can get the correct    so we can
-                                                                              confirm the relationship of PIK and TCP User. TCM returns
-    Figure 4. Procedures of generating of PIK, applying for, signing and         .
-                        activating a PIK certificate
-                                                                                  (6) TCP User sends a request                           to TSM,
-    1) Trusted computing platform (TCP) User sends a                          TSM uses       , returned by TCM, to decrypt                   and
-command                   to Trusted Cryptography Module                      gets PIK certificate                                   .
-(TCM) via TCM Service Module (TSM). The TCM generate a
-PIK and encrypt the private key of PIK with SRK for                              From what has been discussed above, a TCP User can get a
-protection. Then the TCM use the private key of PIK to sign                   PIK certificate. In this paper, ISR and ISP can apply different
-the public key of private CA and the message digest value of                  kinds of PIKs certificates for various specific situations.
-the     public     key   of     PIK,    the   signature   is
-                                             . The TCM                        C. Platform Integrity Policy Specification
-return the public key       and       .                                           If ISR and ISP, in Figure 3, want to verify whether the
-                                                                              integrality of each other can accord with the their own
-   2) TCP User sends a request                                 to             requirement, firstly they need to define their own configuration
-TSM for getting EK certificate          and property certificates             requirement of integrity, that is platform integrity policy,
-            and             which are signed to TCM and its                   afterwards they ask for and verify relevant integrity reports
-host platform by evaluation institute and manufacturer.                       each other. Owing to the possibility that both sides of
-                                                                              communication may use inconsistent operating system, the
-    3) TCP User uses the TPM as source for random values to                   manifestation of integrity policy must consider the otherness
-generate a symmetric            , because the Random Number                   and compatibility of heterogeneous computing environment
-Generator (RNG) is considered as true random generator.                       which seems more important especially under the environment
-Meanwhile, User makes out his information              for a                  of distributed computation. The Figure 5 shows an example of
-traditional X509.v3 digital certificate request. Then,                        platform integrity policy based on XML.
-can be achieved by using symmetric encryption algorithm, e.g.
-3DES, and                 . The formula of                is:                     In Figure 5, subject and object match strictly and default
-                                                                              action ="deny" indicates under the state of default any request
-                                                                              will be refused except for the below regulation. Considering the
-                                                                              fact that remote attestation is bidirectional, subject may be ISR
-   TCP User uses asymmetric encryption algorithm to encrypt                   or ISP and the configuration and match method are surely
-                                                                              different in those two situations. So subject is identified by
-             by      the   public     key      of     PCA,
-                                                                              "ID", "role" is a changeable element which use to indicate web
-                                           .        is the
-                                                                              service requester or web service server. If the platform is
-message   digest    of                    and             ,                   Windows System, the first subject is IE. There are two integrity
-                                 .                                            rules about IE. The first one is version which must be above 6.0.
-                                                                              This rule can guarantee the stability for IE. Because generally
-
-
-
-                                                                           1507
-speaking, higher version software is accompanied by fewer                is that random number              of           created by TPM
-bugs and it can run more steadily. The second rule is the hash           Random number generator is to boycott replay attack. The
-value of IE. We can choose different hash algorithm according            Attestation Extension Demand                  of the client is
-to the different strength here. IE has different hash value for          contained in                              .              is used
-different version, a simple is shown in Figure 5 which is a hash         to transfer the configuration strategy of the client’s platform,
-value for IE6.0 in experiment computer computed by SHA-1.                and rule the integrity of the other platforms should have, the
-This rule ensures data integrity for IE. Because when malicious          structure has been stated in Section C.
-code infects IE, the hash value will change. The second object
-is a file which is in the folder “secret”. Its integrity rule is an          The expression of                                is as follow:
-action configuration which define that the access privilege of
-this file is read only.                                                      The second step, Internet Service Provider (ISP) Server
-                                                                         sends              to Internet Service Requestor (ISR) Client
-                                                                         and informs ISR Client the evidence of integrity needed to be
-                                                                         provided. At the same time, ISP Server starts to adjust the
-                                                                         configuration of the platform dynamically according to the
-                                                                                      received from ISR Client. In fact, the server should
-                                                                         have the capability to work for several clients, but requirements
-                                                                         of clients may cause conflicts. For example, Client_01 just
-                                                                         allow the server to open the Port 8080, however Client_02 may
-                                                                         want to get service from the server via the Port 3389. In this
-                                                                         case, the server virtualizes the resources and environment that
-                                                                         can meet the client requirements and provide the corresponding
-                                                                         services by taking advantage of virtualization technology.
-                                                                             The expression of                                is as follow:
-
-              Figure 5. Example for platform integrity policy
-                                                                             The third step, ISP Server sends its digital certificate (DC),
-    According to the description above, the representation of                                 and                      messages to ISR
-the integrity policy in this paper is flexible. Users can extend         Client, which is similar to the traditional TLS protocol.
-their own integrity policies according to different web                  However,                     message is necessary in this step
-applications and access control requirements.                            which is different from traditional TLS protocol. The digital
-D. Handshake Protocol extensions of TLS                                  certificate (DC) is the PIK certificate which is applied as the
-                                                                         step described in Section B. Then ISP Server sends platform
-    The fundamental method of remote attestation is to expend            integrity report                to ISR Client to prove that it
-trusted chain to network and one outstanding implementation              meets requirements. The structure of                           is:
-of the model is provided in paper [19]. The protocol of remote
-attestation in this paper is based on it. With the Handshake
-Protocol extensions of TLS, besides the execution of the                           and       are matched by the measurement of TPM
-traditional function, the terminal integrity verification is             for which the virtual environment serve. ISP Server uses the
-involved, as shown in the Figure 6.                                      private key of PIK to sign the Hash value of        and        .
-                                                                         After the transmission of                      to ISR Client,
-                                                                         message                  would be sent as the end signal of this
-                                                                         stage.
-                                                                             The forth step, which is similar to the traditional TLS
-                                                                         protocol. Here we mainly point the differences. ISR Client
-                                                                         firstly checks the validity of the PIK Certificate of ISP Server,
-                                                                         and then checks the authenticity and integrity of
-                                                                                          using the public key of PIK certificate to make
-                                                                         sure the data comes from ISP Server instead of being modified
-                                                                         by attacker. After that, check the validity of the congruent
-                                                                         relationship between          and       . At last, decide whether
-                                                                         the contents of        are accorded with integrity policy defined
-                                                                         by itself. If an error or authentication failure comes up during
-                                                                         the above steps, a fatal error messages would be returned to
-                                                                         opposite side and the connection will be cut off. After all the
-      Figure 6. The process of Handshake Protocol extensions of TLS      authentications get through, ISR Client sends its
-                                                                                          to ISP Server and then the message            as
-    The first step, the difference between the Hello message,            the end. The structure of                                  is
-the ISR Client sends to the ISP Server, and the traditional one
-
-
-
-
-                                                                      1508
-    After that, the identity authentication and the integrity                                          REFERENCES
-authentication of platform of ISR Client are similar to the forth      [1]    G. Spafford, Attributed to in Risks Digest 19.37 review of @LARGE, by
-step, and the protocol it used accords to the traditional TLS                 David H. Freedman and Charles C. Mann, Sept. 1997.
-protocol. Here will not give unnecessary details. Finally, there       [2]    Sheng C X, Zhang H G, Wang H M, et al, “Research and development
-is some need to point that the transportation of the integrity                of trusted computing,” Science China: Information Science, vol. 40, pp.
-reports are in plaintext, and what’s more, both sides have made               139-166, 2010. (In Chinese)
-autograph using their private key of PIK. When attackers               [3]    Shen C X, Zhang H G, Feng D G, et al. Survey of information security
-intercept and capture these messages, it is possible to dig out               [J]. Science China: Information Science, vol. 50, pp. 273–298, 2007.
-the private information of the platform. Such as which kind of         [4]    T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol
-                                                                              Version 1.1. IETF RFC 4346, Apr. 2006.
-web service ISR Client with           often requires and how is
-                                                                       [5]    S. B.-W. et al, Transport Layer Security (TLS) Extensions, IETF RFC
-the configuration of platform integrity and so on. To sum up,                 3546, June. 2003.
-the platform should ask for different PIK certificates according       [6]    Trusted Computing Group. TCG specification architecture overview,
-to different applications, and update the certificate in time to              specification             revision              1.4            [EB/OL],
-make sure the lifetime of each PIK certificate is reasonable.                 http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-
-                                                                              1D09-3519-
-         V.    CONCLUSION AND FUTURE WORK                                     ADA026A0C05CFAC2/TCG_1_4_Architecture_Overview.pdf, 2010-
-                                                                              06-12.
-    In this paper, a trusted remote attestation model has been         [7]    E Shi, A Perrig, L van Doorn. Bind, “A fine-grained attestation service
-proposed. The model combines the secure channel and the                       for secure distributed systems,” in Proc. the IEEE Symposium on
-integrity measurement architecture of trusted computing. The                  Security and Privacy, Oakland, CA, USA, 2005.
-secure channel guarantees the security of data exchange                [8]    Zhang H G, Chen L, Zhang L Q, “Research on Trusted Network
-process and the integrity report of Trusted Platform Module                   Connection,” Chinese Journal of Computers, vol. 33, pp. 706-717, Mar.
-provides the evidence about the trustworthiness of the                        2010. (In Chinese)
-communication endpoints. The implementation is described in            [9]    TNC           Web         Site.       [Online].                Available:
-detail including: (1) TPM integrity report mechanism and                      https://www.trustedcomputinggroup.org/network/
-related functions; (2) The steps to obtain PIK certificate of          [10]   TCG Specification Trusted Network Connect -TNC Architecture for
-                                                                              Interoperability Revision 1.1 [EB/OL], Trusted Computing Group, May.
-TPM; (3) How to make the integrity policy and configuration                   2006.
-of platform; (4) The approach of TLS Handshake Protocol                [11]   TCG Trusted Network Connect TNC Architecture for Interoperability
-extensions. The approach according with the trusted computing                 Specification      Version       1.4     [EB/OL],        May.      2009.
-technology conforms to the specification of TLS. Thus, the                    http://www.trustedcomputinggroup.org/resources/tcg_architecture_overv
-paper assumed that a TPM is only vulnerable to hardware                       iew_version_14.pdf.
-attacks.                                                               [12]   A. Sadeghi and C. Stuble, Property-based attestation for computing
-                                                                              platforms: Caring about properties, not mechanisms, in Proc. NSPW,
-    In a next step, we plan to give a formalization security                  2004.
-analysis of our method and test the experiment system by               [13]   V. Haldar, D. Chandra, and M. Franz, Semantic remote attestation - a
-prevalent malicious codes in the Internet. Then, we consider                  virtual machine directed approach to trusted computing, in Proc.
-adjusting the model to the requirements of distributed                        USENIX, 2004.
-computing and clouding computing. Moreover, with the                   [14]   Sandhu R, Xinwen Z, Peer-to-Peer Access Control Architecture Using
-                                                                              Trusted Computing Technology, in Proc. SACMAT’05, 2005.
-development of Trusted Computing technology, the model
-should be extended by runtime integrity measurement and                [15]   Goldman K, Perez R, Sailer R, Linking remote attestation to secure
-                                                                              tunnel endpoints, in Proc. STC ’06 Proceedings of the first ACM
-dynamic attestation agents. In addition, how to combine                       workshop on Scalable trusted computing, Nov. 2006.
-Trusted Computing technology and other security protocols,             [16]   Sadeghi A-R, Stuble C, Wolf M, et al. Enabling Fairer Digital Rights
-e.g. SSH and IPSec, is a challenge research work as well. Last                Management with Trusted Computing, in Proc. Information Security
-but not least, we plan to demonstrate the effectiveness of our                Conference, 2007.
-method with quantitative evaluation.                                   [17]   Stumpf F, Tafreschi O, Roder P, et al, A robust Integrity Reporting
-                                                                              Protocol for Remote Attestation, in Proc. WATC ’06, Dec. 2006.
-                     ACKNOWLEDGMENT                                    [18]   Gasmi Y, Sadeghi A-R, Stewin P, et al, Beyond Secure Channels, in
-                                                                              Proc. STC ’07, 2007.
-   This research is supported by the National High
-Technology Research and Development Program of China                   [19]   Armknecht F, Gasmi Y, Sadeghi A-R, et al, An Efficient
-                                                                              Implementation of Trusted Channels based on OpenSSL, in Proc.
-(Grant No. 2012AA011201) and the Postgraduate Innovation                      STC ’08, Oct. 2008.
-Fund of University of Defense Technology (Grant                        [20]   Fajiang Yu, Tong Li, Yang Lin, et al, Hierarchical-CPK-Based Trusted
-No.S120602). Many thanks to Xiang Li, Tao Wang, Tianzuo                       Computing Cryptography Scheme, in Proc. ATC 2011, LNCS 6906: 149-
-Wang, and Zhefeng Xiao for discussion and their suggestion                    163, 2011.
-and works on data collecting.
-
-
-
-
-                                                                    1509
-
\ No newline at end of file

commit 304abec203336d529d5fa6278c69e68ab01e24c4
Author: fisher <yyuu51888@163.com>
Date:   Fri Jan 23 10:50:29 2015 -0800

    test
---
 .DS_Store  | Bin 6148 -> 0 bytes
 index.html | 172 +------------------------------------------------------------
 2 files changed, 1 insertion(+), 171 deletions(-)

diff --git a/.DS_Store b/.DS_Store
deleted file mode 100644
index 714af06..0000000
Binary files a/.DS_Store and /dev/null differ
diff --git a/index.html b/index.html
index e1694f0..2fcee71 100644
--- a/index.html
+++ b/index.html
@@ -1,171 +1 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
-<!-- saved from url=http://forge.trustie.net/Fisher/ -->
-<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
-<TITLE>Yue Yu's Website</TITLE>
-<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<STYLE type=text/css>
-H1 {
-	MARGIN-BOTTOM: 0px
-}
-H2 {
-	COLOR: #004400
-}
-UL.pubs LI {
-	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
-}
-body {
-	background-color: #FFFFFF;
-}
-.STYLE1 {color: #3399FF}
-.STYLE4 {
-	color: #004400;
-	font-weight: bold;
-}
-.STYLE5 {color: #004400}
-</STYLE>
-
-<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
-<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
-link=#003300>
-<span class="STYLE1"></span>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD vAlign=middle align=left>
-      <H1>Yue Yu (余跃) </H1></TD>
-    <TD rowSpan=3 width=200 align=right><IMG 
-      src="res/Yy.jpg" width=160 height="153"></TD>
-  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
-  <TR>
-    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
-	<P>
-	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
-	</P>
-      </TD></TR></TBODY></TABLE>
-<HR align=center color=#006600 width=800 noShade>
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-      <H2 class="STYLE4">Contact Information</H2>
-      <UL style="LIST-STYLE-TYPE: none"><LI>
-        <p>National  Laboratory for Parallel and Distributed Processing<br>
-          Computer  School, National University of Defense Technology<br>
-          Changsha,  Hunan Province, 410073, P.R.C<br>
-		   Phone: (86)13627319266<br>
-		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
-        </p>
-		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
-        <LI>
-        </UL>
-		 <hr size="2" color="black" align="center">
-      <H2>Education</H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
-			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
-			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
-		</LI>
-		&nbsp;
-        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
-			2007.9--2011.6 B.E. in Information Security<br>
-		</LI>
-		&nbsp;
-		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
-			2009.03-2010.06 Minor in Journalism and Communication.<br>
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE5">Research Experience </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>
-		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
-	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
-        <LI> National Science Foundation of China (Grant No.60903043)</LI>
-		<br>
-		<LI>
-		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
-		<LI>
-		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
-		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
-		</LI>
-      </UL>
-	  <hr size="2" color="black" align="center">
-      <H2 class="STYLE4">Awards and Honors </H2>
-      <UL style="LIST-STYLE-TYPE: none">
-        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
-        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
-        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
-        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
-        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
-        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
-        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
-        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
-      </UL>
-	  <hr size="2" color="black" align="center">
-	  </TD></TR></TBODY></TABLE>
-	  
-<TABLE width=800 align=center>
-  <TBODY>
-  <TR>
-    <TD>
-     <H2 class="STYLE5">Publications</H2>
-     
-	 <H3>2014</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
-		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
-		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
-
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
-		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
-		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
-		[<A href="res/paper/apsec2014.pdf">pdf</A>]
-		
-		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
-		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
-		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
-		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
-        
-      </UL> 	  
-	  
-      <H3>2013</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>
-		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
-		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
-		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
-        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
-		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
-		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
-		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
-        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
-        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
-		</UL>
-		
-	  <H3>2011</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
-		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
-		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
-		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
-		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
-		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
-		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
-		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
-      </UL>
-	  
-	  <H3>2010</H3>
-      <UL style="LIST-STYLE-TYPE: none" class=pubs>
-        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
-		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
-		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
-		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
-      </UL>
-		
-      </TD></TR></TBODY></TABLE>
-</BODY></HTML>
+echo "Hello World"
\ No newline at end of file

commit b0f136003395a2491ccc8204eb73cd1997248511
Author: Fisher Yu <Fisher@FisherdeMacBook-Air.local>
Date:   Thu Jan 22 22:44:31 2015 -0800

    delete js
---
 .DS_Store                  | Bin 0 -> 6148 bytes
 index.html                 |  24 +-------------------
 js/Caculate_VisitNumber.js |  53 ---------------------------------------------
 3 files changed, 1 insertion(+), 76 deletions(-)

diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..714af06
Binary files /dev/null and b/.DS_Store differ
diff --git a/index.html b/index.html
index b6479e4..e1694f0 100644
--- a/index.html
+++ b/index.html
@@ -1,4 +1,4 @@
-﻿<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
 <!-- saved from url=http://forge.trustie.net/Fisher/ -->
 <HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
 <TITLE>Yue Yu's Website</TITLE>
@@ -168,26 +168,4 @@ link=#003300>
       </UL>
 		
       </TD></TR></TBODY></TABLE>
-<DIV id=eXTReMe><!--<a href="http://extremetracking.com/open?login=mcmillco">
-<img src="http://t1.extreme-dm.com/i.gif" style="border: 0;"
-height="1" width="1" id="EXim" alt="" /></a>-->
-<!--记录单个用户登陆次数--!>
-<SCRIPT type=text/javascript><!--
-EXref="";top.document.referrer?EXref=top.document.referrer:EXref=document.referrer;//-->
-</SCRIPT>
-
-<NOSCRIPT></NOSCRIPT></DIV>
-<!--cnzz analysis--!>
-<script src="http://s22.cnzz.com/z_stat.php?id=1000243573&web_id=1000243573" language="JavaScript"></script>
-<!--google analysis--!>
-<script>
-  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
-  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
-  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
-  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
-
-  ga('create', 'UA-47071715-1', 'trustie.net');
-  ga('send', 'pageview');
-
-</script>
 </BODY></HTML>
diff --git a/js/Caculate_VisitNumber.js b/js/Caculate_VisitNumber.js
deleted file mode 100644
index 97ab12e..0000000
--- a/js/Caculate_VisitNumber.js
+++ /dev/null
@@ -1,53 +0,0 @@
-<script type="text/javascript">
-var caution = false 
-function caculate(){
-    function setcookie(name, value, expires, path, domain, secure) { 
-
-        var curcookie = name + "=" + escape(value) + 
-        ((expires) ? "; expires=" + expires.togmtstring() : "") + 
-        ((path) ? "; path=" + path : "") + 
-        ((domain) ? "; domain=" + domain : "") + 
-        ((secure) ? "; secure" : "") 
-        if (!caution || (name + "=" + escape(value)).length <= 4000) 
-        document.cookie = curcookie 
-        else 
-        if (confirm("cookie exceeds 4kb and will be cut!")) 
-        document.cookie = curcookie 
-        } 
-        function getcookie(name) { 
-        var prefix = name + "=" 
-        var cookiestartindex = document.cookie.indexof(prefix) 
-        if (cookiestartindex == -1) 
-        return null 
-        var cookieendindex = document.cookie.indexof(";", cookiestartindex + prefix.length) 
-        if (cookieendindex == -1) 
-        cookieendindex = document.cookie.length 
-        return unescape(document.cookie.substring(cookiestartindex + prefix.length, cookieendindex)) 
-        } 
-        function deletecookie(name, path, domain) { 
-        if (getcookie(name)) { 
-        document.cookie = name + "=" + 
-        ((path) ? "; path=" + path : "") + 
-        ((domain) ? "; domain=" + domain : "") + 
-        "; expires=thu, 01-jan-70 00:00:01 gmt" 
-        } 
-        } 
-        function fixdate(date) { 
-        var base = new date(0) 
-        var skew = base.gettime() 
-        if (skew > 0) 
-        date.settime(date.gettime() - skew) 
-        } 
-        var now = new date() 
-        fixdate(now) 
-        now.settime(now.gettime() + 365 * 24 * 60 * 60 * 1000) 
-        var visits = getcookie("counter") 
-        if (!visits) 
-        visits = 1 
-        else 
-        visits = parseint(visits) + 1 
-        setcookie("counter", visits, now) 
-        document.write("欢迎光临，这是您第 <font color=red>" + visits + "</font> 次访问网站！") 
-return visits
-}
-</script> 

commit 3bb427e163d16527f74ce52f18af049e33c74bbc
Author: fisher <yyuu51888@163.com>
Date:   Thu Jan 22 18:02:23 2015 -0800

    first commit
---
 index.html                                         | 193 +++++++++++++++++++++
 js/Caculate_VisitNumber.js                         |  53 ++++++
 res/CV_Yu.pdf                                      | Bin 0 -> 105648 bytes
 res/EI Num.txt                                     |  14 ++
 res/Yy.jpg                                         | Bin 0 -> 449185 bytes
 res/paper/20130122-Frecom-slide.pdf                | Bin 0 -> 1974699 bytes
 res/paper/325-HESA-slide.pdf                       | Bin 0 -> 1739438 bytes
 res/paper/ADMA12-camera-ready.pdf                  | Bin 0 -> 987055 bytes
 res/paper/F-recommendation-CameraReady.pdf         | Bin 0 -> 2158730 bytes
 res/paper/ISPDPAW.pdf                              | Bin 0 -> 449152 bytes
 ...l for Trusted Computing Dynamic Attestation.pdf | Bin 0 -> 484487 bytes
 res/paper/PaperID325-HESA.pdf                      | Bin 0 -> 2026644 bytes
 res/paper/apsec2014.pdf                            | Bin 0 -> 2080794 bytes
 res/paper/crowdsoft2014.pdf                        | Bin 0 -> 2010181 bytes
 res/paper/pr-assignment-demo-final.pdf             | Bin 0 -> 11153344 bytes
 res/paper/trustcom2013_EI.pdf                      | Bin 0 -> 723204 bytes
 16 files changed, 260 insertions(+)

diff --git a/index.html b/index.html
new file mode 100644
index 0000000..b6479e4
--- /dev/null
+++ b/index.html
@@ -0,0 +1,193 @@
+﻿<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<!-- saved from url=http://forge.trustie.net/Fisher/ -->
+<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
+<TITLE>Yue Yu's Website</TITLE>
+<META http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<STYLE type=text/css>
+H1 {
+	MARGIN-BOTTOM: 0px
+}
+H2 {
+	COLOR: #004400
+}
+UL.pubs LI {
+	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
+}
+body {
+	background-color: #FFFFFF;
+}
+.STYLE1 {color: #3399FF}
+.STYLE4 {
+	color: #004400;
+	font-weight: bold;
+}
+.STYLE5 {color: #004400}
+</STYLE>
+
+<META name=GENERATOR content="MSHTML 9.00.8112.16514"></HEAD>
+<BODY style="BACKGROUND-COLOR: #FFFFFF" aLink=#003300 vLink=#003300 
+link=#003300>
+<span class="STYLE1"></span>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD vAlign=middle align=left>
+      <H1>Yue Yu (余跃) </H1></TD>
+    <TD rowSpan=3 width=200 align=right><IMG 
+      src="res/Yy.jpg" width=160 height="153"></TD>
+  </TR><!--<tr><td align=center><img src="media/em.png"></td></tr>-->
+  <TR>
+    <TD><P>Hi there! I am currently a Ph.D. Candidate of <a href="http://www.nudt.edu.cn/index_eng.htm">National University of Defense  Technology</a>. I joined <a href="http://www.trustie.com/">Trustie</a> Group at August 2011, advised by Prof. <a href="http://www.informatik.uni-trier.de/~ley/pers/hy/w/Wang:Huaimin.html">Huaimin Wang</a>. Before that I graduated with a B.E. in Computer Science and Information Security from <a href="http://en.whu.edu.cn/">Wuhan University</a> in 2011. My main research interest is software  engineering, spanning from software repository mining and social coding network analysis.</P>
+	<P>
+	Our new <a href="http://fisher.trustie.net/icsme14.html"><Strong> research</Strong></a>: <a href="http://rrp.trustie.net/"><Strong>Reviewer Recommender </Strong></a> of Pull-request is available!
+	</P>
+      </TD></TR></TBODY></TABLE>
+<HR align=center color=#006600 width=800 noShade>
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+      <H2 class="STYLE4">Contact Information</H2>
+      <UL style="LIST-STYLE-TYPE: none"><LI>
+        <p>National  Laboratory for Parallel and Distributed Processing<br>
+          Computer  School, National University of Defense Technology<br>
+          Changsha,  Hunan Province, 410073, P.R.C<br>
+		   Phone: (86)13627319266<br>
+		   Email: yuyue_whu &lt;at&gt; foxmail &lt;dot&gt; com<br>
+        </p>
+		   <strong>Please find my <a href="res/CV_Yu.pdf">Curriculum Vitae</a> here.</strong>
+        <LI>
+        </UL>
+		 <hr size="2" color="black" align="center">
+      <H2>Education</H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI><strong>National Laboratory for Parallel and Distributed Processing (PDL), National University of Defense Technology (NUDT), China.</strong><br>
+			2013.3--present Ph.D. in Software Engineering.  Advisor: Huaimin Wang <br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, National University of Defense Technology, China (Rank: top 5)</strong><br>
+			2011.9--2013.3 M.S. in Computer Science.  Advisor: Huaimin Wang<br>
+		</LI>
+		&nbsp;
+        <LI><strong>Computer School, Wuhan University (WHU), China. (Rank: top 2 Postgraduate Recommendation)</strong><br>
+			2007.9--2011.6 B.E. in Information Security<br>
+		</LI>
+		&nbsp;
+		<LI><strong>School of Journalism and Communication, Wuhan University, China</strong><br>
+			2009.03-2010.06 Minor in Journalism and Communication.<br>
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE5">Research Experience </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>
+		<strong>Research Intern, Trustie Group, PDL, NUDT.    2011.9-present</strong></LI>
+	    <LI> National High Technology Research and Development Program of China (Grant No. 2012AA010101)</LI>
+        <LI> National Science Foundation of China (Grant No.60903043)</LI>
+		<br>
+		<LI>
+		<strong>PI, University of Defense Technology, Postgraduate Innovation Fund</strong></LI>
+		<LI>
+		Mining Heterogeneous Information Network of Social Coding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.3-2015.3 <br>
+		Research on Feature Detection and Location of OSS Repository&nbsp;&nbsp;&nbsp;&nbsp;2012.3-2013.3
+		</LI>
+      </UL>
+	  <hr size="2" color="black" align="center">
+      <H2 class="STYLE4">Awards and Honors </H2>
+      <UL style="LIST-STYLE-TYPE: none">
+        <LI>2013 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Special Prize (Only One)</strong>
+        <LI>2012 OW2 International Programming Contest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (Top 1)</strong> 
+        <LI>2011 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Third Prize (17%)</strong>
+        <LI>2010 National Information Security Competition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>First Prize (2.3%)</strong>
+        <LI>Awarded 'Yungui Ci' Scholarship in NUDT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2011-2012 <strong>(Top 2)</strong>
+        <LI>Awarded First-class Scholarship in WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2010-2011 <strong>(Top 5%)</strong> 
+        <LI>Awarded National Scholarship of China&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2009-2010 <strong>(Top 2)</strong>
+        <LI>Honored as Outstanding Graduates of WHU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2007-2011 <strong>(20%)</strong>     
+      </UL>
+	  <hr size="2" color="black" align="center">
+	  </TD></TR></TBODY></TABLE>
+	  
+<TABLE width=800 align=center>
+  <TBODY>
+  <TR>
+    <TD>
+     <H2 class="STYLE5">Publications</H2>
+     
+	 <H3>2014</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Reviewer Recommender of Pull-Requests in GitHub</strong>. 
+		The 30th IEEE International Conference on Software Maintenance and Evolution (ICSME 2014 TOOLS), Victoria, Canada, 2014. 
+		[<A href="res/paper/pr-assignment-demo-final.pdf">pdf</A>][<a href="http://rrp.trustie.net/">Demo</a>]
+
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Charles X. Ling. 
+		<strong>Who Should Review This Pull-Request: Reviewer Recommendation to Expedite Crowd Collaboration</strong>. 
+		The 21th Asia-Pacific Software Engineering Conference (APSEC 2014), JEJU, KOREA, 2014. 
+		[<A href="res/paper/apsec2014.pdf">pdf</A>]
+		
+		<LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Tao Wang.
+		<strong>Exploring the Patterns of Social Behavior in GitHub</strong>. 
+		International Workshop on Crowd-based Software Development Methods and Technologies (CrowdSoft), Hong Kong, 2014.
+		[<A href="res/paper/crowdsoft2014.pdf">pdf</A>]
+        
+      </UL> 	  
+	  
+      <H3>2013</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>
+		<strong>Yue Yu</strong></a>, Huaimin Wang, Gang Yin, Xiang  Li. 
+		<strong>HESA: The Construction and  Evaluation of Hierarchical Software Feature Repository</strong>. 
+		The 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%)
+        [<A href="res/paper/PaperID325-HESA.pdf">pdf</A>] [<a href="res/paper/325-HESA-slide.pdf">slide</a>]
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Gang Yin, Bo Liu. 
+		<strong>Mining and Recommending Software Features across Multiple Web Repositories</strong>. 
+		The Fifth Asia-Pacific Symposium on Internetware, Changsha, China, 2013. (28.8%)
+		[<a href="res/paper/F-recommendation-CameraReady.pdf">pdf</a>][<a href="res/paper/20130122-Frecom-slide.pdf">slide</a>]        
+        <LI><strong>Yue Yu</strong>, Huaimin Wang, Bo Liu, Gang Yin. <strong>A Trusted Remote Attestation Model based on Trusted Computing</strong>. The 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+        [<a href="res/paper/trustcom2013_EI.pdf">pdf</a>]
+		</UL>
+		
+	  <H3>2011</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, Xianglei Tang, <strong>Yue Yu</strong>. 
+		<strong>Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model</strong>. 
+		Proceedings of 9th IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+		[<a href="res/paper/ISPDPAW.pdf">pdf</a>]
+		<LI>Fajiang Yu, Yuewei Xu, <strong>Yue Yu</strong>. 
+		<strong>Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation</strong>. 
+		Journal of Computational Information Systems, 7(5): 1436-1445, 2011
+		[<a href="http://www.jofcis.com/publishedpapers/2011_7_5_1436_1445.pdf">pdf</a>]
+      </UL>
+	  
+	  <H3>2010</H3>
+      <UL style="LIST-STYLE-TYPE: none" class=pubs>
+        <LI>Fajiang Yu, <strong>Yue Yu</strong>. 
+		  <strong>Static Analysis-based Behavior Model Building for Trusted Computing Dynamic Verification</strong>. 
+		Wuhan University Journal of Natural Sciences, 15(3): 195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+		[<a href="http://link.springer.com/article/10.1007/s11859-010-0303-9">pdf</a>]
+      </UL>
+		
+      </TD></TR></TBODY></TABLE>
+<DIV id=eXTReMe><!--<a href="http://extremetracking.com/open?login=mcmillco">
+<img src="http://t1.extreme-dm.com/i.gif" style="border: 0;"
+height="1" width="1" id="EXim" alt="" /></a>-->
+<!--记录单个用户登陆次数--!>
+<SCRIPT type=text/javascript><!--
+EXref="";top.document.referrer?EXref=top.document.referrer:EXref=document.referrer;//-->
+</SCRIPT>
+
+<NOSCRIPT></NOSCRIPT></DIV>
+<!--cnzz analysis--!>
+<script src="http://s22.cnzz.com/z_stat.php?id=1000243573&web_id=1000243573" language="JavaScript"></script>
+<!--google analysis--!>
+<script>
+  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
+  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
+  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
+  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
+
+  ga('create', 'UA-47071715-1', 'trustie.net');
+  ga('send', 'pageview');
+
+</script>
+</BODY></HTML>
diff --git a/js/Caculate_VisitNumber.js b/js/Caculate_VisitNumber.js
new file mode 100644
index 0000000..97ab12e
--- /dev/null
+++ b/js/Caculate_VisitNumber.js
@@ -0,0 +1,53 @@
+<script type="text/javascript">
+var caution = false 
+function caculate(){
+    function setcookie(name, value, expires, path, domain, secure) { 
+
+        var curcookie = name + "=" + escape(value) + 
+        ((expires) ? "; expires=" + expires.togmtstring() : "") + 
+        ((path) ? "; path=" + path : "") + 
+        ((domain) ? "; domain=" + domain : "") + 
+        ((secure) ? "; secure" : "") 
+        if (!caution || (name + "=" + escape(value)).length <= 4000) 
+        document.cookie = curcookie 
+        else 
+        if (confirm("cookie exceeds 4kb and will be cut!")) 
+        document.cookie = curcookie 
+        } 
+        function getcookie(name) { 
+        var prefix = name + "=" 
+        var cookiestartindex = document.cookie.indexof(prefix) 
+        if (cookiestartindex == -1) 
+        return null 
+        var cookieendindex = document.cookie.indexof(";", cookiestartindex + prefix.length) 
+        if (cookieendindex == -1) 
+        cookieendindex = document.cookie.length 
+        return unescape(document.cookie.substring(cookiestartindex + prefix.length, cookieendindex)) 
+        } 
+        function deletecookie(name, path, domain) { 
+        if (getcookie(name)) { 
+        document.cookie = name + "=" + 
+        ((path) ? "; path=" + path : "") + 
+        ((domain) ? "; domain=" + domain : "") + 
+        "; expires=thu, 01-jan-70 00:00:01 gmt" 
+        } 
+        } 
+        function fixdate(date) { 
+        var base = new date(0) 
+        var skew = base.gettime() 
+        if (skew > 0) 
+        date.settime(date.gettime() - skew) 
+        } 
+        var now = new date() 
+        fixdate(now) 
+        now.settime(now.gettime() + 365 * 24 * 60 * 60 * 1000) 
+        var visits = getcookie("counter") 
+        if (!visits) 
+        visits = 1 
+        else 
+        visits = parseint(visits) + 1 
+        setcookie("counter", visits, now) 
+        document.write("欢迎光临，这是您第 <font color=red>" + visits + "</font> 次访问网站！") 
+return visits
+}
+</script> 
diff --git a/res/CV_Yu.pdf b/res/CV_Yu.pdf
new file mode 100644
index 0000000..22fb33e
--- /dev/null
+++ b/res/CV_Yu.pdf
@@ -0,0 +1,86 @@
+Yue Yu（余跃）http://fisher.trustie.net/
+National Laboratory for Parallel and Distributed Processing
+Computer School, National University of Defense Technology
+Changsha, Hunan Province, 410073, P.R.C
+Phone: (86)13627319266
+Email: yuyue_whu@foxmail.com
+
+
+EDUCATION
+National Laboratory for Parallel and Distributed Processing (PDL), National University of
+Defense Technology (NUDT), China.
+2013.3--present Ph.D. in Software Engineering. Advisor: Huaimin Wang
+Computer School, National University of Defense Technology, China (Rank: top 5)
+2011.9--2013.3 M.S. in Computer Science. Advisor: Huaimin Wang
+Computer School, Wuhan University, China. (Rank: top 2, Postgraduate Recommendation)
+2007.9--2011.6 B.E. in Information Security.
+School of Journalism and Communication, Wuhan University, China.
+2009.03-2010.06 Minor in Journalism and Communication.
+
+
+AWARDS AND HONORS
+2013 OW2 International Programming Contest                        Special Prize (Only One)
+2012 OW2 International Programming Contest                         First Prize (Top 1)
+2011 National Information Security Competition                     Third Prize (17%)
+2010 National Information Security Competition                     First Prize (2.3%)
+Awarded “Yungui Ci” Scholarship in NUDT                            2011-2012 (Top 2)
+Awarded First-class Scholarship in Wuhan University                2010-2011 (Top 5%)
+Awarded National Scholarship of China                              2009-2010 (Top 2)
+Honored as Outstanding Graduates of Wuhan University               2007-2011 (20%)
+Honored as Excellent Student Leader of Wuhan University (Twice)
+
+
+SKILLS
+   Programming Languages: Java, C/C++, C#, Ruby, SQL, J2EE, Ajax, JSP, XML, HTML.
+   System and Tools: Windows, Linux, MySQL, LaTeX, MFC, MALLET, Heritrix, Lucene
+    OpenSSL, Geni, Weka.
+
+
+TEACHING & RESEARCH EXPERIENCE
+   Teaching Assistant, National University of Defense Technology          2012.8-2013.8
+     Network Program Design
+     Distributed Computing Environment
+   Research Intern, Trustie Group, PDL, NUDT                              2011.9-present
+       National High Technology Research and Development Program of China (Grant No.
+        2012AA010101)
+     National Science Foundation of China (Grant No.60903043)
+   Principal Investigator, University of Defense Technology, Postgraduate Innovation Fund
+     Mining Heterogeneous Information Network of Social Coding              2013.3-2015.3
+     Research on Feature Detection and Location of OSS Repository           2012.3-2013.3
+   Vice-Chairman of Student Union, Wuhan University                       2009.10-2010.10
+     Awarded Excellent Student Union
+
+
+PUBILCATIONS
+2013
+   Yue Yu, Huaimin Wang, Gang Yin, Xiang Li. HESA: The Construction and Evaluation of
+    Hierarchical Software Feature Repository. The 25th International Conference on Software
+    Engineering and Knowledge Engineering (SEKE 2013), Boston, USA, 2013. (29.2%
+    acceptance Rate)
+   Yue Yu, Huaimin Wang, Gang Yin, Bo Liu. Mining and Recommending Software
+    Features across Multiple Web Repositories. The Fifth Asia-Pacific Symposium on
+    Internetware, Changsha, China, 2013. (28.8% acceptance Rate)
+   Yue Yu, Huaimin Wang, Bo Liu, Gang Yin. A Trusted Remote Attestation Model based on
+    Trusted Computing. The 12th IEEE International Conference on Trust, Security and Privacy
+    in Computing and Communications (TrustCom 2013), Melbourne, Australia, 2013.
+2011
+   Fajiang Yu, Xianglei Tang, Yue Yu. Trusted Computing Dynamic Attestation by Using
+    Static Analysis Based Behavior Model. Proceedings of 9th IEEE International Symposium
+    on Parallel and Distributed Processing with Applications Workshops, Bussan, Korea, 2011.
+   Fajiang Yu, Yuewei Xu, Yue Yu. Optimization of Program Behavior Model for Trusted
+    Computing Dynamic Attestation. Journal of Computational Information Systems, 7(5):
+    1436-1445, 2011.
+2010
+   Yu Fajiang, Yu Yue. Static Analysis-based Behavior Model Building for Trusted
+    Computing Dynamic Verification. Wuhan University Journal of Natural Sciences, 15(3):
+    195-200, Wuhan University and Springer-Verlag Berlin Heidelberg, 2010.
+   Yue Yu, Hao Sun, Yanan Kong. Expand the SSL/TLS Protocol on Trusted Platform
+    Module. The International Conference on Computer Application and System Modeling,
+    Taiyuan, China, 2010.
+   Yu Yue, Yu Fajiang, Kong Yanan. Optimizing Behavior Model Building for Trusted
+    Computing Dynamic Verification. Journal of Wuhan University of Technology, 32(20):
+    169-173, 2010. (in Chinese)
+
+
+ACTIVITES          Football, Table tennis, Swimming.
+
\ No newline at end of file
diff --git a/res/EI Num.txt b/res/EI Num.txt
new file mode 100644
index 0000000..c94aef6
--- /dev/null
+++ b/res/EI Num.txt	
@@ -0,0 +1,14 @@
+A Trusted Remote Attestation Model based on Trusted Computing
+Accession number:  20140617288556
+
+Mining and recommending software features across multiple web repositories 
+Accession number:  20135217132788
+
+Expand the SSL/TLS protocol on trusted platform module
+Accession number:  20104913453439
+
+Trusted Computing Dynamic Attestation by Using Static Analysis Based Behavior Model
+Accession number:  20113514267201
+
+Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation
+Accession number:  20112214022490
\ No newline at end of file
diff --git a/res/Yy.jpg b/res/Yy.jpg
new file mode 100644
index 0000000..68a4ced
Binary files /dev/null and b/res/Yy.jpg differ
diff --git a/res/paper/20130122-Frecom-slide.pdf b/res/paper/20130122-Frecom-slide.pdf
new file mode 100644
index 0000000..5935f55
--- /dev/null
+++ b/res/paper/20130122-Frecom-slide.pdf
@@ -0,0 +1,217 @@
+Mining and Recommending Software 
+Mining and Recommending Software
+          Features across
+     Multiple Web Repositories
+     Multiple Web Repositories
+
+
+                           Yu Yue
+                     Trustie Group of NUDT
+Introduction
+
+
+
+
+          Begin with an example
+          Begin with an example
+ Introduction                       Community                   Time                Scale
+                                    Freecode                1998               45,021+
+                                    SourceForge             1999               432,004+
+
+                                    Rubyforge               2003               9,349+
+
+1. Massive number of OSS 
+1. Massive number of OSS 
+1 M    i        b   f OSS           Ohloh                   2004               500,000+
+
+projects in open source 
+projects in open source             Google Code
+                                    …
+                                                            2006               250,000+
+
+
+communities
+
+2 OSS projects are utilized for
+2. OSS projects are utilized for 
+2. OSS projects are utilized for 
+industry wildly
+
+                                            [Actuate09] 4th Actuate Annual Open Source Survey
+Introduction
+
+
+
+
+         Software Resource 
+         Software Resource
+    Reorganized in a efficient way
+        g                        y
+Introduction
+Introduction
+Introduction
+
+
+
+
+               for stakeholders to
+     challenge for stakeholders to
+       retrieve the suitable one
+Introduction
+
+
+
+
+                     Stakeholders
+               What are you seeking for？
+               What are you seeking for？
+Challenge
+
+
+                  Mature Software
+
+
+
+
+              large-
+              large-scale, uncategorized 
+        There are 39.8% uncategorized software in SourceForge
+        There are 39.8% uncategorized software in SourceForge
+                          and 61.68% in Ohloh
+                          and 61.68% in Ohloh
+Challenge
+
+
+
+    Reusable Module and Component
+    R    bl M d l     dC        t
+
+
+
+
+            manually ， difficultly
+                 ll
+            manually ， diffi ltl
+Challenge
+
+
+
+            Reusable Code Snippet
+            Reusable Code Snippet
+
+
+
+
+                     inaccuracy 
+                     Google Code Search
+                            Krugle
+               Codase Source Code Search Engine
+Feature
+
+
+
+
+          Software Feature
+          Software Feature
+   capture and identify commonalities and differences in
+                    a software domain
+Feature
+
+
+
+  F t                   i    t d di ti ti
+  Features are any prominent and distinctive
+  concepts or characteristics that are visible to
+  various stakeholders.
+     i     t k h ld
+  a) Features are externally visible characteristics that can
+     differentiate one product from the others.
+
+     Functions, objects, and aspects have been mainly used to
+  b) F    ti      bj t      d       t h     b    i l     dt
+     specify the internal details of a system.
+Feature
+
+
+
+
+          Social Feature
+          Social Feature
+          Social
+Challenge
+
+
+1 Synonymic Feature Element:
+1. Synonymic Feature Element:
+Challenge
+
+
+2. Hybrid Semantic-
+2 Hybrid Semantic
+          Semantic-
+2. Hybrid Semantic-level:
+             Doc Topic
+             Doc-Topic
+
+
+
+
+Topic-Word
+Topic Word
+Topic Model
+
+
+
+
+ID1000：Real-time windows registry monitor utility.
+Topic structure
+
+
+
+
+            1. Email S       h    d    il    t ti
+            1 E il Scanner enhanced email protection;
+            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
+            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
+               il li t         i           il i f      f i         d th th t
+            mail clients, ensuring your email is free of viruses and other threats;
+            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
+            before they reach your inbox;
+Ontology
+资源定位
+ Overview
+Evaluation
+Evaluation
+Evaluation
+
+
+
+
+      (a) the average value
+                                                (b) the standard deviation
+
+
+                 The clustering results for each category
+Recommend
+Recommend
+Recommend
+Conclusion
+
+
+
+
+1. Build a Hierarchical rEpository of Software feAture
+1. Build a Hierarchical rEpository of Software feAture (HESA)
+
+2. Induce the Feature-
+2. Induce the Feature-Pattern base on association rule mining
+
+
+3. Recommend  the most relevant features to users
+      You！
+Thank You！
+                      Yu Yue
+                  INFLUX Group
+                  I FL X G
+     National University of Defense Technology
+
\ No newline at end of file
diff --git a/res/paper/325-HESA-slide.pdf b/res/paper/325-HESA-slide.pdf
new file mode 100644
index 0000000..c6a7348
--- /dev/null
+++ b/res/paper/325-HESA-slide.pdf
@@ -0,0 +1,185 @@
+            HESA
+The Construction and Evaluation of 
+The Construction and Evaluation of 
+  Hierarchical Software Feature
+  Hierarchical Software Feature 
+           Repository
+
+                                   Yu Yue
+                               INFLUX Group
+                  National University of Defense Technology
+Introduction
+
+
+
+
+          Begin with an example
+          Begin with an example
+ Introduction                       Community                   Time                Scale
+                                    Freecode                1998               45,021+
+                                    SourceForge             1999               432,004+
+
+                                    Rubyforge               2003               9,349+
+
+1. Massive number of OSS
+1. Massive number of OSS 
+1 M    i        b   f OSS           Ohloh                   2004               500,000+
+
+projects in open source 
+projects in open source             Google Code
+                                    …
+                                                            2006               250,000+
+
+
+communities
+
+2 OSS projects are utilized for
+2. OSS projects are utilized for 
+2. OSS projects are utilized for 
+industry wildly
+
+                                            [Actuate09] 4th Actuate Annual Open Source Survey
+Introduction
+
+
+
+
+                     Stakeholders
+               What are you seeking for？
+               What are you seeking for？
+Challenge
+
+
+                  Mature Software
+
+
+
+
+              large-
+              large-scale, uncategorized 
+        There are 39.8% uncategorized software in SourceForge
+        There are 39.8% uncategorized software in SourceForge
+                          and 61.68% in Ohloh
+                          and 61.68% in Ohloh
+Challenge
+
+
+
+    R
+    Reusable Module and Component
+         bl M d l     dC        t
+    Reusable Module and Component
+
+
+
+
+            manually ， difficultly
+                 ll
+            manually ， diffi ltl
+Challenge
+
+
+
+            Reusable Code Snippet
+            Reusable Code Snippet
+
+
+
+
+                     inaccuracy 
+                     Google Code Search
+                     Google Code Search
+                            Krugle
+               Codase Source Code Search Engine
+Feature
+
+
+
+
+          Software Feature
+          Software Feature
+   capture and identify commonalities and differences in
+                    a software domain
+Feature
+
+
+
+  F t                   i    t d di ti ti
+  Features are any prominent and distinctive
+  concepts or characteristics that are visible to
+  various stakeholders.
+     i     t k h ld
+  a) Features are externally visible characteristics that can
+     differentiate one product from the others.
+
+     Functions, objects, and aspects have been mainly used to
+  b) F    ti      bj t      d       t h     b    i l     dt
+     specify the internal details of a system.
+Feature
+
+
+
+
+          Social Feature
+          Social Feature
+          Social
+Challenge
+
+
+1 Synonymic Feature Element:
+1. Synonymic Feature Element:
+Challenge
+
+
+2. Hybrid Semantic-
+2 Hybrid Semantic
+          Semantic-
+2. Hybrid Semantic-level:
+             Doc Topic
+             Doc-Topic
+
+
+
+
+Topic-Word
+Topic Word
+Topic Model
+
+
+
+
+ID1000：Real-time windows registry monitor utility.
+Topic structure
+
+
+
+
+            1. Email S       h    d    il    t ti
+            1 E il Scanner enhanced email protection;
+            2. Email scanning for Microsoft Outlook, Outlook Express, Mozilla
+            Thunderbird, Windows Live Mail, Windows Mail, and other POP3/IMAP
+               il li t         i           il i f      f i         d th th t
+            mail clients, ensuring your email is free of viruses and other threats;
+            3. Blocks spam mails, phishing attack mails, junk mails and porn mails
+            before they reach your inbox;
+Ontology
+资源定位
+ Overview
+Evaluation
+Evaluation
+
+
+
+
+      (a) the average value
+                                                (b) the standard deviation
+
+
+                 The clustering results for each category
+      You！
+Thank You！
+                      Yu Yue
+                  INFLUX Group
+                  I FL X G
+     National University of Defense Technology
+
\ No newline at end of file
diff --git a/res/paper/ADMA12-camera-ready.pdf b/res/paper/ADMA12-camera-ready.pdf
new file mode 100644
index 0000000..39b4231
--- /dev/null
+++ b/res/paper/ADMA12-camera-ready.pdf
@@ -0,0 +1,709 @@
+           Inducing Taxonomy from Tags :
+       An Agglomerative Hierarchical Clustering
+                     Framework
+
+    Xiang Li1 , Huaimin Wang, Gang Yin, Tao Wang, Cheng Yang, Yue Yu, and
+                                Dengqing Tang2
+            1
+                 National Laboratory for Parallel and Distributed Processing,
+                                 School of Computer Science,
+                National University of Defense Technology, Changsha, China
+                    {shockleylee,jack.nudt,taowang.2005}@gmail.com
+                  2
+                     College of Mechatronics Engineering and Automation,
+                National University of Defense Technology, Changsha, China
+                                  http://www.nudt.edu.cn
+
+
+        Abstract. By amassing ‘wisdom of the crowd’, social tagging systems
+        draw more and more academic attention in interpreting Internet folk
+        knowledge. In order to uncover their hidden semantics, several researches
+        have attempted to induce an ontology-like taxonomy from tags. As far
+        as we know, these methods all need to compute an overall or relative
+        generality for each tag, which is diﬃcult and error-prone. In this paper,
+        we propose an agglomerative hierarchical clustering framework which
+        relies only on how similar every two tags are. We enhance our framework
+        by integrating it with a topic model to capture thematic correlations
+        among tags. By experimenting on a designated online tagging system,
+        we show that our method can disclose new semantic structures that
+        supplement the output of previous approaches. Finally, we demonstrate
+        the eﬀectiveness of our method with quantitative evaluations.
+
+        Keywords: social tagging; semantics; tag taxonomy; tag generality; ag-
+        glomerative hierarchical clustering; topic model
+
+
+
+
+1     Introduction
+Social tagging websites like Delicious3 and Flickr4 are becoming popular, wit-
+nessing a soaring click rate during recent years. By annotating web contents
+with free-form tags that they feel appropriate, users of social tagging websites
+are enabled to play the dual role of visitors and contributors simultaneously.
+Speciﬁcally, a user is allowed to search and browse resources (documents, im-
+ages, URLs, etc.) through tags annotated by others and is free to add or delete
+tags whenever he or she wants.
+3
+    http://www.delicious.com/
+4
+    http://www.ﬂickr.com/
+2       Inducing Taxonomy from Tags: An AHC Framework
+
+
+
+
+       (a) tag cloud in Freecode.com           (b) taxonomy in Amazon.com
+
+                      Fig. 1. diﬀerent navigation mechanisms
+
+
+
+
+    For computer programs, tags are merely character strings with no meaningful
+relationships among them, which makes it hard to organize them into an infor-
+mative structure. As depicted in Fig.1(a), most tagging websites manage tags in
+a ﬂat tag cloud, where the font size of a tag is proportional to its frequency of
+usage, so users can have easy access to buzzword tags. Sometimes however, the
+desired tags are vague in users’ head and may go beyond what is popular. A tag
+cloud could do little help in this situation, and tags should be better arranged and
+managed to satisfy the requirement. In retail websites, a user usually navigates
+through hierarchical taxonomy (as in Fig.1(b)) when her requirement is only a
+vague notion rather than a concrete keyword. So promisingly, taxonomy of tags
+will analogously facilitates navigation and searching in the now-booming social
+tagging websites. Besides, in the view of online data analysts, generating tag
+taxonomy is crucial for representing and understanding Internet folk knowledge.
+An ontology-like taxonomy is intrinsically a good knowledge structure which
+captures semantics of terms in a machine understandable way[1].
+
+    Previous literature[2][3] has addressed on how to generate tag taxonomy ef-
+fectively. By using machine learning techniques, these researches achieved auto-
+mated taxonomy generation, which could bootstrap and alleviate manual con-
+struction. However, new methods[4][5] keep emerging because resultant taxon-
+omy never seemed satisfying enough. In an attempt to detect the bottleneck,
+we ﬁnd that to deduce semantic generality of each tag is the most diﬃcult and
+error prone (see Chapter 2 Related Work). To meet such challenge, we propose
+a novel approach of tag taxonomy construction. Our innovation lies in: i) By
+using an Agglomerative Hierarchical Clustering (AHC) framework, we only need
+to compute how similar two tags are and deliberately skip the calculation of tag
+generality. ii) We seamlessly integrate a topic model into the framework, so it
+is able to capture thematic correlations among tags. iii) We make comparative
+evaluation with existing approaches, the results demonstrate the usefulness and
+eﬀectiveness of our method.
+                        Inducing Taxonomy from Tags: An AHC Framework             3
+
+2   Related Work
+Because of the convention of constructing taxonomies with the general tags at
+the top and the more speciﬁc tags below them[6], a key step in existing taxonomy
+construction methods is extracting generality of each tag, either by computing
+a generality score[2][7] or by pair-wise comparison[3][4]. As far as we know, two
+types of techniques are used to achieve this step.
+    Some research works[2][7] use set theory techniques to compute a tag gener-
+ality. In such works, each tagged resource is treated as a distinct data item with
+their textual contents ignored. Each tag is presented as the collection of item-
+s it annotates. For example, Heymann et al.[7] proposed a simple yet eﬀective
+way to learn a tag taxonomy. They ﬁrst model each tag as a vector, with each
+entry being the number of times the tag annotates a corresponding resource.
+Cosine metric is then used to measure tag similarity. They come up with the tag
+similarity graph by connecting suﬃciently similar (controlled with a threshold)
+tags. The graph centrality metric, which is originally proposed in social network
+analysis literature, is used to measure the generality of each tag. Finally, tags of
+higher generality are greedily placed at the upper levels of the resultant taxon-
+omy. Liu et al.[2] used association rule mining which takes each tagged resource
+as a transaction and tags as items. The rules are in the form of “for an unknown
+resource X, if tag A appears then probably tag B will also appear”, which they
+call “tag B subsumes tag A”. The likelihood of such subsumption is naturally
+modeled as the conﬁdence and support of the corresponding rule. Based on sub-
+sumption likelihood between each pair of tags they calculate an overall generality
+score for each tag by using a random walk process. Eventually, a taxonomy is
+constructed using a top-down manner.
+    However, such set theory based approaches share a common ﬂaw. They only
+distinguish one resource from another and do not exploit tagged web documents.
+In light of this, some researches apply topic models to do the job. Such methods
+learn a latent topic distribution for each tag from web documents they anno-
+tate, tag relations are measured based on pair-wise comparison among topic
+distributions. Tang et al.[3] designed the Tag-Topic model based on the classic
+LDA(Latent Dirichlet Allocation) model[8]. They treat each word as a draw from
+a topic-speciﬁc word distribution, and a latent topic is in turn a draw from a
+tag-speciﬁc topic distribution. Based on such a generative model, Gibbs sam-
+pling is used to infer distribution parameters. They use Kullback-Leibler (KL)
+divergence to measure the diﬀerence between two distributions, and have pro-
+posed a relative generality score metric based on the intuition “if one tag has
+higher posterior probabilities on the latent topics, then it has a relatively higher
+generality”. Wang et al.[4] merge documents annotated by the same tag (they
+use ‘keyword’ instead) as a new document which they believe can explain that
+tag. They learn a standard LDA model out of the underlying corpus. Those new
+documents are folded-in thereafter. Thus, topic distribution of each tag (new
+document) is obtained. Their measurement of relative generality is based on the
+“surprise” theory[9] plus an intuitive law that “given an anticipated tag A, the
+appear of a document on a more general tag B will cause less ‘surprise’ than if
+4       Inducing Taxonomy from Tags: An AHC Framework
+
+A and B are switched”. It is really diﬃcult to come up with a tag generality
+score that both [3] and [4] resort to intuitions.
+
+
+3   AHCTC: Agglomerative Hierarchical Clustering for
+    Taxonomy Construction
+In order to avoid computing tag generality, we borrow the idea from the classic
+agglomerative hierarchical clustering which only relies on how similar/distant
+two points are in building a hierarchy.
+    The term agglomerative hierarchical clustering is not new in the ﬁeld of tax-
+onomy construction. Brooks and Montanez[10] adopted such methods to orga-
+nizing tags into a hierarchy, yet their hierarchy is not a taxonomy for lack of
+supertype-subtype relationships. In Liu et al.[2], authors also mention the use
+of agglomerative hierarchical clustering. However, their strategy is to iteratively
+place the most general tag remained, which is diﬀerent from the classic meaning
+of the agglomerative hierarchical clustering framework. The brilliance of agglom-
+erative hierarchical clustering is yet to be fully exploited in the ﬁeld of taxonomy
+construction.
+
+
+
+               0.9
+
+              0.85
+
+               0.8
+
+              0.75
+
+               0.7
+
+              0.65
+
+               0.6
+
+              0.55
+
+               0.5
+
+              0.45
+
+               0.4
+                           2       6       5      3       1      4
+
+
+
+
+                     Fig. 2. dendrogram of a typical clustering process
+
+
+
+   To illustrate the AHCTC framework in a broader picture, we eliminate any
+presumption on how the proximity scores are calculated, but rather assume
+they are known a-priori. In the next chapter, we will describe how to get a
+meaningful proximity score. With each data point being an initial cluster, classic
+agglomerative hierarchical clustering merges two closest clusters each time until
+only one all-inclusive cluster is left. The dendrogram of a typical AHC process
+consisting of 6 points are depicted in Fig.2. Sadly, the result is not a taxonomy for
+                       Inducing Taxonomy from Tags: An AHC Framework                5
+
+
+                                       Animals
+
+
+
+
+                        Mammals          Fish        Birds
+
+
+ Fig. 3. a hierarchy of the cluster {Birds, Mammals, Fish, Animals} after promote
+
+
+
+the absence of supertype-subtype relationships. In the dendrogram, for example,
+a supertype should be there to overarch the cluster consisting of point 2 and 6.
+Now that data points are tags in our problem, a tag cluster should have a direct
+supertype (parent tag) or the resultant tag tree is not technically a taxonomy.
+    Of course, a tag cluster’s direct supertype should have high semantic proxim-
+ity to each tag in the cluster. For the cluster {Birds, Mammals, Fish Animals},
+a tag like Animals is more suitable to be the supertype than a Living Things
+tag. During the clustering process, tags with high proximity are assigned to the
+same cluster, so the supertype should better be selected from within a given clus-
+ter. Speciﬁcally, we choose the medoid of a cluster, i.e., the most central point.
+This medoid upgrades as the supertype of all other cluster members. We call
+this change as a promote operation. Now suppose the original cluster is {Birds,
+Mammals, Fish, Animals}, and Animals happens to be the medoid according
+to some proximity measure, the resultant hierarchy after promote is depicted in
+Fig.3.
+    In a hierarchical clustering scenario, a new cluster is merged from two old
+clusters each with a hierarchy itself, it forces the promote operation to be able
+to combine these two old hierarchies into a new one. With such requirements, we
+devise a promote mechanism and append it to each merge operation of classic
+AHC, the new taxonomy construction algorithm is illustrated in Algorithm 1.
+Two building blocks of the algorithm, proximity(i, j) and sup(m) are assumed
+known a-priori. We will illustrate how to get them later. The algorithm uses
+an adjacent matrix T to store resultant taxonomy. Initially, every data point is
+a distinct cluster. Each iteration in the while clause executes a merge and a
+promote operation. Line 4-7 ﬁnds the closest two clusters in the current cluster
+set to merge.
+    Line 8-21 is the promote operation, which is also the only operation edits
+T . Diﬀerent from the basic promote operation we have described in Fig.3, the
+promote operation here will be much more intricate since a hierarchical scenario
+is concerned. For ease of illustration, we call the the two supertypes over the
+clusters being merged as old supertypes. Line 8-11 says if the new supertype
+sup(m) happens to be one of the two old supertypes, an directed edge is added
+from it to the other old supertype (see Fig.4(a) and Fig.4(b)).
+    Otherwise, if sup(m) comes from the public, the procedure will have to go
+through the intricacies of line 13-20. Fig.4(c) and Fig.4(d) displays them in de-
+6      Inducing Taxonomy from Tags: An AHC Framework
+
+Algorithm 1 AHCTC
+Require: Data points D = {d1 , d2 , ..., dn }.
+Require: T = [tij ]n×n the adjacent matrix for the resultant taxonomy, tij = 1 when
+    di is a direct supertype of dj .
+Require: M = {m1 , m2 , ...}, the set of all remaining clusters.
+Require: sup(m), index of the supertype data point for a given cluster m.
+Require: proximity(i, j), the proximity score between data points di and dj .
+Ensure: construct the resultant taxonomy T .
+ 1: T ← (0)n×n
+ 2: M ← D
+ 3: while |M | > 1 do
+ 4:    ﬁnd mi and mj in M with maximum proximity(sup(mi ), sup(mj ))
+ 5:    merge mi and mj as m
+ 6:    add m to M
+ 7:    delete mi and mj from M
+ 8:    if sup(m) equals sup(mi ) then
+ 9:       tsup(m),sup(mj ) ← 1
+10:    else if sup(m) equals sup(mj ) then
+11:       tsup(m),sup(mi ) ← 1
+12:    else
+13:       ﬁnd k that tk,sup(m) equals 1
+14:       tk,sup(m) ← 0
+15:       for all g that tsup(m),g equals 1 do
+16:          tsup(m),g ← 0
+17:          tk,g ← 1
+18:       end for
+19:       tsup(m),sup(mi ) ← 1
+20:       tsup(m),sup(mj ) ← 1
+21:    end if
+22: end while
+
+
+
+
+tails. Simply speaking, former subtypes of point B (the newly elected supertype),
+i.e. D and E, should now be A’s subtypes after B’s promote operation. This is
+because A is formerly their nearest ancestor besides B, and we want to maintain
+the relation that A be more general than either D or E after B’s promote. To
+implement this process, the algorithm detaches sup(m) from its direct supertype
+k (line 13-14), attaches all children of sup(m) to k (line 15-18) and ﬁnally the
+two old supertypes are attached to sup(m) (line 19-20).
+
+    If n is the number of data points, the basic AHC algorithm requires O(n2 log n)
+time[11]. The only extra step of our algorithm is the promote operation (line 8-
+21), which at worst induces O(n2 ). The while loop will iterates for n − 1 times,
+because after each iteration the number of clusters only reduces one. At the
+worst case, all n − 1 iterations undergo line 13-20, each needs to look up and
+edit at most n − 1 edges in T . Totally speaking, our algorithm has the same time
+complexity as the basic AHC, O(n2 log n).
+                             Inducing Taxonomy from Tags: An AHC Framework                     7
+
+                                                                   A
+                     A              F
+
+
+
+                                                       B           C           F
+                 B       C     G    H    I
+
+
+
+
+             D       E                         D       E           G           H       I
+
+
+            (a) Type 1: before promote         (b) Type 1: after promote
+                     A              F
+                                                                   B
+
+
+
+                 B       C     G    H    I
+                                                           A               F
+
+
+
+
+             D       E                        D    E           C       G           H       I
+
+
+
+            (c) Type 2: before promote         (d) Type 2: after promote
+
+Fig. 4. Two types of promote operation during hierarchical clustering. The selected
+supertype and newly added edges are in red, edges to be removed are in dashed lines.
+
+
+4     Integration with Topic Models
+In order to get AHCTC running, we have to mount its assemblies. Notice that
+sup(m) ﬁnds the most central points based on proximity(i, j). So essentially, we
+only have to implement proximity(i, j) which quantiﬁes the similarity measure
+between tags.
+    Web documents annotated by a certain tag usually contain semantic informa-
+tion of that tag. It will be a great loss for a tag taxonomy construction method to
+overlook latent semantics in tagged web documents. Recent years have witnessed
+drastic methodology evolution in the ﬁeld of information retrieval, towards the
+unchanging goal of uncovering semantic information in unstructured text data.
+Since the publish of LDA[8], a family of algorithms[12][13] known as Probabilis-
+tic Topic Models emerge and quickly win massive adoptions. Probabilistic Topic
+Models are skilled at discovering hidden thematic structure of text documents.
+In a real corpus like New York Times, a document may be tightly related to
+topics like Foreign Policy and Economics, while only mentions a little on Sports.
+Topic models answer what themes or topics a document relates to and quantify
+how strong such relations are. Thus, a thematic similarity measure could be in-
+duced for each pair of documents. Wang et al.[4] and Tang et al.[3] each design
+a variant of the basic topic model able to learn thematic structure of tags from
+tagged corpus. Our proximity(i, j) measure is built on top of Wang’s model.
+Chapter 4.1 brieﬂy introduces stantard LDA and Wang’s topic model.
+
+4.1   Probabilistic Topic Model
+LDA is the basic Probabilistic Topic Model. In LDA, a latent topic z = j is
+modeled as an unlabeled corpus-wide word distribution φ(j) = P (w|z = j),
+which was drawn from a dirichlet prior distribution Dirichlet(β). The number
+8        Inducing Taxonomy from Tags: An AHC Framework
+
+of topics T is speciﬁed beforehand to adjust the granularity. Each document d is
+a mixture of topics θ(d) = P (z) with a dirichlet prior distribution Dirichlet(α).
+The generative process of each word in d is essentially a draw from the joint
+                         T
+distribution P (wi ) =         P (wi |zi = j)P (zi = j). Given the observed documents,
+                         j=1
+Gibbs Sampling algorithm[14] is usually used for posterior inference.
+    [4] modiﬁes LDA to deal with tags (keywords). Their assumption is that
+documents annotated by a tag usually have thematic information of that tag.
+For a given tag, they merge documents annotated with it into a new document,
+removing those words occurred only once. After the standard LDA training,
+new documents are folded-in to the trained model by an extra run of Gibbs
+Sampling algorithm. Finally, a tag-topic distribution for each new document is
+estimated. Jenson-Shannon divergence or cosine similarity measure could be used
+to calculate the divergence between any two tag-topic distributions.
+
+4.2    Tag Proximity Measure
+Based on the above model, our tag proximity measure is chosen just as the diver-
+gence between tag-topic distributions: if we think a tag-topic distribution over T
+topics as the tag’s coordinate in a T -dimensional thematic space. The divergence
+between two tag-topic distributions can be understood as the thematic space co-
+ordinate distance between the two tags. So it becomes clear that such a proximi-
+ty measure exploits semantic (thematic) correlation among tags. Based on that,
+sup(m) is deﬁned as the most central point of cluster m in the thematic space,
+which ensures that a supertype can thematically represents the whole cluster. In
+other words, sup(m) ﬁnds the data point index arg min{ dj ∈m proximity(i, j)}.
+                                                        i
+After integrating with the topic model, AHCTC can hierarchically cluster tags
+that are thematically similar and pick the most central tag in the thematic space
+as the supertype for each cluster. Notice the diﬀerence between our method and
+[3][4] is that we don’t have to tell which tag is more general from the topic model,
+which is not what a topic model good at.
+
+
+5     Experiment
+Ohloh5 is a popular online open source software directory and community plat-
+form whose user number has exceeded 1,500,000. It provides information on
+more than 500,000 open source software projects. In the proﬁle of each project,
+there is a brief description along with other valuable information like develop-
+ment history and technical features. Being a social tagging website, its users are
+given the freedom to edit this information and to tag the projects. A typical
+project proﬁle in Ohloh is depicted in Fig.5. To browse projects by tags, users
+can either pick from the ﬂat tag list or use keyword search for sifting. However,
+such a ﬂat list does not give the conceptual scope of each tag nor the possible
+5
+    http://www.ohloh.net/
+                       Inducing Taxonomy from Tags: An AHC Framework           9
+
+
+
+
+           Fig. 5. Part of project proﬁle of the Mozilla Firefox in Ohloh
+
+
+relationships among several tags. A tag taxonomy will apparently do a better
+job. Based on such a requirement, we choose Ohloh as our dataset to validate
+our tag taxonomy construction algorithm.
+    Dataset and Parameter Setting. From Ohloh, we have crawled 10,000
+open source software project proﬁles and extracted their descriptions and tags.
+Suﬀering from the common ﬂaws of all folk knowledge, tags might be poor
+phrased or too esoteric and some are even meaningless. We omit tags with less
+than 300 references and manually delete the meaningless tags ‘1’, ‘???’, ‘????’,
+‘?????’ which somehow are widely adopted in Ohloh. The result after prepro-
+cessing is a set of 267 tags. For topic modeling, we set the number of topics at
+60 and iterate 2000 times in the Gibbs Sampling process.
+    Baseline methods. We compare AHCTC with two of the published meth-
+ods on the same dataset. For comparison with set theory based methods, we
+choose the ontology induction algorithm proposed in [2] as our baseline. Since
+their method is based on tag subsumption, we use the shorthand SUBSUME to
+stand for their method. Ohloh does not provide author information of each tag,
+so we use KR = (G = R, M = T, I) as the projection from a folksonomy onto a
+formal context, details are given in the original paper. We set the parameters at
+the best setting given by the authors, i.e.,λ = 0.95, θs = 0.00001, θc = 0.15 and
+the maximum number of random walk iteration equals 1000.
+    For comparison with topic model based methods, we choose the LSHL al-
+gorithm proposed in [4] as the baseline. The other algorithm in [4], GSHL, is
+just a modiﬁed version of LSHL aiming at a diﬀerent goal. Their experiment
+use keywords of academic paper abstracts as Concepts while here we use the
+267 Ohloh tags to take their places. Parameters are also set at what the original
+paper suggests, T Hs = 0.6, T Hd = 0.35, T Hn = 0.4 and the number of topics
+for topic modeling is set to 60.
+    Experiment result. The resultant taxonomies are shown in Fig.6. Since
+the space is limited, only the framework subtree of our result is depicted. For
+result of LSHL algorithm, the library subtree is chosen since it has suﬃcien-
+10             Inducing Taxonomy from Tags: An AHC Framework
+
+                                                                                                                                         c#
+
+
+                                                                                                             library                   haskell
+
+
+                                                                                                                                    development
+
+
+                                                       j2ee                       jsf                                                  module
+
+
+                     api                               jpa                                                                              cms
+                                                                                                             struts
+
+                   python                              jsp                      workflow                                           dynamic_content
+                                                                                                           framework
+
+                   source                              orm                                                                           application
+
+                                  hibernate                                                                 apache
+                                                                                                                                   object_oriented
+                 visualization                        spring
+                                                                                                              mvc
+                                                                                                                                        oop
+                  windows                              sql
+                                                                                                           opensource
+     library
+                                                                                               java                                   template
+                     xml                              struts
+                                                                                                            hibernate
+                                                                                                                                        free
+                     java          eclipse           groovy
+                                                                                                              j2ee
+
+
+                    code          general            maven
+                                                                                                            database                    orm
+
+
+                 development        ide                                                                      spring
+
+
+                  framework         ajax            component                                                oracle
+
+
+                                 opensource                                                                   rest
+
+
+                 (a) part of LSHL java subtree                                              (b) SUBSUME library subtree
+                                                                                                jsf                       jsp
+
+
+                                                                   j2ee                       spring
+
+
+                                                                   java                       general
+
+
+                                                                    jpa                        xml
+                                      hibernate
+                                                                   json                         xslt
+                                                                                                                          sql
+                                                                   orm                        oracle
+                                                                                                                        database
+                                                                  groovy
+
+
+                                                                opensocial
+
+
+                                                                    rest                    webservices
+
+
+                                       apache                      atom
+
+
+                                           mvc                 authentication
+
+
+                    framework              oop                  webservice
+
+
+                                     opensource                    php5                    zendframework
+
+
+                                           rails                rubyonrails
+
+
+                                           struts
+
+
+                                           (c) AHCTC framework subtree
+
+                                 Fig. 6. Part of the resultant taxonomies
+                        Inducing Taxonomy from Tags: An AHC Framework           11
+
+t overlapped tags with AHCTC framework subtree. We can see from Fig.6(a)
+and Fig.6(c) that despite some parts, the two trees are diﬀerent in their struc-
+tures. The AHCTC framework subtree apparently classiﬁes the tags according
+to the technical framework they belong. In the LSHL library subtree, tags are
+ﬁrst classiﬁed by diﬀerent types of programming libraries. For example, in the
+AHCTC framework subtree hibernate is classiﬁed as a kind of framework but in
+LSHL it is deemed as a java library. The two taxonomies are of diﬀerent facades.
+They complement one another and are both valuable in disclosing tag seman-
+tic structure. If these machine-learned taxonomies are to be used as prototypes
+helping ontology engineers to build a well-deﬁned taxonomy, both the resultant
+taxonomies will be needed in order to provide a comprehensive picture.
+    The SUBSUME taxonomy seems rather ﬂat, many tags appear as the root’s
+children. This coincides with experiment results and illustrations given in the
+original paper. In fact, this taxonomy takes 91 out of 267 tags as the children of
+root java, including most of the tags in AHCTC framework subtree. To make a
+visual comparison with the other two subtrees, we can only render an excerpt of
+the java tree consisting of only pertinent tags. In Fig.6(b) the induced edges seem
+reasonable individually, but the whole taxonomy is too ﬂat to be informative. We
+believe the cause is that SUBSUME algorithm does not exploit text of tagged
+documents.
+   Quantitative Evaluation. In order to make a convincing quantitative e-
+valuation, we have to do multiple experiments for each of the three algorithms.
+We conduct 3 AHCTC experiments each time with a diﬀerent tag similarity
+measure, Jenson-Shannon divergence (JS), cosine similarity (COS) and KL di-
+vergence. For the LSHL taxonomy which also needs to calculate a tag similarity
+score, JS and COS as the only measures proposed in the original paper are e-
+valuated respectively. We fail to conduct multiple versions of the SUBSUME
+experiment since the algorithm do not have any replaceable building block.
+    To evaluate a tag taxonomy is diﬃcult, because several complementary tax-
+onomies might exist. However, several related works have tried in designing ef-
+fective taxonomy evaluation methods. [2] uses the concept hierarchy from Open
+Directory Project as the ground truth to validate their learned ontology. In com-
+paring the two hierarchies, both lexical and taxonomical precision and recall are
+evaluated. [4] asks domain experts to evaluate the correctness of each edge in-
+dividually, and precision is deﬁned as the proportion of correct edges in all the
+learned edges.
+    Our quantitative evaluation considers both these techniques. First, we ask 20
+students to judge the correctness of each edge in a taxonomy. They are given 3
+days to ﬁnish this task, and are encouraged to consult any accessible knowledge
+source for tags they don’t understand. We use the precision measure proposed
+in [4] to calculate edge correctness. We calculate the average value and standard
+deviation of the edge correctness. The results are given in TABLE 1. All AHCTC
+taxonomies have high average edge correctness compared to other results, and
+the AHCTC-KL taxonomy has the highest. AHCTC-JS and LSHL-COS tax-
+12      Inducing Taxonomy from Tags: An AHC Framework
+
+onomies have relatively higher standard deviations, which means many of the
+edges are indeterminate so judges make quite diﬀerent judgements.
+
+
+               Table 1. Edge Correctness Judged by Human Experts
+
+                                            Avg.        S.d.
+                             LSHL-JS        0.7319 0.0935
+                            LSHL-COS        0.6888 0.1313
+                            SUBSUME         0.6897 0.0639
+                            AHCTC-KL 0.7940 0.0432
+                            AHCTC-JS        0.7895 0.1213
+                           AHCTC-COS 0.7519 0.0879
+
+
+
+     To consider the correctness of each edge individually is not fully appropriate.
+We refer to the taxonomical precision measurement proposed in [2]. The golden
+truth is chosen as the sof tware subtree of the Open Directory Project concept
+hierarchy. This subtree covers 179 out of 267 tags we are concerning, which is
+a 67.29% lexical precision. We also apply the taxonomical metrics deﬁned in
+[2]. The taxonomical precision, recall and F-measure (T P , T R, T F ) for diﬀerent
+experiments are given in TABLE 2. AHCTC with KL divergence gets the highest
+value on all three metrics.
+
+
+                  Table 2. Taxonomical Quantitative Evaluation
+
+                                       TR          TP          TF
+                        LSHL-JS      0.0194    0.0235      0.0212
+                       LSHL-COS      0.0244    0.0296      0.0268
+                       SUBSUME       0.0267    0.0393      0.0318
+                      AHCTC-KL 0.0525 0.0514 0.0519
+                       AHCTC-JS      0.0370    0.0334      0.0351
+                      AHCTC-COS 0.0306         0.0328      0.0317
+
+
+
+    Discussion The above experiments and evaluations demonstrate the useful-
+ness and eﬀectiveness of AHCTC algorithm, given the existence of similar meth-
+ods: through qualitative evaluation, we show that AHCTC discovers valuable
+tag structures that are diﬀerent from those discovered by any existing algorith-
+m. Quantitative metrics suggest that AHCTC can construct better taxonomies.
+    As we have mentioned, parameters in SUBSUME and LSHL experiment are
+set at the practical best settings suggested by original papers. However, au-
+thors didn’t guarantee that those settings are always the best regardless of what
+                         Inducing Taxonomy from Tags: An AHC Framework              13
+
+dataset being used. For this reason, we have actually tested several other com-
+binations of parameter values. It turns out that the best settings still practically
+outrun other settings in our dataset in terms of the quality of resultant tax-
+onomies.
+    It shall be noted that evidence given by our quantitative evaluations is still
+weak in measuring how ‘good’ a taxonomy is: edge correctness considers whether
+each individual edge is correct and can not measure the correctness of an entire
+taxonomy. Taxonomical metrics gained by comparing against a gold taxonomy
+is not persuasive, given that several complementary taxonomies might exist. It is
+also the reason why metrics in TABLE 2 are quite small. Taxonomy evaluation
+is still an open issue to be investigated in the future.
+
+
+6   Conclusion
+Many research eﬀorts have been spent on inducing a taxonomy from a set of
+tags. This paper proposes a novel approach based on agglomerative hierarchical
+clustering, which can eﬀectively skip the error prone step of calculating each
+tag’s generality. A topic model is integrated into the AHC framework to disclose
+thematic correlations among tags. The experiment is built on top of data from
+Ohloh, an online social network software directory. With qualitative and quanti-
+tative evaluations, we demonstrate usefulness and eﬀectiveness of the proposed
+method, after comparing with two representative previous works.
+
+
+7   Acknowledgement
+This research is supported by the National Science Foundation of China (Grant
+No.60903043), the National High Technology Research and Development Pro-
+gram of China (Grant No. 2012AA010101) and the Postgraduate Innovation
+Fund of University of Defence Technology (Grant No.120602). Our gratitude
+goes to authors of [4], Wang Wei and Payam Barnaghi, for their help in provid-
+ing us the details of LSHL algorithm.
+
+
+References
+ 1. Staab, S., Studer, R., eds.: Handbook on Ontologies. 2. edn. Springer, Berlin
+    (2009)
+ 2. Liu, K., Fang, B., Zhang, W.: Ontology emergence from folksonomies. In Huang,
+    J., Koudas, N., Jones, G.J.F., Wu, X., Collins-Thompson, K., An, A., eds.: CIKM,
+    ACM (2010) 1109–1118
+ 3. Tang, J., fung Leung, H., Luo, Q., Chen, D., Gong, J.: Towards ontology learning
+    from folksonomies. In Boutilier, C., ed.: IJCAI. (2009) 2089–2094
+ 4. Wang, W., Barnaghi, P.M., Bargiela, A.: Probabilistic topic models for learning
+    terminological ontologies. IEEE Trans. Knowl. Data Eng. 22(7) (2010) 1028–1040
+ 5. Navigli, R., Velardi, P., Faralli, S.: A graph-based algorithm for inducing lexical
+    taxonomies from scratch. In Walsh, T., ed.: IJCAI, IJCAI/AAAI (2011) 1872–1877
+14      Inducing Taxonomy from Tags: An AHC Framework
+
+ 6. Russell, S.J., Norvig, P.: Artiﬁcial Intelligence - A Modern Approach (3. internat.
+    ed.). Pearson Education (2010)
+ 7. Heymann, P., Garcia-Molina, H.: Collaborative creation of communal hierarchical
+    taxonomies in social tagging systems. Technical report, Computer Science Depart-
+    ment, Standford University (April 2006)
+ 8. Blei, D.M., Ng, A.Y., Jordan, M.I.: Latent dirichlet allocation. Journal of Machine
+    Learning Research 3 (2003) 993–1022
+ 9. Itti, L., Baldi, P.: Bayesian surprise attracts human attention. In: NIPS. (2005)
+10. Brooks, C.H., Montanez, N.: Improved annotation of the blogosphere via auto-
+    tagging and hierarchical clustering. In Carr, L., Roure, D.D., Iyengar, A., Goble,
+    C.A., Dahlin, M., eds.: WWW, ACM (2006) 625–632
+11. Tan, P.N., Steinbach, M., Kumar, V.: Introduction to Data Mining. Addison-
+    Wesley (2005)
+12. Blei, D.M., McAuliﬀe, J.D.: Supervised topic models. In Platt, J.C., Koller, D.,
+    Singer, Y., Roweis, S.T., eds.: NIPS, Curran Associates, Inc. (2007)
+13. Blei, D.M., Griﬃths, T.L., Jordan, M.I.: The nested chinese restaurant process
+    and bayesian nonparametric inference of topic hierarchies. J. ACM 57(2) (2010)
+14. Griﬃths, T.L., Steyvers, M.: Finding scientiﬁc topics. Proceedings of the National
+    Academy of Science 101 (2004) 5228–5235
+
\ No newline at end of file
diff --git a/res/paper/F-recommendation-CameraReady.pdf b/res/paper/F-recommendation-CameraReady.pdf
new file mode 100644
index 0000000..671b8dd
--- /dev/null
+++ b/res/paper/F-recommendation-CameraReady.pdf
@@ -0,0 +1,622 @@
+       Mining and Recommending Software Features across
+                   Multiple Web Repositories
+
+                                                 Yue Yu, Huaimin Wang, Gang Yin, Bo Liu
+                               National Laboratory for Parallel and Distributed Processing
+            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
+                          yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@163.com
+
+
+ABSTRACT                                                                            of “Internet as computer”[21][23], more and more software
+The “Internetware” paradigm is fundamentally changing the                           projects are developed, maintained and diﬀused through the
+traditional way of software development. More and more                              Internet computing environment. The Internet-based soft-
+software projects are developed, maintained and shared on                           ware repositories, such as Sourceforge.net1 , Freecode.com2 ,
+the Internet. However, a large quantity of heterogeneous                            Ohloh.com3 and Softpedia.com4 , have hosted large amounts
+software resources have not been organized in a reasonable                          of software projects, which are fundamentally changing the
+and eﬃcient way. Software feature is an ideal material to                           traditional paradigms of software development. Around the
+characterize software resources. The eﬀectiveness of feature-                       repositories, manifold reusable software resources[13] have
+related tasks will be greatly improved, if a multi-grained                          been accumulated, including code bases, execution traces,
+feature repository is available. In this paper, we propose a                        historical code changes, mailing lists, bug databases, soft-
+novel approach for organizing, analyzing and recommend-                             ware descriptions, social tags, user evaluations and so on.
+ing software features. Firstly, we construct a Hierarchical                            However, all of these valuable resources have not been
+rEpository of Software feAture (HESA). Then, we mine the                            reorganized in a reasonable and eﬃcient way to assist in
+hidden aﬃnities among the features and recommend relevant                           the activities of software development[30]. For example, a
+and high-quality features to stakeholders based on HESA.                            large proportion of projects in the above repositories have
+Finally, we conduct a user study to evaluate our approach                           not been categorized or marked with some eﬀective tags. In
+quantitatively. The results show that HESA can organize                             Sourceforge.net, there are 39.8% software projects have no
+software features in a more reasonable way compared to the                          category label and in Ohloh.com 61.68% projects have not
+traditional and the state-of-the-art approaches. The result                         tagged by users. Table 1 (according to data in mid-2011)
+of feature recommendation is eﬀective and interesting.                              presents the details about our statistical results. Consid-
+                                                                                    ering the large-scale, heterogeneous and multi-grained soft-
+                                                                                    ware resources, it is a great challenge for stakeholders to
+Categories and Subject Descriptors                                                  retrieve the suitable one.
+D.2.9 [Software Engineering]: Mining Software Reposi-                                         Table 1: Labels in open source communities
+tory; H.3.3 [Information Storage and retrieval]: Fea-                                     Repository
+                                                                                                          total    unique       ratio         ratio
+ture Model, Clustering, Query formulation                                                               projects    labels   (#label=0)   (#label=0,1)
+                                                                                          SourceForge   298,402      363       39.80%       77.00%
+                                                                                          Ohloh         417,344    102,298     61.68%       69.89%
+General Terms                                                                             Freecode       43,864     6,432      8.61%        20.60%
+                                                                                      As a kind of visible attributes which capture and identify
+Algorithms, Human Factors
+                                                                                    commonalities and diﬀerences in a software domain, Fea-
+                                                                                    ture[3][15] is an ideal material to represent the software re-
+Keywords                                                                            sources. For example, when a company wants to develop a
+Mining Software Repository, Domain Analysis, Feature On-                            new commercial software product about Video-Player, do-
+tology, Recommender System                                                          main analysts might evaluate user comments to pick out
+                                                                                    outstanding competing products, analyze and extract the
+                                                                                    reusable feature assets, combine the related function points
+1. INTRODUCTION                                                                     and design a novel feature model. Based on the feature
+  The Internet is undergoing a tremendous change towards                            model, developers match the features with corresponding
+the globalized computing environment. With the vision                               software resources including code fragments, components
+                                                                                    and mature open source software.
+                                                                                      However, classic feature analysis techniques, such as Fea-
+                                                                                    ture Oriented Domain Analysis (FODA)[14] and Domain
+                                                                                    Analysis and Reuse Environment (DARE)[9], are heavily
+Permission to make digital or hard copies of all or part of this work for
+personal or classroom use is granted without fee provided that copies are
+                                                                                    relied on the experience of domain experts and plenty of
+not made or distributed for proﬁt or commercial advantage and that copies           1
+                                                                                      http://sourceforge.net
+bear this notice and the full citation on the ﬁrst page. To copy otherwise, to      2
+                                                                                      http://freecode.com
+republish, to post on servers or to redistribute to lists, requires prior speciﬁc   3
+permission and/or a fee.                                                              http://www.ohloh.net
+                                                                                    4
+Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                      http://www.softpedia.com
+                             Figure 1: The overview of HESA construction and feature recommendation
+
+market survey data. Hence, the feature analysis is a labor-       input limited information for the initial idea about an in-
+intensive and error-prone process. Nowadays, in order to          novative software product. When stakeholders accept some
+promote software products to users, stakeholders write some       recommended features or provide more requirements, our
+marketing-like summaries, release notes and feature descrip-      system would reﬁne the recommendations in the next stage.
+tions on the proﬁle pages via natural language, as shown in          Before describing the speciﬁc details of the underlying al-
+Figure 2. The massive number of software proﬁles can be           gorithms, an architectural overview of approach will be pro-
+treated as a kind of repository contains a wealth of informa-     vided as below. There are actually two processes concerning
+tion about social software features.                              the application of our method, i.e., the construction pro-
+   In this paper, we propose a novel approach for organizing,     cess of HESA and the process of feature recommendation to
+analyzing and recommending software features to reduce the        stakeholders. As depicted in Figure 1, the construction pro-
+costs of domain analysis. First of all, mining the hidden         cess consists of three primary modules and the input data
+semantic structure, we construct a Hierarchical rEpository        are software proﬁles collected and updated continuously by a
+of Software feAture (HESA) using an improved agglomera-           web crawler. There is a wealth of information on a software
+tive hierarchical clustering algorithm. The features are orga-    proﬁle page as shown in Figure 2. Our system can automat-
+nized as a kind of hierarchical structure in HESA. From top       ically extract social feature elements (blue boxes), softsware
+down, the semantic granularity is ﬁner and ﬁner accompa-          categories (green box) and the user evaluations (red boxes).
+nying with the increasing number of features, which can sat-         The Feature-Topic Modeler is responsible for mining the
+isfy the requirements of multi-grained reuse environments.        semantic structures hidden in social feature elements. Then,
+Then, utilizing the search engine for HESA, features in the       the HESA Constructor will merge the synonymic elements
+speciﬁc layers are retrieved and tied together to mine the        and build the feature ontology based on the semantic struc-
+aﬃnities among them. Finally, we design a novel strategy          tures. After all the raw data under our category are dis-
+to evaluate the popularity and quality of software products       posed, the construction process of HESA is ﬁnished.
+and circularly recommend features to stakeholders.                   In terms of user evaluations, the Popularity Evaluator and
+   The rest of this paper is or organized as follows. Section 2   Resource Selector can classify the software resources into
+introduces the overview of our work. Section 3 describes the      diﬀerent groups such as popular and high-quality group and
+construction of HESA in detail. We mine the hidden rela-          unpopular and low-quality group. When stakeholders input
+tionship of software features and present the novel approach      their requirements of a speciﬁc domain, the HESA Search
+of feature recommendation in Section 4. Experiments and           Engine can retrieve the features in the corresponding gran-
+analysis can be found in Section 5. Finally, we review related    ularity. Combining the feature and the diﬀerent group of
+work in Section 6 and draw conclusions in Section 7.              software resources, the system can mine the Feature-Pattern
+                                                                  based on the resource-by-feature matrix. The last module,
+                                                                  Feature Recommender, outputs a set of features to stake-
+2. OVERVIEW                                                       holders and gather their feedback. Then, according to the
+  The objective of this paper is to recommend a set of the        feedback, it will circulate the mining process and recommend
+most relevant and high-quality software features to stake-        more relevant features to stakeholders.
+holders. We have collected a massive number of social soft-
+ware features to build a Hierarchical rEpository of Software
+feAture (HESA). At the beginning, stakeholders can just           3. THE CONSTRUCTION OF HESA
+                                            Figure 2: An example of the software proﬁle
+
+  In this section, we present the key algorithms of the HESA        formation about latest threats”;
+construction. You can ﬁnd more details about our stages,               (3) “Incremental updating system minimizes the size of
+algorithms and data analysis in our previous work[30].              regular update ﬁles”;
+                                                                       These three elements present the common attribute about
+3.1    Social Feature Elements in Proﬁles                           incremental updating database, but only the word “update”
+   Social feature element is a kind of raw descriptions written     is shared by the two sentences. Thus, social feature elements
+by diﬀerent users of web repositories, which can indicate a         should be merged together by an eﬀective method.
+functional characteristic or concept of a software product.
+In this paper, all the social feature elements are extracted
+from Softpedia.com, Freecode.com and Sourceforge.net.               3.2 Feature-Topic Model
+   Due to the open, dynamic and uncontrollable natures of              According to the observation in our previous work[30], the
+the Internet[22], diﬀerent people describe the functions in         probabilistic topic model can be used to mine the semantic
+terms of their personal understanding. We face two main             structures hidden in the massive number of social feature
+challenges of the unstructured social feature elements.             elements.
+   Hybrid Semantic level: The problem of hybrid seman-                 In a speciﬁc category, such as Video-Player, all the so-
+tic level is that diﬀerent social feature elements describe a       cial feature elements in the corpus can be represented as
+common theme in diﬀerent semantic level, such as the fol-           Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes the ith ele-
+lowing descriptions:                                                ments in the corpus. Assuming that K latent topics Tk =
+   (1) “Internationalized GUI”;                                     {t1 , t2 , . . . , tj , . . . , tk } are implicit in the social feature ele-
+   (2) “Various language packs are available”;                      ments, where tj denotes the jth topic. Although a social
+   (3) “Multi-language supported: including English, Simpli-        feature element can be bound up with several topics, it may
+ﬁed Chinese, Traditional Chinese, Japanese, Korean, Ger-            put more emphasis on some topics than the others. The
+man, French, Spanish, Italian, Russian etc”;                        topic degree within fi can be represented as a K -dimensional
+   The ﬁrst two sentence describes the theme of multilingual        vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ), where pi,j is a topic
+setting in a general level. However, the last sentence present      weight describing the extent to which the topic tj appears
+more details including what kind of languages would be sup-         in fi . When pi,j = 0, fi is irrelevant to tj . Thus, the
+ported. On the one hand, the massive number of social fea-          υi , i ∈ [1, m], represented by Vm , can be used to indicate
+ture elements in diﬀerent semantic-level are good materials         the semantic structure implied in social feature elements.
+for the construction of ﬂexible granularity ontology. On the        If the Vm can be obtained, the thematic similarity measure
+other hand, it is a great challenge for the traditional meth-       would be induced for each pair of social feature elements and
+ods to cluster and reorganize these social feature elements.        the synonymic elements would be merged together. Because
+   Synonymic Element: The problem of synonymic ele-                 topic models answer what themes or topics a document re-
+ment happens when two features are used to describe some            lates to and quantify how strong such relations are, it is a
+common or very similar functional attributes.                       eﬀective way to learn Vm .
+   Some social feature elements are almost the same with               In this paper, we choose Latent Dirichlet Allocation (LDA)
+each other, such as the three elements below:                       [6] to learn Vm , because it has been shown to be more ef-
+   (1) “Simple user interface”;                                     fective for a variety of software engineering purposes[28][4]
+   (2) “User-friendly interface”;                                   than other topic models. A social feature element fi can
+   (3) “Easy and friendly user interface”;                          be viewed as a document which is preprocessed by remov-
+   Another typical problem is that each pair only shares few        ing commonly occurring words and then by stemming the
+core words, such as the following:                                  remaining words to their root form. According to category,
+   (1) “Ability to update that does not require downloading         we apply LDA to process the documents using the MALLET
+full package”;                                                      tool[19] which is an implementation of the Gibbs sampling
+   (2) “Incremental database updates and often to include in-       algorithm[10].
+3.3    iAHC: improved Agglomerative Hierarchi-                       represent the theme of c. Two metrics, similarity value and
+       cal Clustering                                                topic degree, are used to determine the medoid. Firstly, to
+  To support multi-grained reuse environment, the semantic           get the values , we calculate the similarity between ci ∈ c and
+similar social feature elements should be merged and reorga-         the centroid of c through Equation 2, where the vector υc of¯
+                                                                                                        |c|
+                                                                                                               υ
+nized as a ﬂexible hierarchical structure deﬁned as feature-         centroid is calculated by υc = i=1 i . Then, the Equation
+                                                                                                 ¯      |c|
+ontology. In this paper, we present the iAHC algorithm               3 is used to calculate the degreet based on the following two
+(Algorithm 1) integrated with the LDA.                               important observations of feature-topic distribution Vm in
+                                                                     our datasets.
+Algorithm 1 improved Agglomerative Hierarchical Clus-                                                        1
+tering                                                                           degreet = xmax +                               (3)
+                                                                                                          ˆ
+                                                                                                          k                2
+                                                                                                          r=1 (xmax −pir )
+Require:                                                                                            e            ˆ
+                                                                                                                 k
+    Fm = {f1 , f2 , . . . , fi , . . . , fm };
+                                                                                                                       ˆ
+                                                                     Where xmax is the maximum value of υi , and k is the fre-
+    feature-topic distribution Vm ;
+Ensure:                                                              quency when υi not equal to zero, and pir is any value that
+    The construction of feature-ongtology;                           not equals to zero in υi .
+ 1: M ← D                                                               Observation 1 The most probable topic reﬂects the most
+ 2: f eatureSet ← ∅                                                  prominent theme that the document (social feature element)
+ 3: repeat                                                           is about.
+ 4:     ci , cj = ﬁndTwoClosestClusters(M )                             Observation 2 The more widely and evenly distributed
+ 5:    merge ci and cj as c                                          its topics are, the higher-level the document (social feature
+ 6:    delete ci and cj from M                                       element) is.
+ 7:    add c to M                                                       In brief, Equation 3 can ensure the social feature element
+ 8:    centroid = calculateCentroid(c)                               in the coarsest granularity have the highest score degreet ∈
+ 9:    for ci ∈ c do                                                 (0, 2], where xmax ∈ (0, 1] can reﬂect the emphasis topic
+                                                                                                 1
+10:       values = Similarity(ci , centroid)                         and the formula        ˆ
+                                                                                                            ∈ (0, 1] can reﬂect the
+                                                                                           k               2
+                                                                                       e   r=1 (xmax −wir )
+11:       degreet = calculateTopicDegree(ci )
+                                                                     semantic generality.
+12:       scorem = κ · values + λ · degreet
+                                                                        The scorem is used to measure the medoid calculated as
+13:       add scorem to M edoidScore
+                                                                     the Equation of line 12, where κ and λ is the empirical co-
+14:    end for
+                                                                     eﬃcients.
+15:    medoidC = ﬁndMaximumScores(M edoidScore)
+                                                                        Finally, the medoid with the highest scorem would be se-
+16:    scoreF = Similarity(medoidC )
+                                                                     lected. Measuring the similarity for the each pair of elements
+17:    f eatureC = mergeMedoid(medoidC , scoreF )
+                                                                     in medoidC (line 15), the f eatureC (line 17) can be formed
+18:    saveFeaturetoHESA(M, f eatureC )
+                                                                     by merging distinguished social feature elements whose sim-
+19: until |M | = 1
+                                                                     ilarity score below a threshold (set to 0.38). Each iteration
+                                                                     in the repeat clause saves the M and f eatureC to HESA.
+  Initially, every social feature elements is a distinct cluster.    On the termination of the algorithm, a feature-ontology for
+Line 4-7 ﬁnds the closest two clusters ci and cj in the current      the category is constructed.
+cluster set M , and merge them into a new cluster c and                 After all the feature-ontologies under diﬀerent categories
+update M . The proximity used to measure the distance                are generated, the construction process of HESA is ﬁnished.
+between every two clusters, deﬁned as below:
+                               f i∈ci   similarity(f i, f j)         4. FEATURE RECOMMENDATION
+                               f j∈cj
+       proximity(ci , cj ) =                                   (1)     In this section, mining the hidden relationship between
+                                        |ci | × |cj |                software features, we present a novel strategy of feature rec-
+Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the      ommendation. Firstly, we classify software resources into
+divergence between any two data point. Based on LDA,                 diﬀerent groups. Then, combining the feature with the pop-
+the divergence can be understood as the thematic space               ular and high-quality resources, we use association rules to
+coordinate distance between the two elements. There are              mine the feature-patterns. Finally, analyzing the hidden as-
+several ways to calculate the divergence between any two             sociations between the features, we can recommend relevant
+feature-topic distributions, such as cosine similarity, Jenson-      features to stakeholders.
+Shannon divergence and Kullback-Leibler divergence. Tak-
+ing cosine similarity as an example, the Equation is shown
+                                                                     4.1 Software Resource Evaluation
+as below:                                                              When users try out a kind of software resource from web
+                                         υi · υj                     repositories, they may give evaluations according to their ex-
+               similarity(fi , fj ) =                                perience. Taking software projects in Sourceforge.net, Soft-
+                                      ||υi || ||υj ||
+                              k
+                                                                     pedia.com, Ohloh.com and Freecode.com as an example, we
+                                                            (2)
+                              r=1 pir × pjr                          have extracted a large number of user’s evaluations from
+                  =
+                          k     2          k     2                   the software proﬁles including rating, vote, downloads, and
+                          r=1 pir ×        r=1 pjr
+                                                                     subscriptions as shown in table 2.
+Where k is the topic number and p is the probability value             Because the core services of the web repository are diﬀer-
+of υ.                                                                ent, there are diﬀerent types of user evaluation to measure
+   Line 8-14 pick out a set of social feature elements from          the popularity and quality. Some giant forges like Source-
+the new cluster, deﬁned as medoid, which can be used to              forge.net host a massive amount of software source code,
+                                                  Table 2: User evaluation in software proﬁles
+                         Project Name         Repository    Rating (#Raters)    Vote (#Voters)    #Downloads   #Subscriptions
+                         Hard Disk Sentinel    Softpedia      3.7 Stars (42)                        19,347
+                         Mozilla Firefox      Sourceforge     4.0 Stars (60)                         332
+                         Mozilla Firefox        Ohloh       4.4 Stars (3,492)                                      12,227
+                         Chromium               Ohloh        4.5 Stars (538)                                        1,883
+                         PostgreSQL            Freecode                         145 Score (153)                      755
+                         phpMyAdmin            Freecode                         202 Score (213)                      956
+
+so the code #Downloads is adopted to quantify the project
+popularity. However, the core service of some repositories
+is providing social directories such as Ohloh.com. Thus, the
+#Subscriptions is used to measure the project popularity.
+   In addition, the Rating and Vote can reﬂect the quality of
+the software project. Most of the repositories use the Rating
+from 1 to 5 stars to measure the project quality. Hence,
+we convert the Vote into a ﬁve-point scale by the following
+formula, where is the reliability of the web repository.
+                                   Vote
+                   Rating = ·             ×5                        (4)
+                                  #Voters
+  For example, if sets to 1, the Vote of PostgreSQL in
+Freecode.com can convert to 4.74 points Rating by the for-
+           145
+mula: 1 × 153 × 5 ≈ 4.74.
+  Moreover, a project may have several diﬀerent ratings
+when it is hosted across multiple repositories. In this case,                     Figure 3: Part of the feature-pattern in Video-Player domain
+to lower the users’ personal bias, we choose the rating based
+                                                                                generate the feature-pattern based on the association rule
+on most users’ records. As depicted in Table 2, our system
+                                                                                learning[11][29].
+automatically select 4.4 Stars in Ohloh.com to represent the
+                                                                                   Let F = f1 , f2 , . . . , fm be a set of item in the resource-
+quality of Mozilla Firefox 56 , because it is rated by more
+                                                                                by-feature matrix. An association rule is an implication of
+users (3,492) than the rating in Sourceforge.net (60).
+                                                                                the form {X ⇒ Y }, where X ⊂ F , Y ⊂ F and X ∩ Y = ∅.
+                        #Downloads                                              The σ(X), called support count, is used to get the is the
+    Rankingpq = α ·                   × β · Rating                  (5)
+                      MAX(#Downloads)                                           number of transactions that contain the X itemset. There-
+                                                                                fore, support can indicate the frequency and the association
+  Then, synthesizing the popularity and the quality, we use                     degree of the itemsets, deﬁned as below:
+the Equation 5 to rank the software projects, where α and
+β (α · β = 1) are the empirical coeﬃcients used to balance                                                                  σ(X ∪ Y )
+                                                                                                   support(X ⇒ Y ) =                         (6)
+the popularity with the quality. The #Downloads can be                                                                         |F |
+replaced by the #Subscriptions and the Rankingpq ∈ (1, 5].
+                                                                                   The feature-pattern is a kind of directed graph, which can
+  In this paper, we pick up the software projects over a
+                                                                                be represented as GF P = V, E , where V is a set of feature
+Rankingpq threshold. Actually, the software resources can
+                                                                                itemsets and E is a sub set of E(V ), E(V ) = {(u, v)|u, v ∈
+be divided into any number of groups, such as popular group,
+                                                                                V }. The element e of E is the a pair of vertices and the
+high-quality group, unpopular group and low-quality group.
+                                                                                conf idence is the weight assigned to the arcs. As shown in
+Combining with the features and diﬀerent groups of soft-
+                                                                                Equation 7, conf idence indicate the percentage of transac-
+ware resources, we can mine the hidden feature pattern and
+                                                                                tions containing a given itemset that also contain the other
+recommend relevant features more accurately. Furthermore,
+                                                                                speciﬁc itemset.
+the software resources are manifold, such as software com-
+ponents, code fragments, bug reports and so on. Based on
+the feature location technique, we can recommend these re-                                                      σ(X ∪ Y )   support(X ∪ Y )
+                                                                                  conf idence(X ⇒ Y ) =                   =                 (7)
+sources to stakeholders. We really expect to do this research                                                     σ(X)        support(X)
+in future work.
+                                                                                   For example, in Table 3, the support(N o.21 ⇒ N o.41) =
+4.2      Feature Pattern Mining                                                 1/4 and the conf idence(N o.21 ⇒ N o.41) = 1/3. In Figure
+                                                                                3, the edge e = {(21), (21, 67)} represent the association rule
+   We merge the software projects and the software features
+                                                                                {N o.21 ⇒ N o.67} and the weight 0.3429 is the conf idence
+into a resource-by-feature matrix and a series of implicit fea-
+                                                                                of this rule.
+ture rules can be discovered. As illustrated in Table 3, the
+                                                                                   Firstly, we use Apriori algorithm [11] to generate the fre-
+features about Video-Codec and Customizable Option are es-
+                                                                                quent itemsets (support satisﬁes a threshold 0.35) as the ini-
+sential for a new products in the Video-Play domain, because
+                                                                                tial value of V . Then, we add the infrequent itemsets except
+the most of competing software implement these functional-
+                                                                                the item within frequent itemsets (support below a thresh-
+ities. The No.35 may be the latest and novel feature in this
+                                                                                old 0.05) to the V . Finally, we connect the nodes together
+domain, because only a few of high-quality products own this
+                                                                                based on the association rules and allocate the weights of
+functionality. In this paper, we deﬁne the Feature-Pattern
+                                                                                the edges in terms of their conf idence values.
+to represent the relationship between software features and
+                                                                                   Figure 3 illustrates a part of feature-pattern in the Video-
+5
+    http://www.ohloh.net/p/ﬁrefox                                               Player domain. The solid lines show the connections of the
+6
+    http://sourceforge.net/projects/ﬁrefox.mirror/                              frequent itemsets. We discover that the subgraphs about
+some fundamental features always have the homogeneous                             is (21,41,63,67). Similarly, if we set the minconf to 0.75,
+weights and they are much ﬂatter than the subgraphs of                            the feature No.35, No.63, No.67, No.13 would be selected
+common features. In a speciﬁc domain, the fundamental                             out one by one.
+features is implemented by the most of software such as                              Feature recommadtion is a iterative process. Once users
+the feature No.21 about video-codec in the Video-Player do-                       choose the recommended features or give their feedback, our
+main, so it have the high support and widely co-occur with                        system will reﬁne the recommendations in the next stage.
+other features, which leads the subgraph to become ﬂat. If a
+connection contains a element of the infrequent itemsets, we                      Algorithm 2 a breadth-ﬁrst recommendation algorithm
+use the dotted lines to represent it. We ﬁnd that the infre-
+quent features may be some innovative functionalities, such                       Require:
+as the feature No.13 about displaying video in customized                             req the feature set of you need;
+multiple screens. Thus, the connections between infrequent                            minconf the threshold of the conf ident; GF P the fea-
+and fundamental features are signiﬁcant to the feature rec-                           ture pattern graph;
+ommendation.                                                                      Ensure:
+       Table 3: An example of resource-by-feature matrix                              recSet a set of features recommended to users;
+                 Feature
+                                                                                   1: reqItem ← matchItemsets(req)
+                            No.211 No.352 No.373 No.414 No.635 No.676              2: recSet ← reqItem
+ Software
+          nDVD                 0       0       1        1       1         0        3: if reqItem = f undSet then
+       FLV Player              1       0       1        1       1         0        4:    maxconftmp ← getMaxWeight(E(reqItem))
+  Aviosoft DTV Player          1       1       0        0       1         1
+   Mac Blu-ray Player          1       0       0        1       1         1        5:    updateConﬁdences(E(reqItem), maxconftmp )
+ 1
+   Support multi-formats of video ﬁles such as FLV, MPEG4, DIVX, HD-               6:    addConnections(req, inf reqSet)
+   MOV, M2TS, MKA, 3GPP and so on.                                                 7: end if
+ 2
+   Smart stretch lets video smart ﬁt on all monitor with diﬀerent aspect ratio,
+   avoid video loss or distortion.                                                 8: T set ← getInitialRecSet(GF P (reqItems), minconf )
+ 3
+   Title repeat, chapter repeat, AB repeat function that lets you set your         9: repeat
+   favorite scenes for instant repeat.
+ 4
+   Fast Forwards and Backwards with Customizable Speeds.                          10:    recSet ← recSet ∪ searchNextDepthSet(T set)
+ 5
+   You can easily conﬁgure every option of the Player by using a nice pref-       11: until GF P END
+   erences dialog.
+ 6
+   Brightness, contrast, hue, saturation and gamma settings.
+                                                                                  12: return recSet
+
+4.3     Feature Recommendation Algorithm
+   When a user input his requirements, the system convert
+the requirements to a set of features which is the same as                        5. EMPIRICAL EVALUATION
+the preprocessing of raw social feature elements. If it can                         In this section, we present our dataset and experiment
+be matched with the any one of the itemsets in the feature-                       setting, research questions and answers, and describe some
+pattern, the system begin the process of feature recommen-                        threats to validity.
+dation. Algorithm 2 present a breadth-ﬁrst recommenda-
+tion algorithm, where the input are user requirements, the                        5.1 Dataset and Experimental Setting
+minimum conf idence and the feature-pattern. The output
+                                                                                     Dataset: We have collected 187,711, 432,004 and 45,021
+recSet is a set of relevant feautres for recommendation.
+                                                                                  projects’ proﬁles from Softpedia.com, Sourceforge.net and
+   We ﬁrstly initialize the recSet with the matched itemset
+                                                                                  Freecode.com respectively. Compared with the other two
+(Line 1-2). If the matched itemset equals a fundamental
+                                                                                  repositories, the quantity of projects from Freecode.com is
+feature or feature set, we should update the feature-pattern
+                                                                                  relatively small. Thus, we just adopt projects in Softpe-
+GF P . Line 4-5 ﬁnd the maximum weight maxconftmp within
+                                                                                  dia.com and Sourceforge.net for the experiment.
+the edges E(reqItem) and update the weight wi by using
+                                                                                     The social feature elements have been classiﬁed into 385
+blew formula:
+                                                                                  categories and we randomly choose the data of 6 unique cat-
+                                 wi
+             weightnew =                  ∈ (0, 1]       (8)                      egories to evaluate our method including Antivirus, Audio-
+                            maxconftmp                                            Player, Browser, File-manger, Email and Video-Player. Fur-
+   For example, as shown in Figure 3, when we matched                             thermore, the social feature elements are preprocessed by
+the feature No.21, we can ﬁnd 0.4571 is the maxconftmp of                         removing commonly occurring words and then by stemming
+E(reqItem) and update the weight(0.3714) of {(21), (21,41)}                       the remaining words to their root form. To ensure the qual-
+              0.3714
+to 0.8125 = 0.4571 . Therefore, although user set the minconf                     ity of data, we omit the preprocessed data with less than
+over 0.75, the feature No.41 also can be recommended.                             6 words. In each category, we choose hundreds of candi-
+   In addtion, Line 6 associate the E(reqItem) with the in-                       date projects to ﬁnd the popular and high-quality software
+frequent itemsets, which make some interesting features can                       in the two repositories. Table 4 presents the details about
+be recommended to users. Then, we merge the itemsets                              our experiment dataset.
+into the recSet, whose the conf idence values are over the                           Parameter Setting: As shown in Table 4, for LDA, the
+minconf and use the breadth-ﬁrst search strategy to ﬁnd                           number of topics K was empirically set as diﬀerent value,
+all relevant features (Line 8-12).                                                and the hyper-parameters α and β were set with α = 50/K
+   For example, supposing we begin with {21}, we would up-                        and β = 0.01 respectively, and the iteration of Gibbs Sam-
+date the weights of {(21), (21,37)}, {(21), (21,41)}, {(21),                      pling was set as 1000. In addition, the coeﬃcients κ and λ
+(21,63)} and {(21), (21,67)} and the subgraph of the fea-                         of Algorithm 1 were set as κ = 0.7 and λ = 0.3. We treat
+ture No.35 is added. Then, if we set the minconf to 0.8, we                       the popularity is as important as the quality for a software
+would retrive (21,41), (21,63), (21,63,67) step by step. Fi-                      project, so we set α = 1 and β = 1 (Equation 5). The
+nally, we merge them together and the recommendation set                          Rankingpq threshold is set as 3.0.
+                                                Table 4: Preprocessed experiment datasets
+
+                                Category      #Feature sp     #Feature sf   #Project sp   #Project sf   #Topic
+                              Antivirus          2919            1105           667          435          40
+                            Audio-Player         3714            1283           379          530          60
+                               Browser           3010             831           344          177          40
+                            File-Manager         2270             970           330          177          40
+                                Email            8511            1050           823          204          80
+                            Video-Player         3318            2697           379          530          60
+
+5.2    Research Questions
+   To demonstrate the eﬀectiveness of the approach in this
+paper, we are interested in the following research questions:
+   RQ1 How accurate is the clustering result of iAHC? Are
+the hierarchical structures of HESA reasonable?
+   RQ2 What the popular and high-quality projects look
+like? What rules can be mined based on the feature-pattern?
+   RQ3 Are the recommendations from our approach are
+reasonable and eﬀective?
+                                                                                                (a) the average value
+5.3    Cross-Validation Design of the User Study
+  The cross-validation limits potential threats to validity
+such as fatigue, bias towards tasks, and bias due to unrelated
+factor. We randomly divided the 30 students from computer
+school of NUDT into three groups to evaluate the questions.
+Each group randomly picks up 2 categories and ﬁnishes the
+evaluations in one day, and then we summarize the result.
+
+RQ1: Clustering Result and HESA Structure. We
+choose the K-Medoids (tf-idf), a traditional and widely used
+clustering algorithm, and the Incremental Diﬀusive Cluster-
+ing (IDC), the state-of-the-art technique proposed in paper
+[8], as the baseline. Especially, the IDC use the feature
+descriptions from Softpedia.com which is the same as our                                     (b) the standard deviation
+dataset. We also use the modiﬁed version of Can’s metric[8]                                 Figure 4: The clustering results
+to compute the ideal number of clusters. Then, we retrieve
+the corresponding number of clusters from HESA for com-                       Table 5 shows that 37.58% features are reasonable, 47.48%
+parison. Precision is a percent of the reasonable elements                  partially reasonable and only 14.93% unreasonable. The
+in a cluster. Figure 4 shows the average value and standard                 mean of Likert score is 2.23, which means that the feature
+deviation of the judgments given by diﬀerent groups under                   selected out by our approach is reasonably meaningful.
+the Antivirus, Audio-Player and File-Manger categories.
+   We can see that our approach achieves the highest preci-                 RQ2: Project Evaluation and Feature-pattern. As
+sion in all three categories and relatively low deviations. The             shown in Table 6, we use our evaluation method to select out
+precisions and deviations are comparatively stable across dif-              a fraction of project synthesizing the software popularity and
+ferent categories, which shows the probability that our ap-                 the quality. We can get a reasonable number of candidate
+proach is more generalizable in diﬀerent domains. We plan                   features. Specially, to illustrate the importance of project
+to conduct more quantitative experiments in future work.                    evaluation for feature pattern mining, we lower the threshold
+   According to the six categories, participants randomly                   (1.0) in File-Manager category. Hence, we get a unnormal
+choose 30 clusters in diﬀerent layers from HESA using the                   number of itemsets which exert a negative impact on feature-
+search engine respectively. Each participant is randomly as-                pattern mining and feature recommendation.
+signed 10 layers and asked to provide a 3-point Likert score                   Figure 3 shows an example of feature-pattern under the
+for each cluster to indicate whether they agree if the feature              Video-Player, where the feature No.21 (about video-codec)
+is the most representative of all terms. Score 3 means “very                and No.63 (about user interface) is the fundamental features.
+reasonable”, Score 2 means “reasonable but also have better                 Similarly, we ﬁnd the feature about virus database updating
+one”, Score 1 means “unreasonable”.                                         is one of essential functionalities for an antivirus software.
+            Table 5: Evaluation of HESA structure
+                                                                            RQ3: Feature Recommendation. We show some mean-
+         Category     Score-3   Score-2    Score-1   Likert                 ingful and interesting case in Table 7. In the Email category,
+         Antivirus    33.3%     50.0%       16.7%    2.17                   if you input “High level ﬁlter system for spam”, our system
+       Audio-Player   39.1%     46.3%       14.6%    2.25                   can recommend 5 relevant features. The ﬁrst three features
+          Browser     36.8%      41.9%      21.3%    2.16                   are directly related to the input, but the third feature about
+       File-Manager   32.7%     52.4%      14.9%     2.18
+           Email       36.4%     52.8%      10.8%    2.26                   privacy protection is very easy to leave out. The last two
+       Video-Player    47.2%     41.5%      11.3%    2.36                   features represent the fundamental abilities under the Email
+          Average     37.58%    47.48%     14.93%    2.23                   category. From these examples, we can demonstrate our ap-
+                                                Table 6: Project Evaluation and Feature-pattern
+                               Category       #Project total      #Project ranking     Ratio     #|Itemsets|    #Feature fund
+                              Antivirus            1,082                  63            5.82%        75               7
+                             Audio-Player           909                  65            7.15%         68               13
+                               Browser              521                   57           10.94%        64                8
+                            *File-Manager           447                  192           42.95%        187              46
+                                Email              1,027                 39            3.80%          53               4
+                             Video-Player           523                   91           17.40%        68                5
+
+
+                                                         Table 7: Feature recommandations
+             Category                       Input                                                    Recommendations
+              Email          -High level ﬁlter system for spam.                 -Automatically start spam process when Windows starts.
+                                                                                           -Attachment and keyword ﬁltering.
+                                                                               -Privacy guaranteed-your emails never leave your network.
+                                                                                       -Full support for international characters.
+                                                                                        -Automatic import of local address book.
+           Video-Player       -Support multi-formats of video.              -Smart stretch lets video smart ﬁt on all monitor with diﬀerent
+                                                                                       aspect ratio, avoid video loss or distortion.
+                                                                              -Customized player supports multiple windows and screens.
+                                                                            -Play anything including movie, video, audio, music and photo.
+                                                                      -Video desktop lets you view video in true background mode like wallpaper.
+           Audio-Player              -Radio streaming.                                         -Free Lossless Audio Codec.
+                          -Easy to use and friendly User Interface.                      -Playlists for each day of week or date.
+                                                                                          -Flexible XML based skinning engine,
+                                                                              Create your own skins, or choose one of the available skins.
+                                                                                                -Contextual Help System.
+
+proach is highly signiﬁcant of the software development.                          tions system is build by using association rule mining and
+                                                                                  the k-Nearest-Neighbor machine learning strategy. Com-
+5.4   Threats to validity                                                         pared with these studies, the clustering algorithm presented
+  First, the participants manually judge the clustering re-                       in this paper is more eﬀective by mining the semantic struc-
+sults and their ratings could be inﬂuenced by fatigue, prior                      tures from social feature elements and especially focus on
+knowledge and the other external factors. These threats                           the construction of feature-ontology.
+were minimized by randomly distributing participants to the                          Ontology learning from text aims at extracting ontological
+various groups and dividing the tasks into multiple parts.                        concepts and relation from plain text or Web pages. Paper
+Second, the clustering error may exert a negative inﬂuence                        [18] developed an ontology learning framework using hierar-
+on the recommendation. Third, due to our limited datasets,                        chical cluster and association rule for ontology extraction,
+parameters used in our approach, the evaluation is not com-                       merging, and management. Jie Tang et al.[27] proposed a
+prehensive enough.                                                                generative probabilistic model to mine the semantic struc-
+                                                                                  ture between tags and their annotated documents, and then
+                                                                                  create an ontology based on it. Xiang Li et al.[16] enhance an
+6.    RELATED WORK                                                                agglomerative hierarchical clustering framework by integrat-
+   Recently, mining software repository has been brought                          ing it with a topic model to capture thematic correlations
+into focus and many outstanding studies have emerged to                           among tags. In this paper, to support multi-grained reuse,
+support various aspects of software development[12]. How-                         emphases of the feature-ontology’s construction is on the
+ever, to the best of our knowledge, fewer previous works have                     measure of similarity and granularity instead of generality.
+been done for mining software feature and especially con-                            As an indispensable type of information ﬁltering tech-
+struction of feature-ontology to manage software resources.                       nique, recommender systems have attracted a lot of atten-
+In this section, we review some previous works about feature                      tion in the past decade[17]. In the ﬁeld of collaborative
+analysis, ontology learning and recommender system.                               ﬁltering, two traditional types of methods are widely stud-
+   In feature analysis area, most approaches extract feature                      ied: neighborhood-based approaches and model-based ap-
+related descriptions from software engineering requirements                       proaches. Based on the co-occurrence matrix, neighborhood-
+and then use the clustering algorithm to identify associa-                        based[7] methods mainly focus on ﬁnding the similar items
+tions and common domain entities[2][9][25]. Mathieu Acher                         for recommendations. However, model-based approaches
+et al.[1] introduced a semi-automated method for easing the                       train a compect model to explain the data ﬁrstly, and then
+transition from product descriptions expressed in a tabu-                         predict the hidden values. Recently, the low-dimensional
+lar format to feature models. Niu et al.[24] propose an on-                       matrix approximation methods[26] are used widely in deal-
+demand clustering framework that provided semi-automatic                          ing with large scale datasets. In future work, we will design
+support for analyzing functional requirements in a product                        some comparative studies by using diﬀerent methods and it
+line. A decision support platform is proposed in paper [5] to                     is possible to help us mining much more feature patterns.
+build the feature model by employing natural language pro-
+cessing techniques, external ontology and MediaWiki sys-
+tem. However, the quantity of the existing documents is so                        7. CONCLUSION AND FUTURE WORK
+limited that the brilliance of data mining techniques can-                          The continuing growth of open source ecosystems creates
+not be fully exploited. To address this limitation, paper [8]                     ongoing opportunities for mining reusable knowledge. In
+and [20] proposed the Incremental Diﬀusive Clustering to                          this paper, we have explored the idea of mining large scale
+discover features from a large number of software proﬁles                         repositories and constructed the Hierarchical rEpository of
+in Softpedia.com. Based on the features, a recommenda-                            Software feAture (HESA) to support software reuse. Then,
+we generate the co-occurrence matrix by the features and the     [13] A. E. Hassan and T. Xie. Mining software engineering
+software projects across multiple web repositories. Finally,          data. In ICSE (2), pages 503–504, 2010.
+our approach induced the feature-pattern and circularly rec-     [14] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and
+ommend the most relevant features to stakeholders.                    A.S.Peterson. Feature-oriented domain analysis (foda)
+   In the future, we plan to improve the performance of our           feasibility study. technical report. 1990.
+method and aggregate richer software resources from soft-        [15] K. Lee, K. C. Kang, and J. Lee. Concepts and
+ware repositories. For example, Stack Overﬂow community7              guidelines of feature modeling for product line
+which is a programming question and answer websites, con-             software engineering. In ICSR, pages 62–77, 2002.
+tains abundant knowledge of software development. In addi-       [16] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu,
+tion, we will design several representative applications based        and D. Tang. Inducing taxonomy from tags: An
+on HESA, such as software resource recommender system,                agglomerative hierarchical clustering framework. In
+to support the reuse of multi-grained resources.                      Advanced Data Mining and Applications, volume 7713,
+                                                                      pages 64–77. Springer Berlin Heidelberg, 2012.
+8. ACKNOWLEDGEMENT                                               [17] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King.
+   This research is supported by the National High Technol-           Recommender systems with social regularization. In
+ogy Research and Development Program of China (Grant                  Proceedings of the fourth ACM international
+No. 2012AA011201) and the Postgraduate Innovation Fund                conference on Web search and data mining, pages
+of University of Defense Technology (Grant No.B130607).               287–296. ACM, 2011.
+                                                                 [18] A. Maedche and S. Staab. Learning ontologies for the
+9. REFERENCES                                                         semantic web. In SemWeb, 2001.
+ [1] M. Acher, A. Cleve, G. Perrouin, P. Heymans,                [19] A. K. McCallum. Mallet: A machine learning for
+     C. Vanbeneden, P. Collet, and P. Lahire. On                      language toolkit. http://mallet.cs.umass.edu, 2002.
+     extracting feature models from product descriptions.        [20] C. McMillan, N. Hariri, D. Poshyvanyk,
+     In VaMoS, pages 45–54, 2012.                                     J. Cleland-Huang, and B. Mobasher. Recommending
+ [2] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid,                source code for use in rapid software prototypes. In
+     P. Sawyer, P. Rayson, C. Pohl, and A. Rummler. An                ICSE, pages 848–858, 2012.
+     exploratory study of information retrieval techniques       [21] H. Mei, G. Huang, and T. Xie. Internetware: A
+     in domain analysis. In SPLC, pages 67–76, 2008.                  software paradigm for internet computing. Computer,
+ [3] S. Apel and C. Kastner. An overview of                           45(6):26–31, June 2012.
+     feature-oriented software development. pages 49–84,         [22] H. Mei, G. Huang, H. Zhao, and W. Jiao. A software
+     2009.                                                            architecture centric engineering approach for
+ [4] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor.                internetware. Science in China Series F: Information
+     Software traceability with topic modeling. In ICSE               Sciences, 49(6):702–730, 2006.
+     (1), pages 95–104, 2010.                                    [23] H. Mei and X. Liu. Internetware: An emerging
+ [5] E. Bagheri, F. Ensan, and D. Gasevic. Decision                   software paradigm for internet computing. J. Comput.
+     support for the software product line domain                     Sci. Technol., 26(4):588–599, 2011.
+     engineering lifecycle. pages 335–377, 2012.                 [24] N. Niu and S. M. Easterbrook. On-demand cluster
+ [6] D. Blei, A. Ng, and M. Jordan. Latent Dirichlet                  analysis for product line functional requirements. In
+     Allocation. Journal of Machine Learning Research,                SPLC, pages 87–96, 2008.
+     3:993–1022, 2003.                                           [25] S. Park, M. Kim, and V. Sugumaran. A scenario, goal
+ [7] J. S. Breese, D. Heckerman, and C. Kadie. Empirical              and feature-oriented domain analysis approach for
+     analysis of predictive algorithms for collaborative              developing software product lines. pages 296–308,
+     ﬁltering. In Proceedings of the Fourteenth conference            2004.
+     on Uncertainty in artiﬁcial intelligence, pages 43–52.      [26] J. D. Rennie and N. Srebro. Fast maximum margin
+     Morgan Kaufmann Publishers Inc., 1998.                           matrix factorization for collaborative prediction. In
+ [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang,              Proceedings of the 22nd international conference on
+     B. Mobasher, C. Castro-Herrera, and M. Mirakhorli.               Machine learning, pages 713–719. ACM, 2005.
+     On-demand feature recommendations derived from              [27] J. Tang, H. fung Leung, Q. Luo, D. Chen, and
+     mining public product descriptions. In ICSE, pages               J. Gong. Towards ontology learning from
+     181–190, 2011.                                                   folksonomies. In IJCAI, pages 2089–2094, 2009.
+ [9] W. B. Frakes, R. P. D´  llaz, and C. J. Fox. Dare:          [28] K. Tian, M. Revelle, and D. Poshyvanyk. Using latent
+     Domain analysis and reuse environment. pages                     dirichlet allocation for automatic categorization of
+     125–141, 1998.                                                   software. In MSR, pages 163–166, 2009.
+[10] T. Griﬃths. Gibbs sampling in the generative model          [29] X. Wu, V. Kumar, J. R. Quinlan, J. Ghosh, Q. Yang,
+     of Latent Dirichlet Allocation. Technical report,                H. Motoda, G. J. McLachlan, A. Ng, B. Liu, S. Y.
+     Stanford University, 2002.                                       Philip, et al. Top 10 algorithms in data mining.
+[11] J. Han, M. Kamber, and J. Pei. Data mining: concepts             Knowledge and Information Systems, 14(1):1–37, 2008.
+     and techniques. Morgan kaufmann, 2006.                      [30] Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
+[12] A. E. Hassan. The road ahead for mining software                 The construction and evaluation of hierarchical
+     repositories. 2008.                                              software feature repository. In SEKE, pages 624–631,
+                                                                      2013.
+7
+    http://stackoverﬂow.com
+
\ No newline at end of file
diff --git a/res/paper/ISPDPAW.pdf b/res/paper/ISPDPAW.pdf
new file mode 100644
index 0000000..0105a51
--- /dev/null
+++ b/res/paper/ISPDPAW.pdf
@@ -0,0 +1,460 @@
+           Ninth IEEE International Symposium on Parallel and Distributed Processing with Applications Workshops
+
+
+                                  Trusted Computing Dynamic Attestation
+                               by Using Static Analysis based Behavior Model
+
+
+                               Fajiang Yu               Tang‡ , Yue Yu∗ , Tong Li∗ and Tong Yang∗
+                                            ∗ † , Xianglei
+                                              ∗ School of
+                                                        Computer, Wuhan University,
+                                                  Wuhan, Hubei, P.R.C. 430072
+                                                    Email: qshxyu@126.com
+                          † Key Laboratory of Aerospace Information Security and Trusted Computing,
+                                                 Ministry of Education in China
+                                  ‡ Zhejiang Provincial Testing Institute of Electronic Products,
+                                               Hangzhou, Zhejiang, P.R.C. 310012
+
+
+
+    Abstract—Current technology of trusted computing can not           and generates formal safety proofs, which is based on the
+ comply with the requirement of trusted behavior. One method           consumer’s policy. The proofs are bounded in addition to
+ for trusted computing dynamic attestation was proposed in this        source code, which usually is implemented by the compiler.
+ paper. This method uses the behavior model based on static
+ analysis of binary code. One same source code may have several        The consumer uses type based logic to check the program
+ different binary versions, this paper proposed one method of          automatically. The implementation of PCC also needs know
+ building almost the same core function model for different            program’s source code.
+ binary versions. This paper also overcame the difﬁculty that             Document [7] proposed one semantic remote attestation
+ some dynamic behaviors can not be obtained by static analysis.
+                                                                       (SRA) framework . SRA is based on trusted Java virtual
+ The paper also gave out some solutions of dynamic attestation
+ for some complex programs, such as recursion program, library         machine (Trusted VM) on client, and server attests Java
+ link program and multi threads program.                               program’s hierarchies, restricted interfaces, runtime state,
+   Keywords-trusted computing; dynamic attestation; behavior
+                                                                       input information, and etc. But there is no good solutions of
+ model; static analysis                                                building the semantic model of one program.
+                                                                          This paper mainly makes the following contributions: 1)
+                       I. I NTRODUCTION                                Behavior model is built based on static analysis of binary
+    Trusted computing is an information system security solu-          code. 2) This paper proposed one method of building almost
+ tion for the basic computing security problem [1]. The tech-          the same core function model for different binary versions
+ nology which trusted computing platforms currently adopted            of same code. 3) This paper also overcame the difﬁculty
+ guarantees the integrity of its feature code and conﬁguration         that some dynamic behaviors can not be obtained by static
+ data is the same as expected, before the components of the            analysis. 4) The paper also gave out the solutions of dynamic
+ computing platform take control of the main CPU, which                attestation for some complex programs.
+ is called trusted computing static attestation, but it does not
+ comply with the requirements that the behaviors are trusted.             II. S TATIC A NALYSIS BASED P ROGRAM B EHAVIOR
+ We need to verify the dynamic behavior of components as                                  M ODEL B UILDING
+ well, which is called trusted computing dynamic attestation.
+                                                                         Program runtime behavior attestation is the main part
+    The related researches mainly include MCC (Model Car-
+                                                                       of trusted computing dynamic attestation. The ﬁrst step of
+ rying Code), PCC (Proof Carrying Code), semantic remote
+                                                                       program behavior attestation is building program behavior
+ attestation, and etc.
+                                                                       model. You can see the detail stages and algorithms about
+    MCC [2] [3] was proposed by R. Sekar et al., its key
+                                                                       building trusted behavior model based on static analysis of
+ idea is: Code producer generates behavior information about
+                                                                       PE binary ﬁle in our previous work [8].
+ program security (Model), a consumer receives both the
+ model and the program from the producer. The consumer
+                                                                       A. Variance between Debug and Release Version
+ checks whether the model satisﬁes the consumer’s security
+ policy by formal reasoning. Document [4] and [5] have                   The same code is compiled with same compiler but choos-
+ done some implementations of MCC on JVM (Java Virtual                 ing different compiling options, different binary versions
+ Machine). The MCC developer should know program’s                     could be obtained, among which the most typical is Debug
+ source code, but this assumption does not always be true.             and Release version. Program behavior model constructing
+    PCC [6] was proposed by George C. Necula et al.,                   should not only support static analysis of Release version,
+ its key idea is: The producer carries analysis on code                but also the Debug version.
+
+
+978-0-7695-4429-8/11 $26.00 © 2011 IEEE                            1
+DOI 10.1109/ISPAW.2011.14
+  We use Visual C++ 6.0 for compiling one instance                  lead to the variance of sub function number in dif-
+to a Debug version, and then disassemble it by using                ferent binary versions’ behavior models. For example,
+IDA. It can be observed that the program entry point is             VS2010 invokes HeapSetInformation to set stack infor-
+_mainCRTStratup, and the forms of API calling in some               mation, while VS2005 and VC6 do not. VS2005 invokes
+sub-functions are like:                                             __security_init_cookie to initialize Cookie for pre-
+call     ds :    imp     GetVersion@0 ;
+                                                                    venting buffer overﬂow. VS2010 wraps the following API
+call     ds :    imp     OpenFile@12 ;                              sequence in a sub function sub_40250F, to accomplish
+                                                                    the same initialization of __security_init_cookie. But
+  And we use Visual C++ 6.0 for the same code to a Release          VC6 does not carry this work.
+version. It can be observed that the disassembled code’s            G e t S y s t e m T i m e A s F i l e T i m e− e t C u r r e n t P r o c e s s I d −
+                                                                                                                  >G                                    >
+entry point is start, and the API calling in some sub-                      G e t C u r r e n t T h r e a d I d − e t T i c k C o u n t−
+                                                                                                                 >G                      >
+functions is very direct:                                                   QueryPerformanceCounter
+
+call     ds : GetVersion ;                                             Besides, there are some different API callings in dif-
+call     d s : GetCommandLineA ;
+call     e s i : OpenFile ;                                         ferent program versions from different compilers. This is
+                                                                    because some same functions are implemented by different
+   So when we start constructing program behavior model             APIs. Such as VC6 and VS2005 use GetStartupInfoA to
+for Debug version, we need do some preprocessing, such as           gain the information in initiating stage, while VS2010 uses
+removing preﬁxes like __imp__ and sufﬁxes like @*.                  GetStartupInfoW. Some new compilers use extended API
+   In addition, there is also a big difference in the number        to replace the old ones, such as GetVersion used by VC6
+of sub-function between Debug and Release version.                  has already been replaced by GetVersionEx.
+   Both Debug and Release Version have a quite large                C. Modeling Management for Different Binary Versions
+number of sub functions in the disassembled result of cor-
+responding binary program. The main cause is the compiler              Although there is big variance between different binary
+will add some essential additional codes. The reason why            versions of one same code, they should have fairly same
+Debug version has more sub functions than Release is                core function behavior model.
+                                                                                                                           cdr
+that Debug version contains plenty of debug information,               We obtain the corresponding binary program (Bϕ ) with
+and must include more API calling, such as DebugBreak,              a speciﬁc compiler and compiling options to compiler
+InterlockedIncrement, and etc.
+                                                                    “empty program” (Pϕ , see Example 1), its program behavior
+                                                                                               cdr
+                                                                    model is denoted as Mϕ , which can act as a reference
+   Although there is big difference, the core function behav-
+                                                                    template when we construct model for other normal program
+ior model based on Debug version should be fairly consistent
+                                                                    with the same compiler and compiling options.
+with Release version.
+                                                                       At the time of behavioral modeling of a certain normal
+B. Variance between Different Compilers                             binary program (Bn ), we can get the speciﬁc compiler name
+                                                                    and determine Bn is a Release version or Debug version by
+   The same code is compiled with different compiler, dif-          performing a static analysis of Bn , and then Bn can be
+ferent binary versions could be obtained. We use one empty                           cdr
+                                                                    speciﬁed as Bn . We get the optimized model of Bn ,        cdr
+Win32 console program as an instance (Example 1). This                              cdr
+                                                                    denoted as Mn . Referring to the corresponding “empty
+program is compiled with Visual C++ 6.0, Visual Studio                                             cdr
+                                                                    program” behavior model Mϕ , we can remove the relevant
+2005 and Visual Studio 2010 respectively. And then we                                                                  cdr
+                                                                    parts about initialization and exit operation in Mn , the core
+disassemble these versions, the sub function numbers in the         function behavior model Mnc = Mn − Mϕ . Then the
+                                                                                                   cdr      cdr      cdr
+disassembled results of corresponding binary versions are           different binary versions of the same Pn could have fairly
+different.                                                          same core function behavior model.
+   Example 1: empty.c
+                                                                        III. P ROGRAM DYNAMIC B EHAVIOR ATTESTATION
+v o i d main ( i n t a r g c , char ∗ a r g v [ ] )
+{ return ; }                                                           After building the model of the program expected behav-
+                                                                    ior, we also need to monitor the program’s running behavior.
+   Different compilers cover API in different wraps. VS2010         We use the library of Microsoft Detours to monitor the
+covers most API in wraps as sub functions, all implementa-          program behavior, and monitor 311 core API functions in
+tions are based on sub function calling, such as sub_401E83         Ntdll.dll.
+only wrap one API EncodePointer, sub_401E83 only
+wrap one API TlsAlloc. So the behavior models of differ-            A. Preprocessing Program Behavior
+ent binary versions have different number of sub functions.            When one program runs on the operating system, some
+   To make sure program running safely, some com-                   Win32 APIs called by the program can not be obtained by
+pilers lay more emphases on initialization, which also              static analysis of the program self. We need to do some
+
+
+                                                                2
+program behaviors preprocessing, then we can use the static                      behavior model to verify w, just see whether the constructed
+analysis based program behavior model to do attestation.                         global PDA MG = (QG , ΣG , ΓG , δG , qG0 , ZG0 , FG )
+   1) Preprocessing program initialization and exit behavior                     (ZG0 = ε) can accept w.
+   When running the console program which is compiled                              Whether MG can accept w depends on whether MG can
+from Example 1 on Windows XP SP3, we can monitor the                             be transformed from the initial Instantaneous Description
+following API sequence:                                                          ID(qG0 , w, ε) to ID(pG , ε, ε) (pG ∈ FG ) by making some
+G e t F i l e T y p e − o c k R e s o u r c e−
+                       >L                     >GetCommandLineA                   moves, which is denoted as:
+
+  And the API LockResource can not be obtained by static                                            (qG0 , w, ε) ⊢∗ G (pG , ε, ε), pG ∈ FG
+                                                                                                                  M
+analysis of the corresponding binary program self.                                 ⊢MG denotes that MG make a move, including ε move
+  When we run the same program on Windows 7, the                                 and non-ε move.
+monitored API sequence is:
+GetFileType− etHandleCount−
+            >S             >GetCommandLineA                                      C. Single Thread Program Attestation
+                                                                                    On Window XP SP3, we use VC6 to compile the code
+   Obviously, the same program runs on different operating                       in Example 2, and then build the behavior model of the
+systems, some Win32 APIs called by the program are also                          corresponding binary program. After being simpliﬁed by
+different.                                                                       following the procedures described in subsection II-C, we
+   We take the API sequence called by “empty program” as                         get the core function model of Example 2’s program, Ms =
+a standard, which is used to verify the program’s actual API                     (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ), which is shown as Figure 1.
+sequence during the process of initialization and exit. And                         Example 2: ﬁle.c
+then the other API sequences left can be veriﬁed by using
+static analysis based program behavior model.                                    v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
+                                                                                   ... ...
+   2) Preprocessing complicated Win32 API behavior                                 p f 1 = (HANDLE) O p e n F i l e ( fn1 ,& of , OF READWRITE) ;
+   When one program calls some complicated Win32 APIs,                             i f ( pf1 ) {
+the system will call some other relevant APIs to complete                            r t = R e a d F i l e ( pf1 , bf1 , s i z e o f ( b f 1 ) ,& r s i z e , NULL) ;
+                                                                                     if ( rt ) {
+the complicated function. These relevant APIs also can not                             p f 2 = (HANDLE) O p e n F i l e ( fn2 ,& of , OF READWRITE) ;
+be obtained by static analysis of the program self.                                    i f ( pf2 ) {
+   For example, when running the console program which                                   r t = W r i t e F i l e ( pf2 , bf2 , s t r l e n ( b f 2 ) ,& w s i z e , NULL) ;
+                                                                                         CloseHandle ( pf2 ) ;
+is compiled from Example 1, we can monitor the following                               }
+API sequence:                                                                        }
+                                                                                     CloseHandle ( pf1 ) ;
+O p e n F i l e − e a r c h P a t h A−
+                 >S                   >SearchPathW− r e a t e F i l e A −
+                                                   >C                    >         }
+       CreateFileW− etFileTime−
+                            >G               >                                   }
+       Fil eT im e T o D o sD a t e Ti me
+
+   While carrying a static analysis of the corresponding                                                                           , Pop 0001
+binary program, we can only obtain the API of OpenFile.                                                                                   CloseHandle
+                                                                                                                               _main
+So we ﬁrstly need to preprocess the relevant APIs, then we                                                      ReadFile        -2
+can use the static analysis based program behavior model to                              Start-                     OpenFile                         _main
+                                                                                                    _main-                                                            Start-
+                                                                                           8                                                          -4
+do attestation.                                                                                       1                                                                10
+                                                                                                                _main-           CloseHandle
+   3) Preprocessing Unicode API behavior                                                                          3                             CloseHandle
+                                                                                                                                       _main-                   , Pop 0001
+   On the Windows NT-based operating system, the Win32                                                   OpenFile WriteFile
+                                                                                                                                         5
+API calling related char operation (including ANSI char                                           , Push 0001                                           _main
+                                                                                                                         _main                           -6
+and Unicode char) ultimately will call Unicode API. For                                                                   -0             CloseHandle
+
+example, if the API is GetModuleHandleA in the static
+analysis based behavior model of one program, then when                                     Figure 1.        Core function behavior model of Example 2
+running the program, we can monitor the two APIs:
+GetModuleHandleA and GetModuleHandleW. So we need                                   We run the console program which is compiled from Ex-
+to preprocess the program behavior of Unicode API, then we                       ample 2 on Windows XP SP3, and preprocess the monitored
+can use the static analysis based program behavior model to                      Win32 API sequence by following the procedures described
+do attestation.                                                                  in subsection III-A. The preprocessed API sequence (ws ) is:
+B. General Program Dynamic Attestation                                           Openfile − eadFile− penFile−
+                                                                                           >R       >O       >W r i t e F i l e −>
+                                                                                     CloseHandle− loseHandle
+                                                                                                 >C
+   The preprocessed program behavior is denoted as w =
+a1 a2 · · · an , where ai (i = 1, 2, · · · , n) is the name of Win32               The initial instantaneous description of Ms is
+API. Now we can use the static analysis based program                            ID(Start-8, ws , ε). Let us see whether Ms can accept
+
+
+                                                                             3
+ws :                                                                                           The initial instantaneous description of Mr                                        is
+                                                                                                    ′                                         ′
+             (Start-8, ws , ε) ⊢Ms ( main-0, ws , ‘0001’)                                    ID(0, wr , ε). Let us see whether Mr can accept wr :
+                                                                                                                             ′1              ′1
+             ......                                                                                         (0, ‘WriteFile’ wr , ε) ⊢Mr (1, wr , ε)
+             ( main-4, ε, ‘0001’) ⊢Ms (Start-10, ε, ε)                                                      ......
+  Start-10 is one ﬁnal state, so ws can be accepted by                                                      (3, ‘ReadFile’, ε) ⊢Mr (2, ε, ε)
+Ms . It means the program behavior during this run time                                                                  ′
+passed the dynamic attestation.                                                                 2 is one ﬁnal state, so wr can be accepted by Mr . It
+                                                                                             means the program behavior during this run time passed the
+D. Recursion Program Attestation                                                             dynamic attestation. This shows our method can solve the
+   We use one instance to illustrate how to do dynamic                                       difﬁculty of dynamic attestation for recursion program.
+attestation for a recursion program, whose source code is
+shown in Example 3.                                                                          E. Library Link Program Attestation
+   Example 3: Recursion.c                                                                       We use one link library instance (source code is in
+i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) ;                                Example 4 to illustrate how to do dynamic attestation for
+v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {                                        a library link program.
+  ... ...
+  p f i l e = (HANDLE) O p e n F i l e ( FPATH , &of , OF READWRITE) ;                          Example 4: Export function FOp in one link library
+  if ( pfile ) {
+    Recu ( i , p f i l e , r s i z e ) ;                                                     v o i d FOp ( char ∗ P a t h S , char ∗ PathD ) {
+    CloseHandle ( p f i l e ) ;                                                                ... ...
+  }                                                                                            p f S = (HANDLE) O p e n F i l e ( PathS ,& of , OF READWRITE) ;
+}                                                                                              i f ( pfS ) {
+i n t Recu ( i n t i , HANDLE p f i l e , DWORD r s i z e ) {                                    r t = R e a d F i l e ( pfS , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
+  i f ( i <=0) { . . . }                                                                         if ( rt ) {
+  else {                                                                                           pfD = (HANDLE) O p e n F i l e ( P a t h D t ,& of , OF READWRITE) ;
+    W r i t e F i l e ( p f i l e , buf , s t r l e n ( b u f ) ,& r s i z e , NULL) ;             i f ( pfD ) {
+    R e c u r s i o n ( i −1, p f i l e , r s i z e ) ;                                              W r i t e F i l e ( pfD , tmp , s i z e o f ( tmp ) ,& r s i z e , NULL) ;
+    R e a d F i l e ( p f i l e , buf , s i z e o f ( b u f ) , &r s i z e , NULL) ;                 C l o s e H a n d l e ( pfD ) ;
+  }                                                                                                }
+  return 0;                                                                                      }
+}                                                                                                CloseHandle ( pfS ) ;
+                                                                                               }
+                                                                                             }
+  We build the behavior model of the corresponding binary
+program by following the procedures described in section II,
+                                                                                                One program uses one link library in two ways: static link
+and get the core function model of the recursion program,
+                                                                                             and dynamic link. The source code of one program bounded
+Mr = (Qr , Σr , Γr , δr , qr0 , Zr0 , Fr ), which is shown as
+                                                                                             with the static link library (Example 4) is shown in Example
+Figure 2.
+                                                                                             5.
+                                                                                                Example 5: Bounding with a static link library
+                       WriteFile                           ReadFile
+                                                                                             #pragma comment ( l i b , ” v e r D l l . l i b ” )
+                   0               1    ReadFile       2                3
+                                                                                               d e c l s p e c ( d l l i m p o r t ) v o i d FOp ( char ∗ ps , char ∗ pd ) ;
+                       , Push 0002                         , Pop 0002                        v o i d main ( i n t a r g c , char ∗ a r g v [ ] ) {
+                                                                                                    ... ...
+                                                                                                   F i l e O p ( Src , Des ) ;
+            Figure 2.     Core function model of recursion program                                 return ;
+                                                                                             }
+   We run the recursion program which is compiled from
+Example 3, and preprocess the monitored Win32 API se-                                           We build the behavior model of the corresponding binary
+quence by following the procedures described in subsection                                   program from Example 4 and Example 5 by following the
+III-A. The preprocessed API sequence (wr ) is:                                               procedures described in section II, and get the core function
+                                                                                             model, Msl = (Qsl , Σsl , Γsl , δsl , qsl0 , Zsl0 , Fsl ), which is
+OpenFile
+−>W r i t e F i l e −>W r i t e F i l e −>W r i t e F i l e − e a d F i l e −
+                                                             >R              >               shown as Figure 3.
+      ReadFile− eadFile >R                                                                      We run the program which is compiled from Example
+−>C l o s e H a n d l e                                                                      5, and preprocess the monitored Win32 API sequence by
+                                                                                             following the procedures described in subsection III-A. The
+   The ﬁrst API OpenFile and the last API CloseHandle
+                                                                                             preprocessed API sequence (wsl ) is:
+are called by main(). We only use the model of recursion
+                                      ′
+function to verify the API sequence (wr ) between ﬁrst API                                   OpenFile− eadFile− penFile−
+                                                                                                      >R        >O       >W r i t e F i l e −>
+OpenFile and the last API CloseHandle.                                                           CloseHandle− loseHandle
+                                                                                                             >C
+
+
+
+                                                                                         4
+                                                       CloseHandle
+           , Push 0001
+                                                      FOp                                                          IV. A NTI - ATTACK E XPERIMENT
+                                         OpenFile      -3        CloseHandle
+        Start-     _main       FOp            WriteFile                               FOp             We use two typical attacking experiments to prove that
+          8         -0          -2                           FOp-                      -4
+                                               CloseHandle    6
+                                                                        CloseHandle                the method of dynamic attestation proposed in this paper is
+        , Push 0002        ReadFile     FOp                              , Pop 0002
+                                         -5
+                                                                                      Start-
+                                                                                                   effective.
+  FOp                    FOp
+           OpenFile                                 _main           , Pop 0001
+                          -1          , Pop 0002                                       10
+   -0                                                -1
+                                                                                                   A. DLL Hijacking
+
+         Figure 3.       Behavior model of static link library program
+                                                                                                     When one Windows program calls the API in one system
+                                                                                                   DLL, the system will search the corresponding DLL in the
+                                                                                                   system directory. This experiment uses one pseudo DLL in
+  The initial instantaneous description of Msl is                                                  system directory to launch the attack.
+ID(Start-8, wsl , ε). Let us see whether Msl can accept                                              The object being attacked is a socket program (Ps ). We
+wsl :                                                                                              build the behavior model of the corresponding binary ﬁle of
+          (Start-8, wsl , ε) ⊢Msl ( main-0, wsl , ‘0001’)                                          Ps by following the procedures described in section II, and
+                                                                                                   get its function model, Ms = (Qs , Σs , Γs , δs , qs0 , Zs0 , Fs ).
+          ......                                                                                   There has the following valid API sequence in Ms :
+          ( main-1, ε, ‘0001’) ⊢Msl (Start-10, ε, ε)
+                                                                                                   WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
+                                                                                                              >s          >h         >b    >l          >a          >
+  Start-10 is one ﬁnal state, so wsl can be accepted by                                               send− e c v − l o s e s o c k e t
+                                                                                                            >r     >c
+Msl . This shows our method can solve the difﬁculty of
+dynamic attestation for static link library program.                                                 Because the socket program has to call the APIs from
+   When one program is bounded with the dynamic link                                               ws2_32.dll, we use one “malicious” DLL to replace
+library, due to that the link library is dynamically loaded                                        the original ws2_32.dll. Except for send(), all other
+to program space, the actual address of export functions in                                        functions in the pseudo DLL are completely in the same way
+library can not be obtained by static analysis. In our future                                      like original ws2_32.dll. send() is modiﬁed as using the
+work, we will get the name of export function in link library                                      following API sequence to stole sensitive information.
+by carrying analysis of Win32 API arguments, and complete                                          OpenFile−>W r i t e F i l e − l o s e H a n d l e − e n d
+                                                                                                                                >C                    >s
+the attestation for dynamic link library program.
+                                                                                                      We run the program (Ps ) on the platform with the mali-
+F. Multi-thread Program Attestation                                                                cious ws2_32.dll, and preprocess the monitored Win32
+   We build the behavior model of one multi-thread bi-                                             API sequence by following the procedures described in
+nary program by following the procedures described in                                              subsection III-A. The preprocessed API sequence (ws ) is:
+section II, and get the core function model, Mm =                                                  WSAStartup− o c k e t − t o n s − i n d− i s t e n − c c e p t −
+                                                                                                              >s           >h         >b        >l            >a       >
+(Qm , Σm , Γm , δm , qm0 , Zm0 , Fm ).                                                                OpenFile−  >W r i t e F i l e − l o s e H a n d l e −
+                                                                                                                                     >C                    >send− e c v −
+                                                                                                                                                                 >r      >
+   The current behavioral model does not include API ar-                                              closesocket
+gument value, so there is no way to embed the automaton
+                                                                                                      Let us see whether Ms can accept ws . When Ms reads
+of each sub-thread into that of the main thread, and form a
+                                                                                                   in OpenFile, there is no path to complete the transition,
+complete global automaton.
+   Due to the irregularity of parallel programs execution                                          denoted as:
+in operating system, the API calls of each thread appear                                                                     ′                     ′
+                                                                                                            (ps , ‘OpenFile’ws , Zs β) ⊬∗ s (qs , ws , γβ)
+                                                                                                                                        M
+alternately, and the appearance order of API also is different
+                                                                                                                                           ′
+at each run-time. In addition to record the API name, we                                              At this time, ps ∈ Qs , ‘OpenFile’ws ̸= ε, Zs β ̸= ε.
+                                                                                                                       /
+should also record the thread ID who calls the corresponding                                       This means Ms can not accept ws , and Ps ’s running
+API when monitoring the dynamic behavior of multi-thread                                           behavior can not pass the dynamic attestation. We can see
+program.                                                                                           our method can protect the system against DLL Hijacking
+   We do the dynamic attestation for every sub-thread’s                                            attack.
+behavior independently. The speciﬁc method is similar to                                           B. Buffer Overﬂow
+singe thread program attestation (see III-C). The difference
+from the single thread program is that we need try to                                                 The object being attacked is a program (Pb ) for ﬁle con-
+determine the correspondence relation between the actual                                           tent copy. Pb reads some data from the ﬁrst ﬁle, and writes
+behavior and sub-function’s behavioral model of a certain                                          the data into the second ﬁle. We build the behavior model of
+thread by making multi attempts.                                                                   Pb by following the procedures described in section II, and
+   In our future work, we will get the name of sub-                                                get its function model, Mb = (Qb , Σb , Γb , δb , qb0 , Zb0 , Fb ).
+thread function by carrying analysis of the arguments in                                           There has the following valid API sequence in Mb :
+CreateThread, and then the behavior model of sub-thread                                            Openfile − eadFile− penFile− p r i n t f − t r c p y −
+                                                                                                                >R            >O       >s      >s        >
+function can be embedded into the model of main thread.                                                W r i t e F i l e − loseHandle− loseHandle
+                                                                                                                          >C          >C
+
+
+
+                                                                                               5
+  We build a piece of Shell Code, which will call                                            R EFERENCES
+MessageBox, and then write the Shell Code into the ﬁrst             [1] Shen Changxiang, Zhang Huanguo, Wang Huaimin and et
+ﬁle. When Pb uses strcpy, the Shell Code will be called.                al. Research and development of trusted computing. Science
+We run the program (Pb ) on the platform with the Shell Code            China: Information Science, 2010, 40(2): 139-166. (in Chi-
+ﬁle, and preprocess the monitored Win32 API sequence by                 nese)
+following the procedures described in subsection III-A. The
+                                                                    [2] R. Sekar, V. N. Venkatakrishnan, Samik Basu, et al. Model-
+preprocessed API sequence (wb ) is:                                     Carrying Code: A Practical Approach for Safe Execution of
+Openfile − eadFile− penFile− p r i n t f − t r c p y −
+          >R       >O                >s               >s    >           Untrusted Applications. Proceedings of the nineteenth ACM
+    MessageBoxA−>W r i t e F i l e − l o s e H a n d l e −
+                                    >C                    >             symposium on Operating systems principles (SOSP’03), Bolton
+    CloseHandle                                                         Landing, New York, USA, ACM Press, 2003: 15-28.
+
+  Let us see whether Mb can accept wb . When Mb reads in            [3] R. Sekar, C. R. Ramakrishnan, I.V. Ramakrishnan, and et
+MessageBoxA, there is no path to complete the transition,               al. Model-Carrying Code (MCC): A New Paradigm for
+                                                                        Mobile-Code Security. Proceedings of the 2001 New Security
+denoted as:                                                             Paradigms Workshop (NSPW’01), Cloudcroft, New Mexico,
+                                                                        USA, ACM Press, 2001: 23-30.
+                          ′                     ′
+      (pb , ‘MessageBoxA’wb , Zb β) ⊬∗ b (qb , wb , γβ)
+                                     M
+
+                    /                       ′
+   At this time, pb ∈ Fb , ‘MessageBoxA’wb ̸= ε, Zb β ̸=            [4] Wei Da, Jin Ying, Zhang Jing,and et al. Enforcing Security
+                                                                        Policie s in Open Source JVM. ACTA ELECTRONICA SINICA,
+ε.This means Mb can not accept wb , and Pb ’s running                   2009, 37 (4A): 36-41. (in Chinese)
+behavior can not pass the dynamic attestation. We can see
+our method can protect the system against buffer overﬂow            [5] Jin Ying, Li Zepeng, Zhang Jing, and et al. Static Checking
+attack.                                                                 of Security Related Behavior Model for Multithreaded Java
+                                                                        Programs. Chinese Journal of Computers, 2009, 32 (9): 1856-
+   Our methods are also effective against other unknown
+                                                                        1868. (in Chinese)
+attacks.
+                                                                    [6] George C. Necula. Proof-Carrying Code. Proceedings of 24th
+          V. C ONCLUSION AND F UTURE W ORK                              ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
+   Our method for trusted computing dynamic attestation                 gramming Languages (POPL’97), Paris, France, ACM Press,
+                                                                        1997: 106-119.
+uses the behavior model based on static analysis of binary
+code. This paper proposed one method of building almost             [7] Vivek Haldar, Deepak Chandra, Michael Franz. Semantic Re-
+the same core function model for different versions of                  mote attestation: A Virtual Machine Directed Approach to
+same code. This paper also overcame the difﬁculty that                  Trusted Computing. Proceedings of the 3rd conference on
+some dynamic behaviors can not be obtained by static                    USENIX Virtual Machine Research and Technology Sympo-
+                                                                        sium, San Jose, California, USA, USENIX Association, 2004:
+analysis. The paper also gave out some solutions of dynamic             29-41.
+attestation for some complex programs.
+   Our current method can not protect programs against              [8] Yu Fajiang, Yu Yue. Static analysis-based behavior model
+mimicry attack [9] [10]. Some researchers have proposed                 building for trusted computing dynamic veriﬁcation. Wuhan
+some methods to protect program against mimicry attack.                 University Journal of Natural Sciences, 2010, 15(3): 195-200.
+Based on these researches, we will build program behav-             [9] David Wagner, Paolo Soto. Mimicry attacks on host based
+ior model by using EFSA (Extended FSA) to describe                      intrusion detection systems. Proceedings of the 9th ACM
+arguments value. The behavior model including arguments                 conference on Computer and Communications Security, Wash-
+also can help solve the difﬁculty of dynamic link library               ington, DC, USA, ACM Press, 2002: 255-264.
+programs’ behavior attestation.
+                                                                    [10] Li Wen, Dai Yingxia, Lian Yifeng, and et al. Context sensitive
+   The method in this paper can not ensure security of                  host-based IDS using hybrid automaton. Journal of Software,
+mobile code program (such as Web script), which only can                2009, 20(1): 138-151. (in Chinese)
+ensure the security of script execution host program (such
+as Browser). We will carry further research on the dynamic
+attestation of mobile code program and parallel program.
+
+                    ACKNOWLEDGMENT
+   This work is supported by the National Natural Sci-
+ence Foundation of China (Grant No. 60673071, 60970115,
+91018008), the Fundamental Research Funds for the Central
+Universities in China (Grant No. 3101044), and open foun-
+dation of Zhejiang Key Laboratory of Information Security
+in China.
+
+
+                                                                6
+
\ No newline at end of file
diff --git a/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf b/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf
new file mode 100644
index 0000000..44eef7d
--- /dev/null
+++ b/res/paper/Optimization of Program Behavior Model for Trusted Computing Dynamic Attestation.pdf	
@@ -0,0 +1,482 @@
+Journal of Computational Information Systems 7:5 (2011) 1436-1445
+Available at http://www.Jofcis.com
+
+
+
+
+        Optimization of Program Behavior Model for Trusted Computing
+                             Dynamic Attestation
+
+                              Fajiang YU1,2,†, Yuewei XU3, Yue YU1, Yang LIN1, Yaohui WANG1
+                                        1
+                                          School of Computer, Wuhan University, Wuhan 430072, China
+                   2
+                       Key Laboratory of Aerospace Information Security and Trusted Computing, Wuhan 430072, China
+                       3
+                         Zhejiang Provincial Testing Institute of Electronic Products, Hangzhou, Zhejiang 310012, China
+
+
+                                                                 Abstract
+       Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of program’s behavior
+       verification is building program’s trusted behavior model. Static analysis based behavior model building can cover all
+       running paths, but there may be many        run circuits, which can lead to the failure of dynamic attestation execution. This
+       paper gives out an improved Floyd algorithm to find out and remove one          run circuit with shortest length. The action is
+       repeated until there is no     run circuit, which can optimize the trusted behavior model. This paper also carries out one
+       theoretical analysis of the time complexity and space complexity, the optimization method is better than the method based
+       on the traditional algorithm of finding out all elementary circuits in directed graph. Finally, this paper does some
+       optimization experiments about real Windows binary program’s behavior model. The result shows there is a large
+       reduction in the number of directed graph’s nodes and edges in the behavior model after deleting all       run circuits.
+
+       Keywords: Trusted Computing; Dynamic Attestation; Behavior Model;           Run Circuit
+
+1. Introduction
+Trusted Computing is an information system security solution for the basic computing security problem. It
+has become one of hot subjects in the information security research field [1, 2]. From the angle of behavior,
+Trusted Computing Group (TCG) gives us a standard to verify the computing platform whether is trusted or
+not: “an entity can be trusted if it always behaves in the expected manner for the intended purpose” [3]. The
+technology which the trusted computing platforms currently adopted does not comply with the
+requirements that the behaviors are trusted. We need to verify the dynamic behavior of components as well.
+   Currently, there are few researches on the theory and method of trusted computing dynamic verification.
+The related researches are focus on extended trusted network connection and remote attestation,
+trustworthy software, host-based intrusion detection, malicious software detection based on behavior
+analysis, and etc.
+   In the aspect of extended trusted network connection and remote attestation, Vivek Haldar et al. have
+given us a basic framework on the semantic remote attestation for the trustworthiness of a Java program
+running behavior [4]. Xiaoyong Li et al. have proposed one model of system behavior based
+trustworthiness attestation for computing platform [5]. Ahmad-Reza Sadeghi et al. have presented a method
+of property-based attestation for computing platforms [6]. Dengguo Feng et al. have proposed a complete
+dynamic update attestation scheme for multiple remote attestation instance in trusted computing
+environment [7]. These researches have improved some disadvantages of TCG trusted network connection,
+but it does not verify the dynamic behavior of the components.
+
+†
+    Corresponding author.
+    Email addresses: qshxyu@126.com (Fajiang YU)
+
+1553-9105/ Copyright © 2011 Binary Information Press
+May, 2011
+ 1437                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+   Current research on trustworthy software are mainly concentrated on the fields of model building and
+verification, software trustworthiness design, the analysis and test on software trustworthiness, the
+evolution of software trustworthiness [8], and etc. The research covers every software lifecycle stage. The
+trusted computing dynamic verification pays more attention to verify the dynamic behavior.
+   Since Stephanie Forrest et al. started to use the sequence of Linux system call to describe the program
+behavior and conduct host-based intrusion detection system [9, 10], many researchers have done a lot of
+work in this area. But the behavioral characteristic of trusted computing dynamic verification is not limited
+to the sequence of system call.
+   To improve the ability of detecting metamorphic viruses and unknown viruses, the detecting method
+based on behavior analysis has been proposed [11-13]. At present, the main behavioral characteristic for
+malicious code detection is API, but for trusted computing dynamic verification, it is not limited to API.
+   The first step of trusted computing dynamic attestation is building the behavior model of all platform
+components. Generally, there are two methods for model building: dynamic training and static analysis.
+Dynamic training always faces the classic problem of machine learning. It is hard to build a training set
+which can cover all possible program execution paths. In order to solve this problem of dynamic training,
+David Wagner et al. started using static analysis to build a Finite State Automata (FSA) model for the
+program behavior [14]. Jonathon T. Giffin et al. inserted one “null call” before and after calling one sub
+function for building one context-sensitive model to guarantee the high efficiency of FSA model and
+remove impossible paths [15, 16]. Henry Hanping Feng et al. built a stack-deterministic Push down
+Automata (sDPDA) model to improve the efficiency [17]. Rajeev Gopalakrishna et al. directly embedded
+the sub functions for building global FSA to improve the efficiency [18]. LI Wen et al. connected every sub
+function only when the application is running to reduce stack size [19].
+   These methods which use static analysis to build the FSA program model mainly focus on the
+characteristic of system call or API. It is regarded as the input alphabet symbol of FSA state transition. But
+there may be no code of the system call or the API call in many program blocks. This will cause that the
+generated FSA has a lot of transitions. It means that there is no need of inputting any alphabet symbol
+when the state of FSA shifts. These transitions may form run circuits in the FSA, which can cause the
+FSA falls into endless loop and can not stop when it is used to do trusted computing dynamic attestation.
+So when we build the FSA behavior model for the program, we need to find out and delete run circuits,
+and then remove other non- transitions in order to guarantee it executes correctly and efficiently by using
+this model to do attestation.
+   This paper mainly makes the following three contributions: (1) We give out an improved Floyd
+algorithm to find out and delete one shortest run circuit. (2) This paper also carries out one theoretical
+analysis of the time complexity and space complexity, the optimization method is better than the method
+based on the traditional algorithm of finding out all elementary circuits in directed graph. (3) Finally, this
+paper does some optimization experiments about real Windows binary program’s behavior model. The
+result shows there is a large reduction in the number of directed graph’s nodes and edges in the behavior
+model after deleting all run circuits. Either in time efficiency or space efficiency, the optimization
+method is better than the method based on the traditional algorithm of finding out all elementary circuits in
+directed graph.
+
+2. Behavior Modeling Based on Static Analysis of Binary Program
+Figure 1 is the basic framework of trusted computing dynamic attestation. First we build the model for the
+trusted behavior of each computing platform components. Then we use this model to verify platform’s real
+running behavior. The trusted behavior model is the base of trusted computing dynamic attestation.
+Because dynamic training cannot cover all running paths, the method considered by this paper is to apply
+static analysis of the binary PE file and build the program trusted behavior model. It is more consistent with
+the reality that many commercial softwares do not open the source code.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                     1438
+
+
+
+
+                            Fig.1 The Framework of Trusted Computing Dynamic Attestation
+
+  The process of constructing static analysis-based behavior model includes the following seven stages:
+  1) CFG building from binary code
+  2) FSA constructing from CFG
+  3) Deleting ε run circuit
+  4) Deleting non-circuit ε transition
+  5) Constructing Deterministic FSA
+  6) Deleting empty DFA
+  7) Building Global PDA
+  You can see the detail stages and algorithms about building trusted behavior model based on static
+analysis of PE binary file in our previous work [20].
+
+3. Searching and Deleting ε Run Circuits
+The existence of run circuits can lead the failure of trust attestation, so we need to find out and delete the
+  run circuits of FSA during the process of building trusted behavior model, in order to finish the model
+optimization.
+  Definition 1. There is a input symbol sequence on one FSA                                , the sequence is
+                                                     , whose corresponding state sequence is
+                                          ,                       . We call this state sequence is a run of
+FSA       on the input symbols , which is denoted as .
+  Definition 2.     is a run, if                               .
+  Definition 3.      is a run circuit, if                                  and                    except that
+       .
+
+3.1. Judging Whether There are ε Run Circuits
+In order to delete run circuits in the FSA, we need to judge whether there are run circuits or not
+firstly. The FSA whose all non- transitions have been deleted is denoted as                               ,
+Where             ，           ,                                           ,         ,         .
+   FSA          also is a directed graph, which is denoted as                             , where         ,
+                                  . We carry out a topological sorting for this graph:
+   1) Select one state node     from     , which has no precursor;
+   2) Delete this state node and all the edges whose head node is                , it means               ,
+                                      .
+   We repeat the two steps until           or there is no state node which has no precursor in .
+   For the FSA       that has been carried out a topological sorting, if          then there must be no run
+circuit in    ; if          then there must be some run circuits in          , and the run circuits must be
+consisted with the state nodes left in .
+ 1439                F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+3.2. ε Run Circuits Searching Based on Algorithm of Generating Elementary Circuits in Directed
+     Graph
+There are a lot of algorithms of generating elementary circuits in directed graph. This paper uses one
+algorithm proposed by Wang Yuying et al. [21]. Compared with other algorithms, this algorithm need not
+search the node which has been discovered, and it is more efficient.
+   The transition FSA directed graph that has been carried out a topological sorting is denoted as
+                , where            and there are    state nodes in      . There must be run circuits in this
+FSA.
+   The algorithm of searching run circuits in FSA based on the method of generating elementary circuits
+in directed graph is denoted as Algorithm 1 (You can its detail in [21].).
+   The version of notepad.exe in the Windows XP SP1 system for simplified Chinese is 5.1.2600.0.. We
+delete all non- transitions of the FSA (Fig.2), which corresponds to sub-function “sub_1005303” in this
+notepad.exe, and carry out a topological sorting on it, the directed graph simplified is denoted as .
+
+
+
+
+                           Fig.2 The FSA of One Sub-function “Sub_1005303” in Notepad.exe
+
+  We use the algorithm of generating elementary circuits to search run circuits in the FSA of
+sub_1005303. we find out two      run circuits in sub_1005303 FSA:                        and
+                        .
+
+3.3. Searching ε Run Circuits Based on the Improved Floyd Algorithm
+The searching method based on the algorithm of generating elementary circuits will find out all circuits one
+time. The multiple run circuits in FSA may be connected with each other. It is impossible to delete all
+run circuits one time, because after one run circuit has been deleted, other circuits may haven been
+broken and new circuits also may be formed.
+   In order to increase the time and space efficiency of trusted behavior model optimization, we make some
+improvement on the Floyd algorithm. We use the improved Floyd algorithm to get the shortest distance
+between any two state nodes in the transition FSA directed graph ( ) which has been carried out a
+topological sorting, it means we get the shortest distance matrix of         ,       . If         , for every,
+                      this FSA does not have any run circuit which start and end with , otherwise it has
+the circuit. In order to further increase the efficiency of trusted behavior model optimization, we only find
+out one shortest run circuit firstly and delete it, then repeat this procedure until there is no run circuit
+in the FSA. The length of the shortest run circuit is                                  .
+   The algorithm of searching the start state node (which also is the end state node) in the shortest run
+circuit of FSA based on the improved Floyd algorithm is described as Algorithm 2.
+   Algorithm 2: Searching the start state node (which also is the end state node) in one shortest run
+circuit of FSA
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                    1440
+
+Require: One transition FSA directed graph that has been carried out a topological sorting and is
+denoted as                 , where          and there are  state nodes in
+Ensure: The starting state node of the shortest transition circuit in FSA, which is denoted as ; the
+shortest matrix path
+
+1: for           to         do                  17:           for          to           do
+2:        for          to         do            18:                if                     then
+3:             if                               19:                                        ;
+4:                           ;                  20:                             ;
+5:             else                             21:                end if
+6:                             ;                22:           end for
+7:             end if                           23:      end for
+8:        end for                               24: end for
+9: end for                                      25:             ;
+10: for         to         do                   26:         ;
+11:       for          to         do            27: for        to        do
+12:                       ;                     28:      if           then
+13:       end for                               29:                      ;
+14: end for                                     30:                   ;
+     15: for        to           do             31:      end if
+16:       for         to         do             32: end for
+  After we ascertain the start state node     on the shortest run circuit, and the shortest path matrix
+         of FSA, we could find out all nodes on the circuit by using Algorithm 3.
+  Algorithm 3:
+Require: start state ; final state node ; matrix with the shortest distance
+Ensure: a sequence of state nodes on the shortest path, denoted as
+1:
+2: if              then
+3:                  ;
+4: return
+5: else
+6:                                                  ;
+7:                                                  ;
+8:                              ;
+9:        return
+10: end if
+  We use the improved Floyd algorithm to search the shortest        run circuit in sub_1005303 FSA. The
+corresponding shortest run circuit is                     .
+
+3.4. Deleting the ε Run Circuit in FSA
+After finding out one      run circuit                              in FSA                       , we can
+delete the run circuit with the following steps:
+  1) Merging all state nodes on run circuit into one node,                                       ;
+  2) Deleting the run between state nodes on run circuit,
+                                                                                    ;
+  3) Changing all non- runs between state nodes on      run circuit, all                                    in
+  should be replaced by                  ;
+ 1441                     F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+  4) Changing non- run from state node on            run circuit to other state nodes, all                ,
+                                                       in should be replaced by                      ;
+  5) Changing non-          run from other state nodes to nodes on      run circuit, it means replacing all
+                                                                        ;
+  6) If                           , then                       ;
+  7) If                            , then                        .
+
+4. Performance Analysis
+
+4.1. Time Complexity Analysis
+There are mostly two methods to optimize the programs’ trusted behavior model. Method 1 is following
+steps 3.1, 3.2 and 3.4, which is based on traditional algorithm of generating all elementary circuits in
+directed graph Method 2 is following steps 3.1, 3.3 and 3.4, which is based on the improved Floyd
+algorithm. (In the rest paper, Method 1 and Method 2 are used to represent the two model optimization
+methods).
+   Method 1 has the same first and third steps as Method 2, so the time difference spent is mainly between
+the algorithm described in 3.2 and 3.3.
+   According to the document [21], the time that algorithm in 3.2 takes is:
+
+     is a constant,         is the number of nodes in the directed graph after topological sorting,
+                          is the number of the circuits whose smallest vertex is ,           is the number of
+circuits in the graph, expression          is the adjacency list of    ( is the number of edges).
+   The time that algorithm in 3.2 takes can be simplified as:                       .
+   For Method 2, first we use Algorithm 2 in 3.3 to find out the start node of the shortest run circuit in
+the directed graph, the time it takes is:                             ;
+   Then we recursively find out all nodes in the circuit by using the algorithm, the taken time is:
+
+
+  The calculation result of       is:
+  The total time that the algorithm in 3.3 takes is:
+
+
+
+  It is obvious that Method 2 takes less time than Method 1 by comparing               and   .
+
+4.2. Space Complexity Analysis
+Method 1 has the same first and third steps as Method 2, so the space difference the two methods need is
+mainly between the algorithm described in 3.2 and 3.3.
+  Algorithm 1 in 3.2 requires many rounds iterative calculations. And in every round it uses two matrixes,.
+The two matrixes’ elements are some path information. There are two data structures that are used in
+programs to record the path information of matrix element:
+     typedef struct {                                           typedef struct {
+          char IndexPath[STATE_MAX][INDEX_MAX];                    stuStateIndexPath * ssipaIns[PATH_MAX];
+          int iPathLen;                                            int iPathNum;
+     } stuStateIndexPath;                                       } stuFLPEiWiElement;
+
+   STATE_MAX, INDEX_MAX, PATH_MAX are constants, which can be different value in different
+situation. We suppose that the storage space taken by one structure variation of stuStateIndexPath is B,
+and the storage space of stuFLPEiWiElement is       B.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                        1442
+
+   In every round iterative calculation of the algorithm in 3.2, the path information of all elements in edge
+matrix and path matrix should be saved. In the first round calculation, edge matrix and path matrix can both
+have           elements,     is the number of nodes in the directed graph that after topological sorting. The
+biggest number of path is        among all path information. The worst situation is that all elements have
+paths in the first round calculation, and the space it takes is:                                    (B). , the
+biggest number of element path, is related to the number of run circuit.
+   There are also two matrixes used in the algorithm of 3.3: the shortest distance matrix and the shortest
+path matrix,      is the number of nodes in the directed graph after topological sorting. The element of
+distance matrix is the information of distance length, the space one element takes is         B. The element of
+path matrix is the information of nodes, the space one element takes is         B。The main space taken by the
+algorithm in 3.3 is:                               (B).
+   Comparing         and      , the space taken by structure variation of stuStateIndexPath (          B) is far
+greater than the space used to save distance length (       B), the space of stuFLPEiWiElement (       B) also is
+bigger than the space used to save the node information (         B). Besides,     has relation with the number
+of     run circuit ( ). Considering that               is far greater than       ,     can be represented as:
+                          (B).
+   We can see that, with the increasing of run circuit number, the space taken by the algorithm of 3.2
+also is increased in multiples, so it is likely that space overflow would happen. But for the algorithm of 3.3,
+the space it takes has no relation with run circuit number.
+   From the above analysis we can see that the space taken by Method 2 is far smaller than the space of
+Method 1.
+
+5. Experiment and Analysis
+We do our experiment of building the trusted behavior model of program notepad.exe in Windows XP SP2.
+On our computer for experiment, the CPU is Intel(R) Core(TM)2 Duo CPU T8100 @ 2.10GHz, and the
+RAM is DDR2 1024MB. At present, behavior model pays most attention to the behavioral feature of API
+in kernel32.dll. notepad.exe not only directly call the API of kernel32.dll, but call some other dynamic link
+libraries (DLLs). These DLLs also may call the API of kernel32.dll, and these APIs also are the behavioral
+feature of notepad.exe.
+   Building behavior model for notepad.exe also needs building the behavior models of the related DLLs.
+There are many sub functions in notepad.exe and related DLLs. We choose 8 sub functions from 3 DLLs
+for building model and optimizing. From the table we can see that after the optimization, all run circuits
+have been deleted, and the number of nodes and edges in function directed graph is greatly reduced.
+
+5.1. Time Efficiency Tests
+In order to compare the model optimization time efficiency of traditional algorithm of generating all
+elementary circuits in directed graph and the improved Floyd algorithm, we optimize the behavior model of
+every sub function in Table 1 by following the steps 3.1, 3.2(or 3.3) and 3.4, the time they take are seen in
+Table 1.
+   The number of directed graph nodes after topological sorting is the result of the first time of doing
+topological sorting. The number of deleted run circuits is equal to the times
+   From Table 1 we can see when there are only a few run circuits, the time taken by Method 1 and
+Method 2 have little difference; when there are more run circuits, the time taken by Method 2 is less
+than Method 1. Because Method 1 is based on the algorithm of generating elementary circuits in directed
+graph, every time of following step 3.2, all run circuits could be found out, it would take more time if
+there are more circuits. The experiment result is consistent with our analysis in 4.2. In Table 2 he space
+overflows when sub function sub_77D3B1DA is being optimized by using Method 1.
+ 1443                 F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+                           Table 1 The Time Taken by Model Optimization of Every Sub-function
+                                     Number of Nodes       Number of                 Time (s)
+                     Name of
+                                     after Topological    Deleted ε Run
+                   Sub-function                                             Method 1        Method 2
+                                          Sorting            Circuit
+                    tree_size_ndr            45                20           7.076274         6.733020
+                    tree_into_ndr            48                22           8.502247         9.021329
+                    data_into_ndr            51                24           10.337455       10.370068
+                  sub_77D5FAD4               81                31          32.868784        33.119412
+                   data_from_ndr             85                33          36.543700       36.862505
+                  sub_77D3B1DA              105                 4            overflow      17.867722
+                   sub_77C481F5             101                41           64.731101       61.411450
+                  sub_77D3B6AF              153                60          221.496020      221.496020
+
+
+5.2. Space Consumption Test
+In order to compare the amount of space consumed by Method 1 and Method 2, we optimize the behavior
+model of every sub function in Table 1 by following the steps 3.1, 3.2 (or 3.3) and 3.4. The peak amount of
+the space consumed during the behavior model optimization of every sub function is as Table 2 shown.
+
+         Table 2 The Peak Amount of Space Consumed during the Behavior Model Optimization of Every Sub-function
+
+                                                     the Peak Amount of Space Consumed (KB)
+                          Name of Sub-function
+                                                     Method 1               Method 2
+                               tree_size_ndr            444                    4.05
+                               tree_into_ndr            503                   4.609
+                               data_into_ndr            601                   5.202
+                             sub_77D5FAD4              1577                  13.122
+                              data_from_ndr            1751                   14.450
+                             sub_77D3B1DA            overflow                22.050
+                              sub_77C481F5             1688                  20.402
+                             sub_77D3B6AF              10141                 46.818
+
+   From Table 2 we can see the more nodes of the directed graph after topological sorting and run
+circuits in the graph is, generally the bigger peak amount of space consumed by Method 1 is. Sub-function
+“data_from_ndr” has less nodes and run circuits than “sub_77C481F5”, but the space it takes up is more
+than “sub_77C481F5”. The reason is that the amount of space consumed also has relation with the length
+of run circuits. The longer the length is, the more information need be saved, so the more space it takes
+up. During the optimization of the behavior model for sub function “sub_77D3B1DA”, the temporary paths
+are so complex that they need occupy large storage and overflow the space when the second run circuit
+is in processing. The amount of space taken up by Method 2 only is related with the node number in the
+directed graph. And Method 1 takes up great less space than Method 1. The experiment result is consistent
+with our analysis in 4.3. In order to know more about the relationship between the amount of space
+consumed and the length of run circuit, we record the amount of space consumed by Method 1 and
+Method 2 when we deal with several run circuits of some sub functions, which is shown in Figure 3.
+Figure 3 (a) is the statistics of some sub functions in gdi32.dll when doing modeling optimization, (b) is the
+statistics of some sub functions in shlwapi.dll.
+   From Figure 3 we can see the longer the length of run circuit is, the more space Method 1 will take up.
+But the space consumed by Method 1 is no relation with the length of run circuit, only is related to the
+number of nodes in directed graph. From the experiment we know the amount of space consumed by
+Method 2 is much less than Method 1.
+  F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445                   1444
+
+
+
+
+                                       (a) Gdi32.dll                  (b) Shlwapi.dll
+
+                              Fig. 3 Statistics of Space Taken and Length of ε Run Circuit
+
+6. Conclusion and Future Work
+Program’s behavior verification is the core of trusted computing dynamic attestation. The first step of
+program’s behavior verification is building program’s trusted behavior model. Static analysis based
+behavior model building can cover all running paths, but there may be many run circuits, which can lead
+to the failure of trust attestation. This paper gives out an improved Floyd algorithm to find out and delete
+one shortest run circuit. The action is repeated until there is no run circuit, which can optimize the
+trusted behavior model. This is a new application and improvement of Floyd algorithm.
+   Compared with the model optimization method based on the traditional algorithm of generating the
+elementary circuit in directed graph, the optimization method proposed in this paper only need to find out
+one shortest run circuit every time, but the method based on traditional algorithm has to find out all
+circuits, which must waste more time and space. The optimization method proposed in this paper would
+need less time and space if there are more nodes and longer run circuits in the directed graph of behavior
+model, which is confirmed by our experiment.
+   In the future, we still have much work to do. 1) We will use the trusted behavior model to dynamically
+monitor the programs’ real running behavior; 2) We will integrate static analysis and dynamic training to
+improve the efficiency and accuracy of trusted behavior model building, and consider how to add API
+arguments into the behavior model; 3) We will apply the method of program slicing, Fuzzing test, symbolic
+execution, and taint analysis into trusted computing dynamic attestation.
+
+Acknowledgement
+This work is supported by the National Natural Science Foundation of China (No. 60970115, 91018008),
+the Fundamental Research Funds for the Central Universities in China (No. 3101044), and open foundation
+of Zhejiang Key Laboratory of Information Security in China.
+
+References
+[1]   Sheng Changxiang, Zhang Huanguo, Wang Huaimin, et al. Research and development of trusted computing.
+      Science China: Information Science, 2010, 40(2): 139-166. (in Chinese)
+[2]   Sheng Changxiang, Zhang Huanguo, Feng Dengguo, et al. Survey of information security. Science China:
+      Information Science, 2007, 37(2): 1-22. (in Chinese)
+ 1445                   F. Yu et al. /Journal of Computational Information Systems 7:5 (2011) 1436-1445
+
+[3]    Trusted Computing Group. TCG specification architecture overview, specification revision 1.4.
+       http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-1D09-3519-ADA026A0C05CFAC2/TC
+       G_1_4_Architecture_Overview.pdf, 2010-06-12.
+[4]    Vivek Haldar, Deepak Chandra, Michael Franz. Semantic remote attestation — a virtual machine directed
+       approach to trusted computing. Proceedings of the 3rd conference on virtual machine research and technology
+       symposium, California, USA, USENIX, San Jose, 2004: 29-41.
+[5]    Li Xiaoyong, Zuo Xiaodong, Shen Changxiang. System behavior based trustworthiness attestation for computing
+       platform. Acta Electronica Sinica, 2007, 35(7): 1234-1239. (in Chinese)
+[6]    Ahmad-Reza Sadeghi, Christian Stüble. Property-based attestation for computing platforms: Caring about
+       properties, not mechanisms. Proceedings of the 2004 workshop on new security paradigms, Nova Scotia, Canada,
+       ACM Press, 2004: 66-77.
+[7]    Feng Dengguo, Qin Yu. Research on attestation method for trusted computing environment. Chinese Journal of
+       Computers, 2008, 31(9): 1640-1652. (in Chinese)
+[8]    Wang Huaimin. Building Integration environment of trustworthy software. Communications of China Computer
+       Federation, 2009, 5(2): 56-61. (in Chinese)
+[9]    Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, et al. A sense of self for unix processes. Proceedings of
+       the 1996 IEEE Symposium on Security and Privacy, Los Alamitos, California, USA, IEEE Computer Society,
+       1996: 120-128.
+[10]   Steven A. Hofmeyr, Stephanie Forrest, Anil Somayaji. Intrusion detection using sequences of system calls.
+       Journal of Computer Security, 1998, 6(3):151-180.
+[11]   Chen Jianmin, Shu Hui, Xiong Xiaobing. Fuzzing test approach based on symbolic execution. Computer
+       Engineering, 2009, 35(21): 33-35. (in Chinese)
+[12]   Chen Kai, Feng Dengguo, Su Purui. Exploring multiple execution paths based on dynamic lazy analysis. Chinese
+       Journal of Computers, 2010, 33(3): 493-503. (in Chinese)
+[13]   Li Jiajing, Wang Tielei, Wei Tao, et al. A polynomial time path-sensitive taint analysis method. Chinese Journal
+       of Computers, 2009, 32(9): 1845-1855. (in Chinese)
+[14]   David Wagner, Drew Dean. Intrusion detection via static analysis. Proceedings of 2001 IEEE Symposium on
+       Security and Privacy, Oakland, California, USA, IEEE Computer Society Press, 2001: 156-168.
+[15]   Jonathon T. Giffin, Somesh Jha, Barton P. Miller. Detecting manipulated remote call streams. Proceedings of the
+       11th USENIX Security Symposium, Berkeley, California, USA, USENIX Association, 2002: 61-79.
+[16]   Jonathon T. Giffin, David Dagon, Somesh Jha, et al. Environment-sensitive intrusion detection. Proceedings of
+       8th International Symposium on Recent Advances in Intrusion Detection (RAID 2005), Seattle, Washington, USA,
+       LNCS3858, Springer-Verlag, 2005: 185-206.
+[17]   Henry Hanping Feng, Jonathon T. Giffin, Yong Huang, et al. Formalizing sensitivity in static analysis for
+       intrusion detection. Proceedings of 2004 IEEE Symposium on Security and Privacy. Oakland, California, USA,
+       IEEE Computer Society Press, 2004: 194-208.
+[18]   Rajeev Gopalakrishna, Eugene H. Spafford, Jan Vitek. Efficient intrusion detection using automaton inlining.
+       Proceedings of 2005 IEEE Symposium on Security and Privacy, Oakland, California, USA, IEEE Computer
+       Society Press, 2005: 18-31.
+[19]   Li Wen, Dai Yingxia, Lian Yifeng, et al. Context sensitive host-based IDS using hybrid automaton. Journal of
+       Software, 2009, 20(1): 138-151. (in Chinese)
+[20]   Yu Fajiang, Yu Yue. Static analysis-based behavior model building for trusted computing dynamic verification.
+       Wuhan University Journal of Natural Sciences, 2010, 15(3): 195-200.
+[21]   Wang Yuying, Chen Ping, Su Yang. An efficient algorithm of generating all elementary circuits in directed graph.
+       Computer Application and Software, 2009, 26(12): 27-29. (in Chinese)
+
\ No newline at end of file
diff --git a/res/paper/PaperID325-HESA.pdf b/res/paper/PaperID325-HESA.pdf
new file mode 100644
index 0000000..ba3977b
--- /dev/null
+++ b/res/paper/PaperID325-HESA.pdf
@@ -0,0 +1,493 @@
+           HESA: The Construction and Evaluation of
+            Hierarchical Software Feature Repository
+                                Yue Yu, Huaimin Wang, Gang Yin, Xiang Li, Cheng Yang
+                             National Key Laboratory for Parallel and Distributed Processing
+                         School of Computer Science, National University of Defense Technology
+                                                   Changsha, China
+                     yuyue whu@foxmail.com, whm w@163.com, {jack.nudt, shockleylee}@gmail.com
+
+
+   Abstract—Nowadays, the demand for software resources on          the activities of software development.
+different granularity is becoming prominent in software en-            As a kind of attributes which capture and identify com-
+gineering ﬁeld. However, a large quantity of heterogeneous          monalities and differences in a software domain, software
+software resources have not been organized in a reasonable and
+efﬁcient way. Software features, a kind of important knowledge      feature [4] [5] is an ideal material to characterize the software
+for software reuse, are ideal materials to characterize software    resources. Constructing a feature repository of a ﬂexible
+resources. Our preliminary study shows that the effectiveness       structure can make a great contribution to multi-grained reuse.
+of feature-related tasks, such as software resource retrieval and      However, classic feature analysis techniques, such as Fea-
+feature location, will be greatly improved, if a multi-grained
+                                                                    ture Oriented Domain Analysis (FODA) [6] and Domain
+feature repository is available. In this paper, we construct a
+Hierarchical rEpository of Software feAture (HESA), in which        Analysis and Reuse Environment (DARE) [7], are heavily
+a novel hierarchical clustering approach is proposed. For a         relied on the experience of domain experts and plenty of
+given domain, we ﬁrst aggregate a large number of feature           market survey data. Hence, the feature analysis is a labor-
+descriptions from multiple online software repositories. Then we    intensive and error-prone process.
+cluster these descriptions into a ﬂexible hierarchy by mining
+their hidden semantic structures. Finally, we implement an online
+                                                                       In recent years, more and more stakeholders develop, main-
+search engine on HESA and conduct a user study to evaluate          tain and share their software products on the Internet. In order
+our approach quantitatively. The results show that HESA can         to promote their products to users, project managers write
+organize software features in a more reasonable way compared        some market-oriented summaries, release notes and feature
+to the classic and the state-of-the-art approaches.                 descriptions on the proﬁle pages via natural language. The
+   Keywords—Software reuse; Mining Software repository;
+                                                                    large number of online software proﬁles can be treated as a
+Feature-ontology; Clustering;
+                                                                    kind of repository containing a wealth of information about
+                                                                    domain-speciﬁc features. Although researchers propose several
+                      I. I NTRODUCTION
+                                                                    automatic methods to mine features from the web repository
+   Software reuse is widely recognized as an effective way to       [8] [9] [10], the problems have not completely be solved,
+increase the quality and productivity of software [1]. With the     speciﬁcally in organizing features as ﬂexible granularity.
+development of software industry, the degree of software reuse         In this paper, we are trying to address the above problems
+is deeper than previous years and the demand for resources on       by proposing a novel approach to construct a Hierarchical
+different granularity becomes more prominent. For example,          rEpository of Software feAture (HESA). First of all, we extract
+when developing a new large software system, we may reuse           a massive number of feature descriptions from online software
+some API calls from the third party to accomplish the core          proﬁles and mine their hidden semantic structure by proba-
+functions and the mature open source software as the basic          bilistic topic model. Then, we present an improved Agglom-
+framework. Additionally, some code fragments or components          erative Hierarchical Clustering (iAHC) algorithm, seamlessly
+can be reused to meet other additional demands. The reusable        integrated with the topic model, to build the feature-ontology
+resources are multi-grained, consisting of API calls (the ﬁnest     of HESA. Finally, we implement an online search engine1
+level of granularity), code fragments, components (higher than      for HESA to help retrieve features in a multi-grained manner,
+API calls) and software systems (much higher than others).          which can support multiple reuse requirements. By conducting
+   However, considering the large-scale, heterogeneous and          a user study, we demonstrate the effectiveness of our system
+multi-grained software resources, it is a great challenge for       with quantitative evaluations comparing to the classic and the
+stakeholders to retrieve the suitable one. With the evolution of    state-of-the-art approaches.
+open source ecosystems, more than 1.5 million open source              The rest of this paper is or organized as follows. Section
+software projects are now hosted in open source communities         II introduces the overview of our work. Section III describes
+[2]. Reusable resources [3] are manifold, including code bases,     how to construct HESA in detail. Experiments and analysis
+execution traces, historical code changes, mailing lists, bug       can be found in Section IV. Finally, we present some related
+databases and so on. All of these valuable resources have not
+been reorganized in a reasonable and efﬁcient way to assist in        1 http://inﬂux.trustie.net
+                                           Figure 1. Overview of the construction and use of HESA
+
+
+
+work in Section V and draw our conclusions in Section VI.              use the Extractor component to extract feature elements. Then,
+                                                                       after running preprocessing tasks, the Synthesizer component
+                  II. A PPROACH OVERVIEW
+                                                                       will automatically located these feature elements, into a uniﬁed
+   First of all, we give the deﬁnitions of some concepts used          category. Especially, the word “domain” will be replaced by
+in this paper.                                                         “category” for they are sharing the same meaning in the rest
+   Feature element: Feature element is a kind of raw descrip-          of this paper.
+tions which can indicate a functional characteristic or concept           The second module, the Feature-Topic Modeler, is respon-
+of the software product.                                               sible for mining the semantic structure hidden in feature
+   Feature: Feature is an identiﬁer of the cluster about feature       elements. We will merge the synonymic feature elements in
+elements, where the cluster is an intermediate output of               terms of their semantic structure in the next step.
+improved Agglomerative Hierarchical Clustering (iAHC).                    The last module, the FAFO (Flexible grAnularity Feature-
+   Feature-ontology: Feature-ontology is a kind of hierarchical        Ontology) Constructor, is a critical part of the construction
+structure induced from feature elements by iAHC.                       process. In this module, we present a novel algorithm iAHC to
+   HESA: The assembly of all feature-ontologies of the dif-            construct the feature-ontology and more details can be found
+ferent categories is the Hierarchical rEpository of Software           in Section III. The major functionalities of this module are
+feAture.                                                               listed as below:
+   The objective of this paper is to build a hierarchical structure       (1) The synonymic feature elements are merged based on
+of feature as a ﬂexible granularity. In the top layers, the            the semantic structure outputted by the Feature-Topic Modeler;
+features in coarse granularity may be mapped to the cor-                  (2) For each cluster, a signiﬁcant group of feature elements
+responding software resources such as mature applications,             is selected as the medoid used to generate feature;
+design patterns, and superclasses. In the bottom layers, the              (3) A feature-ontology is learned and features can be
+features can be mapped to some related code fragments, API             retrieved in terms of ﬂexible granularity.
+calls and subclasses.                                                     After all the raw data under our category are disposed, the
+   Before describing the speciﬁc details of the underlying             construction process of HESA is ﬁnished.
+algorithms, an architectural overview of approach will be pro-            The HESA can perfectly support the multi-grained resource
+vided as below. There are actually two processes concerning            reuse. For example, when a company plans to enter a new
+the application of our method, i.e., the construction process          domain such as Antivirus, the stakeholders want to know a
+and the use process of HESA by stakeholders. In this paper,            few general features about this domain, e.g. “Anti-rootkit”,
+we only focus on the construction process owing to space               “Heuristic scanning”, and “File backup”. Inputting require-
+limitations.                                                           ments and use the search engine of HESA, the matched
+   As depicted in Figure 1, the construction process consists          features will be returned. Based on the feature in coarse
+of three primary modules and the input is software proﬁles             granularity, they can ﬁnd some mutual software systems.
+data collected and updated continuously by a web crawler.              Furthermore, to know this ﬁeld more clearly and locate some
+The ﬁrst module is called the Extractor and Synthesizer. We            reusable code fragments or packages, some ﬁne granularity
+                (a) Bullet-point lists of features in Softpedia.com             (b) Bullet-point lists of features in Sourceforge.com
+
+
+
+
+                                                             (c) Release notes in Freecode.com
+
+                                               Figure 2. Examples of feature elements in the software pages
+
+
+
+features can be retrieved from HESA, e.g., “Automatic detec-                         Hybrid Semantic-level: The problem of hybrid semantic-
+tion of downloaded ﬁles and Lock Autorun.inf, virus cannot                     level is that different feature elements describe a common
+execute.”                                                                      theme in different semantic level, such as the following
+                                                                               descriptions:
+                  III. C ONSTRUCTION OF HESA                                      (1) “Email Scanner enhanced email protection”;
+                                                                                  (2) “Email scanning for Microsoft Outlook, Outlook Ex-
+A. Feature Elements in Software proﬁles                                        press, Mozilla Thunderbird, Windows Live Mail, Windows
+                                                                               Mail, and other POP3/IMAP mail clients, ensuring your email
+   The online software proﬁles contains a wealth of in-
+                                                                               is free of viruses and other threats”;
+formation about domain-speciﬁc features. In this paper, all
+                                                                                  (3) “Blocks spam mails, phishing attack mails, junk mails
+the feature elements are extracted from software proﬁles
+                                                                               and porn mails before they reach your inbox”;
+in Softpedia.com2 , Freecode.com3 and Sourceforge.com4 . As
+                                                                                  The ﬁrst sentence describes the theme of email protection in
+depicted in Figure 2(a), there is a bullet-point list of some
+                                                                               a general level. However, the last two sentences present more
+key features about the software resource in Softpedia.com and
+                                                                               details including what type of mail clients would be supported
+Sourceforge.com. Another type of raw descriptions being used
+                                                                               and what kind of message would be ﬁltered.
+is the Release Notes in Freecode.com. A product has many
+                                                                                  According to sampling statistics of our datasets, there are
+release versions about bug ﬁxes, performance optimizations
+                                                                               25.7% feature elements in a relative high semantic-level,
+and feature enhancements. As depicted in Figure 2(b), we
+                                                                               33.9% feature elements in a relative speciﬁc semantic-level,
+extracted feature elements from the release notes about feature
+                                                                               and 40.4% in the intermediate-level.
+enhancement, which contain some related tags or key words,
+                                                                                  On one hand, the massive number of feature elements in
+such as “add”, “support for” and “new feature”.
+                                                                               different semantic-level are good materials for the construction
+   To allocate different feature elements, which extracted from
+                                                                               of ﬂexible granularity ontology. On the other hand, it is a great
+three different websites, into a uniﬁed domain category, the
+                                                                               challenge for the traditional methods to cluster and reorganize
+two categories of Softpedia.com and Sourceforge.com was
+                                                                               feature elements.
+combined into a new one. Then, all software and their feature
+                                                                                     Synonymic Feature Element: The problem of synonymic
+elements are automatically classiﬁed into the uniﬁed category
+                                                                               feature element happens when two features are used to de-
+according to softwares tags or descriptions using the method
+                                                                               scribe some common or very similar functional attributes.
+of paper [2].
+                                                                               Some feature elements are almost the same with each other,
+                                                                               such as the four feature elements below:
+B. Feature Element Analysis                                                       (1) “Kills the core of AdPower and not only symptoms”;
+   Because different people describe the functions in terms of                    (2) “Kills the core of BANCOS.D and not only symptoms”;
+their personal understanding in an open environment, feature                      (3) “Kills the core of Dyfuca and not only symptoms”;
+elements are unstructured and disordered. To illustrate these                     (4) “Kills the core of eBot and not only symptoms”;
+problem clearly, the feature elements in Antivirus category are                   The difference between these feature elements is the name
+used as examples in this paper.                                                of the malicious code, such as “AdPower”, “BANCOS.D” and
+                                                                               “Dyfuca”. However, all of them present a common functional
+ 2 http://www.softpedia.com                                                    attribute about the ability of killing various popular viruses.
+ 3 http://freecode.com                                                            Another typical problem is that each pair only shares few
+ 4 http://sourceforge.net                                                      core words, such as the following:
+    (1) “Ability to update that does not require downloading
+full package”;
+    (2) “Incremental database updates and often to include
+information about latest threats”;
+    (3) “Incremental updating system minimizes the size of
+regular update ﬁles”;
+    These three feature elements present the common attribute
+about incremental updating, but only the word “update” is
+shared by the two sentences. According to the statistics,
+there are 33.7% of synonymic feature elements in Antivirus                                 Figure 3. Feature elements mapping to topics
+category, 28.9% in File-manger category, and 41.6% in Audio-
+Player category. Thus, feature elements should be merged
+together by an effective method.                                                    Topic Modeling Technique: A topic model provides
+                                                                              a means to automatically analysis the semantic structures
+       Latent Semantic Structures: According to our observa-
+                                                                              within unstructured and unlabeled documents. In this paper,
+tion, one feature element may relate to several speciﬁc topics.
+                                                                              we choose Latent Dirichlet Allocation (LDA) [11] because it
+Take ﬁve feature elements of Mozilla Firefox5 and three topics
+                                                                              has been shown to be more effective for a variety of software
+of “Browse with Security”, “Protect your Privacy” and “Easy
+                                                                              engineering purposes [12] [13] than other topic models like
+to Use” as an example. Figure 3 illustrates the relationship
+                                                                              LSI. In LDA, each word wi in a document d is generated
+among these feature elements and topics. Each feature element
+                                                                              by sampling a topic z from document-topic distribution, and
+connects with one or two topics and this connection can be
+                                                                              then sampling a word from topic-word distribution. More
+exposed by the key words or phrases. For example, the feature
+                                                                              formally, a latent topic z = j is modeled as an unlabeled
+element “Control the level of scrutiny you’d like Firefox to give
+                                                                              topic-word distribution φ(j) = P (w|z = j), which was drawn
+a site with a variety of customized settings” is related to the
+                                                                              from a dirichlet prior distribution Dirichlet(β). The number
+topics of “Browse with Security” and “Protect your Privacy”.
+                                                                              of topics K is speciﬁed beforehand to adjust the granularity.
+The phrases “Control the level of ” and “scrutiny” reﬂects that
+                                                                              Each document d is a mixture of topics θ(d) = P (z) with
+it is possible to associate with the topic of security, and “you’d
+                                                                              a dirichlet prior distribution Dirichlet(α). The generative
+like” and “customized settings” reﬂects the relevancy with the
+                                                                              process of each word in d is an essentially draw from the joint
+topic about user experience. The relationship between topic                                              K
+                                                                              distribution: P (wi ) = i=1 P (wi |zi = j)P (zi = j). Given
+and feature element is a kind of latent semantic structures
+                                                                              the observed documents, Gibbs Sampling algorithm [14] is
+which is useful for the clustering of feature element and the
+                                                                              widely used for posterior inference. Finally, the word-topic φ
+construction of feature-ontology.
+                                                                              and topic-document θ distribution can be approximated.
+                                                                                 However, document is a generalized concept which can
+C. Feature-Topic Model
+                                                                              be any textual resource. In this paper, a feature element
+      Problem Formalization: In a speciﬁc category, such as                   fi can be viewed as a document which is preprocessed by
+Antivirus, all the feature elements in the corpus can be repre-               removing commonly occurring words and then by stemming
+sented as Fm = {f1 , f2 , . . . , fi , . . . , fm }, where fi denotes         the remaining words to their root form. According to category,
+the ith feature elements in the corpus. Assuming that K                       we apply LDA to process the documents using the MALLET
+latent topics Tk = {t1 , t2 , . . . , tj , . . . , tk } are implicit in the   tool [15] which is an implementation of the Gibbs sampling
+feature elements, where tj denotes the jth topic. Although                    algorithm. Then, the topic-feature distribution Vm can be
+a feature element can be bound up with several topics, it                     trained, which is the same as θ.
+may put more emphasis on some topics than the others. The
+topic degree within feature element fi can be represented as                  D. iAHC : improved Agglomerative Hierarchical Clustering
+a K-dimensional vector υi = (pi,1 , pi,2 , . . . , pi,j , . . . , pi,k ),        To support multi-grained reuse environment, the semantic
+where pi,j is a topic weight describing the extent to which                   similar feature elements should be merged and reorganized
+the topic tj appears in feature element fi . When pi,j = 0,                   as a ﬂexible hierarchical structure deﬁned as feature-ontology.
+fi is irrelevant to tj . Thus, the υi , i ∈ [1, m], represented by            In this paper, we present an iAHC algorithm (Algorithm 1)
+Vm , can be used to indicate the semantic structure implied                   integrated with the LDA.
+in feature elements. If the Vm can be obtained, the thematic                     Initially, every feature elements is a distinct cluster. Line 4-
+similarity measure would be induced for each pair of feature                  7 ﬁnds the closest two clusters ci and cj in the current cluster
+elements and the synonymic feature elements would be merged                   set M , and merge them into a new cluster c and update M .
+together. Because topic models answer what themes or topics                   The proximity used to measure the distance between every
+a document relates to and quantify how strong such relations                  two clusters, deﬁned as below:
+are, it is a effective way to learn Vm .
+                                                                                                                f i∈ci   similarity(f i, f j)
+                                                                                                                f j∈cj
+  5 http://www.mozilla.org/en-US/ﬁrefox/security                                    proximity(ci , cj ) =                                       (1)
+                                                                                                                         |ci | × |cj |
+Algorithm 1 improved Agglomerative Hierarchical Clustering        Where xmax is the maximum value of υ i , and k is the  ˆ
+Require:                                                          frequency when υ i not equal to zero, and pir is any value
+    Fm = {f1 , f2 , . . . , fi , . . . , fm };                    that not equals to zero in υ i .
+    feature-topic distribution Vm ;                                  Observation 1 The most probable topic reﬂects the most
+Ensure:                                                           prominent theme that the document (feature element) is about.
+    The construction of feature-ongtology;                           Observation 2 The more widely and evenly distributed its
+ 1: M ← D                                                         topics are, the higher-level the document (feature element) is.
+ 2: f eatureSet ← ∅                                                  In brief, Equation 3 can ensure the feature element in the
+ 3: repeat                                                        coarsest granularity have the highest score degreet ∈ (0, 2],
+ 4:     ci , cj = ﬁndTwoClosestClusters(M )                       where xmax ∈ (0, 1] can reﬂect the emphasis topic and the
+ 5:    merge ci and cj as c                                       formula √ k 1                  ∈ (0, 1] can reﬂect the semantic
+                                                                                ˆ             2
+ 6:    delete ci and cj from M                                             e    r=1 (xmax −wir )
+                                                                  generality.
+ 7:    add c to M
+                                                                     The scorem is used to measure the medoid calculated as
+ 8:    centroid = calculateCentroid(c)
+                                                                  the Equation of line 12, where κ and λ is the empirical
+ 9:    for ci ∈ c do
+                                                                  coefﬁcients.
+10:       values = Similarity(ci , centroid)
+11:       degreet = calculateTopicDegree(ci )                        Finally, the medoid with the highest scorem would be
+12:       scorem = κ × values + λ × degreet                       selected. Measuring the similarity for the each pair of elements
+13:       add scorem to M edoidScore                              in medoidC (line 15), the f eatureC (line 17) can be formed
+14:    end for                                                    by merging distinguished feature elements whose similarity
+15:    medoidC = ﬁndMaximumScores(M edoidScore)                   score below a threshold (set to 0.38). Each iteration in the
+16:    scoreF = Similarity(medoidC )                              repeat clause saves the M and f eatureC to HESA. On the
+17:    f eatureC = mergeMedoid(medoidC , scoreF )                 termination of the algorithm, a feature-ontology (Figure 4) for
+18:    saveFeaturetoHESA(M, f eatureC )                           the category is constructed.
+19: until |M | = 1
+                                                                  E. The Retrieval Method of HESA
+                                                                     Figure 4 depicts an example of the construction process
+                                                                  and result with 6 data nodes using the iAHC algorithm. Each
+Where ci , cj ⊆ Fm , similarity(fi , fj ) used to calculate the
+                                                                  cluster consists of several nodes and the top node (the red color
+divergence between any two data point. Based on LDA, the
+                                                                  one in Figure 4) is the feature of the cluster. The concept layer
+divergence can be understood as the thematic space coordinate
+                                                                  is deﬁned as below:
+distance between the two feature elements. There are several
+ways to calculate the divergence between any two feature-            (1) The layer 0 consists of the bottom nodes which are the
+topic distributions, such as Jenson-Shannon divergence, cosine    original feature elements;
+similarity and KL divergence. Taking cosine similarity as an         (2) The layer i consists of the feature node of cluster i and
+example, the Equation is shown as below:                          all nodes in layer i − 1 except those being merged in cluster
+                                                                  i.
+                                          υi · υj                    For example, the layer 3 consists of the features of cluster
+              similarity(fi , fj ) =
+                                       ||υ i || ||υ j ||          3, cluster 2 and cluster 1, because all the nodes in different
+                             k                              (2)   clusters.
+                             r=1    pir × pjr
+                 =                                                   The most important advantage of the feature-ontology is
+                         k                   k
+                         r=1   p2 ×
+                                ir           r=1   p2
+                                                    jr            that the nodes in a layer are the most representative features
+                                                                  under a given similarity threshold. If the stakeholder needs a
+Where k is the topic number and p is the probability value of     generalized feature of the category, the feature in the top layer
+υ.                                                                can be selected. Assuming that the category of Figure 4 can be
+   Line 8-14 pick out a set of feature elements from the new      covered by three features, the feature nodes of cluster 3, cluster
+cluster, deﬁned as medoid, which can be used to represent the     2 and cluster 1 would be retrieved step by step. From top
+theme of c. Two metrics, similarity value and topic degree,       down, the semantic granularity is ﬁner and ﬁner accompanying
+are used to determine the medoid. Firstly, to get the values ,    with the increasing number of features, which can satisfy the
+we calculate the similarity between ci ∈ c and the centroid       requirements of multi-grained reuse environments.
+of c through Equation 2, where the vector υ c of centroid is
+                                               ¯                     Algorithm 2 is a ﬂexible method to retrieve features in
+                       |c|
+                            υ
+calculated by υ c = i=1 i . Then, the Equation 3 is used to
+                ¯       |c|                                       terms of quantity, which demonstrates the advantages of the
+calculate the degreet based on the following two important        feature-ontology. The input is the quantity of feature you need
+observations of feature-topic distribution Vm in our datasets.    for a speciﬁc domain. Line 1-6 show the process of ﬁnding
+                                                                  the suitable layer. Then, all the nodes in the same layer are
+                                            1
+           degreet = xmax +            ˆ
+                                                            (3)   selected out in the repeat clause (line 9-20). An online search
+                                       k               2
+                                       r=1 (xmax −pir )           engine has been implemented based on it in this paper.
+                                e             ˆ
+                                              k
+                                            Figure 4. An example of the feature-ontology
+
+
+
+               IV. E MPIRICAL E VALUATION                                                     Table I
+                                                                                PREPROCESSED EXPERIMENT DATASETS
+   In this section, we present our dataset and experiment
+setting, research questions and answers, and describe some                 Category        #Softpedia   #Sourceforge   #Total   #Topic
+threats to validity.                                                       Antivirus         2919          1105        4024      50
+                                                                         Audio-Player        3714          1283        4997      60
+A. Dataset and Experimental Setting                                      File-Manager        2270          970         3240      40
+   Dataset: We have collected 187,711, 432,004 and 45,021
+projects proﬁles from Softpedia.com, Sourceforge.com and
+Freecode.com respectively. Compared with that of the other            RQ1 How the resultant feature-ontology looks like?
+two communities, the quantity of projects from Freecode.com           RQ2 Does the iAHC algorithm achieve better clustering
+is relatively small. Thus, we just adopt projects in Softpe-       results than the simple but classical method and the state-of-
+dia.com and Sourceforge.com. The feature elements have been        the-art approach?
+classiﬁed into 385 categories and we randomly choose the              RQ3 How accurate is the feature-ontology? Is the structure
+data of 3 unique categories to evaluate our method including       reasonable?
+Antivirus, Audio-Player and File-manger. Furthermore, the
+                                                                   C. Cross-Validation Design of the User Study
+feature elements are preprocessed by removing commonly
+occurring words and then by stemming the remaining words              The cross-validation limits potential threats to validity such
+to their root form. To ensure the quality of data, we omit the     as fatigue, bias towards tasks, and bias due to unrelated factor.
+preprocessed feature elements with less than 6 words. Table 1      We randomly divided the 45 students from computer school
+presents the details about our dataset.                            of NUDT into three groups to evaluate RQ2 and RQ3. The 2
+   Parameter setting: As shown in Table 1, for LDA, the            questions and the 3 categories of dataset can be composed to
+number of topics K was empirically set as different value, and     6 tasks. Each group randomly picks up 2 of them and ﬁnishes
+the hyper-parameters α and β were set with α = 50/K and            in one day, and then we summarize the result.
+β = 0.01 respectively, and the iteration of Gibbs Sampling was           RQ1: Feature-ontology: Figure 4 shows an example
+set as 1000. In addition, the coefﬁcients κ and λ of Algorithm     feature-ontology of the Antivirus category which is a very
+1 were set with κ = 0.7 and λ = 0.3.                               reasonable structure. The features (red color) in different layer
+                                                                   can be mapped to resources on different granularities. In
+B. Research Questions                                              addition, the feature is relatively representative for each cluster.
+  To demonstrate the effectiveness of the approach in this               RQ2: Clustering Results: We choose the K-Medoids
+paper, we are interested in the following research questions:      (tf-idf), a classic and widely used clustering algorithm, and
+Algorithm 2 a ﬂexible granularity retrieval method
+Require:
+    kf the quantity of feature you need;
+    T a hierarchical structure consisting of n nodes;
+Ensure:
+    f eatureSet a set of features;
+ 1: layer ← n − k
+ 2: if layer = 0 then
+ 3:    return the nodes of T [0]
+ 4: end if                                                                                  (a) the average value
+ 5: i ← 0
+ 6: f eatureSet[i] ← the node of T [layer]
+ 7: layer ← layer − 1
+ 8: i ← i + 1
+ 9: repeat
+10:    if T [layer] is a subtype of f eatureSet[i] then
+11:       layer ← layer − 1
+12:    else
+13:       f eatureSet[i] ← the node of T [layer]
+14:       i←i+1
+15:       layer ← layer − 1
+16:       if layer = 0 then                                                               (b) the standard deviation
+17:          return the rest nodes of T
+                                                                             Figure 5. The clustering results for each category
+18:       end if
+19:    end if
+                                                                                          Table II
+20: until i = kf                                                         EVALUATION OF FEATURE-ONTOLOGY QUALITY
+21: return f eatureSet
+                                                                             Category      Score-3    Score-2       Score-1   Likert
+                                                                             Antivirus     33.3%      50.0%         16.7%     2.17
+the Incremental Diffusive Clustering (IDC), the state-of-the-art           Audio-Player    39.1%      46.3%         14.6%     2.25
+                                                                           File-Manager    32.7%      52.4%         14.9%     2.18
+technique proposed in paper [8], as the baseline. Especially,                 Average      35.03%     49.57%        15.4%     2.20
+the IDC use the feature descriptions from Softpedia.com which
+is the same as our dataset. We also use the modiﬁed version
+of Cans metric [8] to compute the ideal number of clusters.        out by our approach is reasonably meaningful.
+Then, we retrieve the corresponding number of clusters from
+HESA for comparison. Precision is a percent of the reasonable      D. Threats to validity
+feature elements in a cluster. Figure 5 shows the average value       First, the participants manually judge the clustering re-
+and standard deviation of the judgments given by different         sults and their ratings could be inﬂuenced by fatigue, prior
+groups. We can see that our approach achieves the highest          knowledge and the other external factors. These threats were
+precision in all three categories and relatively low deviations.   minimized by randomly distributing participants to the various
+The precisions and deviations are comparatively stable across      groups and dividing the tasks into multiple parts. Second, due
+different categories, which shows the probability that our         to our limited datasets, parameters used in our approach, the
+approach is more generalizable in different domains. We plan       evaluation is not comprehensive enough.
+to conduct more experiments to study this issue in the future.        In the feature, with the help of our online search engine,
+     RQ3: Accuracy of the feature-ontology: According to           we plan to adopt the idea of crowdsourcing and upload a lot
+the three categories, participants randomly choose 15 clusters     of tasks about use study on the Internet with a low price, such
+in different layers from HESA using the online search engine       as 5 cent. Therefore, a comprehensive and reliable evaluation
+respectively. Each participant is randomly assigned 3 layers       result can be obtained.
+and asked to provide a 3-point Likert score for each cluster
+to indicate whether they agree if the feature is the most                                 V. R ELATED W ORK
+representative of all terms. Score 3 means very reasonable,           Recently, mining software repository has been brought into
+Score 2 means reasonable but also have better one, Score 1         focus and many outstanding studies have emerged that use
+means unreasonable.                                                this data to support various aspects of software development
+   Table 2 shows that 35.03% features are reasonable, 49.57%       [16]. However, fewer previous works have been done for
+partially reasonable and only 15.40% unreasonable. The mean        mining software feature and especially construction of feature-
+of Likert score is 2.20, which means that the feature selected     ontology (deﬁned in this paper), to the best of our knowledge.
+In this section, we review some previous works about feature                           VII. ACKNOWLEDGEMENT
+analysis and ontology learning.                                      This research is supported by the National High Technology
+   In feature analysis area, most approaches involve either the    Research and Development Program of China (Grant No.
+manual or automated extraction of feature related descriptions     2012AA011201) and the Postgraduate Innovation Fund of
+from software engineering requirements and then use the            University of Defense Technology (Grant No.S120602).
+clustering algorithm to identify associations and common
+domain entities [7] [17] [18]. Niu et al. [19] propose an on-                                   R EFERENCES
+demand clustering frame-work that provided semi-automatic           [1] W. B. Frakes and K. Kang, “Software reuse research: Status and
+support for analyzing functional requirements in a product line.        future,” IEEE Trans. Softw. Eng., vol. 31, no. 7, pp. 529–536, Jul.
+                                                                        2005. [Online]. Available: http://dx.doi.org/10.1109/TSE.2005.85
+Mathieu Acher et al. [9] introduced a semi-automated method         [2] T. Wang, G. Yin, X. Li, and H. Wang, “Labeled topic detection of open
+for easing the transition from product descriptions expressed           source software from mining mass textual project proﬁles.” in Software
+in a tabular format to feature models. A decision support               Mining, 2012, pp. 17–24.
+                                                                    [3] A. E. Hassan and T. Xie, “Mining software engineering data.” in ICSE
+platform is proposed in paper [20] to build the feature model           (2), 2010, pp. 503–504.
+by employing natural language processing techniques, external       [4] S. Apel and C. Kastner, “An overview of feature-oriented software
+ontology (such as WordNet), and MediaWiki system. However,              development.” 2009, pp. 49–84.
+                                                                    [5] K. Lee, K. C. Kang, and J. Lee, “Concepts and guidelines of feature
+the quantity of the existing documents is so limited that the           modeling for product line software engineering.” in ICSR, 2002, pp.
+brilliance of data mining techniques cannot be fully exploited.         62–77.
+To address this limitation, paper [8] and [10] proposed the         [6] K.C.Kang, S.G.Cohen, J.A.Hess, W.E.Novak, and A.S.Peterson,
+                                                                        “Feature-oriented domain analysis (foda) feasibility study. technical
+Incremental Diffusive Clustering to discover features from a            report.” 1990.
+large number of software proﬁles in Softpedia.com. Based            [7] W. B. Frakes, R. P. Dłaz, and C. J. Fox, “Dare: Domain analysis and
+on the features, a recommendations system is build by using             reuse environment.” 1998, pp. 125–141.
+                                                                    [8] H. Dumitru, M. Gibiec, N. Hariri, J. Cleland-Huang, B. Mobasher,
+association rule mining and the k-Nearest-Neighbor machine              C. Castro-Herrera, and M. Mirakhorli, “On-demand feature recommen-
+learning strategy. Compared with these studies, the clustering          dations derived from mining public product descriptions.” in ICSE, 2011,
+algorithm presented in this paper is more effective by mining           pp. 181–190.
+                                                                    [9] M. Acher, A. Cleve, G. Perrouin, P. Heymans, C. Vanbeneden, P. Collet,
+the semantic structures from feature elements and especially            and P. Lahire, “On extracting feature models from product descriptions.”
+focus on the construction of feature-ontology.                          in VaMoS, 2012, pp. 45–54.
+   Ontology learning (also called ontology extraction) from        [10] C. McMillan, N. Hariri, D. Poshyvanyk, J. Cleland-Huang, and
+                                                                        B. Mobasher, “Recommending source code for use in rapid software
+text aims at extracting ontological concepts and relation from          prototypes.” in ICSE, 2012, pp. 848–858.
+plain text or Web pages. Paper [21] developed an ontology          [11] D. Blei, A. Ng, and M. Jordan, “Latent Dirichlet Allocation,” Journal
+learning framework using hierarchical cluster and associa-              of Machine Learning Research, vol. 3, pp. 993–1022, 2003. [Online].
+                                                                        Available: http://www.cs.princeton.edu/ blei/lda-c/
+tion rule for ontology extraction, merging, and management.        [12] K. Tian, M. Revelle, and D. Poshyvanyk, “Using latent dirichlet al-
+Several researches have attempted to induce an ontology-                location for automatic categorization of software.” in MSR, 2009, pp.
+like taxonomy from tags. Jie Tang et al. [22] proposed a                163–166.
+                                                                   [13] H. U. Asuncion, A. U. Asuncion, and R. N. Taylor, “Software traceabil-
+generative probabilistic model to mine the semantic structure           ity with topic modeling.” in ICSE (1), 2010, pp. 95–104.
+between tags and their annotated documents, and then create        [14] T. Grifﬁths, “Gibbs sampling in the generative model of Latent
+an ontology based on it. Xiang Li et al. [23] enhance an                Dirichlet Allocation,” Stanford University, Tech. Rep., 2002. [Online].
+                                                                        Available: www-psych.stanford.edu/ gruffydd/cogsci02/lda.ps
+agglomerative hierarchical clustering framework by integrating     [15] A. K. McCallum, “Mallet: A machine learning for language toolkit,”
+it with a topic model to capture thematic correlations among            2002, http://mallet.cs.umass.edu.
+tags. Based on tens of thousands of software projects and their    [16] A. E. Hassan, “The road ahead for mining software repositories.” 2008.
+                                                                   [17] S. Park, M. Kim, and V. Sugumaran, “A scenario, goal and feature-
+tags, Shaowei Wang et al. [24] propose a similarity metric to           oriented domain analysis approach for developing software product
+infer semantically related terms, and build a taxonomy that             lines.” 2004, pp. 296–308.
+could further describe the relationships among these terms. In     [18] V. Alves, C. Schwanninger, L. Barbosa, A. Rashid, P. Sawyer, P. Rayson,
+                                                                        C. Pohl, and A. Rummler, “An exploratory study of information retrieval
+this paper, to support multi-grained reuse, emphases of the             techniques in domain analysis.” in SPLC, 2008, pp. 67–76.
+feature-ontologys construction is on the measure of similarity     [19] N. Niu and S. M. Easterbrook, “On-demand cluster analysis for product
+and granularity instead of generality.                                  line functional requirements.” in SPLC, 2008, pp. 87–96.
+                                                                   [20] E. Bagheri, F. Ensan, and D. Gasevic, “Decision support for the software
+                                                                        product line domain engineering lifecycle.” 2012, pp. 335–377.
+          VI. C ONCLUSION AND F UTURE W ORK                        [21] A. Maedche and S. Staab, “Learning ontologies for the semantic web.”
+   The continuing growth of open source ecosystems creates              in SemWeb, 2001.
+                                                                   [22] J. Tang, H. fung Leung, Q. Luo, D. Chen, and J. Gong, “Towards
+ongoing opportunities for mining reusable knowledge. In this            ontology learning from folksonomies.” in IJCAI, 2009, pp. 2089–2094.
+paper, we have explored the idea of mining large scale reposi-     [23] X. Li, H. Wang, G. Yin, T. Wang, C. Yang, Y. Yu, and D. Tang,
+tories and constructed the HESA to support software reuse. In           “Inducing taxonomy from tags: An agglomerative hierarchical clustering
+                                                                        framework,” in Advanced Data Mining and Applications. Springer
+the future, we plan to improve the performance of our method            Berlin Heidelberg, 2012, vol. 7713, pp. 64–77.
+and aggregate richer features from software repositories. In       [24] S. Wang, D. Lo, and L. Jiang, “Inferring semantically related software
+addition, we will design several representative applications            terms and their taxonomy by leveraging collaborative tagging.” in ICSM,
+                                                                        2012, pp. 604–607.
+based on HESA, such as software resource recommendation
+system, to support the reuse of multi-grained resources.
+
\ No newline at end of file
diff --git a/res/paper/apsec2014.pdf b/res/paper/apsec2014.pdf
new file mode 100644
index 0000000..eb96bad
--- /dev/null
+++ b/res/paper/apsec2014.pdf
@@ -0,0 +1,571 @@
+ Who Should Review This Pull-Request: Reviewer
+ Recommendation to Expedite Crowd Collaboration
+                          Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Tao Wang∗ , Charles X. Ling‡
+                                   ∗ National
+                                         Laboratory for Parallel and Distributed Processing,
+                 College of Computer, National University of Defense Technology, Changsha, 410073, China
+         ‡ Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                          {yuyue,hmwang,yingang,taowang2005}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+   Abstract—Github facilitates the pull-request mechanism as an          As a mushrooming number of developers use the pull-
+outstanding social coding paradigm by integrating with social me-     request mechanism to contribute their ideas and suggestions in
+dia. The review process of pull-requests is a typical crowdsourcing   GitHub, the efﬁciency of software evolution and maintenance
+job which needs to solicit opinions of the community. Recom-
+mending appropriate reviewers can reduce the time between the         is highly related to the crowd-based review process. However,
+submission of a pull-request and the actual review of it. In this     the discussion among reviewers is time-consuming. Some
+paper, we ﬁrstly extend the traditional Machine Learning (ML)         relevant reviewers may not notice the new pull-request in
+based approach of bug triaging to reviewer recommendation.            time. Recommending reviewer will make the review process
+Furthermore, we analyze social relations between contributors         more effective, because it can reduce the time between the
+and reviewers, and propose a novel approach to recommend
+highly relevant reviewers by mining comment networks (CN) of          submission of a pull-request and the actual review of it.
+given projects. Finally, we demonstrate the effectiveness of these       A pull-request contains a title and description summarized
+two approaches with quantitative evaluations. The results show        its contributions of bug ﬁxes or feature enhancements, so it
+that CN-based approach achieves a signiﬁcant improvement over         is similar to a bug report in bug tracking systems. To the
+the ML-based approach, and on average it reaches a precision of       best of our knowledge, there is very few studies of reviewer
+78% and 67% for top-1 and top-2 recommendation respectively,
+and a recall of 77% for top-10 recommendation.                        recommendation for pull-requests. The most similar researches
+   Keywords—Pull-request, Reviewer Recommendation, Com-               [7]–[12] are the approaches for recommending developers with
+ment Network, Social Coding                                           the right implementation expertise to ﬁx incoming bugs. For
+                                                                      a newly received bug report, these approaches ﬁrstly ﬁnd
+                       I. I NTRODUCTION                               out some similar historical reports or source code ﬁles by
+   The pull-based software development model [1], compared            measuring text similarity. Then, the expertise of a developer
+to traditional methods such as email-based patching [2] [3],          can be learned based on the bug-ﬁxing history, source revision
+makes developers contribute to software projects more ﬂexibly         commits or code authorship. If we only focus on the text
+and efﬁciently. In GitHub, the pull-request mechanism is              of pull-requests, these approaches can be extended to assign
+upgraded to a unique social coding paradigm [4] by integrating        pull-requests to appropriate developers. However, the social
+multiple social media involving follow, watch, fork and issue         relations between pull-request contributors and reviewers are
+tracker. The socialized pull-request model is pushing software        neglected. Compared to bug ﬁxing, the review process of pull-
+evolution and maintenance into crowd-based development [5].           request is a social activity depending on the discussions among
+   A typical contribution process [6] in GitHub involves fol-         reviewers in GitHub. Thus, social relation is one of key factors
+lowing steps. First of all, a contributor could ﬁnd an attractive     of reviewer recommendation.
+project by following some well-known developers and watch-               In this paper, we ﬁrstly implement the Machine Learning
+ing their projects. Secondly, by forking an interesting one,          (ML) based approach of Anvik et al. [7], which is one of
+the contributor implements a new feature or ﬁxes some bugs            the most representative work of bug triaging. Furthermore,
+based on his cloned repository. When his work is ﬁnished,             we analyze social relations among reviewers and contributors,
+the contributor sends the patches from the forked repository          and propose a novel approach of reviewer recommendation.
+to its source by a pull-request. Then, all developers in the          Central to our approach is the use of a novel type of social
+community have the chance to review that pull-request in the          network called Comment Network (CN), which can directly
+issue tracker. They can freely discuss whether the project needs      reﬂect common interests among developers. Finally, we con-
+that feature, whether the code style meets the standard or            duct an empirical study on 10 projects which have received
+how to further improve the code quality. Next, in the light           over 1000 pull-requests in GitHub. As there is no previous
+of reviewers’ suggestions, the contributor would update his           work of reviewer recommendation for pull-requests, we design
+pull-request by attaching new commits, and then reviewers             a simple and effective method as a comparison baseline in
+discuss that pull-request again. Finally, a responsible manager       experiments. The quantitative evaluations show that our CN-
+of the core team takes all the opinions of reviewers into             based approach achieves signiﬁcant improvements over the
+consideration, and then merges or rejects that pull-request.          baseline and ML-based method.
+                                     Figure 1. An example of discussion among reviewers in a pull-request
+   The remainder of this paper is structured as follows. Section        can see that a growing number of developers contribute to
+II conducts an empirical study of pull-request and depicts a            open source using the pull-request mechanism.
+motivating example for recommending reviewers to incoming                                                80000
+pull-requests. Section III present how to assign a pull-request
+                                                                                                         70000
+to reviewers using ML technique, and Section IV propose
+our CN-based recommendation approach. Experiments and                                                    60000
+                                                                               number of pull-requests
+
+
+
+
+analysis can be found in Section V. Finally, we present related                                          50000
+work in Section VI and draw our conclusions in Section VII.
+                                                                                                         40000
+           II. E MPIRICAL S TUDY OF P ULL - REQUEST                                                      30000
+  In this section, we ﬁrstly investigate the popularity of pull-                                         20000
+request model in GitHub. Then, a typical process of discussion
+among reviewers is introduced with an example.                                                           10000
+
+                                                                                                             0
+                                                                                                                2             1   2              1  2             1    2
+A. Popularity of Pull-request                                                                                1-0 1-05 1-08 1-1 2-0 2-05 2-08 2-1 3-0 3-05 3-08 3-1 4-0
+                                                                                                          201 201 201 201 201 201 201 201 201 201 201 201 201
+   Gousios et al. [1] has illustrated the popularity of pull-                                                                         time (month)
+
+based development model based on the comparison of usage                                                         Figure 2. The growth of Pull-request quantity
+between pull-request and shared repository in GitHub. They              B. Discussion among Reviewers
+draw a conclusion that pull-request is a signiﬁcant mechanism
+for distribute software development, even though only 14% of               When a new pull-request arrives, the decision-making is
+repositories are using it in GitHub until February 2013.                a crowdsourcing process which depends on the discussion
+   In the current, many competitive projects are growing fast           among reviewers. Taking a real pull-request of Ruby on Rails
+supported by pull-request such as Ruby on Rails1 which has              as an example, as shown in Figure 1, a core developer called
+received more than 10000 pull-requests. Therefore, we further           rafaelfranca is the ﬁrst reviewer to discuss this pull-request.
+investigate the usage of pull-request model among projects              As he thought that javan’s work would be relevant to this pull-
+which receive at least 100 pull-requests. There are 3587                request, he mentioned (@) javan to join the discussion. At the
+projects (exclude forked repositories) are extracted from the           second post, we see that javan indeed presented his opinion.
+latest database of GHTorrent [13]. These projects cover 53              Meanwhile, other users participated in the discussion and
+different program languages, but the distribution of the number         made some important suggestions as well. Later, the author
+of projects is highly skewed. Top-5 program languages contain           updated the pull-request by appending a new commit taking
+67% of projects (JavaScript 678, Ruby 475, Python 460, Java             into account the above suggestions, and then he mentioned
+424 and PHP 362). From June 2011 to March 2014, the                     the two key reviewers for acknowledgement. Finally, the pull-
+absolute number of new pull-requests increased dramatically             request was merged into the Ruby on Rails’ master branch.
+reaching the peak of 76673 per month (Figure 2). Thus, we                  As the example depicted above, apart from javan who
+                                                                        is informed by rafaelfranca, other three reviewers join the
+  1 https://github.com/rails/rails                                      discussion spontaneously. Because all the comments affect
+the decision-making of that pull-request, if they do not catch       generated from top-1 to top-k according to the probability
+that pull-request timely, the time of review process would be        distribution that the ML classiﬁers predicted on the labels
+longer. Beside, except for @mentioning, project managers can         using the one-against-all strategy. When the probability values
+use a label to assign a pull-request to someone. However, only       are equal, we rank the developers in terms of the number
+0.89% of pull-requests have been set that label in our dataset.      of pull-requests’ comments that they had submitted to the
+   Thus, if appropriate reviewers are automatically recom-           given project. In this paper, we choose SVM as our basis
+mended when a new pull-request is submitted, its review              classiﬁer because it has been proved to be a superior classiﬁer
+process would be greatly accelerated. It is worth mentioning         in developers recommendation [7], [12].
+that this novel application can be seamlessly integrated with
+                                                                         IV. S OCIAL N ETWORK BASED R ECOMMENDATION
+the @mention tool to take its full advantage by @mentioning
+the potential reviewers automatically.                                  ML-based recommendation focuses on the text of pull-
+                                                                     requests. However, the preprocessed text of a pull-request
+   III. M ACHINE L EARNING BASED R ECOMMENDATION                     mainly consists of the names or identiﬁers of code ﬁles,
+   We aim to recommend highly relevant reviewers for pull-           functions and variables, so the corpus of a project is not very
+requests to improve the efﬁciency of social coding. The              large. When a reviewer has commented plenty of pull-requests,
+representative existing work of automated bug triaging are           his label covers most of terms in the corpus. The ML classiﬁers
+the approaches of mining bug repositories based on Machine           would biasedly assign almost all incoming pull-requests to
+Learning (ML) [7]–[9]. All these approaches start from the           him. Thus, the workload of this reviewer continues to increase.
+bug-text, such as title, description and source code. In the            By contrast, the basic intuition of social network based
+context of ML, the bug triaging problem can be represented as        recommendation is that the developers who share common
+text categorization (i.e., classiﬁcation of text documents into a    interests with a contributor are the appropriate reviewers of
+set of categories). The text documents are the bug-text and the      his incoming pull-requests. For reviewer recommendation, the
+categories into which bug reports are classiﬁed are the names        common interests among developers can be directly reﬂected
+of developers suitable to resolve the report. In this paper, we      by comment relations between contributors and reviewers
+treat pull-requests as text documents, and then utilize the ML-      in historical pull-requests. We propose a novel approach to
+based approach to predict top-k relevant reviewers.                  construct comment networks by mining historical comment
+                                                                     traces. Then, we predict highly relevant reviewers to incoming
+A. Vector Space Model of Pull-Request
+                                                                     pull-requests based on comment network analysis.
+   Each pull-request is characterized by its title and descrip-
+tion, and labeled with a set of names about developers who           A. Comment Network Construction
+had submitted at least one comment to it. Then, all stop words          For each project, the corresponding comment network is
+and non-alphabetic tokens are removed, and remaining words           constructed individually. In a given project, the structure of
+are stemmed. We use vector space model to represent each             comment relations between contributors and reviewers is a
+pull-request as a weighted vector. Each element in the vector        many-to-many model. As shown in Figure 3, there are many
+is a term, and the value stands for its importance for the           contributors have submitted pull-requests to Project P. A
+pull-request. For a given word, the more times it appear in          developer can be a contributor submitting several pull-requests,
+a pull-request, the more important it is for that pull-request.      and he could also be a reviewer in other contributors’ pull-
+On the contrary, the more pull-requests it appears in, the less      requests. A pull-request would be commented by several
+important it is for distinguishing these pull-requests. Term         reviewers more than once. For example, reviewer R1 had
+frequency-inverse document frequency (tf-idf) is utilized to         presented 5 comments in the pull-request P R2 . In addition,
+indicate the value of a term, which can be calculated as             a reviewer would inspect multiple pull-requests, such as re-
+Equation 1.                                                          viewer R1 has commented P R1 and P R2 .
+                              nt                 NPR                                     Contributor C1    Pull-request PR1     2
+                                                                                                                                          Reviewer R1
+  tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                              Np r         |pr ∈ PR : t ∈ pr |                                                                  5
+
+                                                                                                           Pull-request PR2         1
+                                                                                         Contributor C2                                   Reviewer R2
+where t is a term, pr is a pull-request, PR is the corpus
+                                                                                                                  …                 m        …
+of all pull-requests in a given project, nt is the count of             Project P
+                                                                                         Contributor C3    Pull-request PRk               Reviewer Rt
+appearance for term t in pull-request pr , and Npr and NPR
+are the total number of terms in pr and pull-requests in the                                  …                                     m+1
+                                                                                                           Pull-request PRk+1
+corpus respectively.                                                                     Contributor Cn
+
+
+B. Training ML Classiﬁers                                                 Figure 3. Comment relations between contributors & reviewers
+
+   In general, a pull-request would be reviewed by several             The comment network is deﬁned as a weighted directed
+developers, so ML classiﬁers should provide more than one            graph Gcn = V, E, W , where the set of developers is
+label for a pull-request testing instance. It means that they        indicated as vertices V and the set of relations between nodes
+should be able to deal with the multi-label classiﬁcation            as edges E. If node vj has reviewed at least one of vi ’s pull-
+problem [14]. A ranked list of recommended candidates is             requests, there is a edge eij from vi to vj . The set of weights
+W reﬂects the importance degree of edges, and the weight wij                     impact of one user in the same pull-request, so w(12,1) can
+of eij can be evaluated by Equation 2.                                           be calculated as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24.
+                k                              k   m                             Similarly, the weight w12 = w(12,1) + w(12,2) = 2.19, and
+       wij =         w(ij,r) = Pc ×                     λn−1 × t(ij,r,n)   (2)   w13 = 0.95. Thus, we can predict that reviewer v2 share more
+               r=1                          r=1 n=1                              common interests with contributor v1 compared to v3 , which
+where k is the total number of pull-request submitted by vi ,                    has been quantiﬁed by the corresponding weights of edges.
+and w(ij,r) is a component weight related to an individual pull-                   The comment network has several desirable qualities.
+request r. Pc is an empirical default value2 (set to 1.0), which                   •   Firstly, the global collaboration structure is revealed
+is reserved to estimate the inﬂuence of each comment on the                            between contributors and reviewers in a given project,
+pull-request, and m is the sum of comments submitted by vj in                          which can be used for mining reviewer candidates of
+the same pull-request r. When reviewer vj published multiple                           incoming pull-requests.
+comments (m = 1) in the same pull-request, his inﬂuence                            •   Secondly, the time-sensitive factor t is introduced to
+is controlled by a decay factor λ (set to 0.8). The element                            guarantee that the recent comments are more valuable
+t(ij,r,n) is a time-sensitive factor of corresponding comment                          for the weights of edges than the old comments.
+which can be calculated as below:                                                  •   Thirdly, the decay factor λ is introduced to guarantee
+                    timestamp(ij,r,n) − baseline                                       the difference values between the comments submitted to
+        t(ij,r,n) =                                 ∈ (0, 1] (3)                       multiple pull-requests or single pull-request. For example,
+                       deadline − baseline
+                                                                                       if reviewer vj commented 5 different pull-requests of vi
+where timestamp(ij,r,n) is the date that reviewer vj presented
+                                                                                       and meanwhile vq commented one of vi ’s pull-requests
+the comment n in pull-request r which is reported by contrib-
+                                                                                       5 times, the weight of wij is larger than wiq .
+utor vi . The baseline and deadline are highly related to the
+selection of training set. If we use the data of the last one and a
+                                                                                 B. Reviewers Recommendation
+half years from 2012-01-01 to 2013-05-31 to learn the weights
+of comment network, the parameters baseline and deadline                            Based on the comment networks, new pull-requests are
+are set to 2011-12-31 and 2013-05-31 respectively.                               divided into two parts according to their submitters. The ﬁrst
+                                          v3                   v4                part are the Pull-requests from Acquaintance Contributors
+                                                                                 denoted as PAC. For a PAC, starting from the node of its
+                                                                                 submitter, we can ﬁnd at least one neighbor in the directed
+                                                                                 graph. For example, in Figure 4, when v1 submits a new
+                                            =?                                   pull-request, this pull-request is a PAC because we ﬁnd two
+                              95
+
+
+
+
+                                        w 41
+                           0.
+
+
+
+
+                                                            w42=?                neighbors starting from v1 . The other part are Pull-Requests
+                         13
+                            =
+                     w
+
+
+
+
+                                                                                 from New Contributors denoted as PNC. For a PNC, the
+                                                                                 submitter used to be a reviewer but has not submitted any pull-
+                                w12=2.19
+                                                                                 request, or it is a newcomer excluded from the training set,
+                                                       v2                        so there is no neighbor starting from it in the corresponding
+                    v1
+                                   v2 commented v1's PR_1 on 2012-12-03
+                                                                                 comment network. Hence, we can further divide reviewer
+                                   v2 commented v1's PR_1 on 2013-01-12          recommendation into two different tasks.
+                                   v2 commented v1's PR_2 on 2013-05-07
+            Project:
+                                   v3 commented v1's PR_2 on 2013-05-06          Algorithm 1 Top-k recommendation for PAC
+          Ruby on Rails
+                                         v1 commented v4's PR……
+                                         v2 commented v4's PR……
+                                                                                 Require: Gcn is the comment network of a given project; vs
+                                         v4 commented v1's PR……                      is the contributor of a new pull-request; topk is the number
+                                                                                     of reviewers of requirement;
+             Figure 4. An example of the comment network
+                                                                                 Ensure: recSet is a set of sorted reviewers;
+   Figure 4 shows an example of a part of comment network                         1: Q.enqueue(vs ) and recSet ← ∅
+about Ruby on Rails. Two different pull-requests (PR_1 and                        2: repeat
+PR_2) reported by v1 have been commented by v2 and v3 , so                        3:    v ← Q.dequeue and Gcn .RankEdges(v)
+there are two edges from v1 to v2 and v1 to v3 . Evaluating                       4:    repeat
+the relation between v1 and v2 , k of Equation 2 equals 2,                        5:       if topk = 0 then
+because v2 reviewed both two pull-requests. For PR_1, v2                          6:          return recSet
+commented it twice, so we set m = 2. The ﬁrst time-sensitive                      7:       end if
+factor of the date 2013-12-03 can be computed by Equation 3                       8:       vnb ← Gcn .BestN eighbor(v)
+that t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12                    9:       Q.enqueue(vnb ) and Gcn .mark(vnb )
+(t12,1,2 ≈ 0.731), another review published by v2 in PR_1                        10:       recSet ∪ {vnb } and topk = topk − 1
+should be controlled by λ (set to 0.8) due to the diminishing                    11:    until Gcn .N eighors(v) all marked
+                                                                                 12: until Q is empty
+  2 User comments can be found in pull-requests, issue posts and commit
+                                                                                 13: return recSet
+ﬁles. Here, we just use the comments of pull-request.
+   Recommendation for PAC: For a PAC, it is natural to              multiple communities, instead of always recommending from
+recommend the user who has previously interacted with the           the biggest communities. In our implementation, we extract the
+contributor directly, i.e., the node that is a connected neighbor   community structure from the comment network using Gephi
+starting from the contributor node in the comment network. If       [16] which integrates and optimizes a famous algorithm of
+there are more than one neighbor, the node with the highest         community detection purposed by Blondel et al. [17]. The size
+weights get selected ﬁrst. Hence, reviewer recommendation           of the communities is depicted by the number of developers
+can be treated as a kind of directed graph traversal problem.       it has, and the activeness of a reviewer is measured by the
+In this paper, we improve the classical method of Breadth-First     number of pull-requests he has reviewed in history, in other
+Search to recommend top-k reviewers for new pull-requests as        words, the in-degree of a node in the comment network. The
+shown in Algorithm 1. First of all, we initialize a queue and       recommendation set is generated by following steps:
+put the source node vs onto this queue. Then, starting from            1) Rank the communities by their size (number of nodes);
+the unvisited edge with the highest weight (RankNeighors)              2) calculate the in-degree of nodes in top-k community;
+every time, we loop to select (BestNeighbor) and marked the            3) Select the top-k nodes based on their in-degree from top-
+nearest neighbor as a candidate. If the number of contributor’s     k communities one by one.
+neighbors is less than top-k, we further visit the child nodes
+until top-k nodes are selected out.                                                  V. E XPERIMENTS E VALUATION
+   Recommendation for PNC: For a PNC, since there is                A. Experiment Questions
+no prior knowledge of which developers used to review the              RQ1: How effective is the SVM-based approach applied to
+submitter’s pull-request, we want to predict the candidates who     pull-request assignment?
+share common interests with this contributor by analyzing the
+                                                                       RQ2: Does the CN-based approach have signiﬁcant im-
+overall structure of comment network.
+                                                                    provement compared to the SVM-based approach?
+   Firstly, for a contributor who is a node but without any
+                                                                       RQ3: Do SVM-based approach and CN-based approach
+connected neighbor in the comment network, we mine the
+                                                                    have consistent performance on projects of different charac-
+reviewers based on patterns of co-occurrence across pull-
+                                                                    teristics?
+requests. For example, if v2 and v3 have reviewed plenty of
+                                                                       For experiment question RQ1, we explore whether highly
+pull-requests together, we can assume that they would share
+                                                                    relevant reviewers can be identiﬁed using the machine learn-
+more common interests than others. Thus, when v3 submitted
+                                                                    ing approach described in section III. For experiment RQ2,
+a new pull-request (PNC), we recommend v2 to review his
+                                                                    we illustrate whether social relations are more effective for
+pull-request, and vice versa. We use Apriori algorithm of as-
+                                                                    reviewer recommendation. For RQ3, we aim to know are there
+sociation rule mining [15] to generate top-k frequent itemsets,
+                                                                    any distinct results of applying these approaches on different
+and then rank the candidates according to their supports.
+                                                                    projects and why.
+             C1
+                                                      C2
+                                                                                                   Table I
+                                                                                     P REPROCESSED EXPERIMENT DATASET
+                                                                                                  #Pull-requests       #Comments
+             B
+             B                                                            Project   Language                                         #Candidates
+                                                                                                 Training    Test   Training  Test
+                                                     C
+                                                     C                     akka       Scala        1112       34     10640    467        16
+                                                                           scala      Scala        2028       64     13475    944        32
+                                                                          bitcoin   TypeScript     1067       63      5446    688        21
+             A
+             A                                                             node     JavaScript     1196       14      3497    220        73
+                                                                          jquery    JavaScript      512       14      2967    196        27
+                                   C3
+                                                                         symfony       PHP         2029       29      9601    419        79
+                                                                        phantomjs      C++          677       53      2866    728        20
+                                                                           xbmc         C          1629       81      8493   1094        73
+                                                                            rails     Ruby         3158       59     13060    583       168
+                                   D                                    homebrew      Ruby         4307       51     12255    842        22
+                                   D
+                                                                           Sum                    17715      462     82300   6181       479
+
+
+                                                                    B. Experiment Design
+          Figure 5. Community structure of comment network             Data Selection: Gousios et al. [18] [13] provide a compre-
+   In addition, for a newcomer who is a node excluded               hensive dataset to study the pull-request development model
+from the comment network, the most active reviewers in              of GitHub. Our approach is evaluated on 10 projects which
+different kinds of communities become the most probable             have received over 1000 pull-requests. We use the data of last
+candidates. We assume that developers with common interests         one and a half years from 2012-01-01 to 2013-05-31 as our
+will spontaneously form a community in the comment network.         training set and the data from 2013-06-01 to 2013-10-01 as
+However, the structure of the comment network shows that            our test set. The descriptions and titles are used to learn SVM
+developers are not always uniformly dispersed, as shown in          classiﬁers and comment relations are used to build comment
+ﬁgure 5. It is probable that these most active reviewers could      networks. In order to learn the valid classiﬁers, we ﬁrst do stop
+belong to the biggest community, such as the top-2 most             words removal and stemming over the descriptions and titles.
+active nodes A and B belong to the same community C1.               Then, we retain those pull-request with more than 10 words.
+Therefore, we would like our recommendation list to cover           The test set includes some simple pull-requests which need not
+be reviewed, so this kind of pull-requests which received less                                Furthermore, we present the following null hypotheses to
+than 4 comments are omitted. After that, there are 17715 pull-                             evaluate the improvement of our CN-based approach compared
+requests in the training set and 462 in the test set, as shown                             with the baseline and the SVM-based approach:
+in Table I. For each project, we recommend top-1 to top-10                                    H0 1 : There is no statistically signiﬁcant difference between
+reviewers to a new pull-request from Candidates in Table I.                                the precisions of the baseline and CN-based approach.
+   Evaluation Metrics: We evaluate the performances of our                                    H0 2 : There is no statistically signiﬁcant difference between
+approaches over each project by precision and recall which                                 the precisions of the SVM-based and CN-based approach.
+are widely used as standard metrics in previous work. The                                     H0 3 : There is no statistically signiﬁcant difference between
+formulae for our metrics are listed below:                                                 the recalls of the baseline and CN-based approach.
+               | Rec Reviewers ∩ Actual Reviewers |                                           H0 4 : There is no statistically signiﬁcant difference between
+  P recision =                                                                             the recalls of the SVM-based and CN-based approach.
+                         | Rec Reviewers |
+           | Rec Reviewers ∩ Actual Reviewers |                                               The results of Student’s t-test are listed in Table II. For H0 1
+  Recall =                                                                                 and H0 2 of precision, one-sided p-value p < 0.05 and t-test
+                    | Actual Reviewers |
+                                                   (4)                                     value t < tcrit . Thus, we reject these hypotheses. It means
+                                                                                           that CN-based approach achieve a signiﬁcant improvement
+C. Experiment Results and Analysis                                                         in precision compared to the baseline and the SVM-based
+                                                                                           approach. Similarly, we reject H0 3 and H0 4 of recall, but
+   Baseline: Most Active Recommendation                                                    the t-test result of H0 4 is remarkably close to the critical
+   It is common for some projects that most of pull-requests are                           values. It means CN-based approach achieves nearly the same
+reviewed by a few core developers. Thus, to demonstrate the                                performance in recall but greatly exceeds the baseline method.
+effectiveness of our approaches based on machine learning and                                 Especially, high precision of top-k recommendation is sig-
+social network analyzing, we design a baseline method that                                 niﬁcant for pull-request assignment. As the example of Figure
+every new pull-request is assigned to the top-k most active                                1, if our approach assigns that pull-request to rafaelfranca, he
+developers ranked according to the number of pull-requests                                 would remind javan to join the discussion by the @mention
+they have reviewed in the past.                                                            tool, even if javan is left out by the algorithm.
+   RQ1 & RQ2: Recommendation Performances
+                                                                                                                                 Table II
+   We use a chart of precision vs. recall to show the perfor-                                                   R ESULTS OF T-T EST FOR OUR HYPOTHESES
+mances of different approaches in detail. In Figure 6, each                                   H         Var         Approach        µ       σ2         p         t      tcrit    Decision
+curve has a point for each recommendation from top-1 to                                     H0        Precision
+                                                                                                                   CN -based       0.53    0.031
+                                                                                                                                                    0.0002     3.67     1.66      Reject
+                                                                                                  1
+                                                                                                                    baseline       0.50    0.029
+top-10. There is a trade-off between precision and recall for                                                      CN -based       0.53    0.031
+                                                                                            H0    2   Precision                                      0.016     2.18     1.66      Reject
+classiﬁcation. Hence, the precisions are gradual decreasing                                                        SVM-based       0.51    0.030
+                                                                                                                   CN -based       0.56    0.057
+with the increase of recalls.                                                               H0    3    Recall
+                                                                                                                    baseline       0.54    0.063
+                                                                                                                                                    0.0003     3.60     1.66      Reject
+
+                      0.8                                                                                          CN -based       0.56    0.057
+                                                                                            H0    4    Recall                                        0.040     1.77     1.66      Reject
+                                                                CN-based approach                                  SVM-based       0.55    0.063
+                                                                SVM-based approach            Means µ, Variance σ 2 , statistical signiﬁcance p-value p, t-test results t and critical value
+                      0.7                                       Baseline                      tcrit , signiﬁcance level α = 0.05. In this paper, we do not list alternative hypotheses,
+                                                                                              because they are easy to derive from these null hypotheses respectively.
+
+                                                                                              RQ3: Discussion of different approaches
+                      0.6
+     Avg. Precision
+
+
+
+
+                                                                                              We run our approaches on each project to evaluate their
+                                                                                           detailed performances and discuss the results. As most of pull-
+                      0.5                                                                  request in GitHub received less than 4 comments [1], we only
+                                                                                           depict part of our results from top-1 recommendation to top-5.
+                      0.4                                                                     Firstly, running on bitcoin, akka and rails, our novel CN-
+                                                                                           based approach can achieve a signiﬁcant improvement over the
+                      0.3
+                                                                                           baseline and SVM-based method. As shown in Table III, the
+                        0.1    0.2     0.3     0.4        0.5    0.6      0.7        0.8   improvement of CN-based approach running on each project is
+                                                 Avg. Recall
+                        Figure 6. Precision vs. Recall of different approaches
+                                                                                           on average over 10% in precision and 6% in recall. In addition,
+                                                                                           CN-based approach can get remarkable performance for top-
+   Both SVM-based approach and CN-based approach are su-                                   1 recommendation. For example, the precision of CN-based
+perior to the baseline. Our novel approach based on Comment                                approach can reach 92% running on bitcoin. Compared to the
+Network (CN-based approach) achieves obvious improvement                                   baseline and SVM-based method, our approach achieves great
+in precision from top-1 to top-4, especially at the point of                               improvement of 51% and 31% respectively.
+top-1 (78%) and top-2 (67%). However, the curve of SVM-                                       In these three projects, the social activities and contributions
+based approach is in the middle from top-1 to top 4, and                                   between core and external developers are balanced and well-
+takes the leading position at the points of top-5 and top-8 in                             distributed. For example, for bitcoin, the number of core
+precision. When we recommend top-10 reviewers, the recall                                  developers and external developers are equal in the history of
+of each method can reach the level of 77%.                                                 top-10 active reviewers list. In addition, 64% of pull-requests
+                                                                                 Table III
+                                P RECISIONS /R ECALLS OF BASELINE (BL), CN- BASED AND SVM- BASED RECOMMENDATION FROM TOP -1 TO TOP -5
+                                       Number of                      bitcoin                                  akka                                rails
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.41/0.08       0.92/0.19   0.61/0.12      0.61/0.14   0.84/0.20   0.87/0.20   0.61/0.13   0.75/0.18   0.62/0.13
+                                         top-2       0.69/0.28       0.77/0.31   0.69/0.28      0.69/0.32   0.84/0.39   0.69/0.32   0.46/0.20   0.65/0.32   0.45/0.20
+                                         top-3       0.69/0.42       0.73/0.44   0.69/0.42      0.61/0.43   0.70/0.50   0.69/0.49   0.47/0.31   0.57/0.42   0.46/0.30
+                                         top-4       0.61/0.48       0.67/0.54   0.65/0.51      0.67/0.63   0.73/0.69   0.75/0.70   0.40/0.35   0.46/0.45   0.41/0.36
+                                         top-5       0.60/0.58       0.63/0.62   0.61/0.59      0.72/0.84   0.78/0.92   0.80/0.93   0.35/0.38   0.38/0.47   0.36/0.39
+                                         Avg.        0.60/0.36       0.74/0.42   0.65/0.38      0.66/0.47   0.78/0.54   0.76/0.53   0.46/0.27   0.56/0.36   0.46/0.28
+                                       Number of                      jquery                                phantomjs                           homebrew
+                                       Reviewer         BL              CN         SVM             BL           CN        SVM          BL           CN        SVM
+                                         top-1       0.82/0.17       0.82/0.17   0.82/0.17      0.92/0.20   0.92/0.19   0.94/0.20   0.91/0.21   0.88/0.20   0.88/0.21
+                                         top-2       0.66/0.27       0.70/0.29   0.68/0.28      0.86/0.37   0.74/0.31   0.88/0.37   0.76/0.35   0.77/0.35   0.77/0.35
+                                         top-3       0.53/0.33       0.56/0.35   0.55/0.34      0.73/0.46   0.75/0.48   0.75/0.48   0.81/0.56   0.80/0.55   0.80/0.56
+                                         top-4       0.45/0.37       0.55/0.46   0.48/0.39      0.75/0.64   0.74/0.62   0.75/0.64   0.79/0.72   0.75/0.68   0.79/0.73
+                                         top-5       0.46/0.48       0.50/0.53   0.48/0.51      0.65/0.68   0.65/0.68   0.66/0.69   0.74/0.84   0.62/0.71   0.73/0.84
+                                         Avg.        0.59/0.32       0.63/0.36   0.60/0.34      0.78/0.47    0.7/0.46   0.80/0.48   0.80/0.54   0.76/0.50   0.80/0.54
+
+submitted by external contributors and 60% of them have been                                                   •   For RQ1, the SVM-based recommendation is an effective
+merged. By contrast, 36% of pull-requests are originating from                                                     approach for pull-request assignment which achieves 73%
+core developers but 84% of them have been merged.                                                                  precision of top-1 recommendation and 77% recall of top-
+   The second group includes jquery, phantomjs and home-                                                           10 recommendation.
+brew, where both our approaches and the baseline method                                                        •   For RQ2, the CN-based approach achieve signiﬁcant
+can achieve high precision and recall. The the second part                                                         improvement compared to other methods. Analyzing the
+of Table III lists the results. For phantomjs and homebrew,                                                        social network is a novel and effective way for reviewer
+the precisions and recalls of all methods on average reach                                                         recommendation.
+approximately 80% and 50% respectively.                                                                        •   For RQ3, the CN-based recommendation show much
+   In these projects, a few developers seems to dominate the                                                       more improvement for the projects where the social
+pull-request review activity. As they have submitted comments                                                      activities are balanced between core developers and exter-
+too frequently, it is easy to assign pull-requests of test set to                                                  nal developers. If developers have reviewed pull-requests
+them. Thus, the improvement of CN-based approach is not                                                            actively, the performance of our approach is remarkable.
+obvious. Taking phantomjs as an example, the most active user
+                                                                                                            E. Threats to Validity
+(ID 136322) has reviewed 77% of pull-requests and interacted
+with 83% of contributors in training set. All algorithms tend                                                  In this section, we discuss some threats to validity which
+to assign the new pull-requests to him ﬁrst.                                                                may affect the experiment results of our approaches. Firstly,
+                      0.55                                                                                  there is a small part of the core developers who are in charge of
+                                                                      CN-based approach
+                                                                      SVM-based approach                    the ﬁnal decision of pull-requests. They joined so many pull-
+                      0.50                                            Baseline                              requests’ discussions in training set that all the approaches
+                                                                      PAC recommendation
+                                                                                                            tend to assign the new pull-request to these active developers
+                                                                                                            ﬁrst. Hence, the workload of these active reviewers may not
+                      0.45
+     Avg. Precision
+
+
+
+
+                                                                                                            be reduced. However, with more and more external contributor
+                                                                                                            presenting their suggestions to pull-requests, the social net-
+                      0.40
+                                                                                                            work based approach can refresh the weights of corresponding
+                                                                                                            edges, so new pull-requests would be assigned more balanced
+                      0.35                                                                                  than before. Besides, because some pull-requests have not been
+                                                                                                            closed when we dumped the test set, so a part of following
+                      0.30
+                         0.05   0.10     0.15      0.20       0.25      0.30     0.35        0.40
+                                                                                                            reviewers have not been taken into consider which may affect
+                                                      Avg. Recall                                           our recommendation results.
+            Figure 7. Precision vs. Recall of different methods for xbmc
+                                                                                                                                       VI. R ELATED W ORK
+   However, all approaches do not perform well for xbmc.
+Except that SVM-based approach gets 43% precision for top-                                                     Gousios et al. [1] show that the pull-request model offers
+1 recommendation, the precisions of all methods ranged from                                                 fast turnaround, increased opportunities for community en-
+39% to 32%. In the test set of xbmc, 65% of pull-requests                                                   gagement and decreased time to incorporate contributions. To
+are originating from newcomers, so CN-based approach do                                                     the best of our knowledge, this paper is the ﬁrst one to study
+much work of PNC recommendation (PAC and PNC have been                                                      pull-request assignment. We review previous work about bug
+deﬁned in section IV-B). As shown in Figure 7, if we only                                                   triaging and collaboration network analysis of social coding.
+consider to recommend reviewer for PAC, the performance of                                                     There are a number of researches based on Machine Learn-
+CN-based recommendation is greatly superior to others.                                                      ing (ML) [7]–[9] and Information Retrieval (IR) [10]–[12]
+                                                                                                            techniques to triage incoming bug reports or change requests.
+D. Conclusions of Experiments                                                                               Anvik et al. [7] apply a machine learning algorithm to learn
+  Based on the experiment’s results and analysis above, we                                                  the kinds of reports each developer resolves and recommend
+can draw our conclusions as follows:                                                                        developers for a new bug report. Jeong et al. [8] ﬁnd that
+many bugs have been reassigned to other developers, so they                                      R EFERENCES
+combined classiﬁers with tossing graphs to mine potential           [1] G. Gousios, M. Pinzger, and A. van Deursen, “An exploration of the
+ﬁxers. Based on that, Bhattacharya et al. [9] introduce an              pull-based software development model,” in Proceedings of the 36th
+approach adding ﬁne-grained incremental learning and multi-             International Conference on Software Engineering, Jun. 2014, to appear.
+                                                                    [2] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and A. Swaminathan, “Min-
+feature tossing graphs to reduce tossing path lengths and               ing email social networks,” in Proceedings of the 2006 International
+improve prediction accuracy. Other researchers use IR for               Workshop on Mining Software Repositories, 2006, pp. 137–143.
+automatic bug triaging. Canfora and Cerulo [10] use the textual     [3] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies of
+                                                                        open source software development: Apache and mozilla,” ACM Trans.
+descriptions to index developers and source ﬁles as documents           Softw. Eng. Methodol., vol. 11, no. 3, pp. 309–346, Jul. 2002.
+in an information retrieval system. Kagdi [11] and Linares-         [4] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in
+Vasquez [12] extract the comments and identiﬁers from the               github: transparency and collaboration in an open software repository,”
+                                                                        in Proceedings of the ACM 2012 conference on Computer Supported
+source code and index these data by Latent Semantic Indexing.           Cooperative Work. New York, NY, USA: ACM, 2012, pp. 1277–1286.
+For a new bug report, such indexes can be useful to identify        [5] T. LaToza, W. Ben Towne, A. van der Hoek, and J. Herbsleb, “Crowd
+the most appropriate developers to resolve it.                          development,” in Cooperative and Human Aspects of Software Engi-
+                                                                        neering, 2013 6th International Workshop on, May 2013, pp. 85–88.
+   In this paper, we not only expand the ML-based methods           [6] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets software
+to recommend reviewers for incoming pull-request, but also              development: Perspectives from github, msdn, stack exchange, and
+propose a novel social network based approach focusing on               topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+                                                                    [7] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+mining social relations betweens reviewer and contributors              ceedings of the 28th International Conference on Software Engineering,
+which achieves a signiﬁcant improvement.                                ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+   The social coding paradigm is reshaping the distributed          [8] G. Jeong, S. Kim, and T. Zimmermann, “Improving bug triage with
+                                                                        bug tossing graphs,” in Proceedings of the the 7th Joint Meeting of
+software development in recent years with a surprising speed            the European Software Engineering Conference and the ACM SIGSOFT
+and wide range. Dabbish et al. [4] explore the value of social          Symposium on The Foundations of Software Engineering, ser. ESEC/FSE
+mechanisms of GitHub. They ﬁnd that the transparency in                 ’09. New York, NY, USA: ACM, 2009, pp. 111–120.
+                                                                    [9] P. Bhattacharya, I. Neamtiu, and C. R. Shelton, “Automated, highly-
+collaboration is improved by social mechanisms which is                 accurate, bug assignment using machine learning and tossing graphs,”
+signiﬁcant for innovation, knowledge sharing and community              Journal of Systems and Software, vol. 85, no. 10, pp. 2275–2292, 2012.
+building. Zhou et al. [19] measure the behavior of a contributor   [10] G. Canfora and L. Cerulo, “Supporting change request assignment in
+                                                                        open source development,” in Proceedings of the 2006 ACM Symposium
+using workﬂow network. Zanetti et al. [20] categorize bugs              on Applied Computing, ser. SAC ’06. New York, NY, USA: ACM,
+based on nine measures to quantify the social embeddedness              2006, pp. 1767–1772.
+of bug reporters in the collaboration network. Thung et al.        [11] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                                                                        request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+[21] investigate the developer-developer and project-project            International Conference on, May 2009, pp. 273–277.
+networks of GitHub. They use PageRank to identify the most         [12] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+inﬂuential developers and projects in Github.                           D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                        history, or code authorship?” in Software Maintenance, 28th IEEE
+   These previous researches inspire us to mining the comment           International Conference on, Sept 2012, pp. 451–460.
+networks for pull-request automatic assignment.                    [13] G. Gousios, “The ghtorrent dataset and tool suite,” in Proceedings of the
+                                                                        10th Working Conference on Mining Software Repositories, ser. MSR
+          VII. C ONCLUSION AND F UTURE W ORK                            ’13. Piscataway, NJ, USA: IEEE Press, 2013, pp. 233–236.
+                                                                   [14] G. Tsoumakas and I. Katakis, “Multi-label classiﬁcation: An overview.”
+   The review process of pull-request is important for social           IJDWM, vol. 3, no. 3, pp. 1–13, 2007.
+coding. In this paper, we ﬁrstly extend the machine learning       [15] R. Agrawal and R. Srikant, “Fast algorithms for mining association rules
+                                                                        in large databases,” in Proceedings of the 20th International Conference
+based approach for bug triaging to assign reviewers to new              on Very Large Data Bases, ser. VLDB ’94. San Francisco, CA, USA:
+pull-requests. Furthermore, introducing social relations, we            Morgan Kaufmann Publishers Inc., 1994, pp. 487–499.
+propose a novel social network based approach for reviewer         [16] M. Bastian, S. Heymann, and M. Jacomy, “Gephi: an open source
+                                                                        software for exploring and manipulating networks.” in ICWSM, 2009.
+recommendation by mining a new type of social network              [17] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
+called comment network. Finally, we demonstrate the effective-          unfolding of communities in large networks,” Journal of Statistical
+ness of these two approaches with quantitative evaluations. In          Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
+                                                                   [18] G. Gousios and A. Zaidman, “A dataset for pull request research,”
+the future, we plan to use the information retrieval approaches         in MSR ’14: Proceedings of the 11th Working Conference on Mining
+to pull-request assignment, and then combine these traditional          Software Repositories, may 2014, to appear.
+methods with the social network based approach. Besides, we        [19] M. Zhou and A. Mockus, “What make long term contributors: Will-
+                                                                        ingness and opportunity in oss community,” in Proceedings of the
+will explore how to add other types of social relations into our        34th International Conference on Software Engineering, ser. ICSE ’12.
+framework.                                                              Piscataway, NJ, USA: IEEE Press, 2012, pp. 518–528.
+                                                                   [20] M. S. Zanetti, I. Scholtes, C. J. Tessone, and F. Schweitzer, “Cat-
+                VIII. ACKNOWLEDGEMENT                                   egorizing bugs with social networks: A case study on four open
+                                                                        source software communities,” in Proceedings of the 2013 International
+  This research is supported by the National High Technol-              Conference on Software Engineering, ser. ICSE ’13. Piscataway, NJ,
+ogy Research and Development Program of China (Grant                    USA: IEEE Press, 2013, pp. 1032–1041.
+                                                                   [21] F. Thung, T. F. Bissyande, D. Lo, and L. Jiang, “Network structure of
+No.2012AA011201), the National Science Foundation of                    social coding in github,” in Proceedings of the 2013 17th European
+China (Grant No.61432020 and No.61472430) and the Post-                 Conference on Software Maintenance and Reengineering, ser. CSMR
+graduate Innovation Fund of University of Defense Technol-              ’13. Washington, DC, USA: IEEE Press, 2013, pp. 323–326.
+ogy (Grant No.B130607).
+
\ No newline at end of file
diff --git a/res/paper/crowdsoft2014.pdf b/res/paper/crowdsoft2014.pdf
new file mode 100644
index 0000000..5c69218
--- /dev/null
+++ b/res/paper/crowdsoft2014.pdf
@@ -0,0 +1,344 @@
+          Exploring the Patterns of Social Behavior in GitHub
+
+                                              Yue Yu, Gang Yin, Huaimin Wang, Tao Wang
+                               National Laboratory for Parallel and Distributed Processing
+            School of Computer Science, National University of Defense Technology, Changsha, 410073, China
+                                     {yuyue, yingang, hmwang, taowang2005}@nudt.edu.cn
+
+
+
+ABSTRACT                                                                            1. INTRODUCTION
+Social coding paradigm is reshaping the distributed soft-                              In recent years, social coding paradigm has been brought
+ware development with a surprising speed in recent years.                           into focus in distributed software development for the de-
+Github, a remarkable social coding community, attracts a                            velopers from all over the world. Various kinds of social
+huge number of developers in a short time. Various kinds of                         media [10, 11] are employed in software development, which
+social networks are formed based on social activities among                         help building social ties among developers and form diﬀer-
+developers. Why this new paradigm can achieve such a great                          ent types of social networks. Such social mechanisms can
+success in attracting external developers, and how they are                         achieve transparency [5] within social coding ecosystem and
+connected in such a massive community, are interesting ques-                        improve the degree of collaboration in software development.
+tions for revealing power of social coding paradigm. In this                           GitHub1 , a typical social coding community, attracts a
+paper, we ﬁrstly compare the growth curves of project and                           large number of users and projects in a short period of time.
+user in GitHub with three traditional open source software                          When launched in 2008, there were only four users [2]. But
+communities to explore diﬀerences of their growth modes.                            it seems to rise to fame overnight and increases to more
+We ﬁnd an explosive growth of the users in GitHub and                               than 3.5 million developers now. GitHub employs several
+introduce the Diﬀusion of Innovation theory to illustrate                           social media such as follow, watch and fork. The developers
+intrinsic sociological basis of this phenomenon. Secondly,                          can track the activities of others and be aware of changes
+we construct follow-networks according to the follow behav-                         in project using these tools in the community. Many in-
+iors among developers in GitHub. Finally, we present four                           teresting social networks of developers can be constructed.
+typical social behavior patterns by mining follow-networks                          For example, the follow relation is created when a developer
+containing independence-pattern, group-pattern, star-pattern                        click the “follow ” button in the proﬁle of another developer,
+and hub-pattern. This study can provide several instructions                        and then the follow relations among developers can form a
+of crowd collaboration to newcomers. According to the typi-                         social network which is called follow-network in this paper.
+cal behavior patterns, the community manager could design                           Why this new paradigm can achieve such a great success
+corresponding assistive tools for developers.                                       in attracting a large number of developers, and how they
+                                                                                    are connected in such a massive community, are important
+                                                                                    questions for understanding such a new paradigm. Many re-
+Categories and Subject Descriptors                                                  searches are conducted on analyzing the inﬂuence of social
+D.2.8 [Software Engineering]: Metrics - Process metrics;                            network in Open Source Software (OSS) communities (see
+D.2.9 [Software Engineering]: Management - Program-                                 Section 7). However, these work study the network structure
+ming teams                                                                          [13] of collaboration-oriented social network and collabora-
+                                                                                    tion pattern [12] in traditional OSS communities. However,
+                                                                                    none of them has explored the growth modes of communities
+General Terms                                                                       and social behavior patterns of developers.
+Human Factors, Measurement, Management                                                 In this paper, we ﬁrstly explore the growth curves of GitHub
+                                                                                    compared to three traditional OSS communities. Then, we
+                                                                                    construct follow-networks from the follow behaviors among
+Keywords                                                                            developers, which is a typical interest-oriented social net-
+Behavior pattern, Social network, Social coding, Distributed                        work. Finally, we analyze the social behavior patterns among
+software development                                                                developers by mining the follow-networks.
+                                                                                       In summary, the following research questions would be
+                                                                                    answered in this paper:
+                                                                                       RQ1: What are the diﬀerences between the growth modes
+Permission to make digital or hard copies of all or part of this work for           of GitHub and traditional OSS communities, and is there
+personal or classroom use is granted without fee provided that copies are           any sociological theory that supports the special growth
+not made or distributed for proﬁt or commercial advantage and that copies
+                                                                                    mode of GitHub?
+bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
+republish, to post on servers or to redistribute to lists, requires prior speciﬁc      RQ2: Whether or not the social connections among de-
+permission and/or a fee.                                                            velopers form some distinctive behavior patterns in GitHub,
+CrowdSoft 2014                                                                      1
+Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.                                        https://github.com
+                              (a) User-growth curve                      (b) Project-growth curve
+
+                                              Figure 1: The growth ﬁgure of Github
+
+
+
+
+                       (a) Freecode                         (b) Alioth                     (c) Savannah
+
+                                    Figure 2: The growth ﬁgure of tranditional OSS community
+
+and if it is true, what are these patterns?                        in a short time, which seems to make GitHub rise to fame
+   To the best of our knowledge, this is the ﬁrst research         overnight. In this paper, we deﬁned the explosive growth
+combining the high level analysis of the growth mode and           mode of GitHub as “outburst-type”. The outburst-type is
+the speciﬁc level of pattern mining in GitHub. We try to           quite diﬀerent from the growth mode of the traditional OSS
+make some interesting observations at these two levels. The        communities, such as Freecode2 , Alioth3 and Savannah4 . As
+remainder of this paper is structured as follows. Section 2        shown in Figure 2, the traditional OSS communities often
+introduces the statistics of raw data entities in our dataset.     grow smoothly and stably. After a period of rising, the
+Section 3 analyzes the growth mode of GitHub and Section 4         growth curves gradually slow down. We use Gini coeﬃcient
+illustrates the method of constructing the follow-networks.        to measure the skewness of outburst-type. The Gini index of
+Section 5 depicts the typical behavior patterns hidden in          three traditional OSS communities is on average 24.5%. By
+the follow-networks. We discuss threats in Section 6 and           contrast, the Gini index of GitHub is over 58.1%. It means
+related work in Section 7. Finally, we draw our conclusions        that the growth of GitHub is too imbalanced that the ma-
+in Section 8.                                                      jority of developers join this community in a short period of
+                                                                   time.
+2. DATASET                                                            The core service of these three traditional OSS commu-
+                                                                   nities is to support project (code) hosting. In these com-
+   Our study is based on the data from the GHTorrent project       munities, the main services such as version control system,
+[8, 6], which keeps on creating a scalable oﬀ-line mirror of       bug tracking and release management are strongly related
+event streams and provides persistent data of GitHub for           to project management. Around the main service, there are
+research. We use the Mysql dump update until 2013-05-29,           some classic communication tools such as mailing lists and
+which contains detailed information of social coding activ-        forum used to assist developers in distributed development.
+ities about 1,838,805 users. Among all these users, about          Thus, users do not have direct experiences and strong feel-
+55.46% of them (1,019,839 users), joined this community            ings about its strengths.
+during a short period of time from 2012-07-01 to 2013-05-             However, the human factor is the core factor in the so-
+29. Since then, the number of users keeps on growing by            cial coding paradigm. The innovative services in GitHub,
+over ﬁfty thousand per month.                                      such as the follow-based social networking, fork-based shar-
+                                                                   ing system and the pull-based software development model
+3. GROWTH MODE                                                     [7], catapult users into a new software develop experiences.
+  As a popular social coding community, GitHub draws               According to the Diﬀusion of Innovations theory[9], if there
+widespread attention from all over the world hosting a huge        were 2.5% innovators and 13.5% early adopters hosting their
+number of software projects. However, the growth mode of           projects on GitHub and promoting to others, the “tipping
+GitHub has a huge diﬀerence during two periods of time.            point” would be achieved. Then, the majority customers
+  Figure 1 shows the monthly growth trajectory of user and
+                                                                   2
+project in GitHub. As can be seen from this chart, after             http://freecode.com
+                                                                   3
+a relatively long time of accumulation till the early 2012,          http://alioth.debian.org
+                                                                   4
+the number of users and projects experienced a big leap              http://savannah.gnu.org
+                             (a) 2012-08 subset                                   (b) 2012-09 subset
+
+                                             Figure 3: Two examples of follow-network
+
+
+would join GitHub community. When GitHub leaps the                  developers’ registration time, and then construct the follow-
+chasm, it grows dramatically. Thus, GitHub grows as the             networks separately. Table 1 lists the monthly statistics of
+outburst-type.                                                      corresponding follow-networks. There are over 85,000 of new
+   Furthermore, we hold two viewpoints of the reason why            users join GitHub each month.
+majorities are involved in GitHub.                                                  Table 1: Statistics of Dataset
+   Eﬀect of leader: There is a part of developers enjoying              Month      #User    #Node #Edge Average Degree
+a high reputation such as Linus Torvalds 5 who have been
+                                                                       2012-08    150,851    32,796    31,677      0.966
+followed by 13,267 users on GitHub. Similarly, some out-
+                                                                       2012-09    102,056    40,401    40,793      1.010
+standing projects have a lot of eyes on them such as Rails6            2012-11     88,857    28,665    26,232      0.915
+stared by 19,915 users. When these people or projects are              2013-01     89,004    23,463    19,562      0.834
+active in GitHub, a lot of developers are involved because             2013-02    142,358    27,064    21,970      0.812
+they want to join the projects or study with the experts.              2013-03     95,087    23,650    19,161      0.810
+   Herd behavior: A large number of users join GitHub                  2013-05     90,413    13,160     9,704      0.737
+just for the reason that he ﬁnd so many developers around
+him talk about GitHub frequently. However, for himself, he
+may not know the advantages of GitHub clearly.                      5. SOCIAL BEHAVIOR PATTERNS
+                                                                      The quantity of registered users is over one hundred thou-
+                                                                    sand in 2012-08 and 2012-09 subsets. Those developers have
+4. FOLLOW-NETWORK                                                   formed rich social relations after a period of time. There-
+   We aim to understand the social behavior patterns of the         fore, we choose these two subsets to demonstrate the follow-
+developers who join GitHub during the outburst period. We           networks. The follow-network is so complex that we delete
+ﬁrstly construct follow-networks from the follow behaviors          the nodes whose degrees are less than 5. There are nearly
+among developers, which can directly reﬂect users’ relation-        90% useless links that can be ﬁltered. It means that most of
+ships in social activities.                                         users program in GitHub without the help of follow-based
+   If a user U1 has followed U2 , we consider that the collab-      social service. Thus, it is possible to show that a large num-
+oration activities of U1 would be inﬂuenced by U2 ’s. The           ber of developers are involved in GitHub because of Herd
+follow-network can be deﬁned as a directed graph Gf n =             behavior. In the Figure 3, we show the preprocessed follow-
+ V, E . The set of vertices is all users in our dataset de-         networks visualized by Gephi [1]. In general, the follow-
+noted by V . The set of edges in Gf n denoted by E is a             networks can be divided into two parts, i.e. isolated part
+set of node pairs E(V ) = {(u, v)|u, v ∈ V }. If the node vj        and interlaced part.
+is followed by vi , then there is a edge from vi to vj . For          In isolated part, we can ﬁnd two typical patterns, contain-
+a node vi , the number of edges pointing to it is called the        ing the independence-pattern and the group-pattern. Figure
+indegree deg − (vi ) and the number of edges starting from it       4 shows some typical examples of them. The independence-
+represents its outdegree deg + (vi ). And the degree is the sum     pattern indicates that a developer use Github as a traditional
+of indegree and outdegree deg(vi ) = deg − (vi ) + deg + (vi ).     way and he always only link up with acquaintances. He just
+   In this paper, we focus on the social behavior of developers     hosts his code or watches an interesting project but rarely
+who join GitHub during the period of fast growing. Thus, we         makes a contribution to it. According to our statistics, in
+divide the dataset into several monthly subsets according to        the 2012-08 subset, 30.33% nodes are isolated and 13.80%
+                                                                    nodes only connect with one node. The group-pattern is of-
+5
+    https://github.com/torvalds                                     ten formed by a group developers who collaborate with each
+6
+    https://github.com/rails/rails                                  other to develop the same project.
+                 (a) Independence-pattern
+
+
+
+
+                     (b) Group-pattern
+
+      Figure 4: The typical patterns in the isolated part
+
+  To show the features of the group-pattern more clearly, we
+use two diﬀerent force-directed graph drawing algorithms to
+redraw the follow network, as shown in Figure 5. We present
+three observations as follows:
+
+   • Observation 1: For a given group, the number of
+     links between this group and the interlaced part presents
+     the degree of social collaboration among the group’s
+     members and community. If a group has few link
+     with the core network, the projects developed by them
+     would be hard to attract public attentions. Besides,
+     the distance between the group and the centre of the
+     network reﬂects the degree of correlation between them.       (a) The Network redrawn by Force Atlas algorithm
+     For example, the group in the bottom right corner,
+     which is far from the core network, hosts a industrial
+     design project on GitHub. This project has no corre-
+     lation to software development.
+
+   • Observation 2: In a group, there is a relatively small
+     number of users who follow the external developers
+     and there are not many internal users following them
+     as well. In addition, these developers always follow
+     the external developers with high indegree who are the
+     leaders of a well-known project. Thus, they are not
+     the core programmer of their project, but they import
+     some novel idea from the community into the group.
+
+   • Observation 3: In general, the more developers are
+     followed by external users, the faster their project grow-
+     ing. When their project is popular enough in the spe-
+     ciﬁc domain, the group-pattern would be merged into
+     the interlaced part of follow-network, because more
+     and more developers follow the group’s members and
+     contribute to their project.
+
+  In the interlaced part of follow-networks, we extract the
+community structures using a popular algorithm of commu-
+nity detection purposed by Blondel et al. [4]. As shown
+in Figure 6, there are 4 large communities in the network
+which have been painted in diﬀerent colors. The size of a
+node represent its indegree. We can ﬁnd that diﬀerent com-
+munities represent diﬀerent groups of developers who focus
+on diﬀerent kinds of projects. There is a leader in each com-
+munity. For example, the pink community is about Ruby on
+Rails development and the orange community is related to
+Linux project. Furthermore, we extract two typical social         (b) The Network redrawn by Force Atlas 2 algorithm
+behavior patterns from the interlaced part of follow-network,      Figure 5: The redrawn follow-network of 2012-08 subset
+including star-pattern and hub-pattern.
+                                                                  such as the developer b in the green community and e in the
+                                                                  red community. The core developers just have connections
+                                                                  with internal users. The hub-node, such as d and g , not only
+                                                                  follow internal users, but also make a connection with other
+                                                                  communities. In this pattern, we ﬁnd that the projects de-
+                                                                  veloped by diﬀerent communities always have something in
+                                                                  common. For example, they use the same programming lan-
+                                                                  guage or frameworks. The quantity of hub-nodes is highly
+                                                                  related to the commonality and similarity of the projects.
+
+                                                                  6. THREATS TO VALIDITY
+                                                                     In this section, we discuss some threats to validity which
+                                                                  may aﬀect the results of our observations. Firstly, the num-
+                                                                  ber of projects hosted in GitHub is still growing fast, so
+                                                                  GitHub may be still in the early or middle phases of growth.
+                                                                  Thus, we cannot ensure the majority of users joint GitHub
+                                                                  during one outburst period. That is to say, GitHub may
+Figure 6: Community structures in the follow-network of 2012-08   have two or three outburst periods of growth. However, as
+subset                                                            the market becomes saturated, the growth curve would be
+                                                                  slow down. Secendly, a part of users have been included to
+                                                                  compensate for users committing to Github without having
+  As shown in ﬁgure 7(a), there are two distinct structures of    a GitHub account or shared an account with other devel-
+the star-pattern. The ﬁrst structure indicates that a famous      opers. In this paper, we do not take these developers into
+man (or a team) is followed by a large number of users but        consideration in the preprocessing stage. Thirdly, the follow
+he almost never pay any attention to others, which exactly        relations of some users are dynamic. They would follow an
+reﬂects the inﬂuence about the Eﬀect of leader described          expert at the beginning. However, they disengage from the
+in Section 3. The other one indicates that a user follow          follow relationship at some time for personal reasons.
+many irrelevant developers but almost never be followed by
+others. This kind of structure can be used to ﬁnd crawler’s
+IDs or advertiser’s IDs. For example, we ﬁnd KBishop 7 is a       7. RELATED WORK
+advertiser’s account in GitHub.                                      With the development of social coding paradigm, many
+                                                                  studies have been conducted on analyzing the mechanisms
+                                                                  and the value of social network in software development.
+                                                                  Begel et al. [2] conduct semistructured interviews with the
+                                                                  leader of GitHub to understand the role social network plays
+                                                                  in the software development process. Dabbish et al. [5]
+                                                                  explore the value of the social media in GitHub and found
+                                                                  that the transparency in collaboration brought in by such
+                                                                  mechanisms can support innovation, knowledge sharing and
+                                                                  community building. Tsay et al. [14] further above study
+                                                                  to evaluate the inﬂuence of social signals. They ﬁnd that
+                        (a) Star-pattern                          developers use both technical and social information when
+                                                                  evaluating potential contributions to open source software
+                                                                  projects.
+                                                                     In addition, collaboration network in social coding has at-
+                                                                  tracted many interests among researchers. Thung et al. [13]
+                                                                  investigate the developer-developer and project-project net-
+                                                                  works in Github. They use PageRank to identify the most
+                                                                  inﬂuential developers and projects by exploring these two
+                                                                  types of network. Surian et al. [12] employ a novel com-
+                                                                  bination of graph mining and graph matching to discover
+                                                                  the collaboration patterns in SourceForge. Begel et al. [3]
+                                                                  present a framework of social network for connecting devel-
+                        (b) Hub-pattern                           opers and their work artifacts together. By analyzing the
+                                                                  social network, software engineers can keep track on activ-
+       Figure 7: The typical patterns in the interlaced part      ities of colleagues and developing status of work artifacts.
+   To depict the hub-pattern clearly, Figure 7(b) show a typ-     Vasilescu et al. [15] analyze the interplay between Stack-
+ical example of the hub-pattern with eight labeled nodes.         overﬂow activities and the commit behaviors in Github, and
+Each node represents a developer of GitHub. The eight de-         they ﬁnd that the developers’ activities in the two platforms
+velopers develop their projects in two diﬀerent communities.      are positively associated.
+There is a core developer in the corresponding community,            Diﬀerent from above researches, our work focus on the
+                                                                  follow-network and analyze the social behavior patterns of
+7
+    https://github.com/KbishopSTC                                 crowd developers using sociological theory, which is a brand
+new perspective.                                                        Mining Software Repositories, MSR ’13, pages
+                                                                        233–236, Piscataway, NJ, USA, 2013. IEEE Press.
+8.    CONCLUSION AND FUTURE WORK                                  [7]   G. Gousios, M. Pinzger, and A. v. Deursen. An
+   Social coding paradigm exert a tremendous impact on the              exploratory study of the pull-based software
+software engineering activities. In the current, hosting more           development model. In Proceedings of the 36th
+than 5 million software repositories and attracting over 2              International Conference on Software Engineering,
+million users, GitHub is one of the most signiﬁcant open                ICSE 2014, pages 345–355, 2014.
+source software communities which is fundamentally chang-         [8]   G. Gousios and D. Spinellis. Ghtorrent: Github’s data
+ing the traditional paradigms of distributed software devel-            from a ﬁrehose. In Mining Software Repositories
+opment.                                                                 (MSR), 2012 9th IEEE Working Conference on, pages
+   In this paper, we analyze the growth curves of Github                12–21, June 2012.
+compared with the curves of traditional OSS communities,          [9]   E. M. Rogers. Diﬀusion of innovations. Simon and
+we answer the research question that why does GitHub grow               Schuster, 2010.
+in a explosive way. We draw an important conclusion that         [10]   L. Singer and K. Schneider. Inﬂuencing the adoption
+the Eﬀect of leader and Herd Behavior are the intrinsic so-             of software engineering methods using social software.
+ciological basis of this phenomenon. Furthermore, by min-               In ICSE, pages 1325–1328, 2012.
+ing the follow-network of the developers who get GitHub          [11]   M.-A. Storey, C. Treude, A. van Deursen, and L.-T.
+account during the rapid growth period, we illustrate four              Cheng. The impact of social media on software
+typical social behavior patterns.                                       engineering practices and tools. In Proceedings of the
+   In the future, we plan to study more social behavior pat-            FSE/SDP workshop on Future of software engineering
+terns about fork-network, pull request-network and watch-               research, FoSER ’10, pages 359–364, New York, NY,
+network of GitHub. Based on these social behavior patterns,             USA, 2010. ACM.
+we can develop some novel collaboration tools integrated         [12]   D. Surian, D. Lo, and E.-P. Lim. Mining collaboration
+with the social mechanisms. For example, we can design                  patterns from a large developer network. In Reverse
+a recommender system which can push the most relevant                   Engineering (WCRE), 2010 17th Working Conference
+projects to users. In addition, we also plan to combine social          on, pages 269–273. IEEE, 2010.
+behavior patterns with our previous work [16, 17] of social      [13]   F. Thung, T. F. Bissyande, D. Lo, and L. Jiang.
+software feature mining. According to the social features,              Network structure of social coding in github. In
+we can choose the corresponding collaboration patterns to               Proceedings of the 2013 17th European Conference on
+design prototype system.                                                Software Maintenance and Reengineering, CSMR ’13,
+                                                                        pages 323–326, Washington, DC, USA, 2013. IEEE
+9. ACKNOWLEDGEMENT                                                      Computer Society.
+   This research is supported by the National High Technol-      [14]   J. Tsay, L. Dabbish, and J. Herbsleb. Inﬂuence of
+ogy Research and Development Program of China (Grant                    social and technical factors for evaluating contribution
+No. 2012AA011201)and the Postgraduate Innovation Fund                   in github. In Proceedings of the 36th International
+of University of Defense Technology (Grant No.B130607).                 Conference on Software Engineering, ICSE ’14, pages
+                                                                        356–366, 2014.
+10.   REFERENCES                                                 [15]   B. Vasilescu, V. Filkov, and A. Serebrenik.
+ [1] M. Bastian, S. Heymann, and M. Jacomy. Gephi: an                   Stackoverﬂow and github: Associations between
+     open source software for exploring and manipulating                software development and crowdsourced knowledge. In
+     networks. In ICWSM, 2009.                                          Proceedings of the 2013 International Conference on
+ [2] A. Begel, J. Bosch, and M.-A. Storey. Social                       Social Computing, SOCIALCOM ’13, pages 188–195,
+     networking meets software development: Perspectives                2013.
+     from github, msdn, stack exchange, and topcoder.            [16]   Y. Yu, H. Wang, G. Yin, X. Li, and C. Yang. Hesa:
+     IEEE Software, 30(1):52–66, 2013.                                  The construction and evaluation of hierarchical
+ [3] A. Begel, Y. P. Khoo, and T. Zimmermann.                           software feature repository. In SEKE, pages 624–631,
+     Codebook: Discovering and exploiting relationships in              2013.
+     software repositories. In Proceedings of the 32Nd           [17]   Y. Yu, H. Wang, G. Yin, and B. Liu. Mining and
+     ACM/IEEE International Conference on Software                      recommending software features across multiple web
+     Engineering - Volume 1, ICSE ’10, pages 125–134,                   repositories. In Proceedings of the 5th Asia-Paciﬁc
+     2010.                                                              Symposium on Internetware, Internetware ’13, pages
+ [4] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and                  9:1–9:9, 2013.
+     E. Lefebvre. Fast unfolding of communities in large
+     networks. Journal of Statistical Mechanics: Theory
+     and Experiment, 2008(10):P10008, 2008.
+ [5] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb. Social
+     coding in github: transparency and collaboration in an
+     open software repository. In Proceedings of the ACM
+     2012 conference on Computer Supported Cooperative
+     Work, CSCW ’12, pages 1277–1286, 2012.
+ [6] G. Gousios. The ghtorent dataset and tool suite. In
+     Proceedings of the 10th Working Conference on
+
\ No newline at end of file
diff --git a/res/paper/pr-assignment-demo-final.pdf b/res/paper/pr-assignment-demo-final.pdf
new file mode 100644
index 0000000..0626b15
--- /dev/null
+++ b/res/paper/pr-assignment-demo-final.pdf
@@ -0,0 +1,299 @@
+Reviewer Recommender of Pull-Requests in GitHub
+                                                             Yue Yu∗ , Huaimin Wang∗ , Gang Yin∗ , Charles X. Ling†
+                                                             ∗ National
+                                                 Laboratory for Parallel and Distributed Processing,
+                         College of Computer, National University of Defense Technology, Changsha, 410073, China
+                 † Department of Computer Science, The University of Western Ontario, London, Ontario, Canada N6A 5B7
+
+                                       {yuyue,hmwang,yingang}@nudt.edu.cn, cling@csd.uwo.ca
+
+
+   Abstract—Pull-Request (PR) is the primary method for code                                               traditional review process is transformed into a crowdsourcing
+contributions from thousands of developers in GitHub. To main-                                             job. Not only core developers but also external developers in
+tain the quality of software projects, PR review is an essential                                           the community can act as reviewers. The reviewers can freely
+part of distributed software development. Assigning new PRs
+to appropriate reviewers will make the review process more                                                 discuss the PR with the contributor and core developers in
+effective which can reduce the time between the submission of a                                            terms of their interests and expertise. Next, in the light of
+PR and the actual review of it. However, reviewer assignment                                               reviewers’ suggestions, the contributor would update his pull-
+is now organized manually in GitHub. To reduce this cost,                                                  request by attaching new commits, and then reviewers discuss
+we propose a reviewer recommender to predict highly relevant                                               that PR again. Finally, the responsible mangers of the core
+reviewers of incoming PRs. Combining information retrieval with
+social network analyzing, our approach takes full advantage                                                team take all the opinions of reviewers into consideration, and
+of the textual semantic of PRs and the social relations of                                                 then merges or rejects that PR. Thus, we can see PR review
+developers. We implement an online system to show how the                                                  is an important way to maintain the quality of the software.
+reviewer recommender helps project managers to ﬁnd potential                                                  Assigning incoming PRs to appropriate reviewers will make
+reviewers from crowds. Our approach can reach a precision of
+74% for top-1 recommendation, and a recall of 71% for top-10
+                                                                                                           PR review more effective, because it can reduce the time
+recommendation. http://rrp.trustie.net/                                                                    between the submission of a PR and the actual review of
+   Keywords—Pull-request, Reviewer Recommendation, Social                                                  it. We refer to the period between the time when a PR is
+Network Analysis, Distributed Software Development                                                         submitted into issue tracker and the time when it begins to
+                                                                                                           be discussed by reviewers as review latency. The PRs which
+                                      I. I NTRODUCTION                                                     have been assigned to reviewers have lower review latency
+                  1
+   GitHub , a popular social coding community [1], attracts a                                              than those without assignment. According to our analysis,
+large number of software projects hosted on it. Pull-Request                                               the time of the recommended reviewer submitting his ﬁrst
+(PR) is the primary method [2], [3] for code contributions                                                 comment on PR is on average 40.8 hours shorter than those
+from thousands of developers. Currently, it is not uncommon                                                without recommendation. However, reviewer assignment is
+in the popular projects to receive tens of PRs daily covering                                              now organized manually in GitHub. As each developer in
+nearly 60% of code commits from contributors.                                                              community has the chance to join the review discussions, the
+                                Issue Tracker                                                              project managers may not completely ﬁnd out all potential
+      Pull
+    Request
+                                                                        Core Team                          reviewers from crowds.
+                  Submits                                     Discuss
+                  Discuss                Discuss
+                                                                                                              To reduce this cost, we designed a reviewer recommender
+                               PR
+                                    PR
+                                              PR
+                                                   PR
+                                                                                                           to predict appropriate reviewers for incoming PRs in Github.
+                                         PR             PR
+              Update
+                                                                                                           The two key intuitions of our approach focus on the textual
+                                                                                      Merge    Project
+                                                                                                           semantic of PRs and the social relations of contributors.
+                                                                         Judge
+                                                                                              Repository
+   Contributor               Review Comments                                                                 •   The expertise of a reviewer can be learned from his
+                                                                             Reject
+                              Pull
+                            Request
+                                                                                                                 PR-commenting history. For a newly received PR, the
+      Clone                                                              Closed
+                                                                                                                 developers who have commented similar PR frequently
+    Repository
+                                                                                                                 in the past are the suitable candidates to review the new
+                                                                                                                 one.
+                   Figure 1. The overview of pull-request mechanism
+                                                                                                             •   The common interests among developers can be measured
+   The overview of PR mechanism is presented as Figure 1.                                                        by social relations between contributors and reviewers in
+Firstly, a contributor implements some new features or ﬁxes                                                      historical PRs. The developers who share more common
+bugs based on his personal repository cloned from the latest                                                     interests with the contributor are the appropriate review-
+version of project repository. When his work is ﬁnished, the                                                     ers of his incoming PRs.
+patches are packaged as a PR submitted to the issue tracker.
+The system open a new issue for this PR, and then add                                                         Thus, we propose a novel approach combining information
+the issue to an awaiting list to be reviewed. In GitHub, the                                               retrieval with social network analyzing to recommend highly
+                                                                                                           relevant reviewers. We demonstrated the efﬁciency of our
+  1 https://github.com/                                                                                    approach on 10 popular projects which have received over
+1000 PRs in GitHub. On average, our reviewer recommender                 integrated with the social media of peer-to-peer notiﬁcation,
+can reach a precision of 74% on the top-1 recommendation                 such as the @mention tool in GitHub that adds the @ tags
+and a recall of 71% on top-10 recommendation.                            to the potential reviewers automatically. Actually, we also
+                                                                         can provide an independent service for each OSS community,
+          II. E XITING T OOLS AND R ELATED WORK                          when the enough data has been shared and collected.
+A. Exiting Tools and Motivation
+                                                                         B. Related Work
+   Notiﬁcations in Github are based on the repositories you
+are watching. Each project watcher will mechanically receive                We review the similar researches of reviewer recommenda-
+notiﬁcations of all newly received PRs. In this way, the PRs             tion in bug triaging and code (patch) review in this section.
+which the developer really cares about would be drowned out                 The most representative researches are based on machine
+by a massive amount of noise.                                            learning and information retrieval techniques to triage incom-
+   To triage PRs, the project managers can use a label to assign         ing bug reports. For example, Anvik et al. [4] apply a machine
+a new PR to one of core developer. The assignee is in charge of          learning algorithm to learn the kinds of reports each developer
+the review process. However, only 0.89% of PRs have been set             resolves and recommend developers for a new bug report.
+that label in our dataset. Besides, the @mention tool is widely          Kagdi and Poshyvanyk [5], [6] extract the comments and
+used in the discussion of PR review. If a @ symbol placed in             identiﬁers from the source code and index these data by Latent
+front of a user’s ID, the corresponding developer will receive           Semantic Indexing (LSI). For a new bug report, such indexes
+a special notiﬁcation that he has been mentioned in the PR               can be useful to identify the most appropriate developers to
+and his ID would be highlighted.                                         resolve it. To support code review, Balachandran [7] designs
+                                                                         a tool called Review Bot to predict the developers who
+                                                                         have modiﬁed related code sections frequently as appropriate
+                                                                         reviewers. Compared to the Review Bot, Thongtanunam et al.
+                                                                         [8] recommends code reviewers from developers who have
+                                                                         examined ﬁles with similar directory paths.
+                                                                            All these approaches focus on mining the related text, such
+                                                                         as bug descriptions and code ﬁles, but the social relations
+                                                                         among developers are ignored. However, the process of PR
+                                                                         review is more likely to rely on the discussions among review-
+                                                                         ers to be resolved. These discussions occurred over artifacts
+                                                                         may imply reviewers common interests in social activities and
+                                                                         division of work in projects. Thus, we consider the relations
+                                                                         reﬂected by the artifact-mediated communication is a key
+                                                                         factor of recommendation. Begel et al. [9] present a framework
+                                                                         for connecting developers and their work artifacts together. In
+                                                                         this paper, we propose a novel and lightweight approach that
+                                                                         combines information retrieval with social network analyzing
+                                                                         to recommend appropriate reviewers for new PRs.
+
+                                                                                             III. M ETHODOLOGY
+                                                                            Firstly, the titles and descriptions of PRs are extracted and
+                                                                         indexed using the Vector Space Model. Then, we measure
+  Figure 2. An example of discussion among reviewers in a pull-request
+                                                                         semantic similarity between the new PR and each one of
+   Taking a real PR of Ruby on Rails as an example, as shown             historical PRs, and predict the expertise score of a developer
+in Figure 2, no one is assigned to this PR. A core developer             according to the number of comments he has submitted.
+called rafaelfranca is the ﬁrst reviewer to comment the PR. As           Furthermore, we construct a comment network for each project
+he considers that javan’s work would be relevant, he mentions            separately by analyzing the comment relations among devel-
+(@) javan to join the discussion. At the second post, we                 opers. In a speciﬁc project, we can predict the common interest
+can see that javan indeed presents his opinion. Apart from               of each reviewer shared with the PR contributor based on the
+javan who is informed by rafaelfranca, other three reviewers             comment network. Finally, we synthesize the expertise scores
+comment that PR spontaneously. Because all the comments                  and the common interests to rank all candidates.
+affect the decision-making of that PR, if they do not catch it
+timely, it is possible that some vital opinions would be lost.           A. Vector Space Model of Pull-Request
+   Thus, if appropriate reviewers are automatically recom-                  Each PR is characterized by its title and description, and
+mended when a new pull-request is submitted, the review                  labeled with a set of names about developers who had sub-
+process would be more efﬁcient. It is worth mentioning that the          mitted at least one comment to it. Then, all stop words and
+novel application of reviewer recommender can be seamlessly              non-alphabetic tokens are removed, and remaining words are
+stemmed. We use the vector space model to represent each PR                where timestamp(ij,r,n) is the date that reviewer vj presented
+as a weighted vector. Each element in the vector is a term, and            the comment n in the PR r which is reported by contributor vi .
+the value stands for its importance for the PR. Term frequency-            The baseline and deadline are highly related to the selection
+inverse document frequency (tf-idf) is utilized to indicate the            of training set. If we use the data from 2012-01-01 to 2013-05-
+value of a term, which can be calculated as Equation 1.                    31 to learn the weights, the parameters baseline and deadline
+                             nt                 NPR                        are set to 2011-12-31 and 2013-05-31 respectively.
+ tf idf (t, pr , PR ) = log(      +1)×log                     (1)
+                             Np r         |pr ∈ PR : t ∈ pr |                                                         v3                   v4
+where t is a term, pr is a pull-request, PR is the corpus of all
+pull-requests in a given project, nt is the count of appearance
+                                                                                                                        =?
+
+
+
+
+                                                                                                          95
+for term t in pr , and Npr and NPR are the total number of                                                          w 41
+
+
+
+
+                                                                                                       0.
+                                                                                                                                        w42=?
+
+
+
+
+                                                                                                      =
+terms in pr and pull-requests in corpus respectively.
+
+
+
+
+                                                                                                   13
+                                                                                                w
+B. Semantic Similarity and Expertise Score                                                                 w12=2.19
+   For a newly recieved PR, we ﬁrstly retrieve top-k relevant                                 v1                                 v2
+PRs from our corpus. We use cosine similarity to measure                                                       v2 commented v1's PR_1 on 2012-12-03
+the semantic similarity between a new PR and each of the re-                                                   v2 commented v1's PR_1 on 2013-01-12
+                                                                                                               v2 commented v1's PR_2 on 2013-05-07
+solved PRs. We consider that the more frequency the reviewer                             Project:
+                                                                                                               v3 commented v1's PR_2 on 2013-05-06
+                                                                                       Ruby on Rails
+has commented relevant PRs, the more knowledgeable that                                                              v1 commented v4's PR……
+                                                                                                                     v2 commented v4's PR……
+reviewer is in handling the new PR. Therefore, the expertise                                                         v4 commented v1's PR……
+score of a reviewer can be predicted based on the number of                            Figure 4. An example of the comment network
+comments which they has published in the top-k relevant PRs                   Figure 4 shows an example of a part of comment network
+(i.e., cosine similarity score times the number of comments).              about Ruby on Rails. Two different PRs (PR_1 and PR_2)
+C. Comment Network and Common Interest                                     reported by v1 have been commented by v2 and v3 , so there
+                                                                           are two edges from v1 to v2 and v1 to v3 . Evaluating the
+   We consider that common interests among developers are
+                                                                           relation between v1 and v2 , k of Equation 2 equals 2, because
+project-speciﬁc, so we build a comment network for each
+                                                                           v2 reviewed both two pull-requests. For PR_1, v2 commented
+project separately. In a given project, the structure of comment
+                                                                           it twice, so we set m = 2. The ﬁrst time-sensitive factor of
+relations is a many-to-many model. There are many contribu-
+                                                                           the date 2013-12-03 can be computed by Equation 3 that
+tors have submitted PRs to a project, and a contributor can be
+                                                                           t(12,1,1) ≈ 0.654. In addition, at the date of 2013-01-12
+a reviewer to comment other contributors’ PRs. A PR would
+                                                                           (t12,1,2 ≈ 0.731), another review published by v2 in PR_1
+be commented by several reviewers more than once.
+                                                                           should be controlled by λ (set to 0.8) due to the diminishing
+   The comment network is deﬁned as a weighted directed                    impact of one user in the same PR, so w(12,1) can be calculated
+graph Gcn = V, E, W , where the set of developers is                       as: Pc × (t(12,1,1) + λ2−1 × t(12,1,2) ) ≈ 1.24. Similarly, the
+indicated as vertices V and the set of relations between nodes             weight w12 = w(12,1) + w(12,2) = 2.19, and w13 = 0.95.
+as edges E. If node vj has reviewed at least one of vi ’s PRs,             Thus, we can predict that reviewer v2 share more common
+there is a edge eij from vi to vj . The set of weights W reﬂects           interests with contributor v1 compared with v3 , which has been
+the importance degree of edges, and the weight wij of eij can              quantiﬁed by the corresponding weights of edges.
+be evaluated by Equation 2.                                                   The comment network has several desirable qualities.
+                   k                     k   m
+                                                                              • The global collaboration structure is revealed between
+       wij =           w(ij,r) = Pc ×             λn−1 × t(ij,r,n)   (2)
+                                                                                 contributors and reviewers in a given project.
+               r=1                      r=1 n=1
+                                                                              • The time-sensitive factor t is introduced to guarantee that
+where k is the total number of PR submitted by vi , and w(ij,r)                  the recent comments are more valuable for the weights
+is a component weight related to an individual PR r. Pc is                       of edges than the old comments.
+an empirical default value2 (set to 1.0), which is reserved to                • The decay factor λ is introduced to guarantee the differ-
+estimate the inﬂuence of each comment on the PR, and m                           ence values between the comments submitted to multiple
+is the sum of comments submitted by vj in the same PR r.                         PRs or single PR. For example, if reviewer vj commented
+When reviewer vj published multiple comments (m = 1) in                          5 different PRs of vi and meanwhile vq commented one
+the same PR, his inﬂuence is controlled by a decay factor λ                      of vi ’s PRs 5 times, the weight of wij is larger than wiq .
+(set to 0.8). The element t(ij,r,n) is a time-sensitive factor of
+corresponding comment which can be calculated as below:                    D. Reviewer Recommendation
+
+                     timestamp(ij,r,n) − baseline                             When a contributor submits a new PR, we use the PR text to
+       t(ij,r,n)   =                              ∈ (0, 1]           (3)   calculate expertise scores of candidates. Then, their common
+                        deadline − baseline                                interests can be calculated by starting from the contributor in
+  2 User comments can be found in pull-requests, issue posts and commit    the comment network. In this paper, we regard that the factor
+ﬁles. Here, we just use the comments of pull-request.                      of common interest is as important as the factor of expertise
+                            (a) Homepage of a project                                             (b) Summary of a PR                          (c) Recommendation Result
+                                                                         Figure 3. The online system of reviewer recommender
+
+in each project. Thus, we standardize the factors, and then                                                   top-10 recommendation. It means we can successfully hit
+add them together to recommend top-k reviewers to the new                                                     a majority of reviewer. Especially, high precision of top-1
+PR. In future, we plan to deeply analyze the inﬂuence of each                                                 recommendation is signiﬁcant. As the example of Figure 2,
+factor exerted on different projects.                                                                         if the ﬁrst reviewer can be predicted, he would remind other
+                                                                                                              reviewers to joint the discussion with @mentioning.
+    IV. R EVIEWER R ECOMMENDER AND E XPERIMENT
+   We implement an online system of reviewer recommender                                                                    V. C ONCLUSION AND F UTURE W ORK
+with B/S architecture. It consists of two parts: a backend server                                                For a new PR, recommending reviewers will make the
+that processes data and a web interface that interacts with the                                               review process more effective. In this paper, we propose a
+user. In practice, our application would be the most effectively                                              novel approach that combine information retrieval with social
+used as a plug-in for social coding communities.                                                              network analyzing. In the future, we plan to explore how to use
+   On the backend, the server can continuously collect and                                                    other types of social networks, such as the watcher network,
+analyze new PRs from GitHub. When a project receives a new                                                    to improve the performance of our method.
+PR, it will be listed in its homepage (Figure 3 (a)). We extract
+                                                                                                                                   VI. ACKNOWLEDGEMENT
+the key information of a PR such as the ID, description and
+submitter, as shown in Figure 3 (b). Project managers can pick                                                  This research is supported by the National High Technology
+an new PR from the awaiting list or submit a query for speciﬁc                                                Research and Development Program of China (Grant No.
+PR by typing in the issue ID. The number of recommendation                                                    2012AA011201).
+can be set as required. Then, in Figure 3 (c), the predicted                                                                                R EFERENCES
+result will be shown together with the measures. We evaluate
+                                                                                                              [1] A. Begel, J. Bosch, and M.-A. Storey, “Social networking meets soft-
+the performances of our approaches using precision and recall                                                     ware development: Perspectives from github, msdn, stack exchange, and
+which are widely used as standard metrics in previous work.                                                       topcoder,” IEEE Software, vol. 30, no. 1, pp. 52–66, 2013.
+In that case, top-5 reviewers have been recommended, and 4                                                    [2] J. Tsay, L. Dabbish, and J. Herbsleb, “Inﬂuence of social and technical
+                                                                                                                  factors for evaluating contribution in github,” in Proceedings of the 36th
+of them have actually commented that PR in reality. Hence,                                                        International Conference on Software Engineering, ser. ICSE ’14, 2014,
+the precision is 80% and the recall is 100%.                                                                      pp. 356–366.
+                      0.8                                                                                     [3] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of
+                                                                                                                  the pull-based software development model,” in Proceedings of the 36th
+                      0.7                                                                                         International Conference on Software Engineering, ser. ICSE ’14. New
+                                                                                                                  York, NY, USA: ACM, 2014, pp. 345–355.
+                      0.6                                                                                     [4] J. Anvik, L. Hiew, and G. C. Murphy, “Who should ﬁx this bug?” in Pro-
+                                                                                                                  ceedings of the 28th International Conference on Software Engineering,
+                      0.5
+         Percentage
+
+
+
+
+                                                                                                                  ser. ICSE ’06. New York, NY, USA: ACM, 2006, pp. 361–370.
+                                                                                                              [5] H. Kagdi and D. Poshyvanyk, “Who can help me with this change
+                      0.4
+                                                                                                                  request?” in Program Comprehension, 2009. ICPC ’09. IEEE 17th
+                      0.3
+                                                                                                                  International Conference on, May 2009, pp. 273–277.
+                                                                                                              [6] M. Linares-Vasquez, K. Hossen, H. Dang, H. Kagdi, M. Gethers, and
+                      0.2                                                                                         D. Poshyvanyk, “Triaging incoming change requests: Bug or commit
+                                                                                 Precision                        history, or code authorship?” in Software Maintenance, 28th IEEE In-
+                                                                                 Recall
+                      0.1                                                                                         ternational Conference on, Sept 2012, pp. 451–460.
+                         1       2    3      4        5     6        7       8     9         10
+                                       The Number of Recommendation Reviewers                                 [7] V. Balachandran, “Reducing human effort and improving quality in peer
+                                                                                                                  code reviews using automatic static analysis and reviewer recommenda-
+        Figure 5. Precision vs. Recall of reviewer recommender                                                    tion,” in Proceedings of the 2013 International Conference on Software
+   In this paper, we demonstrate the performances of our                                                          Engineering, ser. ICSE ’13, 2013, pp. 931–940.
+approach on 10 popular projects which have received over                                                      [8] P. Thongtanunam, R. G. Kula, A. E. C. Cruz, N. Yoshida, and H. Iida,
+                                                                                                                  “Improving code review effectiveness through reviewer recommenda-
+1000 pull-requests. We use the data from 2012-01-01 to                                                            tions,” in Proceedings of the 7th International Workshop on Cooperative
+2013-05-31 as the training set and the data from 2013-06-                                                         and Human Aspects of Software Engineering, ser. CHASE ’14, 2014, pp.
+01 to 2013-10-01 as the test set. Figure 5 clearly exhibits the                                                   119–122.
+                                                                                                              [9] A. Begel, Y. P. Khoo, and T. Zimmermann, “Codebook: Discovering and
+overall performance of our approach. On average, the precision                                                    exploiting relationships in software repositories,” in Proceedings of the
+reaches the highest point of 0.74 for top-1 recommendation                                                        32Nd ACM/IEEE International Conference on Software Engineering -
+and the recall considerably ascends to 0.71 at the point of                                                       Volume 1, ser. ICSE ’10, 2010, pp. 125–134.
+
\ No newline at end of file
diff --git a/res/paper/trustcom2013_EI.pdf b/res/paper/trustcom2013_EI.pdf
new file mode 100644
index 0000000..dcc3e3a
--- /dev/null
+++ b/res/paper/trustcom2013_EI.pdf
@@ -0,0 +1,402 @@
+          2013 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications
+
+
+
+
+           A Trusted Remote Attestation Model based on
+                       Trusted Computing
+
+                                            Yue Yu, Huaimin Wang, Bo Liu, Gang Yin
+                                     National Laboratory for Parallel and Distributed Processing
+                                            National University of Defense Technology
+                                                         Changsha, China
+                                yuyue_whu@foxmail.com, whm_w@163.com, jack_nudt@gmail.com
+
+
+ Abstract—Traditional security protocols can not be trusted in               channel to an end-point of unknown integrity is ultimately
+ some application scenarios of high security level because the               futile. In the words of Gene Spafford [1], “using encryption on
+ endpoints integrity is ignored. In this paper, we propose a novel           the Internet is the equivalent of arranging an armored car to
+ trusted remote attestation model which combines the secure                  deliver credit card information from someone living in a
+ channel and the integrity measurement architecture of trusted               cardboard box to someone living on a park bench.”
+ computing. We design and implement a prototype system based
+ on a mature security protocol, Transport Layer Security (TLS)                   People have realized that in the face of existing security
+ protocol, integrated with integrity report provided by trusted              risks and threats, we not only need a top-down security system
+ platform module (TPM). The TLS protocol guarantees the                      design, but also need to bottom up ensure the credibility of
+ security of data exchange process and the integrity report of               computing systems from the terminal. Thus the technology of
+ TPM provides the evidence about the trustworthiness and the                 trusted computing (TC) developed rapidly and has also become
+ security state of the communication endpoints. Compared by                  a hotspot in academia [2][3]. Reporting integrity information to
+ traditional approaches, our method is more efficient and can be             a remote platform is one of the main goals of TC as proposed
+ deployed in large scale systems easily.                                     by the TCG. There is one security chip named Trusted Platform
+                                                                             Module (TPM) integrated into mother board of computing
+     Keywords—remote attestation; secure channel; integrity report;
+                                                                             platform [6]. Before every component taking control of main
+ trusted computing
+                                                                             CPU, such as BIOS, MBR, OS Kernel, Application and so on,
+                        I.    INTRODUCTION                                   its characteristic code and configure data must be measured,
+                                                                             and the measured value is stored into TPM Platform
+     Modern era, people are more dependent on the Internet than              Configuration Registers (PCR). When the computing platform
+ before, and have increasing demand for service provided by the              wants to access some resources in remote entity, remote entity
+ Internet. Some confidential information requires transmitting in            can ask the computing platform to give a security status report.
+ secure channel. The traditional security network protocols,                 Report data includes computing platform’s TPM-based identity
+ such as Security Socket Layer (SSL) protocol and Transport                  information and PCR value. Remote entity evaluates the report
+ Layer Security (TLS) protocol, just set up a secure channel in              data and makes decision to allow computing platform to access
+ which attackers cannot steal or distort transmitting data[4][5].            the resource or not, which is illustrated in Figure 1.
+     However, this kind of secure channel is not integrity
+ because of the exclusion of the endpoints secure state. As a
+ result, if the endpoint is invaded by malicious software, it is
+ possible to appear such embarrassing situation that after
+ terminal identity authentication passing through, establishing
+ connection and secure transmission, data is stolen by malicious
+ codes on the terminal. Take the once wide spread virus,
+ Win32.Huhk.d.7607 called “E-band hiding robber”, as an
+ example. The virus can infect the main program of IE browser
+ in the system, IEXPLORER.EXE, after into the system through
+ web Trojan. In this way, when the user using IE browser log in
+ the E-bank and trade, the virus can automatically intercept a lot
+ of related information, including the user’s payment card                             Figure 1. Trusted Computing Platform integrity report
+ number, password, payee name and other sensitive information.                  This mechanism has some serious limitations. It has many
+ The virus invades user terminal, thus bypassing the secure                  shortcomings such as inconvenient software upgrading, not
+ communication channel established by both sides, which bring                adapting to dynamic changes of the system configuration, easy
+ the great danger to E-bank users. Therefore, using a secure                 to bind to a special products, and easy to leak platform
+
+978-0-7695-5022-0/13 $26.00 © 2013 IEEE                               1504
+DOI 10.1109/TrustCom.2013.183
+configuration [7]. Moreover, network security protocols which              relevant mending or upgrade. TNC is a method to realize the
+support the TCG remote report are less and combine is not                  network access control and that to implement initiative
+close enough.                                                              protection which can restrain most of the potential attack
+                                                                           before their outburst.
+    The main contribution of this paper is to illustrate how to
+combine the security channel with integrity measurement                       However, there are three relatively pivotal problems of the
+architecture of trusted computing. A trusted remote attestation            remote attestation under current TNC architecture which this
+model is proposed and the implementation is given in detail                paper focuses on:
+including: (1) TPM integrity report mechanism and related
+functions; (2) The steps to obtain Platform Identity Key (PIK)                 1) One-way trustworthiness evaluation. Before the terminal
+of TPM; (3) How to make the integrity policy and                           accessing network, besides providing its own trusted evidence
+configuration of platform; (4) The approach of TLS Handshake               of platform, it should also assess the network, otherwise it can
+Protocol extensions.                                                       not guarantee credibility of the service acquired from network.
+
+    The article structure is as follow: Section II analysis some               2) Relatively independent of current security system. To
+related work; Section III introduces the overall structure and             realize the access control, TNC devised a set of independent
+basic framework of the model proposed in this paper; Section               mechanism. As shown in Figure 2, the TNC framework is
+IV presents specific implementation of each component of the               divided into three entities, three levels and several interface
+model. We summarize this paper and make the future research                components. The realization of every part is relatively complex
+plan in Section V.                                                         and lacks the support of secure protocol. For example there
+                                                                           require a mass of information exchange between TNCC and
+                      II.   RELATE WORK                                    TNCS or TNCC and IMC, however the TNC framework itself
+                                                                           has not provided relevant secure protocols.
+A. Research of TNC
+                                                                               3) Lacking the good combination with the secure channel.
+    With the development of Internet, trusted computing should
+                                                                           Although TNC framework considers the process that platform
+not only guarantee the trustworthiness of terminal computing
+                                                                           reports its integrality to remote entity, it does not combine with
+environment, but also extend to network, making it become a
+                                                                           existing secure channel to guarantee confidentiality or
+trusted computing environment [8]. In May 2004, TCG
+                                                                           integrality of platform and etc.
+founded the Trusted Network Connection Sub Group [9]
+(TNC-SG) which mainly takes charge of the research and                     B. Research of TPM-based Remote Attestation
+setting of Trusted Network Connection (TNC) framework as                       There are many different previous works in the area of
+well as some relevant Standards. Construction of trusted                   remote attestation or access control based on TPM or TC. In
+network is extremely tough owing to the complexity of                      [12], a Property-Based Attestation (PBA) mechanism is
+network itself, so TCG firstly takes the relatively elementary             proposed, which extends the architecture of TC remote report
+problem into account. TNC is the expansion of TPM as well as               model and includes the property values of the remote side in an
+the combination between mechanism of trusted computing and                 attestation. A Trusted Third Party (TTP) translates the actual
+that of network access control. The TNC architecture [10][11]              system configuration into a set of properties and issues
+with trusted computing platform is shown in Figure 2.                      certificates for those properties. During the attestation process a
+                                                                           remote challenger can decide whether or not the platform
+                                                                           security properties meet the requirements of the respective use
+                                                                           case. Similarly, Semantic Remote Attestation (SRA) [13] uses
+                                                                           language-based techniques to attest high level properties of an
+                                                                           application. The proposal is based on the Java Virtual Machine
+                                                                           (JVM) environment which is attested by binary attestation itself.
+                                                                           Paper [14] presents a Peer-to-Peer access control architecture
+                                                                           using TC technology. A trusted reference monitor (TRM) is
+                                                                           introduced beyond the trusted hardware. This architecture can
+                                                                           enforce an object owner’s policy in a client platform by
+                                                                           attesting the authenticity of the platform and the integrity and
+                                                                           possible properties of the requesting application.
+                                                                               Another kind of related works [15] aims at linking end-
+                                                                           point configuration information to secure channels. It combines
+                  Figure 2. TNC architecture with TPM                      the TLS and IPSec protocols with the platform integrity
+                                                                           measurement and reporting features of TCG Trusted
+    Its main idea is as follow. The identity of users is verified          Computing functionalities. However, none of the solutions so
+before terminal accessing network. If the information of users             far addresses the problem fully [19]. Some are specified in
+identify gets through, the identify of terminal platform should            insufficient detail, e.g., [16] do not explain how they exactly
+be verified. Then, TNC will measure the terminal platform                  establish the linkage to TLS. Others have deficiencies
+trusted states and if the result of measurement meet the secure            regarding security or trust assumptions that we do not achieve.
+policies, it allows terminal to access network, otherwise it will          e.g., [17] aims to prevent “relay attacks” or “MitM attacks”, but
+connect the terminal to appointed isolation area and make                  as shown in [18], these attacks seem still possible. The
+
+
+
+                                                                    1505
+approach given by [18] overcomes most of the shortcomings                   introduced in the part A of Section IV. Part B will detail the
+identified in related work, but it required costly acquisitions of          process of PIK and the way how to make the platform integrity
+specific cryptographic hardware and some features of the                    authentication policy will be referred to in part C. Part D will
+protocol do not conform to the TLS specification [5], e.g.,                 show the way that how ISP builds integrity channel with ISR
+sending attestation data within the key exchange messages, or               and it will also details the way to extend the TLS protocol.
+including integrity data in session key computation. Changing
+central message formats or computations of the TLS protocol                                     IV.   IMPLEMENTATION
+would result in that the TLS specification must be redefined                A. Integrity Report Mechanism of TPM
+and backward the compatibility of TLS. The solution in [19]
+conform the TLS specification better than other works and                       There is a group of PCRs (Platform Configuration Register)
+elaborate the trusted channel in detail.                                    in the TPM [6]. One PCR is only relevant with one type of
+                                                                            system special event of computing platform. The integrity
+        III.   TRUSTED REMOTE ATTESTATION MODEL                             value of a trusted computing platform component is stored in
+                                                                            PCR. The length of PCR is related to the Hash algorithm used
+   Carrying out the trusted remote attestation model which the
+                                                                            by trusted computing platform. Its length is as long as the
+paper refers to is also based on the PKI, and the model is
+                                                                            length of the calculation of Hash. It needs to compute the
+shown as Figure 3. This model consists of three parts: Privacy
+                                                                            integrity value of the component again, when the integrity of
+Certificate Authority (PCA) Server, Internet Service Requestor
+                                                                            this component changes. The computing expression is shown
+(ISR) and Internet Service Provider (ISP).
+                                                                            as follow:
+                                                                                      expresses as a new Hash value of nth PCR,
+                                                                            is the original value of nth PCR before measuring, and
+                                                                                        is the value of the component measured this time.
+                                                                            Obviously, the integrity value stored in PCR is able to reflect
+                                                                            the change of components integrity and not just reflect one
+                                                                            state of the component. If the measured value of several
+                                                                            components is stored in the same PCR, it needs to split the
+                                                                            integrity measured value of the component joint the value
+                                                                            stored in PCR, do the Hash computing and restore the result
+                                                                            got in the PCR one by one in the special sequence. When the
+                                                                            integrity measured value of the last component is stored, the
+           Figure 3. Remote attestation model based on TPM                  value in the PCR is the integrity measured value of this
+                                                                            component.
+   PCA Server is used to authorize the Platform Identity Key
+(PIK) to ISQ and ISS and authenticate the mutual identity. The                  Trusted Computing Platform records the information of
+content on the principle of PKI, the reason why we use the PIK,             measurement in the Stored Measurement Log (SML). From the
+and the way how to apply the PIK will be details in the next                start of platform powering up, the trusted chain
+Section. In the Figure 3, the application and authentication of                                                         is recorded.
+PCA Server are both two-way. ISR and ISP use the mutual
+authentication, and they are both related to certificate request                In the process of remote attestation, the integrity report
+and certificate validation. The Figure only shows the single                provided by platform is the SML and its corresponding PCR
+authentication for convenience.                                             value. It includes the static configuration of terminal, such as
+                                                                            system version, hardware condition. It also includes the
+    ISR with TPM guarantees the integrity in the hardware                   dynamic configuration of terminal, such as process condition,
+layer and provides the serve of integrity measurement and                   network flow information and so on. In that way, the two sides
+storage. By using Trusted Software Stack (TSS), ISR provides                of communication can use this integrity report to verify the
+the interface to call the relevant function of TPM. And then                static and dynamic integrity of each terminal.
+according to extended TLS protocol, build the integrity channel
+to provide the identification and the report of platform integrity          B. PIK certificate for remote attestation
+for ISP and testify the ISP platform identity and its platform                  One of the easiest ways to identify a TPM is to verify the
+integrity. The paper calls this layer as Software Service Layer.            serial number which is one-to-one relationship between a TPM.
+When the platform integrity authentication succeeds, ISR uses               However, the problems of user’s privacy should be considered.
+ISR Client Application to request Internet serve to ISP, such as            For example, if a TPM user always accesses some shopping
+FTP, HTTP and so on.                                                        website, his hobbies can be analyzed by his shopping history
+                                                                            records.
+    The process of ISP is similar to ISR, and the difference
+between them is that ISP provides the Internet source and                       PKI-based TCM key architecture has been give out in paper
+serves in the application layer by ISP Server Application.                  [20]. The manufacture generates an endorsement key (EK)
+                                                                            during manufacturing stage of TCM. EK is a pair of
+    Obviously, compared with the distributed network model                  asymmetric key which is stored in the non-volatile protected
+this model changes little in the network layer and has no                   storage area in the TCM. One TCM can own only one EK
+additional system component. It has a better usability and                  during its life cycle. In order to protect privacy of users, the
+compatibility. The integrity report mechanism of TPM will be
+
+
+
+                                                                     1506
+platform doesn’t directly use EK to sign for identity                             Finally,      ,                and           are sent to PCA
+authentication. Users have to request the TCM to generate a                   to apply PIK certificate.
+PIK for every special Web application, and apply for PIK
+certificate from PCA based on EK. The privacy of the                                4) PCA verifies data integrity by         and use the private
+corresponding relationship between EK and PIK is protected                    key            to decrypt                     to get              ,
+by PCA. A TCM and its host platform can have multiple PIKs.                                                             .
+Thus, users can use different PIK for identity authentication in                            can be decrypted as         the follow formula:
+different situations in order to achieve the purpose of the
+platform identity privacy protection.
+    In this paper, the handshake protocol of TLS needs to be
+                                                                                                             .
+expanded which PIK certificate should be used. The process of
+applying a traditional X509.v3 certificate must change to bind                    Furthermore, PCA verifies               ,               and
+with TPM. The generating of PIK, applying for, procedure of                          , then         will be verified by PCA using           .
+signature and activation PIK certificate are shown as Figure 4.               After these verifications, PCA signs PIK certificate, then
+                                                                              generates randomly a symmetric key       and use it to encrypt
+                                                                                      to get                                . At last, it use
+                                                                              the public key of EK to encrypt                  to get the
+                                                                                                         and compute hash value of
+                                                                              and            ,                                . PCA sends
+                                                                              the data of      ,          and        to TCP.
+                                                                                   5) TCP User verifies data integrity by    and sends a
+                                                                              command                    to TCM via TSM. TCM can use the
+                                                                              private key of EK to decrypt       ,                     ,
+                                                                              while only the valid TCP can get the correct    so we can
+                                                                              confirm the relationship of PIK and TCP User. TCM returns
+    Figure 4. Procedures of generating of PIK, applying for, signing and         .
+                        activating a PIK certificate
+                                                                                  (6) TCP User sends a request                           to TSM,
+    1) Trusted computing platform (TCP) User sends a                          TSM uses       , returned by TCM, to decrypt                   and
+command                   to Trusted Cryptography Module                      gets PIK certificate                                   .
+(TCM) via TCM Service Module (TSM). The TCM generate a
+PIK and encrypt the private key of PIK with SRK for                              From what has been discussed above, a TCP User can get a
+protection. Then the TCM use the private key of PIK to sign                   PIK certificate. In this paper, ISR and ISP can apply different
+the public key of private CA and the message digest value of                  kinds of PIKs certificates for various specific situations.
+the     public     key   of     PIK,    the   signature   is
+                                             . The TCM                        C. Platform Integrity Policy Specification
+return the public key       and       .                                           If ISR and ISP, in Figure 3, want to verify whether the
+                                                                              integrality of each other can accord with the their own
+   2) TCP User sends a request                                 to             requirement, firstly they need to define their own configuration
+TSM for getting EK certificate          and property certificates             requirement of integrity, that is platform integrity policy,
+            and             which are signed to TCM and its                   afterwards they ask for and verify relevant integrity reports
+host platform by evaluation institute and manufacturer.                       each other. Owing to the possibility that both sides of
+                                                                              communication may use inconsistent operating system, the
+    3) TCP User uses the TPM as source for random values to                   manifestation of integrity policy must consider the otherness
+generate a symmetric            , because the Random Number                   and compatibility of heterogeneous computing environment
+Generator (RNG) is considered as true random generator.                       which seems more important especially under the environment
+Meanwhile, User makes out his information              for a                  of distributed computation. The Figure 5 shows an example of
+traditional X509.v3 digital certificate request. Then,                        platform integrity policy based on XML.
+can be achieved by using symmetric encryption algorithm, e.g.
+3DES, and                 . The formula of                is:                     In Figure 5, subject and object match strictly and default
+                                                                              action ="deny" indicates under the state of default any request
+                                                                              will be refused except for the below regulation. Considering the
+                                                                              fact that remote attestation is bidirectional, subject may be ISR
+   TCP User uses asymmetric encryption algorithm to encrypt                   or ISP and the configuration and match method are surely
+                                                                              different in those two situations. So subject is identified by
+             by      the   public     key      of     PCA,
+                                                                              "ID", "role" is a changeable element which use to indicate web
+                                           .        is the
+                                                                              service requester or web service server. If the platform is
+message   digest    of                    and             ,                   Windows System, the first subject is IE. There are two integrity
+                                 .                                            rules about IE. The first one is version which must be above 6.0.
+                                                                              This rule can guarantee the stability for IE. Because generally
+
+
+
+                                                                           1507
+speaking, higher version software is accompanied by fewer                is that random number              of           created by TPM
+bugs and it can run more steadily. The second rule is the hash           Random number generator is to boycott replay attack. The
+value of IE. We can choose different hash algorithm according            Attestation Extension Demand                  of the client is
+to the different strength here. IE has different hash value for          contained in                              .              is used
+different version, a simple is shown in Figure 5 which is a hash         to transfer the configuration strategy of the client’s platform,
+value for IE6.0 in experiment computer computed by SHA-1.                and rule the integrity of the other platforms should have, the
+This rule ensures data integrity for IE. Because when malicious          structure has been stated in Section C.
+code infects IE, the hash value will change. The second object
+is a file which is in the folder “secret”. Its integrity rule is an          The expression of                                is as follow:
+action configuration which define that the access privilege of
+this file is read only.                                                      The second step, Internet Service Provider (ISP) Server
+                                                                         sends              to Internet Service Requestor (ISR) Client
+                                                                         and informs ISR Client the evidence of integrity needed to be
+                                                                         provided. At the same time, ISP Server starts to adjust the
+                                                                         configuration of the platform dynamically according to the
+                                                                                      received from ISR Client. In fact, the server should
+                                                                         have the capability to work for several clients, but requirements
+                                                                         of clients may cause conflicts. For example, Client_01 just
+                                                                         allow the server to open the Port 8080, however Client_02 may
+                                                                         want to get service from the server via the Port 3389. In this
+                                                                         case, the server virtualizes the resources and environment that
+                                                                         can meet the client requirements and provide the corresponding
+                                                                         services by taking advantage of virtualization technology.
+                                                                             The expression of                                is as follow:
+
+              Figure 5. Example for platform integrity policy
+                                                                             The third step, ISP Server sends its digital certificate (DC),
+    According to the description above, the representation of                                 and                      messages to ISR
+the integrity policy in this paper is flexible. Users can extend         Client, which is similar to the traditional TLS protocol.
+their own integrity policies according to different web                  However,                     message is necessary in this step
+applications and access control requirements.                            which is different from traditional TLS protocol. The digital
+D. Handshake Protocol extensions of TLS                                  certificate (DC) is the PIK certificate which is applied as the
+                                                                         step described in Section B. Then ISP Server sends platform
+    The fundamental method of remote attestation is to expend            integrity report                to ISR Client to prove that it
+trusted chain to network and one outstanding implementation              meets requirements. The structure of                           is:
+of the model is provided in paper [19]. The protocol of remote
+attestation in this paper is based on it. With the Handshake
+Protocol extensions of TLS, besides the execution of the                           and       are matched by the measurement of TPM
+traditional function, the terminal integrity verification is             for which the virtual environment serve. ISP Server uses the
+involved, as shown in the Figure 6.                                      private key of PIK to sign the Hash value of        and        .
+                                                                         After the transmission of                      to ISR Client,
+                                                                         message                  would be sent as the end signal of this
+                                                                         stage.
+                                                                             The forth step, which is similar to the traditional TLS
+                                                                         protocol. Here we mainly point the differences. ISR Client
+                                                                         firstly checks the validity of the PIK Certificate of ISP Server,
+                                                                         and then checks the authenticity and integrity of
+                                                                                          using the public key of PIK certificate to make
+                                                                         sure the data comes from ISP Server instead of being modified
+                                                                         by attacker. After that, check the validity of the congruent
+                                                                         relationship between          and       . At last, decide whether
+                                                                         the contents of        are accorded with integrity policy defined
+                                                                         by itself. If an error or authentication failure comes up during
+                                                                         the above steps, a fatal error messages would be returned to
+                                                                         opposite side and the connection will be cut off. After all the
+      Figure 6. The process of Handshake Protocol extensions of TLS      authentications get through, ISR Client sends its
+                                                                                          to ISP Server and then the message            as
+    The first step, the difference between the Hello message,            the end. The structure of                                  is
+the ISR Client sends to the ISP Server, and the traditional one
+
+
+
+
+                                                                      1508
+    After that, the identity authentication and the integrity                                          REFERENCES
+authentication of platform of ISR Client are similar to the forth      [1]    G. Spafford, Attributed to in Risks Digest 19.37 review of @LARGE, by
+step, and the protocol it used accords to the traditional TLS                 David H. Freedman and Charles C. Mann, Sept. 1997.
+protocol. Here will not give unnecessary details. Finally, there       [2]    Sheng C X, Zhang H G, Wang H M, et al, “Research and development
+is some need to point that the transportation of the integrity                of trusted computing,” Science China: Information Science, vol. 40, pp.
+reports are in plaintext, and what’s more, both sides have made               139-166, 2010. (In Chinese)
+autograph using their private key of PIK. When attackers               [3]    Shen C X, Zhang H G, Feng D G, et al. Survey of information security
+intercept and capture these messages, it is possible to dig out               [J]. Science China: Information Science, vol. 50, pp. 273–298, 2007.
+the private information of the platform. Such as which kind of         [4]    T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol
+                                                                              Version 1.1. IETF RFC 4346, Apr. 2006.
+web service ISR Client with           often requires and how is
+                                                                       [5]    S. B.-W. et al, Transport Layer Security (TLS) Extensions, IETF RFC
+the configuration of platform integrity and so on. To sum up,                 3546, June. 2003.
+the platform should ask for different PIK certificates according       [6]    Trusted Computing Group. TCG specification architecture overview,
+to different applications, and update the certificate in time to              specification             revision              1.4            [EB/OL],
+make sure the lifetime of each PIK certificate is reasonable.                 http://www.trustedcomputinggroup.org/files/resource_files/AC652DE1-
+                                                                              1D09-3519-
+         V.    CONCLUSION AND FUTURE WORK                                     ADA026A0C05CFAC2/TCG_1_4_Architecture_Overview.pdf, 2010-
+                                                                              06-12.
+    In this paper, a trusted remote attestation model has been         [7]    E Shi, A Perrig, L van Doorn. Bind, “A fine-grained attestation service
+proposed. The model combines the secure channel and the                       for secure distributed systems,” in Proc. the IEEE Symposium on
+integrity measurement architecture of trusted computing. The                  Security and Privacy, Oakland, CA, USA, 2005.
+secure channel guarantees the security of data exchange                [8]    Zhang H G, Chen L, Zhang L Q, “Research on Trusted Network
+process and the integrity report of Trusted Platform Module                   Connection,” Chinese Journal of Computers, vol. 33, pp. 706-717, Mar.
+provides the evidence about the trustworthiness of the                        2010. (In Chinese)
+communication endpoints. The implementation is described in            [9]    TNC           Web         Site.       [Online].                Available:
+detail including: (1) TPM integrity report mechanism and                      https://www.trustedcomputinggroup.org/network/
+related functions; (2) The steps to obtain PIK certificate of          [10]   TCG Specification Trusted Network Connect -TNC Architecture for
+                                                                              Interoperability Revision 1.1 [EB/OL], Trusted Computing Group, May.
+TPM; (3) How to make the integrity policy and configuration                   2006.
+of platform; (4) The approach of TLS Handshake Protocol                [11]   TCG Trusted Network Connect TNC Architecture for Interoperability
+extensions. The approach according with the trusted computing                 Specification      Version       1.4     [EB/OL],        May.      2009.
+technology conforms to the specification of TLS. Thus, the                    http://www.trustedcomputinggroup.org/resources/tcg_architecture_overv
+paper assumed that a TPM is only vulnerable to hardware                       iew_version_14.pdf.
+attacks.                                                               [12]   A. Sadeghi and C. Stuble, Property-based attestation for computing
+                                                                              platforms: Caring about properties, not mechanisms, in Proc. NSPW,
+    In a next step, we plan to give a formalization security                  2004.
+analysis of our method and test the experiment system by               [13]   V. Haldar, D. Chandra, and M. Franz, Semantic remote attestation - a
+prevalent malicious codes in the Internet. Then, we consider                  virtual machine directed approach to trusted computing, in Proc.
+adjusting the model to the requirements of distributed                        USENIX, 2004.
+computing and clouding computing. Moreover, with the                   [14]   Sandhu R, Xinwen Z, Peer-to-Peer Access Control Architecture Using
+                                                                              Trusted Computing Technology, in Proc. SACMAT’05, 2005.
+development of Trusted Computing technology, the model
+should be extended by runtime integrity measurement and                [15]   Goldman K, Perez R, Sailer R, Linking remote attestation to secure
+                                                                              tunnel endpoints, in Proc. STC ’06 Proceedings of the first ACM
+dynamic attestation agents. In addition, how to combine                       workshop on Scalable trusted computing, Nov. 2006.
+Trusted Computing technology and other security protocols,             [16]   Sadeghi A-R, Stuble C, Wolf M, et al. Enabling Fairer Digital Rights
+e.g. SSH and IPSec, is a challenge research work as well. Last                Management with Trusted Computing, in Proc. Information Security
+but not least, we plan to demonstrate the effectiveness of our                Conference, 2007.
+method with quantitative evaluation.                                   [17]   Stumpf F, Tafreschi O, Roder P, et al, A robust Integrity Reporting
+                                                                              Protocol for Remote Attestation, in Proc. WATC ’06, Dec. 2006.
+                     ACKNOWLEDGMENT                                    [18]   Gasmi Y, Sadeghi A-R, Stewin P, et al, Beyond Secure Channels, in
+                                                                              Proc. STC ’07, 2007.
+   This research is supported by the National High
+Technology Research and Development Program of China                   [19]   Armknecht F, Gasmi Y, Sadeghi A-R, et al, An Efficient
+                                                                              Implementation of Trusted Channels based on OpenSSL, in Proc.
+(Grant No. 2012AA011201) and the Postgraduate Innovation                      STC ’08, Oct. 2008.
+Fund of University of Defense Technology (Grant                        [20]   Fajiang Yu, Tong Li, Yang Lin, et al, Hierarchical-CPK-Based Trusted
+No.S120602). Many thanks to Xiang Li, Tao Wang, Tianzuo                       Computing Cryptography Scheme, in Proc. ATC 2011, LNCS 6906: 149-
+Wang, and Zhefeng Xiao for discussion and their suggestion                    163, 2011.
+and works on data collecting.
+
+
+
+
+                                                                    1509
+
\ No newline at end of file
